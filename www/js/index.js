(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// when used in node, this will actually load the util module we depend on
// versus loading the builtin util module as happens otherwise
// this is a bug in node module loading as far as I am concerned
var util = require('util/');

var pSlice = Array.prototype.slice;
var hasOwn = Object.prototype.hasOwnProperty;

// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  }
  else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = stackStartFunction.name;
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function replacer(key, value) {
  if (util.isUndefined(value)) {
    return '' + value;
  }
  if (util.isNumber(value) && (isNaN(value) || !isFinite(value))) {
    return value.toString();
  }
  if (util.isFunction(value) || util.isRegExp(value)) {
    return value.toString();
  }
  return value;
}

function truncate(s, n) {
  if (util.isString(s)) {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}

function getMessage(self) {
  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
         self.operator + ' ' +
         truncate(JSON.stringify(self.expected, replacer), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

function _deepEqual(actual, expected) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
    if (actual.length != expected.length) return false;

    for (var i = 0; i < actual.length; i++) {
      if (actual[i] !== expected[i]) return false;
    }

    return true;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!util.isObject(actual) && !util.isObject(expected)) {
    return actual == expected;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b) {
  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b);
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b),
        key, i;
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key])) return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  } else if (actual instanceof expected) {
    return true;
  } else if (expected.call({}, actual) === true) {
    return true;
  }

  return false;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (util.isString(expected)) {
    message = expected;
    expected = null;
  }

  try {
    block();
  } catch (e) {
    actual = e;
  }

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  if (!shouldThrow && expectedException(actual, expected)) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws.apply(this, [true].concat(pSlice.call(arguments)));
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/message) {
  _throws.apply(this, [false].concat(pSlice.call(arguments)));
};

assert.ifError = function(err) { if (err) {throw err;}};

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/assert/assert.js","/../node_modules/assert")
},{"buffer":11,"pBGvAp":74,"util/":99}],2:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// base-x encoding
// Forked from https://github.com/cryptocoinjs/bs58
// Originally written by Mike Hearn for BitcoinJ
// Copyright (c) 2011 Google Inc
// Ported to JavaScript by Stefan Thomas
// Merged Buffer refactorings from base58-native by Stephen Pair
// Copyright (c) 2013 BitPay Inc

module.exports = function base (ALPHABET) {
  var ALPHABET_MAP = {}
  var BASE = ALPHABET.length
  var LEADER = ALPHABET.charAt(0)

  // pre-compute lookup table
  for (var i = 0; i < ALPHABET.length; i++) {
    ALPHABET_MAP[ALPHABET.charAt(i)] = i
  }

  function encode (source) {
    if (source.length === 0) return ''

    var digits = [0]
    for (var i = 0; i < source.length; ++i) {
      for (var j = 0, carry = source[i]; j < digits.length; ++j) {
        carry += digits[j] << 8
        digits[j] = carry % BASE
        carry = (carry / BASE) | 0
      }

      while (carry > 0) {
        digits.push(carry % BASE)
        carry = (carry / BASE) | 0
      }
    }

    // deal with leading zeros
    for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) {
      digits.push(0)
    }

    // convert digits to a string
    for (var ii = 0, jj = digits.length - 1; ii <= jj; ++ii, --jj) {
      var tmp = ALPHABET[digits[ii]]
      digits[ii] = ALPHABET[digits[jj]]
      digits[jj] = tmp
    }

    return digits.join('')
  }

  function decode (string) {
    if (string.length === 0) return []

    var bytes = [0]
    for (var i = 0; i < string.length; i++) {
      var value = ALPHABET_MAP[string[i]]
      if (value === undefined) throw new Error('Non-base' + BASE + ' character')

      for (var j = 0, carry = value; j < bytes.length; ++j) {
        carry += bytes[j] * BASE
        bytes[j] = carry & 0xff
        carry >>= 8
      }

      while (carry > 0) {
        bytes.push(carry & 0xff)
        carry >>= 8
      }
    }

    // deal with leading zeros
    for (var k = 0; string[k] === LEADER && k < string.length - 1; ++k) {
      bytes.push(0)
    }

    return bytes.reverse()
  }

  return {
    encode: encode,
    decode: decode
  }
}

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/base-x/index.js","/../node_modules/base-x")
},{"buffer":11,"pBGvAp":74}],3:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)
	var PLUS_URL_SAFE = '-'.charCodeAt(0)
	var SLASH_URL_SAFE = '_'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS ||
		    code === PLUS_URL_SAFE)
			return 62 // '+'
		if (code === SLASH ||
		    code === SLASH_URL_SAFE)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/base64-js/lib/b64.js","/../node_modules/base64-js/lib")
},{"buffer":11,"pBGvAp":74}],4:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// (public) Constructor
function BigInteger(a, b, c) {
  if (!(this instanceof BigInteger))
    return new BigInteger(a, b, c)

  if (a != null) {
    if ("number" == typeof a) this.fromNumber(a, b, c)
    else if (b == null && "string" != typeof a) this.fromString(a, 256)
    else this.fromString(a, b)
  }
}

var proto = BigInteger.prototype

// duck-typed isBigInteger
proto.__bigi = require('../package.json').version
BigInteger.isBigInteger = function (obj, check_ver) {
  return obj && obj.__bigi && (!check_ver || obj.__bigi === proto.__bigi)
}

// Bits per digit
var dbits

// am: Compute w_j += (x*this_i), propagate carries,
// c is initial carry, returns final carry.
// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
// We need to select the fastest one that works in this environment.

// am1: use a single mult and divide to get the high bits,
// max digit bits should be 26 because
// max internal value = 2*dvalue^2-2*dvalue (< 2^53)
function am1(i, x, w, j, c, n) {
  while (--n >= 0) {
    var v = x * this[i++] + w[j] + c
    c = Math.floor(v / 0x4000000)
    w[j++] = v & 0x3ffffff
  }
  return c
}
// am2 avoids a big mult-and-extract completely.
// Max digit bits should be <= 30 because we do bitwise ops
// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
function am2(i, x, w, j, c, n) {
  var xl = x & 0x7fff,
    xh = x >> 15
  while (--n >= 0) {
    var l = this[i] & 0x7fff
    var h = this[i++] >> 15
    var m = xh * l + h * xl
    l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff)
    c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30)
    w[j++] = l & 0x3fffffff
  }
  return c
}
// Alternately, set max digit bits to 28 since some
// browsers slow down when dealing with 32-bit numbers.
function am3(i, x, w, j, c, n) {
  var xl = x & 0x3fff,
    xh = x >> 14
  while (--n >= 0) {
    var l = this[i] & 0x3fff
    var h = this[i++] >> 14
    var m = xh * l + h * xl
    l = xl * l + ((m & 0x3fff) << 14) + w[j] + c
    c = (l >> 28) + (m >> 14) + xh * h
    w[j++] = l & 0xfffffff
  }
  return c
}

// wtf?
BigInteger.prototype.am = am1
dbits = 26

BigInteger.prototype.DB = dbits
BigInteger.prototype.DM = ((1 << dbits) - 1)
var DV = BigInteger.prototype.DV = (1 << dbits)

var BI_FP = 52
BigInteger.prototype.FV = Math.pow(2, BI_FP)
BigInteger.prototype.F1 = BI_FP - dbits
BigInteger.prototype.F2 = 2 * dbits - BI_FP

// Digit conversions
var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz"
var BI_RC = new Array()
var rr, vv
rr = "0".charCodeAt(0)
for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv
rr = "a".charCodeAt(0)
for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv
rr = "A".charCodeAt(0)
for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv

function int2char(n) {
  return BI_RM.charAt(n)
}

function intAt(s, i) {
  var c = BI_RC[s.charCodeAt(i)]
  return (c == null) ? -1 : c
}

// (protected) copy this to r
function bnpCopyTo(r) {
  for (var i = this.t - 1; i >= 0; --i) r[i] = this[i]
  r.t = this.t
  r.s = this.s
}

// (protected) set from integer value x, -DV <= x < DV
function bnpFromInt(x) {
  this.t = 1
  this.s = (x < 0) ? -1 : 0
  if (x > 0) this[0] = x
  else if (x < -1) this[0] = x + DV
  else this.t = 0
}

// return bigint initialized to value
function nbv(i) {
  var r = new BigInteger()
  r.fromInt(i)
  return r
}

// (protected) set from string and radix
function bnpFromString(s, b) {
  var self = this

  var k
  if (b == 16) k = 4
  else if (b == 8) k = 3
  else if (b == 256) k = 8; // byte array
  else if (b == 2) k = 1
  else if (b == 32) k = 5
  else if (b == 4) k = 2
  else {
    self.fromRadix(s, b)
    return
  }
  self.t = 0
  self.s = 0
  var i = s.length,
    mi = false,
    sh = 0
  while (--i >= 0) {
    var x = (k == 8) ? s[i] & 0xff : intAt(s, i)
    if (x < 0) {
      if (s.charAt(i) == "-") mi = true
      continue
    }
    mi = false
    if (sh == 0)
      self[self.t++] = x
    else if (sh + k > self.DB) {
      self[self.t - 1] |= (x & ((1 << (self.DB - sh)) - 1)) << sh
      self[self.t++] = (x >> (self.DB - sh))
    } else
      self[self.t - 1] |= x << sh
    sh += k
    if (sh >= self.DB) sh -= self.DB
  }
  if (k == 8 && (s[0] & 0x80) != 0) {
    self.s = -1
    if (sh > 0) self[self.t - 1] |= ((1 << (self.DB - sh)) - 1) << sh
  }
  self.clamp()
  if (mi) BigInteger.ZERO.subTo(self, self)
}

// (protected) clamp off excess high words
function bnpClamp() {
  var c = this.s & this.DM
  while (this.t > 0 && this[this.t - 1] == c)--this.t
}

// (public) return string representation in given radix
function bnToString(b) {
  var self = this
  if (self.s < 0) return "-" + self.negate()
    .toString(b)
  var k
  if (b == 16) k = 4
  else if (b == 8) k = 3
  else if (b == 2) k = 1
  else if (b == 32) k = 5
  else if (b == 4) k = 2
  else return self.toRadix(b)
  var km = (1 << k) - 1,
    d, m = false,
    r = "",
    i = self.t
  var p = self.DB - (i * self.DB) % k
  if (i-- > 0) {
    if (p < self.DB && (d = self[i] >> p) > 0) {
      m = true
      r = int2char(d)
    }
    while (i >= 0) {
      if (p < k) {
        d = (self[i] & ((1 << p) - 1)) << (k - p)
        d |= self[--i] >> (p += self.DB - k)
      } else {
        d = (self[i] >> (p -= k)) & km
        if (p <= 0) {
          p += self.DB
          --i
        }
      }
      if (d > 0) m = true
      if (m) r += int2char(d)
    }
  }
  return m ? r : "0"
}

// (public) -this
function bnNegate() {
  var r = new BigInteger()
  BigInteger.ZERO.subTo(this, r)
  return r
}

// (public) |this|
function bnAbs() {
  return (this.s < 0) ? this.negate() : this
}

// (public) return + if this > a, - if this < a, 0 if equal
function bnCompareTo(a) {
  var r = this.s - a.s
  if (r != 0) return r
  var i = this.t
  r = i - a.t
  if (r != 0) return (this.s < 0) ? -r : r
  while (--i >= 0)
    if ((r = this[i] - a[i]) != 0) return r
  return 0
}

// returns bit length of the integer x
function nbits(x) {
  var r = 1,
    t
  if ((t = x >>> 16) != 0) {
    x = t
    r += 16
  }
  if ((t = x >> 8) != 0) {
    x = t
    r += 8
  }
  if ((t = x >> 4) != 0) {
    x = t
    r += 4
  }
  if ((t = x >> 2) != 0) {
    x = t
    r += 2
  }
  if ((t = x >> 1) != 0) {
    x = t
    r += 1
  }
  return r
}

// (public) return the number of bits in "this"
function bnBitLength() {
  if (this.t <= 0) return 0
  return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM))
}

// (public) return the number of bytes in "this"
function bnByteLength() {
  return this.bitLength() >> 3
}

// (protected) r = this << n*DB
function bnpDLShiftTo(n, r) {
  var i
  for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i]
  for (i = n - 1; i >= 0; --i) r[i] = 0
  r.t = this.t + n
  r.s = this.s
}

// (protected) r = this >> n*DB
function bnpDRShiftTo(n, r) {
  for (var i = n; i < this.t; ++i) r[i - n] = this[i]
  r.t = Math.max(this.t - n, 0)
  r.s = this.s
}

// (protected) r = this << n
function bnpLShiftTo(n, r) {
  var self = this
  var bs = n % self.DB
  var cbs = self.DB - bs
  var bm = (1 << cbs) - 1
  var ds = Math.floor(n / self.DB),
    c = (self.s << bs) & self.DM,
    i
  for (i = self.t - 1; i >= 0; --i) {
    r[i + ds + 1] = (self[i] >> cbs) | c
    c = (self[i] & bm) << bs
  }
  for (i = ds - 1; i >= 0; --i) r[i] = 0
  r[ds] = c
  r.t = self.t + ds + 1
  r.s = self.s
  r.clamp()
}

// (protected) r = this >> n
function bnpRShiftTo(n, r) {
  var self = this
  r.s = self.s
  var ds = Math.floor(n / self.DB)
  if (ds >= self.t) {
    r.t = 0
    return
  }
  var bs = n % self.DB
  var cbs = self.DB - bs
  var bm = (1 << bs) - 1
  r[0] = self[ds] >> bs
  for (var i = ds + 1; i < self.t; ++i) {
    r[i - ds - 1] |= (self[i] & bm) << cbs
    r[i - ds] = self[i] >> bs
  }
  if (bs > 0) r[self.t - ds - 1] |= (self.s & bm) << cbs
  r.t = self.t - ds
  r.clamp()
}

// (protected) r = this - a
function bnpSubTo(a, r) {
  var self = this
  var i = 0,
    c = 0,
    m = Math.min(a.t, self.t)
  while (i < m) {
    c += self[i] - a[i]
    r[i++] = c & self.DM
    c >>= self.DB
  }
  if (a.t < self.t) {
    c -= a.s
    while (i < self.t) {
      c += self[i]
      r[i++] = c & self.DM
      c >>= self.DB
    }
    c += self.s
  } else {
    c += self.s
    while (i < a.t) {
      c -= a[i]
      r[i++] = c & self.DM
      c >>= self.DB
    }
    c -= a.s
  }
  r.s = (c < 0) ? -1 : 0
  if (c < -1) r[i++] = self.DV + c
  else if (c > 0) r[i++] = c
  r.t = i
  r.clamp()
}

// (protected) r = this * a, r != this,a (HAC 14.12)
// "this" should be the larger one if appropriate.
function bnpMultiplyTo(a, r) {
  var x = this.abs(),
    y = a.abs()
  var i = x.t
  r.t = i + y.t
  while (--i >= 0) r[i] = 0
  for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t)
  r.s = 0
  r.clamp()
  if (this.s != a.s) BigInteger.ZERO.subTo(r, r)
}

// (protected) r = this^2, r != this (HAC 14.16)
function bnpSquareTo(r) {
  var x = this.abs()
  var i = r.t = 2 * x.t
  while (--i >= 0) r[i] = 0
  for (i = 0; i < x.t - 1; ++i) {
    var c = x.am(i, x[i], r, 2 * i, 0, 1)
    if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
      r[i + x.t] -= x.DV
      r[i + x.t + 1] = 1
    }
  }
  if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1)
  r.s = 0
  r.clamp()
}

// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
// r != q, this != m.  q or r may be null.
function bnpDivRemTo(m, q, r) {
  var self = this
  var pm = m.abs()
  if (pm.t <= 0) return
  var pt = self.abs()
  if (pt.t < pm.t) {
    if (q != null) q.fromInt(0)
    if (r != null) self.copyTo(r)
    return
  }
  if (r == null) r = new BigInteger()
  var y = new BigInteger(),
    ts = self.s,
    ms = m.s
  var nsh = self.DB - nbits(pm[pm.t - 1]); // normalize modulus
  if (nsh > 0) {
    pm.lShiftTo(nsh, y)
    pt.lShiftTo(nsh, r)
  } else {
    pm.copyTo(y)
    pt.copyTo(r)
  }
  var ys = y.t
  var y0 = y[ys - 1]
  if (y0 == 0) return
  var yt = y0 * (1 << self.F1) + ((ys > 1) ? y[ys - 2] >> self.F2 : 0)
  var d1 = self.FV / yt,
    d2 = (1 << self.F1) / yt,
    e = 1 << self.F2
  var i = r.t,
    j = i - ys,
    t = (q == null) ? new BigInteger() : q
  y.dlShiftTo(j, t)
  if (r.compareTo(t) >= 0) {
    r[r.t++] = 1
    r.subTo(t, r)
  }
  BigInteger.ONE.dlShiftTo(ys, t)
  t.subTo(y, y); // "negative" y so we can replace sub with am later
  while (y.t < ys) y[y.t++] = 0
  while (--j >= 0) {
    // Estimate quotient digit
    var qd = (r[--i] == y0) ? self.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2)
    if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) { // Try it out
      y.dlShiftTo(j, t)
      r.subTo(t, r)
      while (r[i] < --qd) r.subTo(t, r)
    }
  }
  if (q != null) {
    r.drShiftTo(ys, q)
    if (ts != ms) BigInteger.ZERO.subTo(q, q)
  }
  r.t = ys
  r.clamp()
  if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder
  if (ts < 0) BigInteger.ZERO.subTo(r, r)
}

// (public) this mod a
function bnMod(a) {
  var r = new BigInteger()
  this.abs()
    .divRemTo(a, null, r)
  if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r)
  return r
}

// Modular reduction using "classic" algorithm
function Classic(m) {
  this.m = m
}

function cConvert(x) {
  if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m)
  else return x
}

function cRevert(x) {
  return x
}

function cReduce(x) {
  x.divRemTo(this.m, null, x)
}

function cMulTo(x, y, r) {
  x.multiplyTo(y, r)
  this.reduce(r)
}

function cSqrTo(x, r) {
  x.squareTo(r)
  this.reduce(r)
}

Classic.prototype.convert = cConvert
Classic.prototype.revert = cRevert
Classic.prototype.reduce = cReduce
Classic.prototype.mulTo = cMulTo
Classic.prototype.sqrTo = cSqrTo

// (protected) return "-1/this % 2^DB"; useful for Mont. reduction
// justification:
//         xy == 1 (mod m)
//         xy =  1+km
//   xy(2-xy) = (1+km)(1-km)
// x[y(2-xy)] = 1-k^2m^2
// x[y(2-xy)] == 1 (mod m^2)
// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
// JS multiply "overflows" differently from C/C++, so care is needed here.
function bnpInvDigit() {
  if (this.t < 1) return 0
  var x = this[0]
  if ((x & 1) == 0) return 0
  var y = x & 3; // y == 1/x mod 2^2
  y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4
  y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8
  y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16
  // last step - calculate inverse mod DV directly
  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
  y = (y * (2 - x * y % this.DV)) % this.DV; // y == 1/x mod 2^dbits
  // we really want the negative inverse, and -DV < y < DV
  return (y > 0) ? this.DV - y : -y
}

// Montgomery reduction
function Montgomery(m) {
  this.m = m
  this.mp = m.invDigit()
  this.mpl = this.mp & 0x7fff
  this.mph = this.mp >> 15
  this.um = (1 << (m.DB - 15)) - 1
  this.mt2 = 2 * m.t
}

// xR mod m
function montConvert(x) {
  var r = new BigInteger()
  x.abs()
    .dlShiftTo(this.m.t, r)
  r.divRemTo(this.m, null, r)
  if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r)
  return r
}

// x/R mod m
function montRevert(x) {
  var r = new BigInteger()
  x.copyTo(r)
  this.reduce(r)
  return r
}

// x = x/R mod m (HAC 14.32)
function montReduce(x) {
  while (x.t <= this.mt2) // pad x so am has enough room later
    x[x.t++] = 0
  for (var i = 0; i < this.m.t; ++i) {
    // faster way of calculating u0 = x[i]*mp mod DV
    var j = x[i] & 0x7fff
    var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM
    // use am to combine the multiply-shift-add into one call
    j = i + this.m.t
    x[j] += this.m.am(0, u0, x, i, 0, this.m.t)
    // propagate carry
    while (x[j] >= x.DV) {
      x[j] -= x.DV
      x[++j]++
    }
  }
  x.clamp()
  x.drShiftTo(this.m.t, x)
  if (x.compareTo(this.m) >= 0) x.subTo(this.m, x)
}

// r = "x^2/R mod m"; x != r
function montSqrTo(x, r) {
  x.squareTo(r)
  this.reduce(r)
}

// r = "xy/R mod m"; x,y != r
function montMulTo(x, y, r) {
  x.multiplyTo(y, r)
  this.reduce(r)
}

Montgomery.prototype.convert = montConvert
Montgomery.prototype.revert = montRevert
Montgomery.prototype.reduce = montReduce
Montgomery.prototype.mulTo = montMulTo
Montgomery.prototype.sqrTo = montSqrTo

// (protected) true iff this is even
function bnpIsEven() {
  return ((this.t > 0) ? (this[0] & 1) : this.s) == 0
}

// (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
function bnpExp(e, z) {
  if (e > 0xffffffff || e < 1) return BigInteger.ONE
  var r = new BigInteger(),
    r2 = new BigInteger(),
    g = z.convert(this),
    i = nbits(e) - 1
  g.copyTo(r)
  while (--i >= 0) {
    z.sqrTo(r, r2)
    if ((e & (1 << i)) > 0) z.mulTo(r2, g, r)
    else {
      var t = r
      r = r2
      r2 = t
    }
  }
  return z.revert(r)
}

// (public) this^e % m, 0 <= e < 2^32
function bnModPowInt(e, m) {
  var z
  if (e < 256 || m.isEven()) z = new Classic(m)
  else z = new Montgomery(m)
  return this.exp(e, z)
}

// protected
proto.copyTo = bnpCopyTo
proto.fromInt = bnpFromInt
proto.fromString = bnpFromString
proto.clamp = bnpClamp
proto.dlShiftTo = bnpDLShiftTo
proto.drShiftTo = bnpDRShiftTo
proto.lShiftTo = bnpLShiftTo
proto.rShiftTo = bnpRShiftTo
proto.subTo = bnpSubTo
proto.multiplyTo = bnpMultiplyTo
proto.squareTo = bnpSquareTo
proto.divRemTo = bnpDivRemTo
proto.invDigit = bnpInvDigit
proto.isEven = bnpIsEven
proto.exp = bnpExp

// public
proto.toString = bnToString
proto.negate = bnNegate
proto.abs = bnAbs
proto.compareTo = bnCompareTo
proto.bitLength = bnBitLength
proto.byteLength = bnByteLength
proto.mod = bnMod
proto.modPowInt = bnModPowInt

// (public)
function bnClone() {
  var r = new BigInteger()
  this.copyTo(r)
  return r
}

// (public) return value as integer
function bnIntValue() {
  if (this.s < 0) {
    if (this.t == 1) return this[0] - this.DV
    else if (this.t == 0) return -1
  } else if (this.t == 1) return this[0]
  else if (this.t == 0) return 0
  // assumes 16 < DB < 32
  return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0]
}

// (public) return value as byte
function bnByteValue() {
  return (this.t == 0) ? this.s : (this[0] << 24) >> 24
}

// (public) return value as short (assumes DB>=16)
function bnShortValue() {
  return (this.t == 0) ? this.s : (this[0] << 16) >> 16
}

// (protected) return x s.t. r^x < DV
function bnpChunkSize(r) {
  return Math.floor(Math.LN2 * this.DB / Math.log(r))
}

// (public) 0 if this == 0, 1 if this > 0
function bnSigNum() {
  if (this.s < 0) return -1
  else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0
  else return 1
}

// (protected) convert to radix string
function bnpToRadix(b) {
  if (b == null) b = 10
  if (this.signum() == 0 || b < 2 || b > 36) return "0"
  var cs = this.chunkSize(b)
  var a = Math.pow(b, cs)
  var d = nbv(a),
    y = new BigInteger(),
    z = new BigInteger(),
    r = ""
  this.divRemTo(d, y, z)
  while (y.signum() > 0) {
    r = (a + z.intValue())
      .toString(b)
      .substr(1) + r
    y.divRemTo(d, y, z)
  }
  return z.intValue()
    .toString(b) + r
}

// (protected) convert from radix string
function bnpFromRadix(s, b) {
  var self = this
  self.fromInt(0)
  if (b == null) b = 10
  var cs = self.chunkSize(b)
  var d = Math.pow(b, cs),
    mi = false,
    j = 0,
    w = 0
  for (var i = 0; i < s.length; ++i) {
    var x = intAt(s, i)
    if (x < 0) {
      if (s.charAt(i) == "-" && self.signum() == 0) mi = true
      continue
    }
    w = b * w + x
    if (++j >= cs) {
      self.dMultiply(d)
      self.dAddOffset(w, 0)
      j = 0
      w = 0
    }
  }
  if (j > 0) {
    self.dMultiply(Math.pow(b, j))
    self.dAddOffset(w, 0)
  }
  if (mi) BigInteger.ZERO.subTo(self, self)
}

// (protected) alternate constructor
function bnpFromNumber(a, b, c) {
  var self = this
  if ("number" == typeof b) {
    // new BigInteger(int,int,RNG)
    if (a < 2) self.fromInt(1)
    else {
      self.fromNumber(a, c)
      if (!self.testBit(a - 1)) // force MSB set
        self.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, self)
      if (self.isEven()) self.dAddOffset(1, 0); // force odd
      while (!self.isProbablePrime(b)) {
        self.dAddOffset(2, 0)
        if (self.bitLength() > a) self.subTo(BigInteger.ONE.shiftLeft(a - 1), self)
      }
    }
  } else {
    // new BigInteger(int,RNG)
    var x = new Array(),
      t = a & 7
    x.length = (a >> 3) + 1
    b.nextBytes(x)
    if (t > 0) x[0] &= ((1 << t) - 1)
    else x[0] = 0
    self.fromString(x, 256)
  }
}

// (public) convert to bigendian byte array
function bnToByteArray() {
  var self = this
  var i = self.t,
    r = new Array()
  r[0] = self.s
  var p = self.DB - (i * self.DB) % 8,
    d, k = 0
  if (i-- > 0) {
    if (p < self.DB && (d = self[i] >> p) != (self.s & self.DM) >> p)
      r[k++] = d | (self.s << (self.DB - p))
    while (i >= 0) {
      if (p < 8) {
        d = (self[i] & ((1 << p) - 1)) << (8 - p)
        d |= self[--i] >> (p += self.DB - 8)
      } else {
        d = (self[i] >> (p -= 8)) & 0xff
        if (p <= 0) {
          p += self.DB
          --i
        }
      }
      if ((d & 0x80) != 0) d |= -256
      if (k === 0 && (self.s & 0x80) != (d & 0x80))++k
      if (k > 0 || d != self.s) r[k++] = d
    }
  }
  return r
}

function bnEquals(a) {
  return (this.compareTo(a) == 0)
}

function bnMin(a) {
  return (this.compareTo(a) < 0) ? this : a
}

function bnMax(a) {
  return (this.compareTo(a) > 0) ? this : a
}

// (protected) r = this op a (bitwise)
function bnpBitwiseTo(a, op, r) {
  var self = this
  var i, f, m = Math.min(a.t, self.t)
  for (i = 0; i < m; ++i) r[i] = op(self[i], a[i])
  if (a.t < self.t) {
    f = a.s & self.DM
    for (i = m; i < self.t; ++i) r[i] = op(self[i], f)
    r.t = self.t
  } else {
    f = self.s & self.DM
    for (i = m; i < a.t; ++i) r[i] = op(f, a[i])
    r.t = a.t
  }
  r.s = op(self.s, a.s)
  r.clamp()
}

// (public) this & a
function op_and(x, y) {
  return x & y
}

function bnAnd(a) {
  var r = new BigInteger()
  this.bitwiseTo(a, op_and, r)
  return r
}

// (public) this | a
function op_or(x, y) {
  return x | y
}

function bnOr(a) {
  var r = new BigInteger()
  this.bitwiseTo(a, op_or, r)
  return r
}

// (public) this ^ a
function op_xor(x, y) {
  return x ^ y
}

function bnXor(a) {
  var r = new BigInteger()
  this.bitwiseTo(a, op_xor, r)
  return r
}

// (public) this & ~a
function op_andnot(x, y) {
  return x & ~y
}

function bnAndNot(a) {
  var r = new BigInteger()
  this.bitwiseTo(a, op_andnot, r)
  return r
}

// (public) ~this
function bnNot() {
  var r = new BigInteger()
  for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i]
  r.t = this.t
  r.s = ~this.s
  return r
}

// (public) this << n
function bnShiftLeft(n) {
  var r = new BigInteger()
  if (n < 0) this.rShiftTo(-n, r)
  else this.lShiftTo(n, r)
  return r
}

// (public) this >> n
function bnShiftRight(n) {
  var r = new BigInteger()
  if (n < 0) this.lShiftTo(-n, r)
  else this.rShiftTo(n, r)
  return r
}

// return index of lowest 1-bit in x, x < 2^31
function lbit(x) {
  if (x == 0) return -1
  var r = 0
  if ((x & 0xffff) == 0) {
    x >>= 16
    r += 16
  }
  if ((x & 0xff) == 0) {
    x >>= 8
    r += 8
  }
  if ((x & 0xf) == 0) {
    x >>= 4
    r += 4
  }
  if ((x & 3) == 0) {
    x >>= 2
    r += 2
  }
  if ((x & 1) == 0)++r
  return r
}

// (public) returns index of lowest 1-bit (or -1 if none)
function bnGetLowestSetBit() {
  for (var i = 0; i < this.t; ++i)
    if (this[i] != 0) return i * this.DB + lbit(this[i])
  if (this.s < 0) return this.t * this.DB
  return -1
}

// return number of 1 bits in x
function cbit(x) {
  var r = 0
  while (x != 0) {
    x &= x - 1
    ++r
  }
  return r
}

// (public) return number of set bits
function bnBitCount() {
  var r = 0,
    x = this.s & this.DM
  for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x)
  return r
}

// (public) true iff nth bit is set
function bnTestBit(n) {
  var j = Math.floor(n / this.DB)
  if (j >= this.t) return (this.s != 0)
  return ((this[j] & (1 << (n % this.DB))) != 0)
}

// (protected) this op (1<<n)
function bnpChangeBit(n, op) {
  var r = BigInteger.ONE.shiftLeft(n)
  this.bitwiseTo(r, op, r)
  return r
}

// (public) this | (1<<n)
function bnSetBit(n) {
  return this.changeBit(n, op_or)
}

// (public) this & ~(1<<n)
function bnClearBit(n) {
  return this.changeBit(n, op_andnot)
}

// (public) this ^ (1<<n)
function bnFlipBit(n) {
  return this.changeBit(n, op_xor)
}

// (protected) r = this + a
function bnpAddTo(a, r) {
  var self = this

  var i = 0,
    c = 0,
    m = Math.min(a.t, self.t)
  while (i < m) {
    c += self[i] + a[i]
    r[i++] = c & self.DM
    c >>= self.DB
  }
  if (a.t < self.t) {
    c += a.s
    while (i < self.t) {
      c += self[i]
      r[i++] = c & self.DM
      c >>= self.DB
    }
    c += self.s
  } else {
    c += self.s
    while (i < a.t) {
      c += a[i]
      r[i++] = c & self.DM
      c >>= self.DB
    }
    c += a.s
  }
  r.s = (c < 0) ? -1 : 0
  if (c > 0) r[i++] = c
  else if (c < -1) r[i++] = self.DV + c
  r.t = i
  r.clamp()
}

// (public) this + a
function bnAdd(a) {
  var r = new BigInteger()
  this.addTo(a, r)
  return r
}

// (public) this - a
function bnSubtract(a) {
  var r = new BigInteger()
  this.subTo(a, r)
  return r
}

// (public) this * a
function bnMultiply(a) {
  var r = new BigInteger()
  this.multiplyTo(a, r)
  return r
}

// (public) this^2
function bnSquare() {
  var r = new BigInteger()
  this.squareTo(r)
  return r
}

// (public) this / a
function bnDivide(a) {
  var r = new BigInteger()
  this.divRemTo(a, r, null)
  return r
}

// (public) this % a
function bnRemainder(a) {
  var r = new BigInteger()
  this.divRemTo(a, null, r)
  return r
}

// (public) [this/a,this%a]
function bnDivideAndRemainder(a) {
  var q = new BigInteger(),
    r = new BigInteger()
  this.divRemTo(a, q, r)
  return new Array(q, r)
}

// (protected) this *= n, this >= 0, 1 < n < DV
function bnpDMultiply(n) {
  this[this.t] = this.am(0, n - 1, this, 0, 0, this.t)
  ++this.t
  this.clamp()
}

// (protected) this += n << w words, this >= 0
function bnpDAddOffset(n, w) {
  if (n == 0) return
  while (this.t <= w) this[this.t++] = 0
  this[w] += n
  while (this[w] >= this.DV) {
    this[w] -= this.DV
    if (++w >= this.t) this[this.t++] = 0
    ++this[w]
  }
}

// A "null" reducer
function NullExp() {}

function nNop(x) {
  return x
}

function nMulTo(x, y, r) {
  x.multiplyTo(y, r)
}

function nSqrTo(x, r) {
  x.squareTo(r)
}

NullExp.prototype.convert = nNop
NullExp.prototype.revert = nNop
NullExp.prototype.mulTo = nMulTo
NullExp.prototype.sqrTo = nSqrTo

// (public) this^e
function bnPow(e) {
  return this.exp(e, new NullExp())
}

// (protected) r = lower n words of "this * a", a.t <= n
// "this" should be the larger one if appropriate.
function bnpMultiplyLowerTo(a, n, r) {
  var i = Math.min(this.t + a.t, n)
  r.s = 0; // assumes a,this >= 0
  r.t = i
  while (i > 0) r[--i] = 0
  var j
  for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t)
  for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i)
  r.clamp()
}

// (protected) r = "this * a" without lower n words, n > 0
// "this" should be the larger one if appropriate.
function bnpMultiplyUpperTo(a, n, r) {
  --n
  var i = r.t = this.t + a.t - n
  r.s = 0; // assumes a,this >= 0
  while (--i >= 0) r[i] = 0
  for (i = Math.max(n - this.t, 0); i < a.t; ++i)
    r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n)
  r.clamp()
  r.drShiftTo(1, r)
}

// Barrett modular reduction
function Barrett(m) {
  // setup Barrett
  this.r2 = new BigInteger()
  this.q3 = new BigInteger()
  BigInteger.ONE.dlShiftTo(2 * m.t, this.r2)
  this.mu = this.r2.divide(m)
  this.m = m
}

function barrettConvert(x) {
  if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m)
  else if (x.compareTo(this.m) < 0) return x
  else {
    var r = new BigInteger()
    x.copyTo(r)
    this.reduce(r)
    return r
  }
}

function barrettRevert(x) {
  return x
}

// x = x mod m (HAC 14.42)
function barrettReduce(x) {
  var self = this
  x.drShiftTo(self.m.t - 1, self.r2)
  if (x.t > self.m.t + 1) {
    x.t = self.m.t + 1
    x.clamp()
  }
  self.mu.multiplyUpperTo(self.r2, self.m.t + 1, self.q3)
  self.m.multiplyLowerTo(self.q3, self.m.t + 1, self.r2)
  while (x.compareTo(self.r2) < 0) x.dAddOffset(1, self.m.t + 1)
  x.subTo(self.r2, x)
  while (x.compareTo(self.m) >= 0) x.subTo(self.m, x)
}

// r = x^2 mod m; x != r
function barrettSqrTo(x, r) {
  x.squareTo(r)
  this.reduce(r)
}

// r = x*y mod m; x,y != r
function barrettMulTo(x, y, r) {
  x.multiplyTo(y, r)
  this.reduce(r)
}

Barrett.prototype.convert = barrettConvert
Barrett.prototype.revert = barrettRevert
Barrett.prototype.reduce = barrettReduce
Barrett.prototype.mulTo = barrettMulTo
Barrett.prototype.sqrTo = barrettSqrTo

// (public) this^e % m (HAC 14.85)
function bnModPow(e, m) {
  var i = e.bitLength(),
    k, r = nbv(1),
    z
  if (i <= 0) return r
  else if (i < 18) k = 1
  else if (i < 48) k = 3
  else if (i < 144) k = 4
  else if (i < 768) k = 5
  else k = 6
  if (i < 8)
    z = new Classic(m)
  else if (m.isEven())
    z = new Barrett(m)
  else
    z = new Montgomery(m)

  // precomputation
  var g = new Array(),
    n = 3,
    k1 = k - 1,
    km = (1 << k) - 1
  g[1] = z.convert(this)
  if (k > 1) {
    var g2 = new BigInteger()
    z.sqrTo(g[1], g2)
    while (n <= km) {
      g[n] = new BigInteger()
      z.mulTo(g2, g[n - 2], g[n])
      n += 2
    }
  }

  var j = e.t - 1,
    w, is1 = true,
    r2 = new BigInteger(),
    t
  i = nbits(e[j]) - 1
  while (j >= 0) {
    if (i >= k1) w = (e[j] >> (i - k1)) & km
    else {
      w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i)
      if (j > 0) w |= e[j - 1] >> (this.DB + i - k1)
    }

    n = k
    while ((w & 1) == 0) {
      w >>= 1
      --n
    }
    if ((i -= n) < 0) {
      i += this.DB
      --j
    }
    if (is1) { // ret == 1, don't bother squaring or multiplying it
      g[w].copyTo(r)
      is1 = false
    } else {
      while (n > 1) {
        z.sqrTo(r, r2)
        z.sqrTo(r2, r)
        n -= 2
      }
      if (n > 0) z.sqrTo(r, r2)
      else {
        t = r
        r = r2
        r2 = t
      }
      z.mulTo(r2, g[w], r)
    }

    while (j >= 0 && (e[j] & (1 << i)) == 0) {
      z.sqrTo(r, r2)
      t = r
      r = r2
      r2 = t
      if (--i < 0) {
        i = this.DB - 1
        --j
      }
    }
  }
  return z.revert(r)
}

// (public) gcd(this,a) (HAC 14.54)
function bnGCD(a) {
  var x = (this.s < 0) ? this.negate() : this.clone()
  var y = (a.s < 0) ? a.negate() : a.clone()
  if (x.compareTo(y) < 0) {
    var t = x
    x = y
    y = t
  }
  var i = x.getLowestSetBit(),
    g = y.getLowestSetBit()
  if (g < 0) return x
  if (i < g) g = i
  if (g > 0) {
    x.rShiftTo(g, x)
    y.rShiftTo(g, y)
  }
  while (x.signum() > 0) {
    if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x)
    if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y)
    if (x.compareTo(y) >= 0) {
      x.subTo(y, x)
      x.rShiftTo(1, x)
    } else {
      y.subTo(x, y)
      y.rShiftTo(1, y)
    }
  }
  if (g > 0) y.lShiftTo(g, y)
  return y
}

// (protected) this % n, n < 2^26
function bnpModInt(n) {
  if (n <= 0) return 0
  var d = this.DV % n,
    r = (this.s < 0) ? n - 1 : 0
  if (this.t > 0)
    if (d == 0) r = this[0] % n
    else
      for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n
  return r
}

// (public) 1/this % m (HAC 14.61)
function bnModInverse(m) {
  var ac = m.isEven()
  if (this.signum() === 0) throw new Error('division by zero')
  if ((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO
  var u = m.clone(),
    v = this.clone()
  var a = nbv(1),
    b = nbv(0),
    c = nbv(0),
    d = nbv(1)
  while (u.signum() != 0) {
    while (u.isEven()) {
      u.rShiftTo(1, u)
      if (ac) {
        if (!a.isEven() || !b.isEven()) {
          a.addTo(this, a)
          b.subTo(m, b)
        }
        a.rShiftTo(1, a)
      } else if (!b.isEven()) b.subTo(m, b)
      b.rShiftTo(1, b)
    }
    while (v.isEven()) {
      v.rShiftTo(1, v)
      if (ac) {
        if (!c.isEven() || !d.isEven()) {
          c.addTo(this, c)
          d.subTo(m, d)
        }
        c.rShiftTo(1, c)
      } else if (!d.isEven()) d.subTo(m, d)
      d.rShiftTo(1, d)
    }
    if (u.compareTo(v) >= 0) {
      u.subTo(v, u)
      if (ac) a.subTo(c, a)
      b.subTo(d, b)
    } else {
      v.subTo(u, v)
      if (ac) c.subTo(a, c)
      d.subTo(b, d)
    }
  }
  if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO
  while (d.compareTo(m) >= 0) d.subTo(m, d)
  while (d.signum() < 0) d.addTo(m, d)
  return d
}

var lowprimes = [
  2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,
  73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,
  157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233,
  239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,
  331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,
  421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503,
  509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,
  613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,
  709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,
  821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,
  919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997
]

var lplim = (1 << 26) / lowprimes[lowprimes.length - 1]

// (public) test primality with certainty >= 1-.5^t
function bnIsProbablePrime(t) {
  var i, x = this.abs()
  if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {
    for (i = 0; i < lowprimes.length; ++i)
      if (x[0] == lowprimes[i]) return true
    return false
  }
  if (x.isEven()) return false
  i = 1
  while (i < lowprimes.length) {
    var m = lowprimes[i],
      j = i + 1
    while (j < lowprimes.length && m < lplim) m *= lowprimes[j++]
    m = x.modInt(m)
    while (i < j) if (m % lowprimes[i++] == 0) return false
  }
  return x.millerRabin(t)
}

// (protected) true if probably prime (HAC 4.24, Miller-Rabin)
function bnpMillerRabin(t) {
  var n1 = this.subtract(BigInteger.ONE)
  var k = n1.getLowestSetBit()
  if (k <= 0) return false
  var r = n1.shiftRight(k)
  t = (t + 1) >> 1
  if (t > lowprimes.length) t = lowprimes.length
  var a = new BigInteger(null)
  var j, bases = []
  for (var i = 0; i < t; ++i) {
    for (;;) {
      j = lowprimes[Math.floor(Math.random() * lowprimes.length)]
      if (bases.indexOf(j) == -1) break
    }
    bases.push(j)
    a.fromInt(j)
    var y = a.modPow(r, this)
    if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
      var j = 1
      while (j++ < k && y.compareTo(n1) != 0) {
        y = y.modPowInt(2, this)
        if (y.compareTo(BigInteger.ONE) == 0) return false
      }
      if (y.compareTo(n1) != 0) return false
    }
  }
  return true
}

// protected
proto.chunkSize = bnpChunkSize
proto.toRadix = bnpToRadix
proto.fromRadix = bnpFromRadix
proto.fromNumber = bnpFromNumber
proto.bitwiseTo = bnpBitwiseTo
proto.changeBit = bnpChangeBit
proto.addTo = bnpAddTo
proto.dMultiply = bnpDMultiply
proto.dAddOffset = bnpDAddOffset
proto.multiplyLowerTo = bnpMultiplyLowerTo
proto.multiplyUpperTo = bnpMultiplyUpperTo
proto.modInt = bnpModInt
proto.millerRabin = bnpMillerRabin

// public
proto.clone = bnClone
proto.intValue = bnIntValue
proto.byteValue = bnByteValue
proto.shortValue = bnShortValue
proto.signum = bnSigNum
proto.toByteArray = bnToByteArray
proto.equals = bnEquals
proto.min = bnMin
proto.max = bnMax
proto.and = bnAnd
proto.or = bnOr
proto.xor = bnXor
proto.andNot = bnAndNot
proto.not = bnNot
proto.shiftLeft = bnShiftLeft
proto.shiftRight = bnShiftRight
proto.getLowestSetBit = bnGetLowestSetBit
proto.bitCount = bnBitCount
proto.testBit = bnTestBit
proto.setBit = bnSetBit
proto.clearBit = bnClearBit
proto.flipBit = bnFlipBit
proto.add = bnAdd
proto.subtract = bnSubtract
proto.multiply = bnMultiply
proto.divide = bnDivide
proto.remainder = bnRemainder
proto.divideAndRemainder = bnDivideAndRemainder
proto.modPow = bnModPow
proto.modInverse = bnModInverse
proto.pow = bnPow
proto.gcd = bnGCD
proto.isProbablePrime = bnIsProbablePrime

// JSBN-specific extension
proto.square = bnSquare

// constants
BigInteger.ZERO = nbv(0)
BigInteger.ONE = nbv(1)
BigInteger.valueOf = nbv

module.exports = BigInteger

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/bigi/lib/bigi.js","/../node_modules/bigi/lib")
},{"../package.json":7,"buffer":11,"pBGvAp":74}],5:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// FIXME: Kind of a weird way to throw exceptions, consider removing
var assert = require('assert')
var BigInteger = require('./bigi')

/**
 * Turns a byte array into a big integer.
 *
 * This function will interpret a byte array as a big integer in big
 * endian notation.
 */
BigInteger.fromByteArrayUnsigned = function(byteArray) {
  // BigInteger expects a DER integer conformant byte array
  if (byteArray[0] & 0x80) {
    return new BigInteger([0].concat(byteArray))
  }

  return new BigInteger(byteArray)
}

/**
 * Returns a byte array representation of the big integer.
 *
 * This returns the absolute of the contained value in big endian
 * form. A value of zero results in an empty array.
 */
BigInteger.prototype.toByteArrayUnsigned = function() {
  var byteArray = this.toByteArray()
  return byteArray[0] === 0 ? byteArray.slice(1) : byteArray
}

BigInteger.fromDERInteger = function(byteArray) {
  return new BigInteger(byteArray)
}

/*
 * Converts BigInteger to a DER integer representation.
 *
 * The format for this value uses the most significant bit as a sign
 * bit.  If the most significant bit is already set and the integer is
 * positive, a 0x00 is prepended.
 *
 * Examples:
 *
 *      0 =>     0x00
 *      1 =>     0x01
 *     -1 =>     0xff
 *    127 =>     0x7f
 *   -127 =>     0x81
 *    128 =>   0x0080
 *   -128 =>     0x80
 *    255 =>   0x00ff
 *   -255 =>   0xff01
 *  16300 =>   0x3fac
 * -16300 =>   0xc054
 *  62300 => 0x00f35c
 * -62300 => 0xff0ca4
*/
BigInteger.prototype.toDERInteger = BigInteger.prototype.toByteArray

BigInteger.fromBuffer = function(buffer) {
  // BigInteger expects a DER integer conformant byte array
  if (buffer[0] & 0x80) {
    var byteArray = Array.prototype.slice.call(buffer)

    return new BigInteger([0].concat(byteArray))
  }

  return new BigInteger(buffer)
}

BigInteger.fromHex = function(hex) {
  if (hex === '') return BigInteger.ZERO

  assert.equal(hex, hex.match(/^[A-Fa-f0-9]+/), 'Invalid hex string')
  assert.equal(hex.length % 2, 0, 'Incomplete hex')
  return new BigInteger(hex, 16)
}

BigInteger.prototype.toBuffer = function(size) {
  var byteArray = this.toByteArrayUnsigned()
  var zeros = []

  var padding = size - byteArray.length
  while (zeros.length < padding) zeros.push(0)

  return new Buffer(zeros.concat(byteArray))
}

BigInteger.prototype.toHex = function(size) {
  return this.toBuffer(size).toString('hex')
}

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/bigi/lib/convert.js","/../node_modules/bigi/lib")
},{"./bigi":4,"assert":1,"buffer":11,"pBGvAp":74}],6:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var BigInteger = require('./bigi')

//addons
require('./convert')

module.exports = BigInteger
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/bigi/lib/index.js","/../node_modules/bigi/lib")
},{"./bigi":4,"./convert":5,"buffer":11,"pBGvAp":74}],7:[function(require,module,exports){
module.exports={
  "_args": [
    [
      {
        "raw": "bigi@^1.4.2",
        "scope": null,
        "escapedName": "bigi",
        "name": "bigi",
        "rawSpec": "^1.4.2",
        "spec": ">=1.4.2 <2.0.0",
        "type": "range"
      },
      "/Users/m/p/esteem/node_modules/steemauth"
    ]
  ],
  "_from": "bigi@>=1.4.2 <2.0.0",
  "_id": "bigi@1.4.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/bigi",
  "_nodeVersion": "6.1.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/bigi-1.4.2.tgz_1469584192413_0.6801238611806184"
  },
  "_npmUser": {
    "name": "jprichardson",
    "email": "jprichardson@gmail.com"
  },
  "_npmVersion": "3.8.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "bigi@^1.4.2",
    "scope": null,
    "escapedName": "bigi",
    "name": "bigi",
    "rawSpec": "^1.4.2",
    "spec": ">=1.4.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/ecurve",
    "/steemauth"
  ],
  "_resolved": "https://registry.npmjs.org/bigi/-/bigi-1.4.2.tgz",
  "_shasum": "9c665a95f88b8b08fc05cfd731f561859d725825",
  "_shrinkwrap": null,
  "_spec": "bigi@^1.4.2",
  "_where": "/Users/m/p/esteem/node_modules/steemauth",
  "bugs": {
    "url": "https://github.com/cryptocoinjs/bigi/issues"
  },
  "dependencies": {},
  "description": "Big integers.",
  "devDependencies": {
    "coveralls": "^2.11.2",
    "istanbul": "^0.3.5",
    "jshint": "^2.5.1",
    "mocha": "^2.1.0",
    "mochify": "^2.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "9c665a95f88b8b08fc05cfd731f561859d725825",
    "tarball": "https://registry.npmjs.org/bigi/-/bigi-1.4.2.tgz"
  },
  "gitHead": "c25308081c896ff84702303722bf5ecd8b3f78e3",
  "homepage": "https://github.com/cryptocoinjs/bigi#readme",
  "keywords": [
    "cryptography",
    "math",
    "bitcoin",
    "arbitrary",
    "precision",
    "arithmetic",
    "big",
    "integer",
    "int",
    "number",
    "biginteger",
    "bigint",
    "bignumber",
    "decimal",
    "float"
  ],
  "main": "./lib/index.js",
  "maintainers": [
    {
      "name": "midnightlightning",
      "email": "boydb@midnightdesign.ws"
    },
    {
      "name": "sidazhang",
      "email": "sidazhang89@gmail.com"
    },
    {
      "name": "nadav",
      "email": "npm@shesek.info"
    },
    {
      "name": "jprichardson",
      "email": "jprichardson@gmail.com"
    }
  ],
  "name": "bigi",
  "optionalDependencies": {},
  "readme": "ERROR: No README data found!",
  "repository": {
    "url": "git+https://github.com/cryptocoinjs/bigi.git",
    "type": "git"
  },
  "scripts": {
    "browser-test": "mochify --wd -R spec",
    "coverage": "istanbul cover ./node_modules/.bin/_mocha -- --reporter list test/*.js",
    "coveralls": "npm run-script coverage && node ./node_modules/.bin/coveralls < coverage/lcov.info",
    "jshint": "jshint --config jshint.json lib/*.js ; true",
    "test": "_mocha -- test/*.js",
    "unit": "mocha"
  },
  "testling": {
    "files": "test/*.js",
    "harness": "mocha",
    "browsers": [
      "ie/9..latest",
      "firefox/latest",
      "chrome/latest",
      "safari/6.0..latest",
      "iphone/6.0..latest",
      "android-browser/4.2..latest"
    ]
  },
  "version": "1.4.2"
}

},{}],8:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/browser-resolve/empty.js","/../node_modules/browser-resolve")
},{"buffer":11,"pBGvAp":74}],9:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = require('buffer').Buffer;

function assertEncoding(encoding) {
  if (encoding && !Buffer.isEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  this.charBuffer = new Buffer(6);
  this.charReceived = 0;
  this.charLength = 0;
};


StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  var offset = 0;

  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var i = (buffer.length >= this.charLength - this.charReceived) ?
                this.charLength - this.charReceived :
                buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, offset, i);
    this.charReceived += (i - offset);
    offset = i;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (i == buffer.length) return charStr;

    // otherwise cut off the characters end from the beginning of this buffer
    buffer = buffer.slice(i, buffer.length);
    break;
  }

  var lenIncomplete = this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - lenIncomplete, end);
    this.charReceived = lenIncomplete;
    end -= lenIncomplete;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    this.charBuffer.write(charStr.charAt(charStr.length - 1), this.encoding);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }

  return i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  var incomplete = this.charReceived = buffer.length % 2;
  this.charLength = incomplete ? 2 : 0;
  return incomplete;
}

function base64DetectIncompleteChar(buffer) {
  var incomplete = this.charReceived = buffer.length % 3;
  this.charLength = incomplete ? 3 : 0;
  return incomplete;
}

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/browserify/node_modules/string_decoder/index.js","/../node_modules/browserify/node_modules/string_decoder")
},{"buffer":11,"pBGvAp":74}],10:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var basex = require('base-x')
var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
var base58 = basex(ALPHABET)

module.exports = {
  encode: base58.encode,
  decode: base58.decode
}

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/bs58/index.js","/../node_modules/bs58")
},{"base-x":2,"buffer":11,"pBGvAp":74}],11:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = Buffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192

/**
 * If `Buffer._useTypedArrays`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (compatible down to IE6)
 */
Buffer._useTypedArrays = (function () {
  // Detect if browser supports Typed Arrays. Supported browsers are IE 10+, Firefox 4+,
  // Chrome 7+, Safari 5.1+, Opera 11.6+, iOS 4.2+. If the browser does not support adding
  // properties to `Uint8Array` instances, then that's the same as no `Uint8Array` support
  // because we need to be able to add all the node Buffer API methods. This is an issue
  // in Firefox 4-29. Now fixed: https://bugzilla.mozilla.org/show_bug.cgi?id=695438
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return 42 === arr.foo() &&
        typeof arr.subarray === 'function' // Chrome 9-10 lack `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding, noZero) {
  if (!(this instanceof Buffer))
    return new Buffer(subject, encoding, noZero)

  var type = typeof subject

  // Workaround: node's base64 implementation allows for non-padded strings
  // while base64-js does not.
  if (encoding === 'base64' && type === 'string') {
    subject = stringtrim(subject)
    while (subject.length % 4 !== 0) {
      subject = subject + '='
    }
  }

  // Find the length
  var length
  if (type === 'number')
    length = coerce(subject)
  else if (type === 'string')
    length = Buffer.byteLength(subject, encoding)
  else if (type === 'object')
    length = coerce(subject.length) // assume that object is array-like
  else
    throw new Error('First argument needs to be a number, array or string.')

  var buf
  if (Buffer._useTypedArrays) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    buf = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    buf = this
    buf.length = length
    buf._isBuffer = true
  }

  var i
  if (Buffer._useTypedArrays && typeof subject.byteLength === 'number') {
    // Speed optimization -- use set if we're copying from a typed array
    buf._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    for (i = 0; i < length; i++) {
      if (Buffer.isBuffer(subject))
        buf[i] = subject.readUInt8(i)
      else
        buf[i] = subject[i]
    }
  } else if (type === 'string') {
    buf.write(subject, 0, encoding)
  } else if (type === 'number' && !Buffer._useTypedArrays && !noZero) {
    for (i = 0; i < length; i++) {
      buf[i] = 0
    }
  }

  return buf
}

// STATIC METHODS
// ==============

Buffer.isEncoding = function (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.isBuffer = function (b) {
  return !!(b !== null && b !== undefined && b._isBuffer)
}

Buffer.byteLength = function (str, encoding) {
  var ret
  str = str + ''
  switch (encoding || 'utf8') {
    case 'hex':
      ret = str.length / 2
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.concat = function (list, totalLength) {
  assert(isArray(list), 'Usage: Buffer.concat(list, [totalLength])\n' +
      'list should be an Array.')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (typeof totalLength !== 'number') {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

// BUFFER INSTANCE METHODS
// =======================

function _hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  assert(strLen % 2 === 0, 'Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16)
    assert(!isNaN(byte), 'Invalid hex string')
    buf[offset + i] = byte
  }
  Buffer._charsWritten = i * 2
  return i
}

function _utf8Write (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(utf8ToBytes(string), buf, offset, length)
  return charsWritten
}

function _asciiWrite (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function _binaryWrite (buf, string, offset, length) {
  return _asciiWrite(buf, string, offset, length)
}

function _base64Write (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function _utf16leWrite (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(utf16leToBytes(string), buf, offset, length)
  return charsWritten
}

Buffer.prototype.write = function (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0
  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = _hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = _utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = _asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = _binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = _base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leWrite(this, string, offset, length)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toString = function (encoding, start, end) {
  var self = this

  encoding = String(encoding || 'utf8').toLowerCase()
  start = Number(start) || 0
  end = (end !== undefined)
    ? Number(end)
    : end = self.length

  // Fastpath empty strings
  if (end === start)
    return ''

  var ret
  switch (encoding) {
    case 'hex':
      ret = _hexSlice(self, start, end)
      break
    case 'utf8':
    case 'utf-8':
      ret = _utf8Slice(self, start, end)
      break
    case 'ascii':
      ret = _asciiSlice(self, start, end)
      break
    case 'binary':
      ret = _binarySlice(self, start, end)
      break
    case 'base64':
      ret = _base64Slice(self, start, end)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leSlice(self, start, end)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toJSON = function () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function (target, target_start, start, end) {
  var source = this

  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (!target_start) target_start = 0

  // Copy 0 bytes; we're done
  if (end === start) return
  if (target.length === 0 || source.length === 0) return

  // Fatal error conditions
  assert(end >= start, 'sourceEnd < sourceStart')
  assert(target_start >= 0 && target_start < target.length,
      'targetStart out of bounds')
  assert(start >= 0 && start < source.length, 'sourceStart out of bounds')
  assert(end >= 0 && end <= source.length, 'sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length)
    end = this.length
  if (target.length - target_start < end - start)
    end = target.length - target_start + start

  var len = end - start

  if (len < 100 || !Buffer._useTypedArrays) {
    for (var i = 0; i < len; i++)
      target[i + target_start] = this[i + start]
  } else {
    target._set(this.subarray(start, start + len), target_start)
  }
}

function _base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function _utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function _asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++)
    ret += String.fromCharCode(buf[i])
  return ret
}

function _binarySlice (buf, start, end) {
  return _asciiSlice(buf, start, end)
}

function _hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function _utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i+1] * 256)
  }
  return res
}

Buffer.prototype.slice = function (start, end) {
  var len = this.length
  start = clamp(start, len, 0)
  end = clamp(end, len, len)

  if (Buffer._useTypedArrays) {
    return Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    var newBuf = new Buffer(sliceLen, undefined, true)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
    return newBuf
  }
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

Buffer.prototype.readUInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  return this[offset]
}

function _readUInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    val = buf[offset]
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
  } else {
    val = buf[offset] << 8
    if (offset + 1 < len)
      val |= buf[offset + 1]
  }
  return val
}

Buffer.prototype.readUInt16LE = function (offset, noAssert) {
  return _readUInt16(this, offset, true, noAssert)
}

Buffer.prototype.readUInt16BE = function (offset, noAssert) {
  return _readUInt16(this, offset, false, noAssert)
}

function _readUInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    if (offset + 2 < len)
      val = buf[offset + 2] << 16
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
    val |= buf[offset]
    if (offset + 3 < len)
      val = val + (buf[offset + 3] << 24 >>> 0)
  } else {
    if (offset + 1 < len)
      val = buf[offset + 1] << 16
    if (offset + 2 < len)
      val |= buf[offset + 2] << 8
    if (offset + 3 < len)
      val |= buf[offset + 3]
    val = val + (buf[offset] << 24 >>> 0)
  }
  return val
}

Buffer.prototype.readUInt32LE = function (offset, noAssert) {
  return _readUInt32(this, offset, true, noAssert)
}

Buffer.prototype.readUInt32BE = function (offset, noAssert) {
  return _readUInt32(this, offset, false, noAssert)
}

Buffer.prototype.readInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null,
        'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  var neg = this[offset] & 0x80
  if (neg)
    return (0xff - this[offset] + 1) * -1
  else
    return this[offset]
}

function _readInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = _readUInt16(buf, offset, littleEndian, true)
  var neg = val & 0x8000
  if (neg)
    return (0xffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt16LE = function (offset, noAssert) {
  return _readInt16(this, offset, true, noAssert)
}

Buffer.prototype.readInt16BE = function (offset, noAssert) {
  return _readInt16(this, offset, false, noAssert)
}

function _readInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = _readUInt32(buf, offset, littleEndian, true)
  var neg = val & 0x80000000
  if (neg)
    return (0xffffffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt32LE = function (offset, noAssert) {
  return _readInt32(this, offset, true, noAssert)
}

Buffer.prototype.readInt32BE = function (offset, noAssert) {
  return _readInt32(this, offset, false, noAssert)
}

function _readFloat (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 23, 4)
}

Buffer.prototype.readFloatLE = function (offset, noAssert) {
  return _readFloat(this, offset, true, noAssert)
}

Buffer.prototype.readFloatBE = function (offset, noAssert) {
  return _readFloat(this, offset, false, noAssert)
}

function _readDouble (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 7 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 52, 8)
}

Buffer.prototype.readDoubleLE = function (offset, noAssert) {
  return _readDouble(this, offset, true, noAssert)
}

Buffer.prototype.readDoubleBE = function (offset, noAssert) {
  return _readDouble(this, offset, false, noAssert)
}

Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'trying to write beyond buffer length')
    verifuint(value, 0xff)
  }

  if (offset >= this.length) return

  this[offset] = value
}

function _writeUInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 2); i < j; i++) {
    buf[offset + i] =
        (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
            (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, false, noAssert)
}

function _writeUInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffffffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 4); i < j; i++) {
    buf[offset + i] =
        (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, false, noAssert)
}

Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7f, -0x80)
  }

  if (offset >= this.length)
    return

  if (value >= 0)
    this.writeUInt8(value, offset, noAssert)
  else
    this.writeUInt8(0xff + value + 1, offset, noAssert)
}

function _writeInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fff, -0x8000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    _writeUInt16(buf, value, offset, littleEndian, noAssert)
  else
    _writeUInt16(buf, 0xffff + value + 1, offset, littleEndian, noAssert)
}

Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, false, noAssert)
}

function _writeInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fffffff, -0x80000000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    _writeUInt32(buf, value, offset, littleEndian, noAssert)
  else
    _writeUInt32(buf, 0xffffffff + value + 1, offset, littleEndian, noAssert)
}

Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, false, noAssert)
}

function _writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 23, 4)
}

Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, false, noAssert)
}

function _writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 7 < buf.length,
        'Trying to write beyond buffer length')
    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 52, 8)
}

Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, false, noAssert)
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (typeof value === 'string') {
    value = value.charCodeAt(0)
  }

  assert(typeof value === 'number' && !isNaN(value), 'value is not a number')
  assert(end >= start, 'end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  assert(start >= 0 && start < this.length, 'start out of bounds')
  assert(end >= 0 && end <= this.length, 'end out of bounds')

  for (var i = start; i < end; i++) {
    this[i] = value
  }
}

Buffer.prototype.inspect = function () {
  var out = []
  var len = this.length
  for (var i = 0; i < len; i++) {
    out[i] = toHex(this[i])
    if (i === exports.INSPECT_MAX_BYTES) {
      out[i + 1] = '...'
      break
    }
  }
  return '<Buffer ' + out.join(' ') + '>'
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer._useTypedArrays) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1)
        buf[i] = this[i]
      return buf.buffer
    }
  } else {
    throw new Error('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function (arr) {
  arr._isBuffer = true

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

// slice(start, end)
function clamp (index, len, defaultValue) {
  if (typeof index !== 'number') return defaultValue
  index = ~~index;  // Coerce to integer.
  if (index >= len) return len
  if (index >= 0) return index
  index += len
  if (index >= 0) return index
  return 0
}

function coerce (length) {
  // Coerce length to a number (possibly NaN), round up
  // in case it's fractional (e.g. 123.456) then do a
  // double negate to coerce a NaN to 0. Easy, right?
  length = ~~Math.ceil(+length)
  return length < 0 ? 0 : length
}

function isArray (subject) {
  return (Array.isArray || function (subject) {
    return Object.prototype.toString.call(subject) === '[object Array]'
  })(subject)
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    var b = str.charCodeAt(i)
    if (b <= 0x7F)
      byteArray.push(str.charCodeAt(i))
    else {
      var start = i
      if (b >= 0xD800 && b <= 0xDFFF) i++
      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')
      for (var j = 0; j < h.length; j++)
        byteArray.push(parseInt(h[j], 16))
    }
  }
  return byteArray
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(str)
}

function blitBuffer (src, dst, offset, length) {
  var pos
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length))
      break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

/*
 * We have to make sure that the value is a valid integer. This means that it
 * is non-negative. It has no fractional component and that it does not
 * exceed the maximum allowed value.
 */
function verifuint (value, max) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value >= 0, 'specified a negative value for writing an unsigned value')
  assert(value <= max, 'value is larger than maximum value for type')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifsint (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifIEEE754 (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
}

function assert (test, message) {
  if (!test) throw new Error(message || 'Failed assertion')
}

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/buffer/index.js","/../node_modules/buffer")
},{"base64-js":3,"buffer":11,"ieee754":70,"pBGvAp":74}],12:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*
 Copyright 2013-2014 Daniel Wirtz <dcode@dcode.io>

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/**
 * @license bytebuffer.js (c) 2015 Daniel Wirtz <dcode@dcode.io>
 * Backing buffer: ArrayBuffer, Accessor: Uint8Array
 * Released under the Apache License, Version 2.0
 * see: https://github.com/dcodeIO/bytebuffer.js for details
 */
(function(global, factory) {

    /* AMD */ if (typeof define === 'function' && define["amd"])
        define(["long"], factory);
    /* CommonJS */ else if (typeof require === 'function' && typeof module === "object" && module && module["exports"])
        module['exports'] = (function() {
            var Long; try { Long = require("long"); } catch (e) {}
            return factory(Long);
        })();
    /* Global */ else
        (global["dcodeIO"] = global["dcodeIO"] || {})["ByteBuffer"] = factory(global["dcodeIO"]["Long"]);

})(this, function(Long) {
    "use strict";

    /**
     * Constructs a new ByteBuffer.
     * @class The swiss army knife for binary data in JavaScript.
     * @exports ByteBuffer
     * @constructor
     * @param {number=} capacity Initial capacity. Defaults to {@link ByteBuffer.DEFAULT_CAPACITY}.
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @expose
     */
    var ByteBuffer = function(capacity, littleEndian, noAssert) {
        if (typeof capacity === 'undefined')
            capacity = ByteBuffer.DEFAULT_CAPACITY;
        if (typeof littleEndian === 'undefined')
            littleEndian = ByteBuffer.DEFAULT_ENDIAN;
        if (typeof noAssert === 'undefined')
            noAssert = ByteBuffer.DEFAULT_NOASSERT;
        if (!noAssert) {
            capacity = capacity | 0;
            if (capacity < 0)
                throw RangeError("Illegal capacity");
            littleEndian = !!littleEndian;
            noAssert = !!noAssert;
        }

        /**
         * Backing ArrayBuffer.
         * @type {!ArrayBuffer}
         * @expose
         */
        this.buffer = capacity === 0 ? EMPTY_BUFFER : new ArrayBuffer(capacity);

        /**
         * Uint8Array utilized to manipulate the backing buffer. Becomes `null` if the backing buffer has a capacity of `0`.
         * @type {?Uint8Array}
         * @expose
         */
        this.view = capacity === 0 ? null : new Uint8Array(this.buffer);

        /**
         * Absolute read/write offset.
         * @type {number}
         * @expose
         * @see ByteBuffer#flip
         * @see ByteBuffer#clear
         */
        this.offset = 0;

        /**
         * Marked offset.
         * @type {number}
         * @expose
         * @see ByteBuffer#mark
         * @see ByteBuffer#reset
         */
        this.markedOffset = -1;

        /**
         * Absolute limit of the contained data. Set to the backing buffer's capacity upon allocation.
         * @type {number}
         * @expose
         * @see ByteBuffer#flip
         * @see ByteBuffer#clear
         */
        this.limit = capacity;

        /**
         * Whether to use little endian byte order, defaults to `false` for big endian.
         * @type {boolean}
         * @expose
         */
        this.littleEndian = littleEndian;

        /**
         * Whether to skip assertions of offsets and values, defaults to `false`.
         * @type {boolean}
         * @expose
         */
        this.noAssert = noAssert;
    };

    /**
     * ByteBuffer version.
     * @type {string}
     * @const
     * @expose
     */
    ByteBuffer.VERSION = "5.0.1";

    /**
     * Little endian constant that can be used instead of its boolean value. Evaluates to `true`.
     * @type {boolean}
     * @const
     * @expose
     */
    ByteBuffer.LITTLE_ENDIAN = true;

    /**
     * Big endian constant that can be used instead of its boolean value. Evaluates to `false`.
     * @type {boolean}
     * @const
     * @expose
     */
    ByteBuffer.BIG_ENDIAN = false;

    /**
     * Default initial capacity of `16`.
     * @type {number}
     * @expose
     */
    ByteBuffer.DEFAULT_CAPACITY = 16;

    /**
     * Default endianess of `false` for big endian.
     * @type {boolean}
     * @expose
     */
    ByteBuffer.DEFAULT_ENDIAN = ByteBuffer.BIG_ENDIAN;

    /**
     * Default no assertions flag of `false`.
     * @type {boolean}
     * @expose
     */
    ByteBuffer.DEFAULT_NOASSERT = false;

    /**
     * A `Long` class for representing a 64-bit two's-complement integer value. May be `null` if Long.js has not been loaded
     *  and int64 support is not available.
     * @type {?Long}
     * @const
     * @see https://github.com/dcodeIO/long.js
     * @expose
     */
    ByteBuffer.Long = Long || null;

    /**
     * @alias ByteBuffer.prototype
     * @inner
     */
    var ByteBufferPrototype = ByteBuffer.prototype;

    /**
     * An indicator used to reliably determine if an object is a ByteBuffer or not.
     * @type {boolean}
     * @const
     * @expose
     * @private
     */
    ByteBufferPrototype.__isByteBuffer__;

    Object.defineProperty(ByteBufferPrototype, "__isByteBuffer__", {
        value: true,
        enumerable: false,
        configurable: false
    });

    // helpers

    /**
     * @type {!ArrayBuffer}
     * @inner
     */
    var EMPTY_BUFFER = new ArrayBuffer(0);

    /**
     * String.fromCharCode reference for compile-time renaming.
     * @type {function(...number):string}
     * @inner
     */
    var stringFromCharCode = String.fromCharCode;

    /**
     * Creates a source function for a string.
     * @param {string} s String to read from
     * @returns {function():number|null} Source function returning the next char code respectively `null` if there are
     *  no more characters left.
     * @throws {TypeError} If the argument is invalid
     * @inner
     */
    function stringSource(s) {
        var i=0; return function() {
            return i < s.length ? s.charCodeAt(i++) : null;
        };
    }

    /**
     * Creates a destination function for a string.
     * @returns {function(number=):undefined|string} Destination function successively called with the next char code.
     *  Returns the final string when called without arguments.
     * @inner
     */
    function stringDestination() {
        var cs = [], ps = []; return function() {
            if (arguments.length === 0)
                return ps.join('')+stringFromCharCode.apply(String, cs);
            if (cs.length + arguments.length > 1024)
                ps.push(stringFromCharCode.apply(String, cs)),
                    cs.length = 0;
            Array.prototype.push.apply(cs, arguments);
        };
    }

    /**
     * Gets the accessor type.
     * @returns {Function} `Buffer` under node.js, `Uint8Array` respectively `DataView` in the browser (classes)
     * @expose
     */
    ByteBuffer.accessor = function() {
        return Uint8Array;
    };
    /**
     * Allocates a new ByteBuffer backed by a buffer of the specified capacity.
     * @param {number=} capacity Initial capacity. Defaults to {@link ByteBuffer.DEFAULT_CAPACITY}.
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @returns {!ByteBuffer}
     * @expose
     */
    ByteBuffer.allocate = function(capacity, littleEndian, noAssert) {
        return new ByteBuffer(capacity, littleEndian, noAssert);
    };

    /**
     * Concatenates multiple ByteBuffers into one.
     * @param {!Array.<!ByteBuffer|!ArrayBuffer|!Uint8Array|string>} buffers Buffers to concatenate
     * @param {(string|boolean)=} encoding String encoding if `buffers` contains a string ("base64", "hex", "binary",
     *  defaults to "utf8")
     * @param {boolean=} littleEndian Whether to use little or big endian byte order for the resulting ByteBuffer. Defaults
     *  to {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values for the resulting ByteBuffer. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @returns {!ByteBuffer} Concatenated ByteBuffer
     * @expose
     */
    ByteBuffer.concat = function(buffers, encoding, littleEndian, noAssert) {
        if (typeof encoding === 'boolean' || typeof encoding !== 'string') {
            noAssert = littleEndian;
            littleEndian = encoding;
            encoding = undefined;
        }
        var capacity = 0;
        for (var i=0, k=buffers.length, length; i<k; ++i) {
            if (!ByteBuffer.isByteBuffer(buffers[i]))
                buffers[i] = ByteBuffer.wrap(buffers[i], encoding);
            length = buffers[i].limit - buffers[i].offset;
            if (length > 0) capacity += length;
        }
        if (capacity === 0)
            return new ByteBuffer(0, littleEndian, noAssert);
        var bb = new ByteBuffer(capacity, littleEndian, noAssert),
            bi;
        i=0; while (i<k) {
            bi = buffers[i++];
            length = bi.limit - bi.offset;
            if (length <= 0) continue;
            bb.view.set(bi.view.subarray(bi.offset, bi.limit), bb.offset);
            bb.offset += length;
        }
        bb.limit = bb.offset;
        bb.offset = 0;
        return bb;
    };

    /**
     * Tests if the specified type is a ByteBuffer.
     * @param {*} bb ByteBuffer to test
     * @returns {boolean} `true` if it is a ByteBuffer, otherwise `false`
     * @expose
     */
    ByteBuffer.isByteBuffer = function(bb) {
        return (bb && bb["__isByteBuffer__"]) === true;
    };
    /**
     * Gets the backing buffer type.
     * @returns {Function} `Buffer` under node.js, `ArrayBuffer` in the browser (classes)
     * @expose
     */
    ByteBuffer.type = function() {
        return ArrayBuffer;
    };
    /**
     * Wraps a buffer or a string. Sets the allocated ByteBuffer's {@link ByteBuffer#offset} to `0` and its
     *  {@link ByteBuffer#limit} to the length of the wrapped data.
     * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string|!Array.<number>} buffer Anything that can be wrapped
     * @param {(string|boolean)=} encoding String encoding if `buffer` is a string ("base64", "hex", "binary", defaults to
     *  "utf8")
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @returns {!ByteBuffer} A ByteBuffer wrapping `buffer`
     * @expose
     */
    ByteBuffer.wrap = function(buffer, encoding, littleEndian, noAssert) {
        if (typeof encoding !== 'string') {
            noAssert = littleEndian;
            littleEndian = encoding;
            encoding = undefined;
        }
        if (typeof buffer === 'string') {
            if (typeof encoding === 'undefined')
                encoding = "utf8";
            switch (encoding) {
                case "base64":
                    return ByteBuffer.fromBase64(buffer, littleEndian);
                case "hex":
                    return ByteBuffer.fromHex(buffer, littleEndian);
                case "binary":
                    return ByteBuffer.fromBinary(buffer, littleEndian);
                case "utf8":
                    return ByteBuffer.fromUTF8(buffer, littleEndian);
                case "debug":
                    return ByteBuffer.fromDebug(buffer, littleEndian);
                default:
                    throw Error("Unsupported encoding: "+encoding);
            }
        }
        if (buffer === null || typeof buffer !== 'object')
            throw TypeError("Illegal buffer");
        var bb;
        if (ByteBuffer.isByteBuffer(buffer)) {
            bb = ByteBufferPrototype.clone.call(buffer);
            bb.markedOffset = -1;
            return bb;
        }
        if (buffer instanceof Uint8Array) { // Extract ArrayBuffer from Uint8Array
            bb = new ByteBuffer(0, littleEndian, noAssert);
            if (buffer.length > 0) { // Avoid references to more than one EMPTY_BUFFER
                bb.buffer = buffer.buffer;
                bb.offset = buffer.byteOffset;
                bb.limit = buffer.byteOffset + buffer.byteLength;
                bb.view = new Uint8Array(buffer.buffer);
            }
        } else if (buffer instanceof ArrayBuffer) { // Reuse ArrayBuffer
            bb = new ByteBuffer(0, littleEndian, noAssert);
            if (buffer.byteLength > 0) {
                bb.buffer = buffer;
                bb.offset = 0;
                bb.limit = buffer.byteLength;
                bb.view = buffer.byteLength > 0 ? new Uint8Array(buffer) : null;
            }
        } else if (Object.prototype.toString.call(buffer) === "[object Array]") { // Create from octets
            bb = new ByteBuffer(buffer.length, littleEndian, noAssert);
            bb.limit = buffer.length;
            for (var i=0; i<buffer.length; ++i)
                bb.view[i] = buffer[i];
        } else
            throw TypeError("Illegal buffer"); // Otherwise fail
        return bb;
    };

    /**
     * Writes the array as a bitset.
     * @param {Array<boolean>} value Array of booleans to write
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `length` if omitted.
     * @returns {!ByteBuffer}
     * @expose
     */
    ByteBufferPrototype.writeBitSet = function(value, offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;
      if (!this.noAssert) {
        if (!(value instanceof Array))
          throw TypeError("Illegal BitSet: Not an array");
        if (typeof offset !== 'number' || offset % 1 !== 0)
            throw TypeError("Illegal offset: "+offset+" (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 0 > this.buffer.byteLength)
            throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
      }

      var start = offset,
          bits = value.length,
          bytes = (bits >> 3),
          bit = 0,
          k;

      offset += this.writeVarint32(bits,offset);

      while(bytes--) {
        k = (!!value[bit++] & 1) |
            ((!!value[bit++] & 1) << 1) |
            ((!!value[bit++] & 1) << 2) |
            ((!!value[bit++] & 1) << 3) |
            ((!!value[bit++] & 1) << 4) |
            ((!!value[bit++] & 1) << 5) |
            ((!!value[bit++] & 1) << 6) |
            ((!!value[bit++] & 1) << 7);
        this.writeByte(k,offset++);
      }

      if(bit < bits) {
        var m = 0; k = 0;
        while(bit < bits) k = k | ((!!value[bit++] & 1) << (m++));
        this.writeByte(k,offset++);
      }

      if (relative) {
        this.offset = offset;
        return this;
      }
      return offset - start;
    }

    /**
     * Reads a BitSet as an array of booleans.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `length` if omitted.
     * @returns {Array<boolean>
     * @expose
     */
    ByteBufferPrototype.readBitSet = function(offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      var ret = this.readVarint32(offset),
          bits = ret.value,
          bytes = (bits >> 3),
          bit = 0,
          value = [],
          k;

      offset += ret.length;

      while(bytes--) {
        k = this.readByte(offset++);
        value[bit++] = !!(k & 0x01);
        value[bit++] = !!(k & 0x02);
        value[bit++] = !!(k & 0x04);
        value[bit++] = !!(k & 0x08);
        value[bit++] = !!(k & 0x10);
        value[bit++] = !!(k & 0x20);
        value[bit++] = !!(k & 0x40);
        value[bit++] = !!(k & 0x80);
      }

      if(bit < bits) {
        var m = 0;
        k = this.readByte(offset++);
        while(bit < bits) value[bit++] = !!((k >> (m++)) & 1);
      }

      if (relative) {
        this.offset = offset;
      }
      return value;
    }
    /**
     * Reads the specified number of bytes.
     * @param {number} length Number of bytes to read
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `length` if omitted.
     * @returns {!ByteBuffer}
     * @expose
     */
    ByteBufferPrototype.readBytes = function(length, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + length > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+length+") <= "+this.buffer.byteLength);
        }
        var slice = this.slice(offset, offset + length);
        if (relative) this.offset += length;
        return slice;
    };

    /**
     * Writes a payload of bytes. This is an alias of {@link ByteBuffer#append}.
     * @function
     * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string} source Data to write. If `source` is a ByteBuffer, its offsets
     *  will be modified according to the performed read operation.
     * @param {(string|number)=} encoding Encoding if `data` is a string ("base64", "hex", "binary", defaults to "utf8")
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.writeBytes = ByteBufferPrototype.append;

    // types/ints/int8

    /**
     * Writes an 8bit signed integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.writeInt8 = function(value, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof value !== 'number' || value % 1 !== 0)
                throw TypeError("Illegal value: "+value+" (not an integer)");
            value |= 0;
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        offset += 1;
        var capacity0 = this.buffer.byteLength;
        if (offset > capacity0)
            this.resize((capacity0 *= 2) > offset ? capacity0 : offset);
        offset -= 1;
        this.view[offset] = value;
        if (relative) this.offset += 1;
        return this;
    };

    /**
     * Writes an 8bit signed integer. This is an alias of {@link ByteBuffer#writeInt8}.
     * @function
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.writeByte = ByteBufferPrototype.writeInt8;

    /**
     * Reads an 8bit signed integer.
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {number} Value read
     * @expose
     */
    ByteBufferPrototype.readInt8 = function(offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 1 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
        }
        var value = this.view[offset];
        if ((value & 0x80) === 0x80) value = -(0xFF - value + 1); // Cast to signed
        if (relative) this.offset += 1;
        return value;
    };

    /**
     * Reads an 8bit signed integer. This is an alias of {@link ByteBuffer#readInt8}.
     * @function
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {number} Value read
     * @expose
     */
    ByteBufferPrototype.readByte = ByteBufferPrototype.readInt8;

    /**
     * Writes an 8bit unsigned integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.writeUint8 = function(value, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof value !== 'number' || value % 1 !== 0)
                throw TypeError("Illegal value: "+value+" (not an integer)");
            value >>>= 0;
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        offset += 1;
        var capacity1 = this.buffer.byteLength;
        if (offset > capacity1)
            this.resize((capacity1 *= 2) > offset ? capacity1 : offset);
        offset -= 1;
        this.view[offset] = value;
        if (relative) this.offset += 1;
        return this;
    };

    /**
     * Writes an 8bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint8}.
     * @function
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.writeUInt8 = ByteBufferPrototype.writeUint8;

    /**
     * Reads an 8bit unsigned integer.
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {number} Value read
     * @expose
     */
    ByteBufferPrototype.readUint8 = function(offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 1 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
        }
        var value = this.view[offset];
        if (relative) this.offset += 1;
        return value;
    };

    /**
     * Reads an 8bit unsigned integer. This is an alias of {@link ByteBuffer#readUint8}.
     * @function
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {number} Value read
     * @expose
     */
    ByteBufferPrototype.readUInt8 = ByteBufferPrototype.readUint8;

    // types/ints/int16

    /**
     * Writes a 16bit signed integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @throws {TypeError} If `offset` or `value` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */
    ByteBufferPrototype.writeInt16 = function(value, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof value !== 'number' || value % 1 !== 0)
                throw TypeError("Illegal value: "+value+" (not an integer)");
            value |= 0;
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        offset += 2;
        var capacity2 = this.buffer.byteLength;
        if (offset > capacity2)
            this.resize((capacity2 *= 2) > offset ? capacity2 : offset);
        offset -= 2;
        if (this.littleEndian) {
            this.view[offset+1] = (value & 0xFF00) >>> 8;
            this.view[offset  ] =  value & 0x00FF;
        } else {
            this.view[offset]   = (value & 0xFF00) >>> 8;
            this.view[offset+1] =  value & 0x00FF;
        }
        if (relative) this.offset += 2;
        return this;
    };

    /**
     * Writes a 16bit signed integer. This is an alias of {@link ByteBuffer#writeInt16}.
     * @function
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @throws {TypeError} If `offset` or `value` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */
    ByteBufferPrototype.writeShort = ByteBufferPrototype.writeInt16;

    /**
     * Reads a 16bit signed integer.
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @returns {number} Value read
     * @throws {TypeError} If `offset` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */
    ByteBufferPrototype.readInt16 = function(offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 2 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+2+") <= "+this.buffer.byteLength);
        }
        var value = 0;
        if (this.littleEndian) {
            value  = this.view[offset  ];
            value |= this.view[offset+1] << 8;
        } else {
            value  = this.view[offset  ] << 8;
            value |= this.view[offset+1];
        }
        if ((value & 0x8000) === 0x8000) value = -(0xFFFF - value + 1); // Cast to signed
        if (relative) this.offset += 2;
        return value;
    };

    /**
     * Reads a 16bit signed integer. This is an alias of {@link ByteBuffer#readInt16}.
     * @function
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @returns {number} Value read
     * @throws {TypeError} If `offset` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */
    ByteBufferPrototype.readShort = ByteBufferPrototype.readInt16;

    /**
     * Writes a 16bit unsigned integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @throws {TypeError} If `offset` or `value` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */
    ByteBufferPrototype.writeUint16 = function(value, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof value !== 'number' || value % 1 !== 0)
                throw TypeError("Illegal value: "+value+" (not an integer)");
            value >>>= 0;
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        offset += 2;
        var capacity3 = this.buffer.byteLength;
        if (offset > capacity3)
            this.resize((capacity3 *= 2) > offset ? capacity3 : offset);
        offset -= 2;
        if (this.littleEndian) {
            this.view[offset+1] = (value & 0xFF00) >>> 8;
            this.view[offset  ] =  value & 0x00FF;
        } else {
            this.view[offset]   = (value & 0xFF00) >>> 8;
            this.view[offset+1] =  value & 0x00FF;
        }
        if (relative) this.offset += 2;
        return this;
    };

    /**
     * Writes a 16bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint16}.
     * @function
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @throws {TypeError} If `offset` or `value` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */
    ByteBufferPrototype.writeUInt16 = ByteBufferPrototype.writeUint16;

    /**
     * Reads a 16bit unsigned integer.
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @returns {number} Value read
     * @throws {TypeError} If `offset` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */
    ByteBufferPrototype.readUint16 = function(offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 2 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+2+") <= "+this.buffer.byteLength);
        }
        var value = 0;
        if (this.littleEndian) {
            value  = this.view[offset  ];
            value |= this.view[offset+1] << 8;
        } else {
            value  = this.view[offset  ] << 8;
            value |= this.view[offset+1];
        }
        if (relative) this.offset += 2;
        return value;
    };

    /**
     * Reads a 16bit unsigned integer. This is an alias of {@link ByteBuffer#readUint16}.
     * @function
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @returns {number} Value read
     * @throws {TypeError} If `offset` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */
    ByteBufferPrototype.readUInt16 = ByteBufferPrototype.readUint16;

    // types/ints/int32

    /**
     * Writes a 32bit signed integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @expose
     */
    ByteBufferPrototype.writeInt32 = function(value, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof value !== 'number' || value % 1 !== 0)
                throw TypeError("Illegal value: "+value+" (not an integer)");
            value |= 0;
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        offset += 4;
        var capacity4 = this.buffer.byteLength;
        if (offset > capacity4)
            this.resize((capacity4 *= 2) > offset ? capacity4 : offset);
        offset -= 4;
        if (this.littleEndian) {
            this.view[offset+3] = (value >>> 24) & 0xFF;
            this.view[offset+2] = (value >>> 16) & 0xFF;
            this.view[offset+1] = (value >>>  8) & 0xFF;
            this.view[offset  ] =  value         & 0xFF;
        } else {
            this.view[offset  ] = (value >>> 24) & 0xFF;
            this.view[offset+1] = (value >>> 16) & 0xFF;
            this.view[offset+2] = (value >>>  8) & 0xFF;
            this.view[offset+3] =  value         & 0xFF;
        }
        if (relative) this.offset += 4;
        return this;
    };

    /**
     * Writes a 32bit signed integer. This is an alias of {@link ByteBuffer#writeInt32}.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @expose
     */
    ByteBufferPrototype.writeInt = ByteBufferPrototype.writeInt32;

    /**
     * Reads a 32bit signed integer.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {number} Value read
     * @expose
     */
    ByteBufferPrototype.readInt32 = function(offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 4 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+4+") <= "+this.buffer.byteLength);
        }
        var value = 0;
        if (this.littleEndian) {
            value  = this.view[offset+2] << 16;
            value |= this.view[offset+1] <<  8;
            value |= this.view[offset  ];
            value += this.view[offset+3] << 24 >>> 0;
        } else {
            value  = this.view[offset+1] << 16;
            value |= this.view[offset+2] <<  8;
            value |= this.view[offset+3];
            value += this.view[offset  ] << 24 >>> 0;
        }
        value |= 0; // Cast to signed
        if (relative) this.offset += 4;
        return value;
    };

    /**
     * Reads a 32bit signed integer. This is an alias of {@link ByteBuffer#readInt32}.
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {number} Value read
     * @expose
     */
    ByteBufferPrototype.readInt = ByteBufferPrototype.readInt32;

    /**
     * Writes a 32bit unsigned integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @expose
     */
    ByteBufferPrototype.writeUint32 = function(value, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof value !== 'number' || value % 1 !== 0)
                throw TypeError("Illegal value: "+value+" (not an integer)");
            value >>>= 0;
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        offset += 4;
        var capacity5 = this.buffer.byteLength;
        if (offset > capacity5)
            this.resize((capacity5 *= 2) > offset ? capacity5 : offset);
        offset -= 4;
        if (this.littleEndian) {
            this.view[offset+3] = (value >>> 24) & 0xFF;
            this.view[offset+2] = (value >>> 16) & 0xFF;
            this.view[offset+1] = (value >>>  8) & 0xFF;
            this.view[offset  ] =  value         & 0xFF;
        } else {
            this.view[offset  ] = (value >>> 24) & 0xFF;
            this.view[offset+1] = (value >>> 16) & 0xFF;
            this.view[offset+2] = (value >>>  8) & 0xFF;
            this.view[offset+3] =  value         & 0xFF;
        }
        if (relative) this.offset += 4;
        return this;
    };

    /**
     * Writes a 32bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint32}.
     * @function
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @expose
     */
    ByteBufferPrototype.writeUInt32 = ByteBufferPrototype.writeUint32;

    /**
     * Reads a 32bit unsigned integer.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {number} Value read
     * @expose
     */
    ByteBufferPrototype.readUint32 = function(offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 4 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+4+") <= "+this.buffer.byteLength);
        }
        var value = 0;
        if (this.littleEndian) {
            value  = this.view[offset+2] << 16;
            value |= this.view[offset+1] <<  8;
            value |= this.view[offset  ];
            value += this.view[offset+3] << 24 >>> 0;
        } else {
            value  = this.view[offset+1] << 16;
            value |= this.view[offset+2] <<  8;
            value |= this.view[offset+3];
            value += this.view[offset  ] << 24 >>> 0;
        }
        if (relative) this.offset += 4;
        return value;
    };

    /**
     * Reads a 32bit unsigned integer. This is an alias of {@link ByteBuffer#readUint32}.
     * @function
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {number} Value read
     * @expose
     */
    ByteBufferPrototype.readUInt32 = ByteBufferPrototype.readUint32;

    // types/ints/int64

    if (Long) {

        /**
         * Writes a 64bit signed integer.
         * @param {number|!Long} value Value to write
         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
         * @returns {!ByteBuffer} this
         * @expose
         */
        ByteBufferPrototype.writeInt64 = function(value, offset) {
            var relative = typeof offset === 'undefined';
            if (relative) offset = this.offset;
            if (!this.noAssert) {
                if (typeof value === 'number')
                    value = Long.fromNumber(value);
                else if (typeof value === 'string')
                    value = Long.fromString(value);
                else if (!(value && value instanceof Long))
                    throw TypeError("Illegal value: "+value+" (not an integer or Long)");
                if (typeof offset !== 'number' || offset % 1 !== 0)
                    throw TypeError("Illegal offset: "+offset+" (not an integer)");
                offset >>>= 0;
                if (offset < 0 || offset + 0 > this.buffer.byteLength)
                    throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
            }
            if (typeof value === 'number')
                value = Long.fromNumber(value);
            else if (typeof value === 'string')
                value = Long.fromString(value);
            offset += 8;
            var capacity6 = this.buffer.byteLength;
            if (offset > capacity6)
                this.resize((capacity6 *= 2) > offset ? capacity6 : offset);
            offset -= 8;
            var lo = value.low,
                hi = value.high;
            if (this.littleEndian) {
                this.view[offset+3] = (lo >>> 24) & 0xFF;
                this.view[offset+2] = (lo >>> 16) & 0xFF;
                this.view[offset+1] = (lo >>>  8) & 0xFF;
                this.view[offset  ] =  lo         & 0xFF;
                offset += 4;
                this.view[offset+3] = (hi >>> 24) & 0xFF;
                this.view[offset+2] = (hi >>> 16) & 0xFF;
                this.view[offset+1] = (hi >>>  8) & 0xFF;
                this.view[offset  ] =  hi         & 0xFF;
            } else {
                this.view[offset  ] = (hi >>> 24) & 0xFF;
                this.view[offset+1] = (hi >>> 16) & 0xFF;
                this.view[offset+2] = (hi >>>  8) & 0xFF;
                this.view[offset+3] =  hi         & 0xFF;
                offset += 4;
                this.view[offset  ] = (lo >>> 24) & 0xFF;
                this.view[offset+1] = (lo >>> 16) & 0xFF;
                this.view[offset+2] = (lo >>>  8) & 0xFF;
                this.view[offset+3] =  lo         & 0xFF;
            }
            if (relative) this.offset += 8;
            return this;
        };

        /**
         * Writes a 64bit signed integer. This is an alias of {@link ByteBuffer#writeInt64}.
         * @param {number|!Long} value Value to write
         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
         * @returns {!ByteBuffer} this
         * @expose
         */
        ByteBufferPrototype.writeLong = ByteBufferPrototype.writeInt64;

        /**
         * Reads a 64bit signed integer.
         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
         * @returns {!Long}
         * @expose
         */
        ByteBufferPrototype.readInt64 = function(offset) {
            var relative = typeof offset === 'undefined';
            if (relative) offset = this.offset;
            if (!this.noAssert) {
                if (typeof offset !== 'number' || offset % 1 !== 0)
                    throw TypeError("Illegal offset: "+offset+" (not an integer)");
                offset >>>= 0;
                if (offset < 0 || offset + 8 > this.buffer.byteLength)
                    throw RangeError("Illegal offset: 0 <= "+offset+" (+"+8+") <= "+this.buffer.byteLength);
            }
            var lo = 0,
                hi = 0;
            if (this.littleEndian) {
                lo  = this.view[offset+2] << 16;
                lo |= this.view[offset+1] <<  8;
                lo |= this.view[offset  ];
                lo += this.view[offset+3] << 24 >>> 0;
                offset += 4;
                hi  = this.view[offset+2] << 16;
                hi |= this.view[offset+1] <<  8;
                hi |= this.view[offset  ];
                hi += this.view[offset+3] << 24 >>> 0;
            } else {
                hi  = this.view[offset+1] << 16;
                hi |= this.view[offset+2] <<  8;
                hi |= this.view[offset+3];
                hi += this.view[offset  ] << 24 >>> 0;
                offset += 4;
                lo  = this.view[offset+1] << 16;
                lo |= this.view[offset+2] <<  8;
                lo |= this.view[offset+3];
                lo += this.view[offset  ] << 24 >>> 0;
            }
            var value = new Long(lo, hi, false);
            if (relative) this.offset += 8;
            return value;
        };

        /**
         * Reads a 64bit signed integer. This is an alias of {@link ByteBuffer#readInt64}.
         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
         * @returns {!Long}
         * @expose
         */
        ByteBufferPrototype.readLong = ByteBufferPrototype.readInt64;

        /**
         * Writes a 64bit unsigned integer.
         * @param {number|!Long} value Value to write
         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
         * @returns {!ByteBuffer} this
         * @expose
         */
        ByteBufferPrototype.writeUint64 = function(value, offset) {
            var relative = typeof offset === 'undefined';
            if (relative) offset = this.offset;
            if (!this.noAssert) {
                if (typeof value === 'number')
                    value = Long.fromNumber(value);
                else if (typeof value === 'string')
                    value = Long.fromString(value);
                else if (!(value && value instanceof Long))
                    throw TypeError("Illegal value: "+value+" (not an integer or Long)");
                if (typeof offset !== 'number' || offset % 1 !== 0)
                    throw TypeError("Illegal offset: "+offset+" (not an integer)");
                offset >>>= 0;
                if (offset < 0 || offset + 0 > this.buffer.byteLength)
                    throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
            }
            if (typeof value === 'number')
                value = Long.fromNumber(value);
            else if (typeof value === 'string')
                value = Long.fromString(value);
            offset += 8;
            var capacity7 = this.buffer.byteLength;
            if (offset > capacity7)
                this.resize((capacity7 *= 2) > offset ? capacity7 : offset);
            offset -= 8;
            var lo = value.low,
                hi = value.high;
            if (this.littleEndian) {
                this.view[offset+3] = (lo >>> 24) & 0xFF;
                this.view[offset+2] = (lo >>> 16) & 0xFF;
                this.view[offset+1] = (lo >>>  8) & 0xFF;
                this.view[offset  ] =  lo         & 0xFF;
                offset += 4;
                this.view[offset+3] = (hi >>> 24) & 0xFF;
                this.view[offset+2] = (hi >>> 16) & 0xFF;
                this.view[offset+1] = (hi >>>  8) & 0xFF;
                this.view[offset  ] =  hi         & 0xFF;
            } else {
                this.view[offset  ] = (hi >>> 24) & 0xFF;
                this.view[offset+1] = (hi >>> 16) & 0xFF;
                this.view[offset+2] = (hi >>>  8) & 0xFF;
                this.view[offset+3] =  hi         & 0xFF;
                offset += 4;
                this.view[offset  ] = (lo >>> 24) & 0xFF;
                this.view[offset+1] = (lo >>> 16) & 0xFF;
                this.view[offset+2] = (lo >>>  8) & 0xFF;
                this.view[offset+3] =  lo         & 0xFF;
            }
            if (relative) this.offset += 8;
            return this;
        };

        /**
         * Writes a 64bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint64}.
         * @function
         * @param {number|!Long} value Value to write
         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
         * @returns {!ByteBuffer} this
         * @expose
         */
        ByteBufferPrototype.writeUInt64 = ByteBufferPrototype.writeUint64;

        /**
         * Reads a 64bit unsigned integer.
         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
         * @returns {!Long}
         * @expose
         */
        ByteBufferPrototype.readUint64 = function(offset) {
            var relative = typeof offset === 'undefined';
            if (relative) offset = this.offset;
            if (!this.noAssert) {
                if (typeof offset !== 'number' || offset % 1 !== 0)
                    throw TypeError("Illegal offset: "+offset+" (not an integer)");
                offset >>>= 0;
                if (offset < 0 || offset + 8 > this.buffer.byteLength)
                    throw RangeError("Illegal offset: 0 <= "+offset+" (+"+8+") <= "+this.buffer.byteLength);
            }
            var lo = 0,
                hi = 0;
            if (this.littleEndian) {
                lo  = this.view[offset+2] << 16;
                lo |= this.view[offset+1] <<  8;
                lo |= this.view[offset  ];
                lo += this.view[offset+3] << 24 >>> 0;
                offset += 4;
                hi  = this.view[offset+2] << 16;
                hi |= this.view[offset+1] <<  8;
                hi |= this.view[offset  ];
                hi += this.view[offset+3] << 24 >>> 0;
            } else {
                hi  = this.view[offset+1] << 16;
                hi |= this.view[offset+2] <<  8;
                hi |= this.view[offset+3];
                hi += this.view[offset  ] << 24 >>> 0;
                offset += 4;
                lo  = this.view[offset+1] << 16;
                lo |= this.view[offset+2] <<  8;
                lo |= this.view[offset+3];
                lo += this.view[offset  ] << 24 >>> 0;
            }
            var value = new Long(lo, hi, true);
            if (relative) this.offset += 8;
            return value;
        };

        /**
         * Reads a 64bit unsigned integer. This is an alias of {@link ByteBuffer#readUint64}.
         * @function
         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
         * @returns {!Long}
         * @expose
         */
        ByteBufferPrototype.readUInt64 = ByteBufferPrototype.readUint64;

    } // Long


    // types/floats/float32

    /*
     ieee754 - https://github.com/feross/ieee754

     The MIT License (MIT)

     Copyright (c) Feross Aboukhadijeh

     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated documentation files (the "Software"), to deal
     in the Software without restriction, including without limitation the rights
     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     copies of the Software, and to permit persons to whom the Software is
     furnished to do so, subject to the following conditions:

     The above copyright notice and this permission notice shall be included in
     all copies or substantial portions of the Software.

     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
    */

    /**
     * Reads an IEEE754 float from a byte array.
     * @param {!Array} buffer
     * @param {number} offset
     * @param {boolean} isLE
     * @param {number} mLen
     * @param {number} nBytes
     * @returns {number}
     * @inner
     */
    function ieee754_read(buffer, offset, isLE, mLen, nBytes) {
        var e, m,
            eLen = nBytes * 8 - mLen - 1,
            eMax = (1 << eLen) - 1,
            eBias = eMax >> 1,
            nBits = -7,
            i = isLE ? (nBytes - 1) : 0,
            d = isLE ? -1 : 1,
            s = buffer[offset + i];

        i += d;

        e = s & ((1 << (-nBits)) - 1);
        s >>= (-nBits);
        nBits += eLen;
        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

        m = e & ((1 << (-nBits)) - 1);
        e >>= (-nBits);
        nBits += mLen;
        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

        if (e === 0) {
            e = 1 - eBias;
        } else if (e === eMax) {
            return m ? NaN : ((s ? -1 : 1) * Infinity);
        } else {
            m = m + Math.pow(2, mLen);
            e = e - eBias;
        }
        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    }

    /**
     * Writes an IEEE754 float to a byte array.
     * @param {!Array} buffer
     * @param {number} value
     * @param {number} offset
     * @param {boolean} isLE
     * @param {number} mLen
     * @param {number} nBytes
     * @inner
     */
    function ieee754_write(buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c,
            eLen = nBytes * 8 - mLen - 1,
            eMax = (1 << eLen) - 1,
            eBias = eMax >> 1,
            rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
            i = isLE ? 0 : (nBytes - 1),
            d = isLE ? 1 : -1,
            s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

        value = Math.abs(value);

        if (isNaN(value) || value === Infinity) {
            m = isNaN(value) ? 1 : 0;
            e = eMax;
        } else {
            e = Math.floor(Math.log(value) / Math.LN2);
            if (value * (c = Math.pow(2, -e)) < 1) {
                e--;
                c *= 2;
            }
            if (e + eBias >= 1) {
                value += rt / c;
            } else {
                value += rt * Math.pow(2, 1 - eBias);
            }
            if (value * c >= 2) {
                e++;
                c /= 2;
            }

            if (e + eBias >= eMax) {
                m = 0;
                e = eMax;
            } else if (e + eBias >= 1) {
                m = (value * c - 1) * Math.pow(2, mLen);
                e = e + eBias;
            } else {
                m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                e = 0;
            }
        }

        for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

        e = (e << mLen) | m;
        eLen += mLen;
        for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

        buffer[offset + i - d] |= s * 128;
    }

    /**
     * Writes a 32bit float.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.writeFloat32 = function(value, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof value !== 'number')
                throw TypeError("Illegal value: "+value+" (not a number)");
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        offset += 4;
        var capacity8 = this.buffer.byteLength;
        if (offset > capacity8)
            this.resize((capacity8 *= 2) > offset ? capacity8 : offset);
        offset -= 4;
        ieee754_write(this.view, value, offset, this.littleEndian, 23, 4);
        if (relative) this.offset += 4;
        return this;
    };

    /**
     * Writes a 32bit float. This is an alias of {@link ByteBuffer#writeFloat32}.
     * @function
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.writeFloat = ByteBufferPrototype.writeFloat32;

    /**
     * Reads a 32bit float.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {number}
     * @expose
     */
    ByteBufferPrototype.readFloat32 = function(offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 4 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+4+") <= "+this.buffer.byteLength);
        }
        var value = ieee754_read(this.view, offset, this.littleEndian, 23, 4);
        if (relative) this.offset += 4;
        return value;
    };

    /**
     * Reads a 32bit float. This is an alias of {@link ByteBuffer#readFloat32}.
     * @function
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {number}
     * @expose
     */
    ByteBufferPrototype.readFloat = ByteBufferPrototype.readFloat32;

    // types/floats/float64

    /**
     * Writes a 64bit float.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.writeFloat64 = function(value, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof value !== 'number')
                throw TypeError("Illegal value: "+value+" (not a number)");
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        offset += 8;
        var capacity9 = this.buffer.byteLength;
        if (offset > capacity9)
            this.resize((capacity9 *= 2) > offset ? capacity9 : offset);
        offset -= 8;
        ieee754_write(this.view, value, offset, this.littleEndian, 52, 8);
        if (relative) this.offset += 8;
        return this;
    };

    /**
     * Writes a 64bit float. This is an alias of {@link ByteBuffer#writeFloat64}.
     * @function
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.writeDouble = ByteBufferPrototype.writeFloat64;

    /**
     * Reads a 64bit float.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
     * @returns {number}
     * @expose
     */
    ByteBufferPrototype.readFloat64 = function(offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 8 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+8+") <= "+this.buffer.byteLength);
        }
        var value = ieee754_read(this.view, offset, this.littleEndian, 52, 8);
        if (relative) this.offset += 8;
        return value;
    };

    /**
     * Reads a 64bit float. This is an alias of {@link ByteBuffer#readFloat64}.
     * @function
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
     * @returns {number}
     * @expose
     */
    ByteBufferPrototype.readDouble = ByteBufferPrototype.readFloat64;


    // types/varints/varint32

    /**
     * Maximum number of bytes required to store a 32bit base 128 variable-length integer.
     * @type {number}
     * @const
     * @expose
     */
    ByteBuffer.MAX_VARINT32_BYTES = 5;

    /**
     * Calculates the actual number of bytes required to store a 32bit base 128 variable-length integer.
     * @param {number} value Value to encode
     * @returns {number} Number of bytes required. Capped to {@link ByteBuffer.MAX_VARINT32_BYTES}
     * @expose
     */
    ByteBuffer.calculateVarint32 = function(value) {
        // ref: src/google/protobuf/io/coded_stream.cc
        value = value >>> 0;
             if (value < 1 << 7 ) return 1;
        else if (value < 1 << 14) return 2;
        else if (value < 1 << 21) return 3;
        else if (value < 1 << 28) return 4;
        else                      return 5;
    };

    /**
     * Zigzag encodes a signed 32bit integer so that it can be effectively used with varint encoding.
     * @param {number} n Signed 32bit integer
     * @returns {number} Unsigned zigzag encoded 32bit integer
     * @expose
     */
    ByteBuffer.zigZagEncode32 = function(n) {
        return (((n |= 0) << 1) ^ (n >> 31)) >>> 0; // ref: src/google/protobuf/wire_format_lite.h
    };

    /**
     * Decodes a zigzag encoded signed 32bit integer.
     * @param {number} n Unsigned zigzag encoded 32bit integer
     * @returns {number} Signed 32bit integer
     * @expose
     */
    ByteBuffer.zigZagDecode32 = function(n) {
        return ((n >>> 1) ^ -(n & 1)) | 0; // // ref: src/google/protobuf/wire_format_lite.h
    };

    /**
     * Writes a 32bit base 128 variable-length integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {!ByteBuffer|number} this if `offset` is omitted, else the actual number of bytes written
     * @expose
     */
    ByteBufferPrototype.writeVarint32 = function(value, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof value !== 'number' || value % 1 !== 0)
                throw TypeError("Illegal value: "+value+" (not an integer)");
            value |= 0;
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        var size = ByteBuffer.calculateVarint32(value),
            b;
        offset += size;
        var capacity10 = this.buffer.byteLength;
        if (offset > capacity10)
            this.resize((capacity10 *= 2) > offset ? capacity10 : offset);
        offset -= size;
        value >>>= 0;
        while (value >= 0x80) {
            b = (value & 0x7f) | 0x80;
            this.view[offset++] = b;
            value >>>= 7;
        }
        this.view[offset++] = value;
        if (relative) {
            this.offset = offset;
            return this;
        }
        return size;
    };

    /**
     * Writes a zig-zag encoded (signed) 32bit base 128 variable-length integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {!ByteBuffer|number} this if `offset` is omitted, else the actual number of bytes written
     * @expose
     */
    ByteBufferPrototype.writeVarint32ZigZag = function(value, offset) {
        return this.writeVarint32(ByteBuffer.zigZagEncode32(value), offset);
    };

    /**
     * Reads a 32bit base 128 variable-length integer.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {number|!{value: number, length: number}} The value read if offset is omitted, else the value read
     *  and the actual number of bytes read.
     * @throws {Error} If it's not a valid varint. Has a property `truncated = true` if there is not enough data available
     *  to fully decode the varint.
     * @expose
     */
    ByteBufferPrototype.readVarint32 = function(offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 1 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
        }
        var c = 0,
            value = 0 >>> 0,
            b;
        do {
            if (!this.noAssert && offset > this.limit) {
                var err = Error("Truncated");
                err['truncated'] = true;
                throw err;
            }
            b = this.view[offset++];
            if (c < 5)
                value |= (b & 0x7f) << (7*c);
            ++c;
        } while ((b & 0x80) !== 0);
        value |= 0;
        if (relative) {
            this.offset = offset;
            return value;
        }
        return {
            "value": value,
            "length": c
        };
    };

    /**
     * Reads a zig-zag encoded (signed) 32bit base 128 variable-length integer.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {number|!{value: number, length: number}} The value read if offset is omitted, else the value read
     *  and the actual number of bytes read.
     * @throws {Error} If it's not a valid varint
     * @expose
     */
    ByteBufferPrototype.readVarint32ZigZag = function(offset) {
        var val = this.readVarint32(offset);
        if (typeof val === 'object')
            val["value"] = ByteBuffer.zigZagDecode32(val["value"]);
        else
            val = ByteBuffer.zigZagDecode32(val);
        return val;
    };

    // types/varints/varint64

    if (Long) {

        /**
         * Maximum number of bytes required to store a 64bit base 128 variable-length integer.
         * @type {number}
         * @const
         * @expose
         */
        ByteBuffer.MAX_VARINT64_BYTES = 10;

        /**
         * Calculates the actual number of bytes required to store a 64bit base 128 variable-length integer.
         * @param {number|!Long} value Value to encode
         * @returns {number} Number of bytes required. Capped to {@link ByteBuffer.MAX_VARINT64_BYTES}
         * @expose
         */
        ByteBuffer.calculateVarint64 = function(value) {
            if (typeof value === 'number')
                value = Long.fromNumber(value);
            else if (typeof value === 'string')
                value = Long.fromString(value);
            // ref: src/google/protobuf/io/coded_stream.cc
            var part0 = value.toInt() >>> 0,
                part1 = value.shiftRightUnsigned(28).toInt() >>> 0,
                part2 = value.shiftRightUnsigned(56).toInt() >>> 0;
            if (part2 == 0) {
                if (part1 == 0) {
                    if (part0 < 1 << 14)
                        return part0 < 1 << 7 ? 1 : 2;
                    else
                        return part0 < 1 << 21 ? 3 : 4;
                } else {
                    if (part1 < 1 << 14)
                        return part1 < 1 << 7 ? 5 : 6;
                    else
                        return part1 < 1 << 21 ? 7 : 8;
                }
            } else
                return part2 < 1 << 7 ? 9 : 10;
        };

        /**
         * Zigzag encodes a signed 64bit integer so that it can be effectively used with varint encoding.
         * @param {number|!Long} value Signed long
         * @returns {!Long} Unsigned zigzag encoded long
         * @expose
         */
        ByteBuffer.zigZagEncode64 = function(value) {
            if (typeof value === 'number')
                value = Long.fromNumber(value, false);
            else if (typeof value === 'string')
                value = Long.fromString(value, false);
            else if (value.unsigned !== false) value = value.toSigned();
            // ref: src/google/protobuf/wire_format_lite.h
            return value.shiftLeft(1).xor(value.shiftRight(63)).toUnsigned();
        };

        /**
         * Decodes a zigzag encoded signed 64bit integer.
         * @param {!Long|number} value Unsigned zigzag encoded long or JavaScript number
         * @returns {!Long} Signed long
         * @expose
         */
        ByteBuffer.zigZagDecode64 = function(value) {
            if (typeof value === 'number')
                value = Long.fromNumber(value, false);
            else if (typeof value === 'string')
                value = Long.fromString(value, false);
            else if (value.unsigned !== false) value = value.toSigned();
            // ref: src/google/protobuf/wire_format_lite.h
            return value.shiftRightUnsigned(1).xor(value.and(Long.ONE).toSigned().negate()).toSigned();
        };

        /**
         * Writes a 64bit base 128 variable-length integer.
         * @param {number|Long} value Value to write
         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
         *  written if omitted.
         * @returns {!ByteBuffer|number} `this` if offset is omitted, else the actual number of bytes written.
         * @expose
         */
        ByteBufferPrototype.writeVarint64 = function(value, offset) {
            var relative = typeof offset === 'undefined';
            if (relative) offset = this.offset;
            if (!this.noAssert) {
                if (typeof value === 'number')
                    value = Long.fromNumber(value);
                else if (typeof value === 'string')
                    value = Long.fromString(value);
                else if (!(value && value instanceof Long))
                    throw TypeError("Illegal value: "+value+" (not an integer or Long)");
                if (typeof offset !== 'number' || offset % 1 !== 0)
                    throw TypeError("Illegal offset: "+offset+" (not an integer)");
                offset >>>= 0;
                if (offset < 0 || offset + 0 > this.buffer.byteLength)
                    throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
            }
            if (typeof value === 'number')
                value = Long.fromNumber(value, false);
            else if (typeof value === 'string')
                value = Long.fromString(value, false);
            else if (value.unsigned !== false) value = value.toSigned();
            var size = ByteBuffer.calculateVarint64(value),
                part0 = value.toInt() >>> 0,
                part1 = value.shiftRightUnsigned(28).toInt() >>> 0,
                part2 = value.shiftRightUnsigned(56).toInt() >>> 0;
            offset += size;
            var capacity11 = this.buffer.byteLength;
            if (offset > capacity11)
                this.resize((capacity11 *= 2) > offset ? capacity11 : offset);
            offset -= size;
            switch (size) {
                case 10: this.view[offset+9] = (part2 >>>  7) & 0x01;
                case 9 : this.view[offset+8] = size !== 9 ? (part2       ) | 0x80 : (part2       ) & 0x7F;
                case 8 : this.view[offset+7] = size !== 8 ? (part1 >>> 21) | 0x80 : (part1 >>> 21) & 0x7F;
                case 7 : this.view[offset+6] = size !== 7 ? (part1 >>> 14) | 0x80 : (part1 >>> 14) & 0x7F;
                case 6 : this.view[offset+5] = size !== 6 ? (part1 >>>  7) | 0x80 : (part1 >>>  7) & 0x7F;
                case 5 : this.view[offset+4] = size !== 5 ? (part1       ) | 0x80 : (part1       ) & 0x7F;
                case 4 : this.view[offset+3] = size !== 4 ? (part0 >>> 21) | 0x80 : (part0 >>> 21) & 0x7F;
                case 3 : this.view[offset+2] = size !== 3 ? (part0 >>> 14) | 0x80 : (part0 >>> 14) & 0x7F;
                case 2 : this.view[offset+1] = size !== 2 ? (part0 >>>  7) | 0x80 : (part0 >>>  7) & 0x7F;
                case 1 : this.view[offset  ] = size !== 1 ? (part0       ) | 0x80 : (part0       ) & 0x7F;
            }
            if (relative) {
                this.offset += size;
                return this;
            } else {
                return size;
            }
        };

        /**
         * Writes a zig-zag encoded 64bit base 128 variable-length integer.
         * @param {number|Long} value Value to write
         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
         *  written if omitted.
         * @returns {!ByteBuffer|number} `this` if offset is omitted, else the actual number of bytes written.
         * @expose
         */
        ByteBufferPrototype.writeVarint64ZigZag = function(value, offset) {
            return this.writeVarint64(ByteBuffer.zigZagEncode64(value), offset);
        };

        /**
         * Reads a 64bit base 128 variable-length integer. Requires Long.js.
         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
         *  read if omitted.
         * @returns {!Long|!{value: Long, length: number}} The value read if offset is omitted, else the value read and
         *  the actual number of bytes read.
         * @throws {Error} If it's not a valid varint
         * @expose
         */
        ByteBufferPrototype.readVarint64 = function(offset) {
            var relative = typeof offset === 'undefined';
            if (relative) offset = this.offset;
            if (!this.noAssert) {
                if (typeof offset !== 'number' || offset % 1 !== 0)
                    throw TypeError("Illegal offset: "+offset+" (not an integer)");
                offset >>>= 0;
                if (offset < 0 || offset + 1 > this.buffer.byteLength)
                    throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
            }
            // ref: src/google/protobuf/io/coded_stream.cc
            var start = offset,
                part0 = 0,
                part1 = 0,
                part2 = 0,
                b  = 0;
            b = this.view[offset++]; part0  = (b & 0x7F)      ; if ( b & 0x80                                                   ) {
            b = this.view[offset++]; part0 |= (b & 0x7F) <<  7; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
            b = this.view[offset++]; part0 |= (b & 0x7F) << 14; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
            b = this.view[offset++]; part0 |= (b & 0x7F) << 21; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
            b = this.view[offset++]; part1  = (b & 0x7F)      ; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
            b = this.view[offset++]; part1 |= (b & 0x7F) <<  7; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
            b = this.view[offset++]; part1 |= (b & 0x7F) << 14; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
            b = this.view[offset++]; part1 |= (b & 0x7F) << 21; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
            b = this.view[offset++]; part2  = (b & 0x7F)      ; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
            b = this.view[offset++]; part2 |= (b & 0x7F) <<  7; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
            throw Error("Buffer overrun"); }}}}}}}}}}
            var value = Long.fromBits(part0 | (part1 << 28), (part1 >>> 4) | (part2) << 24, false);
            if (relative) {
                this.offset = offset;
                return value;
            } else {
                return {
                    'value': value,
                    'length': offset-start
                };
            }
        };

        /**
         * Reads a zig-zag encoded 64bit base 128 variable-length integer. Requires Long.js.
         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
         *  read if omitted.
         * @returns {!Long|!{value: Long, length: number}} The value read if offset is omitted, else the value read and
         *  the actual number of bytes read.
         * @throws {Error} If it's not a valid varint
         * @expose
         */
        ByteBufferPrototype.readVarint64ZigZag = function(offset) {
            var val = this.readVarint64(offset);
            if (val && val['value'] instanceof Long)
                val["value"] = ByteBuffer.zigZagDecode64(val["value"]);
            else
                val = ByteBuffer.zigZagDecode64(val);
            return val;
        };

    } // Long


    // types/strings/cstring

    /**
     * Writes a NULL-terminated UTF8 encoded string. For this to work the specified string must not contain any NULL
     *  characters itself.
     * @param {string} str String to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  contained in `str` + 1 if omitted.
     * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written
     * @expose
     */
    ByteBufferPrototype.writeCString = function(str, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        var i,
            k = str.length;
        if (!this.noAssert) {
            if (typeof str !== 'string')
                throw TypeError("Illegal str: Not a string");
            for (i=0; i<k; ++i) {
                if (str.charCodeAt(i) === 0)
                    throw RangeError("Illegal str: Contains NULL-characters");
            }
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        // UTF8 strings do not contain zero bytes in between except for the zero character, so:
        k = utfx.calculateUTF16asUTF8(stringSource(str))[1];
        offset += k+1;
        var capacity12 = this.buffer.byteLength;
        if (offset > capacity12)
            this.resize((capacity12 *= 2) > offset ? capacity12 : offset);
        offset -= k+1;
        utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
            this.view[offset++] = b;
        }.bind(this));
        this.view[offset++] = 0;
        if (relative) {
            this.offset = offset;
            return this;
        }
        return k;
    };

    /**
     * Reads a NULL-terminated UTF8 encoded string. For this to work the string read must not contain any NULL characters
     *  itself.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  read if omitted.
     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
     *  read and the actual number of bytes read.
     * @expose
     */
    ByteBufferPrototype.readCString = function(offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 1 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
        }
        var start = offset,
            temp;
        // UTF8 strings do not contain zero bytes in between except for the zero character itself, so:
        var sd, b = -1;
        utfx.decodeUTF8toUTF16(function() {
            if (b === 0) return null;
            if (offset >= this.limit)
                throw RangeError("Illegal range: Truncated data, "+offset+" < "+this.limit);
            b = this.view[offset++];
            return b === 0 ? null : b;
        }.bind(this), sd = stringDestination(), true);
        if (relative) {
            this.offset = offset;
            return sd();
        } else {
            return {
                "string": sd(),
                "length": offset - start
            };
        }
    };

    // types/strings/istring

    /**
     * Writes a length as uint32 prefixed UTF8 encoded string.
     * @param {string} str String to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {!ByteBuffer|number} `this` if `offset` is omitted, else the actual number of bytes written
     * @expose
     * @see ByteBuffer#writeVarint32
     */
    ByteBufferPrototype.writeIString = function(str, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof str !== 'string')
                throw TypeError("Illegal str: Not a string");
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        var start = offset,
            k;
        k = utfx.calculateUTF16asUTF8(stringSource(str), this.noAssert)[1];
        offset += 4+k;
        var capacity13 = this.buffer.byteLength;
        if (offset > capacity13)
            this.resize((capacity13 *= 2) > offset ? capacity13 : offset);
        offset -= 4+k;
        if (this.littleEndian) {
            this.view[offset+3] = (k >>> 24) & 0xFF;
            this.view[offset+2] = (k >>> 16) & 0xFF;
            this.view[offset+1] = (k >>>  8) & 0xFF;
            this.view[offset  ] =  k         & 0xFF;
        } else {
            this.view[offset  ] = (k >>> 24) & 0xFF;
            this.view[offset+1] = (k >>> 16) & 0xFF;
            this.view[offset+2] = (k >>>  8) & 0xFF;
            this.view[offset+3] =  k         & 0xFF;
        }
        offset += 4;
        utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
            this.view[offset++] = b;
        }.bind(this));
        if (offset !== start + 4 + k)
            throw RangeError("Illegal range: Truncated data, "+offset+" == "+(offset+4+k));
        if (relative) {
            this.offset = offset;
            return this;
        }
        return offset - start;
    };

    /**
     * Reads a length as uint32 prefixed UTF8 encoded string.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  read if omitted.
     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
     *  read and the actual number of bytes read.
     * @expose
     * @see ByteBuffer#readVarint32
     */
    ByteBufferPrototype.readIString = function(offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 4 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+4+") <= "+this.buffer.byteLength);
        }
        var start = offset;
        var len = this.readUint32(offset);
        var str = this.readUTF8String(len, ByteBuffer.METRICS_BYTES, offset += 4);
        offset += str['length'];
        if (relative) {
            this.offset = offset;
            return str['string'];
        } else {
            return {
                'string': str['string'],
                'length': offset - start
            };
        }
    };

    // types/strings/utf8string

    /**
     * Metrics representing number of UTF8 characters. Evaluates to `c`.
     * @type {string}
     * @const
     * @expose
     */
    ByteBuffer.METRICS_CHARS = 'c';

    /**
     * Metrics representing number of bytes. Evaluates to `b`.
     * @type {string}
     * @const
     * @expose
     */
    ByteBuffer.METRICS_BYTES = 'b';

    /**
     * Writes an UTF8 encoded string.
     * @param {string} str String to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} if omitted.
     * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written.
     * @expose
     */
    ByteBufferPrototype.writeUTF8String = function(str, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        var k;
        var start = offset;
        k = utfx.calculateUTF16asUTF8(stringSource(str))[1];
        offset += k;
        var capacity14 = this.buffer.byteLength;
        if (offset > capacity14)
            this.resize((capacity14 *= 2) > offset ? capacity14 : offset);
        offset -= k;
        utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
            this.view[offset++] = b;
        }.bind(this));
        if (relative) {
            this.offset = offset;
            return this;
        }
        return offset - start;
    };

    /**
     * Writes an UTF8 encoded string. This is an alias of {@link ByteBuffer#writeUTF8String}.
     * @function
     * @param {string} str String to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} if omitted.
     * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written.
     * @expose
     */
    ByteBufferPrototype.writeString = ByteBufferPrototype.writeUTF8String;

    /**
     * Calculates the number of UTF8 characters of a string. JavaScript itself uses UTF-16, so that a string's
     *  `length` property does not reflect its actual UTF8 size if it contains code points larger than 0xFFFF.
     * @param {string} str String to calculate
     * @returns {number} Number of UTF8 characters
     * @expose
     */
    ByteBuffer.calculateUTF8Chars = function(str) {
        return utfx.calculateUTF16asUTF8(stringSource(str))[0];
    };

    /**
     * Calculates the number of UTF8 bytes of a string.
     * @param {string} str String to calculate
     * @returns {number} Number of UTF8 bytes
     * @expose
     */
    ByteBuffer.calculateUTF8Bytes = function(str) {
        return utfx.calculateUTF16asUTF8(stringSource(str))[1];
    };

    /**
     * Calculates the number of UTF8 bytes of a string. This is an alias of {@link ByteBuffer.calculateUTF8Bytes}.
     * @function
     * @param {string} str String to calculate
     * @returns {number} Number of UTF8 bytes
     * @expose
     */
    ByteBuffer.calculateString = ByteBuffer.calculateUTF8Bytes;

    /**
     * Reads an UTF8 encoded string.
     * @param {number} length Number of characters or bytes to read.
     * @param {string=} metrics Metrics specifying what `length` is meant to count. Defaults to
     *  {@link ByteBuffer.METRICS_CHARS}.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  read if omitted.
     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
     *  read and the actual number of bytes read.
     * @expose
     */
    ByteBufferPrototype.readUTF8String = function(length, metrics, offset) {
        if (typeof metrics === 'number') {
            offset = metrics;
            metrics = undefined;
        }
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (typeof metrics === 'undefined') metrics = ByteBuffer.METRICS_CHARS;
        if (!this.noAssert) {
            if (typeof length !== 'number' || length % 1 !== 0)
                throw TypeError("Illegal length: "+length+" (not an integer)");
            length |= 0;
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        var i = 0,
            start = offset,
            sd;
        if (metrics === ByteBuffer.METRICS_CHARS) { // The same for node and the browser
            sd = stringDestination();
            utfx.decodeUTF8(function() {
                return i < length && offset < this.limit ? this.view[offset++] : null;
            }.bind(this), function(cp) {
                ++i; utfx.UTF8toUTF16(cp, sd);
            });
            if (i !== length)
                throw RangeError("Illegal range: Truncated data, "+i+" == "+length);
            if (relative) {
                this.offset = offset;
                return sd();
            } else {
                return {
                    "string": sd(),
                    "length": offset - start
                };
            }
        } else if (metrics === ByteBuffer.METRICS_BYTES) {
            if (!this.noAssert) {
                if (typeof offset !== 'number' || offset % 1 !== 0)
                    throw TypeError("Illegal offset: "+offset+" (not an integer)");
                offset >>>= 0;
                if (offset < 0 || offset + length > this.buffer.byteLength)
                    throw RangeError("Illegal offset: 0 <= "+offset+" (+"+length+") <= "+this.buffer.byteLength);
            }
            var k = offset + length;
            utfx.decodeUTF8toUTF16(function() {
                return offset < k ? this.view[offset++] : null;
            }.bind(this), sd = stringDestination(), this.noAssert);
            if (offset !== k)
                throw RangeError("Illegal range: Truncated data, "+offset+" == "+k);
            if (relative) {
                this.offset = offset;
                return sd();
            } else {
                return {
                    'string': sd(),
                    'length': offset - start
                };
            }
        } else
            throw TypeError("Unsupported metrics: "+metrics);
    };

    /**
     * Reads an UTF8 encoded string. This is an alias of {@link ByteBuffer#readUTF8String}.
     * @function
     * @param {number} length Number of characters or bytes to read
     * @param {number=} metrics Metrics specifying what `n` is meant to count. Defaults to
     *  {@link ByteBuffer.METRICS_CHARS}.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  read if omitted.
     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
     *  read and the actual number of bytes read.
     * @expose
     */
    ByteBufferPrototype.readString = ByteBufferPrototype.readUTF8String;

    // types/strings/vstring

    /**
     * Writes a length as varint32 prefixed UTF8 encoded string.
     * @param {string} str String to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {!ByteBuffer|number} `this` if `offset` is omitted, else the actual number of bytes written
     * @expose
     * @see ByteBuffer#writeVarint32
     */
    ByteBufferPrototype.writeVString = function(str, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof str !== 'string')
                throw TypeError("Illegal str: Not a string");
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        var start = offset,
            k, l;
        k = utfx.calculateUTF16asUTF8(stringSource(str), this.noAssert)[1];
        l = ByteBuffer.calculateVarint32(k);
        offset += l+k;
        var capacity15 = this.buffer.byteLength;
        if (offset > capacity15)
            this.resize((capacity15 *= 2) > offset ? capacity15 : offset);
        offset -= l+k;
        offset += this.writeVarint32(k, offset);
        utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
            this.view[offset++] = b;
        }.bind(this));
        if (offset !== start+k+l)
            throw RangeError("Illegal range: Truncated data, "+offset+" == "+(offset+k+l));
        if (relative) {
            this.offset = offset;
            return this;
        }
        return offset - start;
    };

    /**
     * Reads a length as varint32 prefixed UTF8 encoded string.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  read if omitted.
     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
     *  read and the actual number of bytes read.
     * @expose
     * @see ByteBuffer#readVarint32
     */
    ByteBufferPrototype.readVString = function(offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 1 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
        }
        var start = offset;
        var len = this.readVarint32(offset);
        var str = this.readUTF8String(len['value'], ByteBuffer.METRICS_BYTES, offset += len['length']);
        offset += str['length'];
        if (relative) {
            this.offset = offset;
            return str['string'];
        } else {
            return {
                'string': str['string'],
                'length': offset - start
            };
        }
    };


    /**
     * Appends some data to this ByteBuffer. This will overwrite any contents behind the specified offset up to the appended
     *  data's length.
     * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string} source Data to append. If `source` is a ByteBuffer, its offsets
     *  will be modified according to the performed read operation.
     * @param {(string|number)=} encoding Encoding if `data` is a string ("base64", "hex", "binary", defaults to "utf8")
     * @param {number=} offset Offset to append at. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     * @example A relative `<01 02>03.append(<04 05>)` will result in `<01 02 04 05>, 04 05|`
     * @example An absolute `<01 02>03.append(04 05>, 1)` will result in `<01 04>05, 04 05|`
     */
    ByteBufferPrototype.append = function(source, encoding, offset) {
        if (typeof encoding === 'number' || typeof encoding !== 'string') {
            offset = encoding;
            encoding = undefined;
        }
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        if (!(source instanceof ByteBuffer))
            source = ByteBuffer.wrap(source, encoding);
        var length = source.limit - source.offset;
        if (length <= 0) return this; // Nothing to append
        offset += length;
        var capacity16 = this.buffer.byteLength;
        if (offset > capacity16)
            this.resize((capacity16 *= 2) > offset ? capacity16 : offset);
        offset -= length;
        this.view.set(source.view.subarray(source.offset, source.limit), offset);
        source.offset += length;
        if (relative) this.offset += length;
        return this;
    };

    /**
     * Appends this ByteBuffer's contents to another ByteBuffer. This will overwrite any contents at and after the
        specified offset up to the length of this ByteBuffer's data.
     * @param {!ByteBuffer} target Target ByteBuffer
     * @param {number=} offset Offset to append to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  read if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     * @see ByteBuffer#append
     */
    ByteBufferPrototype.appendTo = function(target, offset) {
        target.append(this, offset);
        return this;
    };

    /**
     * Enables or disables assertions of argument types and offsets. Assertions are enabled by default but you can opt to
     *  disable them if your code already makes sure that everything is valid.
     * @param {boolean} assert `true` to enable assertions, otherwise `false`
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.assert = function(assert) {
        this.noAssert = !assert;
        return this;
    };

    /**
     * Gets the capacity of this ByteBuffer's backing buffer.
     * @returns {number} Capacity of the backing buffer
     * @expose
     */
    ByteBufferPrototype.capacity = function() {
        return this.buffer.byteLength;
    };
    /**
     * Clears this ByteBuffer's offsets by setting {@link ByteBuffer#offset} to `0` and {@link ByteBuffer#limit} to the
     *  backing buffer's capacity. Discards {@link ByteBuffer#markedOffset}.
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.clear = function() {
        this.offset = 0;
        this.limit = this.buffer.byteLength;
        this.markedOffset = -1;
        return this;
    };

    /**
     * Creates a cloned instance of this ByteBuffer, preset with this ByteBuffer's values for {@link ByteBuffer#offset},
     *  {@link ByteBuffer#markedOffset} and {@link ByteBuffer#limit}.
     * @param {boolean=} copy Whether to copy the backing buffer or to return another view on the same, defaults to `false`
     * @returns {!ByteBuffer} Cloned instance
     * @expose
     */
    ByteBufferPrototype.clone = function(copy) {
        var bb = new ByteBuffer(0, this.littleEndian, this.noAssert);
        if (copy) {
            bb.buffer = new ArrayBuffer(this.buffer.byteLength);
            bb.view = new Uint8Array(bb.buffer);
        } else {
            bb.buffer = this.buffer;
            bb.view = this.view;
        }
        bb.offset = this.offset;
        bb.markedOffset = this.markedOffset;
        bb.limit = this.limit;
        return bb;
    };

    /**
     * Compacts this ByteBuffer to be backed by a {@link ByteBuffer#buffer} of its contents' length. Contents are the bytes
     *  between {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. Will set `offset = 0` and `limit = capacity` and
     *  adapt {@link ByteBuffer#markedOffset} to the same relative position if set.
     * @param {number=} begin Offset to start at, defaults to {@link ByteBuffer#offset}
     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.compact = function(begin, end) {
        if (typeof begin === 'undefined') begin = this.offset;
        if (typeof end === 'undefined') end = this.limit;
        if (!this.noAssert) {
            if (typeof begin !== 'number' || begin % 1 !== 0)
                throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== 'number' || end % 1 !== 0)
                throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength)
                throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
        }
        if (begin === 0 && end === this.buffer.byteLength)
            return this; // Already compacted
        var len = end - begin;
        if (len === 0) {
            this.buffer = EMPTY_BUFFER;
            this.view = null;
            if (this.markedOffset >= 0) this.markedOffset -= begin;
            this.offset = 0;
            this.limit = 0;
            return this;
        }
        var buffer = new ArrayBuffer(len);
        var view = new Uint8Array(buffer);
        view.set(this.view.subarray(begin, end));
        this.buffer = buffer;
        this.view = view;
        if (this.markedOffset >= 0) this.markedOffset -= begin;
        this.offset = 0;
        this.limit = len;
        return this;
    };

    /**
     * Creates a copy of this ByteBuffer's contents. Contents are the bytes between {@link ByteBuffer#offset} and
     *  {@link ByteBuffer#limit}.
     * @param {number=} begin Begin offset, defaults to {@link ByteBuffer#offset}.
     * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.
     * @returns {!ByteBuffer} Copy
     * @expose
     */
    ByteBufferPrototype.copy = function(begin, end) {
        if (typeof begin === 'undefined') begin = this.offset;
        if (typeof end === 'undefined') end = this.limit;
        if (!this.noAssert) {
            if (typeof begin !== 'number' || begin % 1 !== 0)
                throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== 'number' || end % 1 !== 0)
                throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength)
                throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
        }
        if (begin === end)
            return new ByteBuffer(0, this.littleEndian, this.noAssert);
        var capacity = end - begin,
            bb = new ByteBuffer(capacity, this.littleEndian, this.noAssert);
        bb.offset = 0;
        bb.limit = capacity;
        if (bb.markedOffset >= 0) bb.markedOffset -= begin;
        this.copyTo(bb, 0, begin, end);
        return bb;
    };

    /**
     * Copies this ByteBuffer's contents to another ByteBuffer. Contents are the bytes between {@link ByteBuffer#offset} and
     *  {@link ByteBuffer#limit}.
     * @param {!ByteBuffer} target Target ByteBuffer
     * @param {number=} targetOffset Offset to copy to. Will use and increase the target's {@link ByteBuffer#offset}
     *  by the number of bytes copied if omitted.
     * @param {number=} sourceOffset Offset to start copying from. Will use and increase {@link ByteBuffer#offset} by the
     *  number of bytes copied if omitted.
     * @param {number=} sourceLimit Offset to end copying from, defaults to {@link ByteBuffer#limit}
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.copyTo = function(target, targetOffset, sourceOffset, sourceLimit) {
        var relative,
            targetRelative;
        if (!this.noAssert) {
            if (!ByteBuffer.isByteBuffer(target))
                throw TypeError("Illegal target: Not a ByteBuffer");
        }
        targetOffset = (targetRelative = typeof targetOffset === 'undefined') ? target.offset : targetOffset | 0;
        sourceOffset = (relative = typeof sourceOffset === 'undefined') ? this.offset : sourceOffset | 0;
        sourceLimit = typeof sourceLimit === 'undefined' ? this.limit : sourceLimit | 0;

        if (targetOffset < 0 || targetOffset > target.buffer.byteLength)
            throw RangeError("Illegal target range: 0 <= "+targetOffset+" <= "+target.buffer.byteLength);
        if (sourceOffset < 0 || sourceLimit > this.buffer.byteLength)
            throw RangeError("Illegal source range: 0 <= "+sourceOffset+" <= "+this.buffer.byteLength);

        var len = sourceLimit - sourceOffset;
        if (len === 0)
            return target; // Nothing to copy

        target.ensureCapacity(targetOffset + len);

        target.view.set(this.view.subarray(sourceOffset, sourceLimit), targetOffset);

        if (relative) this.offset += len;
        if (targetRelative) target.offset += len;

        return this;
    };

    /**
     * Makes sure that this ByteBuffer is backed by a {@link ByteBuffer#buffer} of at least the specified capacity. If the
     *  current capacity is exceeded, it will be doubled. If double the current capacity is less than the required capacity,
     *  the required capacity will be used instead.
     * @param {number} capacity Required capacity
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.ensureCapacity = function(capacity) {
        var current = this.buffer.byteLength;
        if (current < capacity)
            return this.resize((current *= 2) > capacity ? current : capacity);
        return this;
    };

    /**
     * Overwrites this ByteBuffer's contents with the specified value. Contents are the bytes between
     *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}.
     * @param {number|string} value Byte value to fill with. If given as a string, the first character is used.
     * @param {number=} begin Begin offset. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted. defaults to {@link ByteBuffer#offset}.
     * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.
     * @returns {!ByteBuffer} this
     * @expose
     * @example `someByteBuffer.clear().fill(0)` fills the entire backing buffer with zeroes
     */
    ByteBufferPrototype.fill = function(value, begin, end) {
        var relative = typeof begin === 'undefined';
        if (relative) begin = this.offset;
        if (typeof value === 'string' && value.length > 0)
            value = value.charCodeAt(0);
        if (typeof begin === 'undefined') begin = this.offset;
        if (typeof end === 'undefined') end = this.limit;
        if (!this.noAssert) {
            if (typeof value !== 'number' || value % 1 !== 0)
                throw TypeError("Illegal value: "+value+" (not an integer)");
            value |= 0;
            if (typeof begin !== 'number' || begin % 1 !== 0)
                throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== 'number' || end % 1 !== 0)
                throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength)
                throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
        }
        if (begin >= end)
            return this; // Nothing to fill
        while (begin < end) this.view[begin++] = value;
        if (relative) this.offset = begin;
        return this;
    };

    /**
     * Makes this ByteBuffer ready for a new sequence of write or relative read operations. Sets `limit = offset` and
     *  `offset = 0`. Make sure always to flip a ByteBuffer when all relative read or write operations are complete.
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.flip = function() {
        this.limit = this.offset;
        this.offset = 0;
        return this;
    };
    /**
     * Marks an offset on this ByteBuffer to be used later.
     * @param {number=} offset Offset to mark. Defaults to {@link ByteBuffer#offset}.
     * @returns {!ByteBuffer} this
     * @throws {TypeError} If `offset` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @see ByteBuffer#reset
     * @expose
     */
    ByteBufferPrototype.mark = function(offset) {
        offset = typeof offset === 'undefined' ? this.offset : offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        this.markedOffset = offset;
        return this;
    };
    /**
     * Sets the byte order.
     * @param {boolean} littleEndian `true` for little endian byte order, `false` for big endian
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.order = function(littleEndian) {
        if (!this.noAssert) {
            if (typeof littleEndian !== 'boolean')
                throw TypeError("Illegal littleEndian: Not a boolean");
        }
        this.littleEndian = !!littleEndian;
        return this;
    };

    /**
     * Switches (to) little endian byte order.
     * @param {boolean=} littleEndian Defaults to `true`, otherwise uses big endian
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.LE = function(littleEndian) {
        this.littleEndian = typeof littleEndian !== 'undefined' ? !!littleEndian : true;
        return this;
    };

    /**
     * Switches (to) big endian byte order.
     * @param {boolean=} bigEndian Defaults to `true`, otherwise uses little endian
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.BE = function(bigEndian) {
        this.littleEndian = typeof bigEndian !== 'undefined' ? !bigEndian : false;
        return this;
    };
    /**
     * Prepends some data to this ByteBuffer. This will overwrite any contents before the specified offset up to the
     *  prepended data's length. If there is not enough space available before the specified `offset`, the backing buffer
     *  will be resized and its contents moved accordingly.
     * @param {!ByteBuffer|string|!ArrayBuffer} source Data to prepend. If `source` is a ByteBuffer, its offset will be
     *  modified according to the performed read operation.
     * @param {(string|number)=} encoding Encoding if `data` is a string ("base64", "hex", "binary", defaults to "utf8")
     * @param {number=} offset Offset to prepend at. Will use and decrease {@link ByteBuffer#offset} by the number of bytes
     *  prepended if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     * @example A relative `00<01 02 03>.prepend(<04 05>)` results in `<04 05 01 02 03>, 04 05|`
     * @example An absolute `00<01 02 03>.prepend(<04 05>, 2)` results in `04<05 02 03>, 04 05|`
     */
    ByteBufferPrototype.prepend = function(source, encoding, offset) {
        if (typeof encoding === 'number' || typeof encoding !== 'string') {
            offset = encoding;
            encoding = undefined;
        }
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        if (!(source instanceof ByteBuffer))
            source = ByteBuffer.wrap(source, encoding);
        var len = source.limit - source.offset;
        if (len <= 0) return this; // Nothing to prepend
        var diff = len - offset;
        if (diff > 0) { // Not enough space before offset, so resize + move
            var buffer = new ArrayBuffer(this.buffer.byteLength + diff);
            var view = new Uint8Array(buffer);
            view.set(this.view.subarray(offset, this.buffer.byteLength), len);
            this.buffer = buffer;
            this.view = view;
            this.offset += diff;
            if (this.markedOffset >= 0) this.markedOffset += diff;
            this.limit += diff;
            offset += diff;
        } else {
            var arrayView = new Uint8Array(this.buffer);
        }
        this.view.set(source.view.subarray(source.offset, source.limit), offset - len);

        source.offset = source.limit;
        if (relative)
            this.offset -= len;
        return this;
    };

    /**
     * Prepends this ByteBuffer to another ByteBuffer. This will overwrite any contents before the specified offset up to the
     *  prepended data's length. If there is not enough space available before the specified `offset`, the backing buffer
     *  will be resized and its contents moved accordingly.
     * @param {!ByteBuffer} target Target ByteBuffer
     * @param {number=} offset Offset to prepend at. Will use and decrease {@link ByteBuffer#offset} by the number of bytes
     *  prepended if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     * @see ByteBuffer#prepend
     */
    ByteBufferPrototype.prependTo = function(target, offset) {
        target.prepend(this, offset);
        return this;
    };
    /**
     * Prints debug information about this ByteBuffer's contents.
     * @param {function(string)=} out Output function to call, defaults to console.log
     * @expose
     */
    ByteBufferPrototype.printDebug = function(out) {
        if (typeof out !== 'function') out = console.log.bind(console);
        out(
            this.toString()+"\n"+
            "-------------------------------------------------------------------\n"+
            this.toDebug(/* columns */ true)
        );
    };

    /**
     * Gets the number of remaining readable bytes. Contents are the bytes between {@link ByteBuffer#offset} and
     *  {@link ByteBuffer#limit}, so this returns `limit - offset`.
     * @returns {number} Remaining readable bytes. May be negative if `offset > limit`.
     * @expose
     */
    ByteBufferPrototype.remaining = function() {
        return this.limit - this.offset;
    };
    /**
     * Resets this ByteBuffer's {@link ByteBuffer#offset}. If an offset has been marked through {@link ByteBuffer#mark}
     *  before, `offset` will be set to {@link ByteBuffer#markedOffset}, which will then be discarded. If no offset has been
     *  marked, sets `offset = 0`.
     * @returns {!ByteBuffer} this
     * @see ByteBuffer#mark
     * @expose
     */
    ByteBufferPrototype.reset = function() {
        if (this.markedOffset >= 0) {
            this.offset = this.markedOffset;
            this.markedOffset = -1;
        } else {
            this.offset = 0;
        }
        return this;
    };
    /**
     * Resizes this ByteBuffer to be backed by a buffer of at least the given capacity. Will do nothing if already that
     *  large or larger.
     * @param {number} capacity Capacity required
     * @returns {!ByteBuffer} this
     * @throws {TypeError} If `capacity` is not a number
     * @throws {RangeError} If `capacity < 0`
     * @expose
     */
    ByteBufferPrototype.resize = function(capacity) {
        if (!this.noAssert) {
            if (typeof capacity !== 'number' || capacity % 1 !== 0)
                throw TypeError("Illegal capacity: "+capacity+" (not an integer)");
            capacity |= 0;
            if (capacity < 0)
                throw RangeError("Illegal capacity: 0 <= "+capacity);
        }
        if (this.buffer.byteLength < capacity) {
            var buffer = new ArrayBuffer(capacity);
            var view = new Uint8Array(buffer);
            view.set(this.view);
            this.buffer = buffer;
            this.view = view;
        }
        return this;
    };
    /**
     * Reverses this ByteBuffer's contents.
     * @param {number=} begin Offset to start at, defaults to {@link ByteBuffer#offset}
     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.reverse = function(begin, end) {
        if (typeof begin === 'undefined') begin = this.offset;
        if (typeof end === 'undefined') end = this.limit;
        if (!this.noAssert) {
            if (typeof begin !== 'number' || begin % 1 !== 0)
                throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== 'number' || end % 1 !== 0)
                throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength)
                throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
        }
        if (begin === end)
            return this; // Nothing to reverse
        Array.prototype.reverse.call(this.view.subarray(begin, end));
        return this;
    };
    /**
     * Skips the next `length` bytes. This will just advance
     * @param {number} length Number of bytes to skip. May also be negative to move the offset back.
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.skip = function(length) {
        if (!this.noAssert) {
            if (typeof length !== 'number' || length % 1 !== 0)
                throw TypeError("Illegal length: "+length+" (not an integer)");
            length |= 0;
        }
        var offset = this.offset + length;
        if (!this.noAssert) {
            if (offset < 0 || offset > this.buffer.byteLength)
                throw RangeError("Illegal length: 0 <= "+this.offset+" + "+length+" <= "+this.buffer.byteLength);
        }
        this.offset = offset;
        return this;
    };

    /**
     * Slices this ByteBuffer by creating a cloned instance with `offset = begin` and `limit = end`.
     * @param {number=} begin Begin offset, defaults to {@link ByteBuffer#offset}.
     * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.
     * @returns {!ByteBuffer} Clone of this ByteBuffer with slicing applied, backed by the same {@link ByteBuffer#buffer}
     * @expose
     */
    ByteBufferPrototype.slice = function(begin, end) {
        if (typeof begin === 'undefined') begin = this.offset;
        if (typeof end === 'undefined') end = this.limit;
        if (!this.noAssert) {
            if (typeof begin !== 'number' || begin % 1 !== 0)
                throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== 'number' || end % 1 !== 0)
                throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength)
                throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
        }
        var bb = this.clone();
        bb.offset = begin;
        bb.limit = end;
        return bb;
    };
    /**
     * Returns a copy of the backing buffer that contains this ByteBuffer's contents. Contents are the bytes between
     *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}.
     * @param {boolean=} forceCopy If `true` returns a copy, otherwise returns a view referencing the same memory if
     *  possible. Defaults to `false`
     * @returns {!ArrayBuffer} Contents as an ArrayBuffer
     * @expose
     */
    ByteBufferPrototype.toBuffer = function(forceCopy) {
        var offset = this.offset,
            limit = this.limit;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: Not an integer");
            offset >>>= 0;
            if (typeof limit !== 'number' || limit % 1 !== 0)
                throw TypeError("Illegal limit: Not an integer");
            limit >>>= 0;
            if (offset < 0 || offset > limit || limit > this.buffer.byteLength)
                throw RangeError("Illegal range: 0 <= "+offset+" <= "+limit+" <= "+this.buffer.byteLength);
        }
        // NOTE: It's not possible to have another ArrayBuffer reference the same memory as the backing buffer. This is
        // possible with Uint8Array#subarray only, but we have to return an ArrayBuffer by contract. So:
        if (!forceCopy && offset === 0 && limit === this.buffer.byteLength)
            return this.buffer;
        if (offset === limit)
            return EMPTY_BUFFER;
        var buffer = new ArrayBuffer(limit - offset);
        new Uint8Array(buffer).set(new Uint8Array(this.buffer).subarray(offset, limit), 0);
        return buffer;
    };

    /**
     * Returns a raw buffer compacted to contain this ByteBuffer's contents. Contents are the bytes between
     *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. This is an alias of {@link ByteBuffer#toBuffer}.
     * @function
     * @param {boolean=} forceCopy If `true` returns a copy, otherwise returns a view referencing the same memory.
     *  Defaults to `false`
     * @returns {!ArrayBuffer} Contents as an ArrayBuffer
     * @expose
     */
    ByteBufferPrototype.toArrayBuffer = ByteBufferPrototype.toBuffer;

    /**
     * Converts the ByteBuffer's contents to a string.
     * @param {string=} encoding Output encoding. Returns an informative string representation if omitted but also allows
     *  direct conversion to "utf8", "hex", "base64" and "binary" encoding. "debug" returns a hex representation with
     *  highlighted offsets.
     * @param {number=} begin Offset to begin at, defaults to {@link ByteBuffer#offset}
     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}
     * @returns {string} String representation
     * @throws {Error} If `encoding` is invalid
     * @expose
     */
    ByteBufferPrototype.toString = function(encoding, begin, end) {
        if (typeof encoding === 'undefined')
            return "ByteBufferAB(offset="+this.offset+",markedOffset="+this.markedOffset+",limit="+this.limit+",capacity="+this.capacity()+")";
        if (typeof encoding === 'number')
            encoding = "utf8",
            begin = encoding,
            end = begin;
        switch (encoding) {
            case "utf8":
                return this.toUTF8(begin, end);
            case "base64":
                return this.toBase64(begin, end);
            case "hex":
                return this.toHex(begin, end);
            case "binary":
                return this.toBinary(begin, end);
            case "debug":
                return this.toDebug();
            case "columns":
                return this.toColumns();
            default:
                throw Error("Unsupported encoding: "+encoding);
        }
    };

    // lxiv-embeddable

    /**
     * lxiv-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>
     * Released under the Apache License, Version 2.0
     * see: https://github.com/dcodeIO/lxiv for details
     */
    var lxiv = function() {
        "use strict";

        /**
         * lxiv namespace.
         * @type {!Object.<string,*>}
         * @exports lxiv
         */
        var lxiv = {};

        /**
         * Character codes for output.
         * @type {!Array.<number>}
         * @inner
         */
        var aout = [
            65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
            81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102,
            103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
            119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47
        ];

        /**
         * Character codes for input.
         * @type {!Array.<number>}
         * @inner
         */
        var ain = [];
        for (var i=0, k=aout.length; i<k; ++i)
            ain[aout[i]] = i;

        /**
         * Encodes bytes to base64 char codes.
         * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if
         *  there are no more bytes left.
         * @param {!function(number)} dst Characters destination as a function successively called with each encoded char
         *  code.
         */
        lxiv.encode = function(src, dst) {
            var b, t;
            while ((b = src()) !== null) {
                dst(aout[(b>>2)&0x3f]);
                t = (b&0x3)<<4;
                if ((b = src()) !== null) {
                    t |= (b>>4)&0xf;
                    dst(aout[(t|((b>>4)&0xf))&0x3f]);
                    t = (b&0xf)<<2;
                    if ((b = src()) !== null)
                        dst(aout[(t|((b>>6)&0x3))&0x3f]),
                        dst(aout[b&0x3f]);
                    else
                        dst(aout[t&0x3f]),
                        dst(61);
                } else
                    dst(aout[t&0x3f]),
                    dst(61),
                    dst(61);
            }
        };

        /**
         * Decodes base64 char codes to bytes.
         * @param {!function():number|null} src Characters source as a function returning the next char code respectively
         *  `null` if there are no more characters left.
         * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.
         * @throws {Error} If a character code is invalid
         */
        lxiv.decode = function(src, dst) {
            var c, t1, t2;
            function fail(c) {
                throw Error("Illegal character code: "+c);
            }
            while ((c = src()) !== null) {
                t1 = ain[c];
                if (typeof t1 === 'undefined') fail(c);
                if ((c = src()) !== null) {
                    t2 = ain[c];
                    if (typeof t2 === 'undefined') fail(c);
                    dst((t1<<2)>>>0|(t2&0x30)>>4);
                    if ((c = src()) !== null) {
                        t1 = ain[c];
                        if (typeof t1 === 'undefined')
                            if (c === 61) break; else fail(c);
                        dst(((t2&0xf)<<4)>>>0|(t1&0x3c)>>2);
                        if ((c = src()) !== null) {
                            t2 = ain[c];
                            if (typeof t2 === 'undefined')
                                if (c === 61) break; else fail(c);
                            dst(((t1&0x3)<<6)>>>0|t2);
                        }
                    }
                }
            }
        };

        /**
         * Tests if a string is valid base64.
         * @param {string} str String to test
         * @returns {boolean} `true` if valid, otherwise `false`
         */
        lxiv.test = function(str) {
            return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(str);
        };

        return lxiv;
    }();

    // encodings/base64

    /**
     * Encodes this ByteBuffer's contents to a base64 encoded string.
     * @param {number=} begin Offset to begin at, defaults to {@link ByteBuffer#offset}.
     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}.
     * @returns {string} Base64 encoded string
     * @throws {RangeError} If `begin` or `end` is out of bounds
     * @expose
     */
    ByteBufferPrototype.toBase64 = function(begin, end) {
        if (typeof begin === 'undefined')
            begin = this.offset;
        if (typeof end === 'undefined')
            end = this.limit;
        begin = begin | 0; end = end | 0;
        if (begin < 0 || end > this.capacity || begin > end)
            throw RangeError("begin, end");
        var sd; lxiv.encode(function() {
            return begin < end ? this.view[begin++] : null;
        }.bind(this), sd = stringDestination());
        return sd();
    };

    /**
     * Decodes a base64 encoded string to a ByteBuffer.
     * @param {string} str String to decode
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @returns {!ByteBuffer} ByteBuffer
     * @expose
     */
    ByteBuffer.fromBase64 = function(str, littleEndian) {
        if (typeof str !== 'string')
            throw TypeError("str");
        var bb = new ByteBuffer(str.length/4*3, littleEndian),
            i = 0;
        lxiv.decode(stringSource(str), function(b) {
            bb.view[i++] = b;
        });
        bb.limit = i;
        return bb;
    };

    /**
     * Encodes a binary string to base64 like `window.btoa` does.
     * @param {string} str Binary string
     * @returns {string} Base64 encoded string
     * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.btoa
     * @expose
     */
    ByteBuffer.btoa = function(str) {
        return ByteBuffer.fromBinary(str).toBase64();
    };

    /**
     * Decodes a base64 encoded string to binary like `window.atob` does.
     * @param {string} b64 Base64 encoded string
     * @returns {string} Binary string
     * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.atob
     * @expose
     */
    ByteBuffer.atob = function(b64) {
        return ByteBuffer.fromBase64(b64).toBinary();
    };

    // encodings/binary

    /**
     * Encodes this ByteBuffer to a binary encoded string, that is using only characters 0x00-0xFF as bytes.
     * @param {number=} begin Offset to begin at. Defaults to {@link ByteBuffer#offset}.
     * @param {number=} end Offset to end at. Defaults to {@link ByteBuffer#limit}.
     * @returns {string} Binary encoded string
     * @throws {RangeError} If `offset > limit`
     * @expose
     */
    ByteBufferPrototype.toBinary = function(begin, end) {
        if (typeof begin === 'undefined')
            begin = this.offset;
        if (typeof end === 'undefined')
            end = this.limit;
        begin |= 0; end |= 0;
        if (begin < 0 || end > this.capacity() || begin > end)
            throw RangeError("begin, end");
        if (begin === end)
            return "";
        var chars = [],
            parts = [];
        while (begin < end) {
            chars.push(this.view[begin++]);
            if (chars.length >= 1024)
                parts.push(String.fromCharCode.apply(String, chars)),
                chars = [];
        }
        return parts.join('') + String.fromCharCode.apply(String, chars);
    };

    /**
     * Decodes a binary encoded string, that is using only characters 0x00-0xFF as bytes, to a ByteBuffer.
     * @param {string} str String to decode
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @returns {!ByteBuffer} ByteBuffer
     * @expose
     */
    ByteBuffer.fromBinary = function(str, littleEndian) {
        if (typeof str !== 'string')
            throw TypeError("str");
        var i = 0,
            k = str.length,
            charCode,
            bb = new ByteBuffer(k, littleEndian);
        while (i<k) {
            charCode = str.charCodeAt(i);
            if (charCode > 0xff)
                throw RangeError("illegal char code: "+charCode);
            bb.view[i++] = charCode;
        }
        bb.limit = k;
        return bb;
    };

    // encodings/debug

    /**
     * Encodes this ByteBuffer to a hex encoded string with marked offsets. Offset symbols are:
     * * `<` : offset,
     * * `'` : markedOffset,
     * * `>` : limit,
     * * `|` : offset and limit,
     * * `[` : offset and markedOffset,
     * * `]` : markedOffset and limit,
     * * `!` : offset, markedOffset and limit
     * @param {boolean=} columns If `true` returns two columns hex + ascii, defaults to `false`
     * @returns {string|!Array.<string>} Debug string or array of lines if `asArray = true`
     * @expose
     * @example `>00'01 02<03` contains four bytes with `limit=0, markedOffset=1, offset=3`
     * @example `00[01 02 03>` contains four bytes with `offset=markedOffset=1, limit=4`
     * @example `00|01 02 03` contains four bytes with `offset=limit=1, markedOffset=-1`
     * @example `|` contains zero bytes with `offset=limit=0, markedOffset=-1`
     */
    ByteBufferPrototype.toDebug = function(columns) {
        var i = -1,
            k = this.buffer.byteLength,
            b,
            hex = "",
            asc = "",
            out = "";
        while (i<k) {
            if (i !== -1) {
                b = this.view[i];
                if (b < 0x10) hex += "0"+b.toString(16).toUpperCase();
                else hex += b.toString(16).toUpperCase();
                if (columns)
                    asc += b > 32 && b < 127 ? String.fromCharCode(b) : '.';
            }
            ++i;
            if (columns) {
                if (i > 0 && i % 16 === 0 && i !== k) {
                    while (hex.length < 3*16+3) hex += " ";
                    out += hex+asc+"\n";
                    hex = asc = "";
                }
            }
            if (i === this.offset && i === this.limit)
                hex += i === this.markedOffset ? "!" : "|";
            else if (i === this.offset)
                hex += i === this.markedOffset ? "[" : "<";
            else if (i === this.limit)
                hex += i === this.markedOffset ? "]" : ">";
            else
                hex += i === this.markedOffset ? "'" : (columns || (i !== 0 && i !== k) ? " " : "");
        }
        if (columns && hex !== " ") {
            while (hex.length < 3*16+3)
                hex += " ";
            out += hex + asc + "\n";
        }
        return columns ? out : hex;
    };

    /**
     * Decodes a hex encoded string with marked offsets to a ByteBuffer.
     * @param {string} str Debug string to decode (not be generated with `columns = true`)
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @returns {!ByteBuffer} ByteBuffer
     * @expose
     * @see ByteBuffer#toDebug
     */
    ByteBuffer.fromDebug = function(str, littleEndian, noAssert) {
        var k = str.length,
            bb = new ByteBuffer(((k+1)/3)|0, littleEndian, noAssert);
        var i = 0, j = 0, ch, b,
            rs = false, // Require symbol next
            ho = false, hm = false, hl = false, // Already has offset (ho), markedOffset (hm), limit (hl)?
            fail = false;
        while (i<k) {
            switch (ch = str.charAt(i++)) {
                case '!':
                    if (!noAssert) {
                        if (ho || hm || hl) {
                            fail = true;
                            break;
                        }
                        ho = hm = hl = true;
                    }
                    bb.offset = bb.markedOffset = bb.limit = j;
                    rs = false;
                    break;
                case '|':
                    if (!noAssert) {
                        if (ho || hl) {
                            fail = true;
                            break;
                        }
                        ho = hl = true;
                    }
                    bb.offset = bb.limit = j;
                    rs = false;
                    break;
                case '[':
                    if (!noAssert) {
                        if (ho || hm) {
                            fail = true;
                            break;
                        }
                        ho = hm = true;
                    }
                    bb.offset = bb.markedOffset = j;
                    rs = false;
                    break;
                case '<':
                    if (!noAssert) {
                        if (ho) {
                            fail = true;
                            break;
                        }
                        ho = true;
                    }
                    bb.offset = j;
                    rs = false;
                    break;
                case ']':
                    if (!noAssert) {
                        if (hl || hm) {
                            fail = true;
                            break;
                        }
                        hl = hm = true;
                    }
                    bb.limit = bb.markedOffset = j;
                    rs = false;
                    break;
                case '>':
                    if (!noAssert) {
                        if (hl) {
                            fail = true;
                            break;
                        }
                        hl = true;
                    }
                    bb.limit = j;
                    rs = false;
                    break;
                case "'":
                    if (!noAssert) {
                        if (hm) {
                            fail = true;
                            break;
                        }
                        hm = true;
                    }
                    bb.markedOffset = j;
                    rs = false;
                    break;
                case ' ':
                    rs = false;
                    break;
                default:
                    if (!noAssert) {
                        if (rs) {
                            fail = true;
                            break;
                        }
                    }
                    b = parseInt(ch+str.charAt(i++), 16);
                    if (!noAssert) {
                        if (isNaN(b) || b < 0 || b > 255)
                            throw TypeError("Illegal str: Not a debug encoded string");
                    }
                    bb.view[j++] = b;
                    rs = true;
            }
            if (fail)
                throw TypeError("Illegal str: Invalid symbol at "+i);
        }
        if (!noAssert) {
            if (!ho || !hl)
                throw TypeError("Illegal str: Missing offset or limit");
            if (j<bb.buffer.byteLength)
                throw TypeError("Illegal str: Not a debug encoded string (is it hex?) "+j+" < "+k);
        }
        return bb;
    };

    // encodings/hex

    /**
     * Encodes this ByteBuffer's contents to a hex encoded string.
     * @param {number=} begin Offset to begin at. Defaults to {@link ByteBuffer#offset}.
     * @param {number=} end Offset to end at. Defaults to {@link ByteBuffer#limit}.
     * @returns {string} Hex encoded string
     * @expose
     */
    ByteBufferPrototype.toHex = function(begin, end) {
        begin = typeof begin === 'undefined' ? this.offset : begin;
        end = typeof end === 'undefined' ? this.limit : end;
        if (!this.noAssert) {
            if (typeof begin !== 'number' || begin % 1 !== 0)
                throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== 'number' || end % 1 !== 0)
                throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength)
                throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
        }
        var out = new Array(end - begin),
            b;
        while (begin < end) {
            b = this.view[begin++];
            if (b < 0x10)
                out.push("0", b.toString(16));
            else out.push(b.toString(16));
        }
        return out.join('');
    };

    /**
     * Decodes a hex encoded string to a ByteBuffer.
     * @param {string} str String to decode
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @returns {!ByteBuffer} ByteBuffer
     * @expose
     */
    ByteBuffer.fromHex = function(str, littleEndian, noAssert) {
        if (!noAssert) {
            if (typeof str !== 'string')
                throw TypeError("Illegal str: Not a string");
            if (str.length % 2 !== 0)
                throw TypeError("Illegal str: Length not a multiple of 2");
        }
        var k = str.length,
            bb = new ByteBuffer((k / 2) | 0, littleEndian),
            b;
        for (var i=0, j=0; i<k; i+=2) {
            b = parseInt(str.substring(i, i+2), 16);
            if (!noAssert)
                if (!isFinite(b) || b < 0 || b > 255)
                    throw TypeError("Illegal str: Contains non-hex characters");
            bb.view[j++] = b;
        }
        bb.limit = j;
        return bb;
    };

    // utfx-embeddable

    /**
     * utfx-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>
     * Released under the Apache License, Version 2.0
     * see: https://github.com/dcodeIO/utfx for details
     */
    var utfx = function() {
        "use strict";

        /**
         * utfx namespace.
         * @inner
         * @type {!Object.<string,*>}
         */
        var utfx = {};

        /**
         * Maximum valid code point.
         * @type {number}
         * @const
         */
        utfx.MAX_CODEPOINT = 0x10FFFF;

        /**
         * Encodes UTF8 code points to UTF8 bytes.
         * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point
         *  respectively `null` if there are no more code points left or a single numeric code point.
         * @param {!function(number)} dst Bytes destination as a function successively called with the next byte
         */
        utfx.encodeUTF8 = function(src, dst) {
            var cp = null;
            if (typeof src === 'number')
                cp = src,
                src = function() { return null; };
            while (cp !== null || (cp = src()) !== null) {
                if (cp < 0x80)
                    dst(cp&0x7F);
                else if (cp < 0x800)
                    dst(((cp>>6)&0x1F)|0xC0),
                    dst((cp&0x3F)|0x80);
                else if (cp < 0x10000)
                    dst(((cp>>12)&0x0F)|0xE0),
                    dst(((cp>>6)&0x3F)|0x80),
                    dst((cp&0x3F)|0x80);
                else
                    dst(((cp>>18)&0x07)|0xF0),
                    dst(((cp>>12)&0x3F)|0x80),
                    dst(((cp>>6)&0x3F)|0x80),
                    dst((cp&0x3F)|0x80);
                cp = null;
            }
        };

        /**
         * Decodes UTF8 bytes to UTF8 code points.
         * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there
         *  are no more bytes left.
         * @param {!function(number)} dst Code points destination as a function successively called with each decoded code point.
         * @throws {RangeError} If a starting byte is invalid in UTF8
         * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the
         *  remaining bytes.
         */
        utfx.decodeUTF8 = function(src, dst) {
            var a, b, c, d, fail = function(b) {
                b = b.slice(0, b.indexOf(null));
                var err = Error(b.toString());
                err.name = "TruncatedError";
                err['bytes'] = b;
                throw err;
            };
            while ((a = src()) !== null) {
                if ((a&0x80) === 0)
                    dst(a);
                else if ((a&0xE0) === 0xC0)
                    ((b = src()) === null) && fail([a, b]),
                    dst(((a&0x1F)<<6) | (b&0x3F));
                else if ((a&0xF0) === 0xE0)
                    ((b=src()) === null || (c=src()) === null) && fail([a, b, c]),
                    dst(((a&0x0F)<<12) | ((b&0x3F)<<6) | (c&0x3F));
                else if ((a&0xF8) === 0xF0)
                    ((b=src()) === null || (c=src()) === null || (d=src()) === null) && fail([a, b, c ,d]),
                    dst(((a&0x07)<<18) | ((b&0x3F)<<12) | ((c&0x3F)<<6) | (d&0x3F));
                else throw RangeError("Illegal starting byte: "+a);
            }
        };

        /**
         * Converts UTF16 characters to UTF8 code points.
         * @param {!function():number|null} src Characters source as a function returning the next char code respectively
         *  `null` if there are no more characters left.
         * @param {!function(number)} dst Code points destination as a function successively called with each converted code
         *  point.
         */
        utfx.UTF16toUTF8 = function(src, dst) {
            var c1, c2 = null;
            while (true) {
                if ((c1 = c2 !== null ? c2 : src()) === null)
                    break;
                if (c1 >= 0xD800 && c1 <= 0xDFFF) {
                    if ((c2 = src()) !== null) {
                        if (c2 >= 0xDC00 && c2 <= 0xDFFF) {
                            dst((c1-0xD800)*0x400+c2-0xDC00+0x10000);
                            c2 = null; continue;
                        }
                    }
                }
                dst(c1);
            }
            if (c2 !== null) dst(c2);
        };

        /**
         * Converts UTF8 code points to UTF16 characters.
         * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point
         *  respectively `null` if there are no more code points left or a single numeric code point.
         * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.
         * @throws {RangeError} If a code point is out of range
         */
        utfx.UTF8toUTF16 = function(src, dst) {
            var cp = null;
            if (typeof src === 'number')
                cp = src, src = function() { return null; };
            while (cp !== null || (cp = src()) !== null) {
                if (cp <= 0xFFFF)
                    dst(cp);
                else
                    cp -= 0x10000,
                    dst((cp>>10)+0xD800),
                    dst((cp%0x400)+0xDC00);
                cp = null;
            }
        };

        /**
         * Converts and encodes UTF16 characters to UTF8 bytes.
         * @param {!function():number|null} src Characters source as a function returning the next char code respectively `null`
         *  if there are no more characters left.
         * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.
         */
        utfx.encodeUTF16toUTF8 = function(src, dst) {
            utfx.UTF16toUTF8(src, function(cp) {
                utfx.encodeUTF8(cp, dst);
            });
        };

        /**
         * Decodes and converts UTF8 bytes to UTF16 characters.
         * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there
         *  are no more bytes left.
         * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.
         * @throws {RangeError} If a starting byte is invalid in UTF8
         * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the remaining bytes.
         */
        utfx.decodeUTF8toUTF16 = function(src, dst) {
            utfx.decodeUTF8(src, function(cp) {
                utfx.UTF8toUTF16(cp, dst);
            });
        };

        /**
         * Calculates the byte length of an UTF8 code point.
         * @param {number} cp UTF8 code point
         * @returns {number} Byte length
         */
        utfx.calculateCodePoint = function(cp) {
            return (cp < 0x80) ? 1 : (cp < 0x800) ? 2 : (cp < 0x10000) ? 3 : 4;
        };

        /**
         * Calculates the number of UTF8 bytes required to store UTF8 code points.
         * @param {(!function():number|null)} src Code points source as a function returning the next code point respectively
         *  `null` if there are no more code points left.
         * @returns {number} The number of UTF8 bytes required
         */
        utfx.calculateUTF8 = function(src) {
            var cp, l=0;
            while ((cp = src()) !== null)
                l += (cp < 0x80) ? 1 : (cp < 0x800) ? 2 : (cp < 0x10000) ? 3 : 4;
            return l;
        };

        /**
         * Calculates the number of UTF8 code points respectively UTF8 bytes required to store UTF16 char codes.
         * @param {(!function():number|null)} src Characters source as a function returning the next char code respectively
         *  `null` if there are no more characters left.
         * @returns {!Array.<number>} The number of UTF8 code points at index 0 and the number of UTF8 bytes required at index 1.
         */
        utfx.calculateUTF16asUTF8 = function(src) {
            var n=0, l=0;
            utfx.UTF16toUTF8(src, function(cp) {
                ++n; l += (cp < 0x80) ? 1 : (cp < 0x800) ? 2 : (cp < 0x10000) ? 3 : 4;
            });
            return [n,l];
        };

        return utfx;
    }();

    // encodings/utf8

    /**
     * Encodes this ByteBuffer's contents between {@link ByteBuffer#offset} and {@link ByteBuffer#limit} to an UTF8 encoded
     *  string.
     * @returns {string} Hex encoded string
     * @throws {RangeError} If `offset > limit`
     * @expose
     */
    ByteBufferPrototype.toUTF8 = function(begin, end) {
        if (typeof begin === 'undefined') begin = this.offset;
        if (typeof end === 'undefined') end = this.limit;
        if (!this.noAssert) {
            if (typeof begin !== 'number' || begin % 1 !== 0)
                throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== 'number' || end % 1 !== 0)
                throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength)
                throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
        }
        var sd; try {
            utfx.decodeUTF8toUTF16(function() {
                return begin < end ? this.view[begin++] : null;
            }.bind(this), sd = stringDestination());
        } catch (e) {
            if (begin !== end)
                throw RangeError("Illegal range: Truncated data, "+begin+" != "+end);
        }
        return sd();
    };

    /**
     * Decodes an UTF8 encoded string to a ByteBuffer.
     * @param {string} str String to decode
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @returns {!ByteBuffer} ByteBuffer
     * @expose
     */
    ByteBuffer.fromUTF8 = function(str, littleEndian, noAssert) {
        if (!noAssert)
            if (typeof str !== 'string')
                throw TypeError("Illegal str: Not a string");
        var bb = new ByteBuffer(utfx.calculateUTF16asUTF8(stringSource(str), true)[1], littleEndian, noAssert),
            i = 0;
        utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
            bb.view[i++] = b;
        });
        bb.limit = i;
        return bb;
    };

    return ByteBuffer;
});

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/bytebuffer/dist/bytebuffer.js","/../node_modules/bytebuffer/dist")
},{"buffer":11,"long":72,"pBGvAp":74}],13:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var Transform = require('stream').Transform
var inherits = require('inherits')
var StringDecoder = require('string_decoder').StringDecoder
module.exports = CipherBase
inherits(CipherBase, Transform)
function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  this._decoder = null
  this._encoding = null
}
CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = new Buffer(data, inputEnc)
  }
  var outData = this._update(data)
  if (this.hashMode) {
    return this
  }
  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }
  return outData
}

CipherBase.prototype.setAutoPadding = function () {}

CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this._final())
  } catch (e) {
    err = e
  } finally {
    done(err)
  }
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this._final() || new Buffer('')
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }
  if (this._encoding !== enc) {
    throw new Error('can\'t switch encodings')
  }
  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }
  return out
}

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/cipher-base/index.js","/../node_modules/cipher-base")
},{"buffer":11,"inherits":71,"pBGvAp":74,"stream":91,"string_decoder":9}],14:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var inherits = require('inherits')
var md5 = require('./md5')
var rmd160 = require('ripemd160')
var sha = require('sha.js')

var Base = require('cipher-base')

function HashNoConstructor(hash) {
  Base.call(this, 'digest')

  this._hash = hash
  this.buffers = []
}

inherits(HashNoConstructor, Base)

HashNoConstructor.prototype._update = function (data) {
  this.buffers.push(data)
}

HashNoConstructor.prototype._final = function () {
  var buf = Buffer.concat(this.buffers)
  var r = this._hash(buf)
  this.buffers = null

  return r
}

function Hash(hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if ('md5' === alg) return new HashNoConstructor(md5)
  if ('rmd160' === alg || 'ripemd160' === alg) return new HashNoConstructor(rmd160)

  return new Hash(sha(alg))
}

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/create-hash/browser.js","/../node_modules/create-hash")
},{"./md5":16,"buffer":11,"cipher-base":13,"inherits":71,"pBGvAp":74,"ripemd160":75,"sha.js":78}],15:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var intSize = 4;
var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
var chrsz = 8;

function toArray(buf, bigEndian) {
  if ((buf.length % intSize) !== 0) {
    var len = buf.length + (intSize - (buf.length % intSize));
    buf = Buffer.concat([buf, zeroBuffer], len);
  }

  var arr = [];
  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
  for (var i = 0; i < buf.length; i += intSize) {
    arr.push(fn.call(buf, i));
  }
  return arr;
}

function toBuffer(arr, size, bigEndian) {
  var buf = new Buffer(size);
  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
  for (var i = 0; i < arr.length; i++) {
    fn.call(buf, arr[i], i * 4, true);
  }
  return buf;
}

function hash(buf, fn, hashSize, bigEndian) {
  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
  return toBuffer(arr, hashSize, bigEndian);
}
exports.hash = hash;
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/create-hash/helpers.js","/../node_modules/create-hash")
},{"buffer":11,"pBGvAp":74}],16:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
/*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

var helpers = require('./helpers');

/*
 * Calculate the MD5 of an array of little-endian words, and a bit length
 */
function core_md5(x, len)
{
  /* append padding */
  x[len >> 5] |= 0x80 << ((len) % 32);
  x[(((len + 64) >>> 9) << 4) + 14] = len;

  var a =  1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d =  271733878;

  for(var i = 0; i < x.length; i += 16)
  {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;

    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
  }
  return Array(a, b, c, d);

}

/*
 * These functions implement the four basic operations the algorithm uses.
 */
function md5_cmn(q, a, b, x, s, t)
{
  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
}
function md5_ff(a, b, c, d, x, s, t)
{
  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
}
function md5_gg(a, b, c, d, x, s, t)
{
  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
}
function md5_hh(a, b, c, d, x, s, t)
{
  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5_ii(a, b, c, d, x, s, t)
{
  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y)
{
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return (msw << 16) | (lsw & 0xFFFF);
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function bit_rol(num, cnt)
{
  return (num << cnt) | (num >>> (32 - cnt));
}

module.exports = function md5(buf) {
  return helpers.hash(buf, core_md5, 16);
};
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/create-hash/md5.js","/../node_modules/create-hash")
},{"./helpers":15,"buffer":11,"pBGvAp":74}],17:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var createHash = require('create-hash/browser');
var inherits = require('inherits')

var Transform = require('stream').Transform

var ZEROS = new Buffer(128)
ZEROS.fill(0)

function Hmac(alg, key) {
  Transform.call(this)
  alg = alg.toLowerCase()
  if (typeof key === 'string') {
    key = new Buffer(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = createHash(alg).update(key).digest()

  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = new Buffer(blocksize)
  var opad = this._opad = new Buffer(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = createHash(alg).update(ipad)
}

inherits(Hmac, Transform)

Hmac.prototype.update = function (data, enc) {
  this._hash.update(data, enc)

  return this
}

Hmac.prototype._transform = function (data, _, next) {
  this._hash.update(data)

  next()
}

Hmac.prototype._flush = function (next) {
  this.push(this.digest())

  next()
}

Hmac.prototype.digest = function (enc) {
  var h = this._hash.digest()

  return createHash(this._alg).update(this._opad).update(h).digest(enc)
}

module.exports = function createHmac(alg, key) {
  return new Hmac(alg, key)
}

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/create-hmac/browser.js","/../node_modules/create-hmac")
},{"buffer":11,"create-hash/browser":14,"inherits":71,"pBGvAp":74,"stream":91}],18:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var BlockCipher = C_lib.BlockCipher;
	    var C_algo = C.algo;

	    // Lookup tables
	    var SBOX = [];
	    var INV_SBOX = [];
	    var SUB_MIX_0 = [];
	    var SUB_MIX_1 = [];
	    var SUB_MIX_2 = [];
	    var SUB_MIX_3 = [];
	    var INV_SUB_MIX_0 = [];
	    var INV_SUB_MIX_1 = [];
	    var INV_SUB_MIX_2 = [];
	    var INV_SUB_MIX_3 = [];

	    // Compute lookup tables
	    (function () {
	        // Compute double table
	        var d = [];
	        for (var i = 0; i < 256; i++) {
	            if (i < 128) {
	                d[i] = i << 1;
	            } else {
	                d[i] = (i << 1) ^ 0x11b;
	            }
	        }

	        // Walk GF(2^8)
	        var x = 0;
	        var xi = 0;
	        for (var i = 0; i < 256; i++) {
	            // Compute sbox
	            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
	            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
	            SBOX[x] = sx;
	            INV_SBOX[sx] = x;

	            // Compute multiplication
	            var x2 = d[x];
	            var x4 = d[x2];
	            var x8 = d[x4];

	            // Compute sub bytes, mix columns tables
	            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
	            SUB_MIX_0[x] = (t << 24) | (t >>> 8);
	            SUB_MIX_1[x] = (t << 16) | (t >>> 16);
	            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);
	            SUB_MIX_3[x] = t;

	            // Compute inv sub bytes, inv mix columns tables
	            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
	            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);
	            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);
	            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);
	            INV_SUB_MIX_3[sx] = t;

	            // Compute next counter
	            if (!x) {
	                x = xi = 1;
	            } else {
	                x = x2 ^ d[d[d[x8 ^ x2]]];
	                xi ^= d[d[xi]];
	            }
	        }
	    }());

	    // Precomputed Rcon lookup
	    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

	    /**
	     * AES block cipher algorithm.
	     */
	    var AES = C_algo.AES = BlockCipher.extend({
	        _doReset: function () {
	            // Skip reset of nRounds has been set before and key did not change
	            if (this._nRounds && this._keyPriorReset === this._key) {
	                return;
	            }

	            // Shortcuts
	            var key = this._keyPriorReset = this._key;
	            var keyWords = key.words;
	            var keySize = key.sigBytes / 4;

	            // Compute number of rounds
	            var nRounds = this._nRounds = keySize + 6;

	            // Compute number of key schedule rows
	            var ksRows = (nRounds + 1) * 4;

	            // Compute key schedule
	            var keySchedule = this._keySchedule = [];
	            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
	                if (ksRow < keySize) {
	                    keySchedule[ksRow] = keyWords[ksRow];
	                } else {
	                    var t = keySchedule[ksRow - 1];

	                    if (!(ksRow % keySize)) {
	                        // Rot word
	                        t = (t << 8) | (t >>> 24);

	                        // Sub word
	                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];

	                        // Mix Rcon
	                        t ^= RCON[(ksRow / keySize) | 0] << 24;
	                    } else if (keySize > 6 && ksRow % keySize == 4) {
	                        // Sub word
	                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
	                    }

	                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
	                }
	            }

	            // Compute inv key schedule
	            var invKeySchedule = this._invKeySchedule = [];
	            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
	                var ksRow = ksRows - invKsRow;

	                if (invKsRow % 4) {
	                    var t = keySchedule[ksRow];
	                } else {
	                    var t = keySchedule[ksRow - 4];
	                }

	                if (invKsRow < 4 || ksRow <= 4) {
	                    invKeySchedule[invKsRow] = t;
	                } else {
	                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
	                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
	                }
	            }
	        },

	        encryptBlock: function (M, offset) {
	            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
	        },

	        decryptBlock: function (M, offset) {
	            // Swap 2nd and 4th rows
	            var t = M[offset + 1];
	            M[offset + 1] = M[offset + 3];
	            M[offset + 3] = t;

	            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);

	            // Inv swap 2nd and 4th rows
	            var t = M[offset + 1];
	            M[offset + 1] = M[offset + 3];
	            M[offset + 3] = t;
	        },

	        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
	            // Shortcut
	            var nRounds = this._nRounds;

	            // Get input, add round key
	            var s0 = M[offset]     ^ keySchedule[0];
	            var s1 = M[offset + 1] ^ keySchedule[1];
	            var s2 = M[offset + 2] ^ keySchedule[2];
	            var s3 = M[offset + 3] ^ keySchedule[3];

	            // Key schedule row counter
	            var ksRow = 4;

	            // Rounds
	            for (var round = 1; round < nRounds; round++) {
	                // Shift rows, sub bytes, mix columns, add round key
	                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
	                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
	                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
	                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];

	                // Update state
	                s0 = t0;
	                s1 = t1;
	                s2 = t2;
	                s3 = t3;
	            }

	            // Shift rows, sub bytes, add round key
	            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
	            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
	            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
	            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];

	            // Set output
	            M[offset]     = t0;
	            M[offset + 1] = t1;
	            M[offset + 2] = t2;
	            M[offset + 3] = t3;
	        },

	        keySize: 256/32
	    });

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
	     */
	    C.AES = BlockCipher._createHelper(AES);
	}());


	return CryptoJS.AES;

}));
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/crypto-js/aes.js","/../node_modules/crypto-js")
},{"./cipher-core":19,"./core":20,"./enc-base64":21,"./evpkdf":23,"./md5":25,"buffer":11,"pBGvAp":74}],19:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * Cipher core components.
	 */
	CryptoJS.lib.Cipher || (function (undefined) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var WordArray = C_lib.WordArray;
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
	    var C_enc = C.enc;
	    var Utf8 = C_enc.Utf8;
	    var Base64 = C_enc.Base64;
	    var C_algo = C.algo;
	    var EvpKDF = C_algo.EvpKDF;

	    /**
	     * Abstract base cipher template.
	     *
	     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
	     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
	     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
	     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
	     */
	    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {WordArray} iv The IV to use for this operation.
	         */
	        cfg: Base.extend(),

	        /**
	         * Creates this cipher in encryption mode.
	         *
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {Cipher} A cipher instance.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
	         */
	        createEncryptor: function (key, cfg) {
	            return this.create(this._ENC_XFORM_MODE, key, cfg);
	        },

	        /**
	         * Creates this cipher in decryption mode.
	         *
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {Cipher} A cipher instance.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
	         */
	        createDecryptor: function (key, cfg) {
	            return this.create(this._DEC_XFORM_MODE, key, cfg);
	        },

	        /**
	         * Initializes a newly created cipher.
	         *
	         * @param {number} xformMode Either the encryption or decryption transormation mode constant.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
	         */
	        init: function (xformMode, key, cfg) {
	            // Apply config defaults
	            this.cfg = this.cfg.extend(cfg);

	            // Store transform mode and key
	            this._xformMode = xformMode;
	            this._key = key;

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this cipher to its initial state.
	         *
	         * @example
	         *
	         *     cipher.reset();
	         */
	        reset: function () {
	            // Reset data buffer
	            BufferedBlockAlgorithm.reset.call(this);

	            // Perform concrete-cipher logic
	            this._doReset();
	        },

	        /**
	         * Adds data to be encrypted or decrypted.
	         *
	         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
	         *
	         * @return {WordArray} The data after processing.
	         *
	         * @example
	         *
	         *     var encrypted = cipher.process('data');
	         *     var encrypted = cipher.process(wordArray);
	         */
	        process: function (dataUpdate) {
	            // Append
	            this._append(dataUpdate);

	            // Process available blocks
	            return this._process();
	        },

	        /**
	         * Finalizes the encryption or decryption process.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
	         *
	         * @return {WordArray} The data after final processing.
	         *
	         * @example
	         *
	         *     var encrypted = cipher.finalize();
	         *     var encrypted = cipher.finalize('data');
	         *     var encrypted = cipher.finalize(wordArray);
	         */
	        finalize: function (dataUpdate) {
	            // Final data update
	            if (dataUpdate) {
	                this._append(dataUpdate);
	            }

	            // Perform concrete-cipher logic
	            var finalProcessedData = this._doFinalize();

	            return finalProcessedData;
	        },

	        keySize: 128/32,

	        ivSize: 128/32,

	        _ENC_XFORM_MODE: 1,

	        _DEC_XFORM_MODE: 2,

	        /**
	         * Creates shortcut functions to a cipher's object interface.
	         *
	         * @param {Cipher} cipher The cipher to create a helper for.
	         *
	         * @return {Object} An object with encrypt and decrypt shortcut functions.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
	         */
	        _createHelper: (function () {
	            function selectCipherStrategy(key) {
	                if (typeof key == 'string') {
	                    return PasswordBasedCipher;
	                } else {
	                    return SerializableCipher;
	                }
	            }

	            return function (cipher) {
	                return {
	                    encrypt: function (message, key, cfg) {
	                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
	                    },

	                    decrypt: function (ciphertext, key, cfg) {
	                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
	                    }
	                };
	            };
	        }())
	    });

	    /**
	     * Abstract base stream cipher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
	     */
	    var StreamCipher = C_lib.StreamCipher = Cipher.extend({
	        _doFinalize: function () {
	            // Process partial blocks
	            var finalProcessedBlocks = this._process(!!'flush');

	            return finalProcessedBlocks;
	        },

	        blockSize: 1
	    });

	    /**
	     * Mode namespace.
	     */
	    var C_mode = C.mode = {};

	    /**
	     * Abstract base block cipher mode template.
	     */
	    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
	        /**
	         * Creates this mode for encryption.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
	         */
	        createEncryptor: function (cipher, iv) {
	            return this.Encryptor.create(cipher, iv);
	        },

	        /**
	         * Creates this mode for decryption.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
	         */
	        createDecryptor: function (cipher, iv) {
	            return this.Decryptor.create(cipher, iv);
	        },

	        /**
	         * Initializes a newly created mode.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
	         */
	        init: function (cipher, iv) {
	            this._cipher = cipher;
	            this._iv = iv;
	        }
	    });

	    /**
	     * Cipher Block Chaining mode.
	     */
	    var CBC = C_mode.CBC = (function () {
	        /**
	         * Abstract base CBC mode.
	         */
	        var CBC = BlockCipherMode.extend();

	        /**
	         * CBC encryptor.
	         */
	        CBC.Encryptor = CBC.extend({
	            /**
	             * Processes the data block at offset.
	             *
	             * @param {Array} words The data words to operate on.
	             * @param {number} offset The offset where the block starts.
	             *
	             * @example
	             *
	             *     mode.processBlock(data.words, offset);
	             */
	            processBlock: function (words, offset) {
	                // Shortcuts
	                var cipher = this._cipher;
	                var blockSize = cipher.blockSize;

	                // XOR and encrypt
	                xorBlock.call(this, words, offset, blockSize);
	                cipher.encryptBlock(words, offset);

	                // Remember this block to use with next block
	                this._prevBlock = words.slice(offset, offset + blockSize);
	            }
	        });

	        /**
	         * CBC decryptor.
	         */
	        CBC.Decryptor = CBC.extend({
	            /**
	             * Processes the data block at offset.
	             *
	             * @param {Array} words The data words to operate on.
	             * @param {number} offset The offset where the block starts.
	             *
	             * @example
	             *
	             *     mode.processBlock(data.words, offset);
	             */
	            processBlock: function (words, offset) {
	                // Shortcuts
	                var cipher = this._cipher;
	                var blockSize = cipher.blockSize;

	                // Remember this block to use with next block
	                var thisBlock = words.slice(offset, offset + blockSize);

	                // Decrypt and XOR
	                cipher.decryptBlock(words, offset);
	                xorBlock.call(this, words, offset, blockSize);

	                // This block becomes the previous block
	                this._prevBlock = thisBlock;
	            }
	        });

	        function xorBlock(words, offset, blockSize) {
	            // Shortcut
	            var iv = this._iv;

	            // Choose mixing block
	            if (iv) {
	                var block = iv;

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            } else {
	                var block = this._prevBlock;
	            }

	            // XOR blocks
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= block[i];
	            }
	        }

	        return CBC;
	    }());

	    /**
	     * Padding namespace.
	     */
	    var C_pad = C.pad = {};

	    /**
	     * PKCS #5/7 padding strategy.
	     */
	    var Pkcs7 = C_pad.Pkcs7 = {
	        /**
	         * Pads data using the algorithm defined in PKCS #5/7.
	         *
	         * @param {WordArray} data The data to pad.
	         * @param {number} blockSize The multiple that the data should be padded to.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
	         */
	        pad: function (data, blockSize) {
	            // Shortcut
	            var blockSizeBytes = blockSize * 4;

	            // Count padding bytes
	            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

	            // Create padding word
	            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;

	            // Create padding
	            var paddingWords = [];
	            for (var i = 0; i < nPaddingBytes; i += 4) {
	                paddingWords.push(paddingWord);
	            }
	            var padding = WordArray.create(paddingWords, nPaddingBytes);

	            // Add padding
	            data.concat(padding);
	        },

	        /**
	         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
	         *
	         * @param {WordArray} data The data to unpad.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     CryptoJS.pad.Pkcs7.unpad(wordArray);
	         */
	        unpad: function (data) {
	            // Get number of padding bytes from last byte
	            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

	            // Remove padding
	            data.sigBytes -= nPaddingBytes;
	        }
	    };

	    /**
	     * Abstract base block cipher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
	     */
	    var BlockCipher = C_lib.BlockCipher = Cipher.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {Mode} mode The block mode to use. Default: CBC
	         * @property {Padding} padding The padding strategy to use. Default: Pkcs7
	         */
	        cfg: Cipher.cfg.extend({
	            mode: CBC,
	            padding: Pkcs7
	        }),

	        reset: function () {
	            // Reset cipher
	            Cipher.reset.call(this);

	            // Shortcuts
	            var cfg = this.cfg;
	            var iv = cfg.iv;
	            var mode = cfg.mode;

	            // Reset block mode
	            if (this._xformMode == this._ENC_XFORM_MODE) {
	                var modeCreator = mode.createEncryptor;
	            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
	                var modeCreator = mode.createDecryptor;

	                // Keep at least one block in the buffer for unpadding
	                this._minBufferSize = 1;
	            }
	            this._mode = modeCreator.call(mode, this, iv && iv.words);
	        },

	        _doProcessBlock: function (words, offset) {
	            this._mode.processBlock(words, offset);
	        },

	        _doFinalize: function () {
	            // Shortcut
	            var padding = this.cfg.padding;

	            // Finalize
	            if (this._xformMode == this._ENC_XFORM_MODE) {
	                // Pad data
	                padding.pad(this._data, this.blockSize);

	                // Process final blocks
	                var finalProcessedBlocks = this._process(!!'flush');
	            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
	                // Process final blocks
	                var finalProcessedBlocks = this._process(!!'flush');

	                // Unpad data
	                padding.unpad(finalProcessedBlocks);
	            }

	            return finalProcessedBlocks;
	        },

	        blockSize: 128/32
	    });

	    /**
	     * A collection of cipher parameters.
	     *
	     * @property {WordArray} ciphertext The raw ciphertext.
	     * @property {WordArray} key The key to this ciphertext.
	     * @property {WordArray} iv The IV used in the ciphering operation.
	     * @property {WordArray} salt The salt used with a key derivation function.
	     * @property {Cipher} algorithm The cipher algorithm.
	     * @property {Mode} mode The block mode used in the ciphering operation.
	     * @property {Padding} padding The padding scheme used in the ciphering operation.
	     * @property {number} blockSize The block size of the cipher.
	     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
	     */
	    var CipherParams = C_lib.CipherParams = Base.extend({
	        /**
	         * Initializes a newly created cipher params object.
	         *
	         * @param {Object} cipherParams An object with any of the possible cipher parameters.
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.lib.CipherParams.create({
	         *         ciphertext: ciphertextWordArray,
	         *         key: keyWordArray,
	         *         iv: ivWordArray,
	         *         salt: saltWordArray,
	         *         algorithm: CryptoJS.algo.AES,
	         *         mode: CryptoJS.mode.CBC,
	         *         padding: CryptoJS.pad.PKCS7,
	         *         blockSize: 4,
	         *         formatter: CryptoJS.format.OpenSSL
	         *     });
	         */
	        init: function (cipherParams) {
	            this.mixIn(cipherParams);
	        },

	        /**
	         * Converts this cipher params object to a string.
	         *
	         * @param {Format} formatter (Optional) The formatting strategy to use.
	         *
	         * @return {string} The stringified cipher params.
	         *
	         * @throws Error If neither the formatter nor the default formatter is set.
	         *
	         * @example
	         *
	         *     var string = cipherParams + '';
	         *     var string = cipherParams.toString();
	         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
	         */
	        toString: function (formatter) {
	            return (formatter || this.formatter).stringify(this);
	        }
	    });

	    /**
	     * Format namespace.
	     */
	    var C_format = C.format = {};

	    /**
	     * OpenSSL formatting strategy.
	     */
	    var OpenSSLFormatter = C_format.OpenSSL = {
	        /**
	         * Converts a cipher params object to an OpenSSL-compatible string.
	         *
	         * @param {CipherParams} cipherParams The cipher params object.
	         *
	         * @return {string} The OpenSSL-compatible string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
	         */
	        stringify: function (cipherParams) {
	            // Shortcuts
	            var ciphertext = cipherParams.ciphertext;
	            var salt = cipherParams.salt;

	            // Format
	            if (salt) {
	                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
	            } else {
	                var wordArray = ciphertext;
	            }

	            return wordArray.toString(Base64);
	        },

	        /**
	         * Converts an OpenSSL-compatible string to a cipher params object.
	         *
	         * @param {string} openSSLStr The OpenSSL-compatible string.
	         *
	         * @return {CipherParams} The cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
	         */
	        parse: function (openSSLStr) {
	            // Parse base64
	            var ciphertext = Base64.parse(openSSLStr);

	            // Shortcut
	            var ciphertextWords = ciphertext.words;

	            // Test for salt
	            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
	                // Extract salt
	                var salt = WordArray.create(ciphertextWords.slice(2, 4));

	                // Remove salt from ciphertext
	                ciphertextWords.splice(0, 4);
	                ciphertext.sigBytes -= 16;
	            }

	            return CipherParams.create({ ciphertext: ciphertext, salt: salt });
	        }
	    };

	    /**
	     * A cipher wrapper that returns ciphertext as a serializable cipher params object.
	     */
	    var SerializableCipher = C_lib.SerializableCipher = Base.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
	         */
	        cfg: Base.extend({
	            format: OpenSSLFormatter
	        }),

	        /**
	         * Encrypts a message.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {WordArray|string} message The message to encrypt.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {CipherParams} A cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */
	        encrypt: function (cipher, message, key, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Encrypt
	            var encryptor = cipher.createEncryptor(key, cfg);
	            var ciphertext = encryptor.finalize(message);

	            // Shortcut
	            var cipherCfg = encryptor.cfg;

	            // Create and return serializable cipher params
	            return CipherParams.create({
	                ciphertext: ciphertext,
	                key: key,
	                iv: cipherCfg.iv,
	                algorithm: cipher,
	                mode: cipherCfg.mode,
	                padding: cipherCfg.padding,
	                blockSize: cipher.blockSize,
	                formatter: cfg.format
	            });
	        },

	        /**
	         * Decrypts serialized ciphertext.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {WordArray} The plaintext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */
	        decrypt: function (cipher, ciphertext, key, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Convert string to CipherParams
	            ciphertext = this._parse(ciphertext, cfg.format);

	            // Decrypt
	            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);

	            return plaintext;
	        },

	        /**
	         * Converts serialized ciphertext to CipherParams,
	         * else assumed CipherParams already and returns ciphertext unchanged.
	         *
	         * @param {CipherParams|string} ciphertext The ciphertext.
	         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
	         *
	         * @return {CipherParams} The unserialized ciphertext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
	         */
	        _parse: function (ciphertext, format) {
	            if (typeof ciphertext == 'string') {
	                return format.parse(ciphertext, this);
	            } else {
	                return ciphertext;
	            }
	        }
	    });

	    /**
	     * Key derivation function namespace.
	     */
	    var C_kdf = C.kdf = {};

	    /**
	     * OpenSSL key derivation function.
	     */
	    var OpenSSLKdf = C_kdf.OpenSSL = {
	        /**
	         * Derives a key and IV from a password.
	         *
	         * @param {string} password The password to derive from.
	         * @param {number} keySize The size in words of the key to generate.
	         * @param {number} ivSize The size in words of the IV to generate.
	         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
	         *
	         * @return {CipherParams} A cipher params object with the key, IV, and salt.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
	         */
	        execute: function (password, keySize, ivSize, salt) {
	            // Generate random salt
	            if (!salt) {
	                salt = WordArray.random(64/8);
	            }

	            // Derive key and IV
	            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);

	            // Separate key and IV
	            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
	            key.sigBytes = keySize * 4;

	            // Return params
	            return CipherParams.create({ key: key, iv: iv, salt: salt });
	        }
	    };

	    /**
	     * A serializable cipher wrapper that derives the key from a password,
	     * and returns ciphertext as a serializable cipher params object.
	     */
	    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
	         */
	        cfg: SerializableCipher.cfg.extend({
	            kdf: OpenSSLKdf
	        }),

	        /**
	         * Encrypts a message using a password.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {WordArray|string} message The message to encrypt.
	         * @param {string} password The password.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {CipherParams} A cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
	         */
	        encrypt: function (cipher, message, password, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Derive key and other params
	            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);

	            // Add IV to config
	            cfg.iv = derivedParams.iv;

	            // Encrypt
	            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);

	            // Mix in derived params
	            ciphertext.mixIn(derivedParams);

	            return ciphertext;
	        },

	        /**
	         * Decrypts serialized ciphertext using a password.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
	         * @param {string} password The password.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {WordArray} The plaintext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
	         */
	        decrypt: function (cipher, ciphertext, password, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Convert string to CipherParams
	            ciphertext = this._parse(ciphertext, cfg.format);

	            // Derive key and other params
	            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);

	            // Add IV to config
	            cfg.iv = derivedParams.iv;

	            // Decrypt
	            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);

	            return plaintext;
	        }
	    });
	}());


}));
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/crypto-js/cipher-core.js","/../node_modules/crypto-js")
},{"./core":20,"buffer":11,"pBGvAp":74}],20:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory();
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define([], factory);
	}
	else {
		// Global (browser)
		root.CryptoJS = factory();
	}
}(this, function () {

	/**
	 * CryptoJS core components.
	 */
	var CryptoJS = CryptoJS || (function (Math, undefined) {
	    /*
	     * Local polyfil of Object.create
	     */
	    var create = Object.create || (function () {
	        function F() {};

	        return function (obj) {
	            var subtype;

	            F.prototype = obj;

	            subtype = new F();

	            F.prototype = null;

	            return subtype;
	        };
	    }())

	    /**
	     * CryptoJS namespace.
	     */
	    var C = {};

	    /**
	     * Library namespace.
	     */
	    var C_lib = C.lib = {};

	    /**
	     * Base object for prototypal inheritance.
	     */
	    var Base = C_lib.Base = (function () {


	        return {
	            /**
	             * Creates a new object that inherits from this object.
	             *
	             * @param {Object} overrides Properties to copy into the new object.
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         field: 'value',
	             *
	             *         method: function () {
	             *         }
	             *     });
	             */
	            extend: function (overrides) {
	                // Spawn
	                var subtype = create(this);

	                // Augment
	                if (overrides) {
	                    subtype.mixIn(overrides);
	                }

	                // Create default initializer
	                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
	                    subtype.init = function () {
	                        subtype.$super.init.apply(this, arguments);
	                    };
	                }

	                // Initializer's prototype is the subtype object
	                subtype.init.prototype = subtype;

	                // Reference supertype
	                subtype.$super = this;

	                return subtype;
	            },

	            /**
	             * Extends this object and runs the init method.
	             * Arguments to create() will be passed to init().
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var instance = MyType.create();
	             */
	            create: function () {
	                var instance = this.extend();
	                instance.init.apply(instance, arguments);

	                return instance;
	            },

	            /**
	             * Initializes a newly created object.
	             * Override this method to add some logic when your objects are created.
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         init: function () {
	             *             // ...
	             *         }
	             *     });
	             */
	            init: function () {
	            },

	            /**
	             * Copies properties into this object.
	             *
	             * @param {Object} properties The properties to mix in.
	             *
	             * @example
	             *
	             *     MyType.mixIn({
	             *         field: 'value'
	             *     });
	             */
	            mixIn: function (properties) {
	                for (var propertyName in properties) {
	                    if (properties.hasOwnProperty(propertyName)) {
	                        this[propertyName] = properties[propertyName];
	                    }
	                }

	                // IE won't copy toString using the loop above
	                if (properties.hasOwnProperty('toString')) {
	                    this.toString = properties.toString;
	                }
	            },

	            /**
	             * Creates a copy of this object.
	             *
	             * @return {Object} The clone.
	             *
	             * @example
	             *
	             *     var clone = instance.clone();
	             */
	            clone: function () {
	                return this.init.prototype.extend(this);
	            }
	        };
	    }());

	    /**
	     * An array of 32-bit words.
	     *
	     * @property {Array} words The array of 32-bit words.
	     * @property {number} sigBytes The number of significant bytes in this word array.
	     */
	    var WordArray = C_lib.WordArray = Base.extend({
	        /**
	         * Initializes a newly created word array.
	         *
	         * @param {Array} words (Optional) An array of 32-bit words.
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.create();
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
	         */
	        init: function (words, sigBytes) {
	            words = this.words = words || [];

	            if (sigBytes != undefined) {
	                this.sigBytes = sigBytes;
	            } else {
	                this.sigBytes = words.length * 4;
	            }
	        },

	        /**
	         * Converts this word array to a string.
	         *
	         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
	         *
	         * @return {string} The stringified word array.
	         *
	         * @example
	         *
	         *     var string = wordArray + '';
	         *     var string = wordArray.toString();
	         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
	         */
	        toString: function (encoder) {
	            return (encoder || Hex).stringify(this);
	        },

	        /**
	         * Concatenates a word array to this word array.
	         *
	         * @param {WordArray} wordArray The word array to append.
	         *
	         * @return {WordArray} This word array.
	         *
	         * @example
	         *
	         *     wordArray1.concat(wordArray2);
	         */
	        concat: function (wordArray) {
	            // Shortcuts
	            var thisWords = this.words;
	            var thatWords = wordArray.words;
	            var thisSigBytes = this.sigBytes;
	            var thatSigBytes = wordArray.sigBytes;

	            // Clamp excess bits
	            this.clamp();

	            // Concat
	            if (thisSigBytes % 4) {
	                // Copy one byte at a time
	                for (var i = 0; i < thatSigBytes; i++) {
	                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
	                }
	            } else {
	                // Copy one word at a time
	                for (var i = 0; i < thatSigBytes; i += 4) {
	                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];
	                }
	            }
	            this.sigBytes += thatSigBytes;

	            // Chainable
	            return this;
	        },

	        /**
	         * Removes insignificant bits.
	         *
	         * @example
	         *
	         *     wordArray.clamp();
	         */
	        clamp: function () {
	            // Shortcuts
	            var words = this.words;
	            var sigBytes = this.sigBytes;

	            // Clamp
	            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
	            words.length = Math.ceil(sigBytes / 4);
	        },

	        /**
	         * Creates a copy of this word array.
	         *
	         * @return {WordArray} The clone.
	         *
	         * @example
	         *
	         *     var clone = wordArray.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone.words = this.words.slice(0);

	            return clone;
	        },

	        /**
	         * Creates a word array filled with random bytes.
	         *
	         * @param {number} nBytes The number of random bytes to generate.
	         *
	         * @return {WordArray} The random word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.random(16);
	         */
	        random: function (nBytes) {
	            var words = [];

	            var r = (function (m_w) {
	                var m_w = m_w;
	                var m_z = 0x3ade68b1;
	                var mask = 0xffffffff;

	                return function () {
	                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;
	                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;
	                    var result = ((m_z << 0x10) + m_w) & mask;
	                    result /= 0x100000000;
	                    result += 0.5;
	                    return result * (Math.random() > .5 ? 1 : -1);
	                }
	            });

	            for (var i = 0, rcache; i < nBytes; i += 4) {
	                var _r = r((rcache || Math.random()) * 0x100000000);

	                rcache = _r() * 0x3ade67b7;
	                words.push((_r() * 0x100000000) | 0);
	            }

	            return new WordArray.init(words, nBytes);
	        }
	    });

	    /**
	     * Encoder namespace.
	     */
	    var C_enc = C.enc = {};

	    /**
	     * Hex encoding strategy.
	     */
	    var Hex = C_enc.Hex = {
	        /**
	         * Converts a word array to a hex string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The hex string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var hexChars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                hexChars.push((bite >>> 4).toString(16));
	                hexChars.push((bite & 0x0f).toString(16));
	            }

	            return hexChars.join('');
	        },

	        /**
	         * Converts a hex string to a word array.
	         *
	         * @param {string} hexStr The hex string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
	         */
	        parse: function (hexStr) {
	            // Shortcut
	            var hexStrLength = hexStr.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < hexStrLength; i += 2) {
	                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
	            }

	            return new WordArray.init(words, hexStrLength / 2);
	        }
	    };

	    /**
	     * Latin1 encoding strategy.
	     */
	    var Latin1 = C_enc.Latin1 = {
	        /**
	         * Converts a word array to a Latin1 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Latin1 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var latin1Chars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                latin1Chars.push(String.fromCharCode(bite));
	            }

	            return latin1Chars.join('');
	        },

	        /**
	         * Converts a Latin1 string to a word array.
	         *
	         * @param {string} latin1Str The Latin1 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
	         */
	        parse: function (latin1Str) {
	            // Shortcut
	            var latin1StrLength = latin1Str.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < latin1StrLength; i++) {
	                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
	            }

	            return new WordArray.init(words, latin1StrLength);
	        }
	    };

	    /**
	     * UTF-8 encoding strategy.
	     */
	    var Utf8 = C_enc.Utf8 = {
	        /**
	         * Converts a word array to a UTF-8 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-8 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            try {
	                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
	            } catch (e) {
	                throw new Error('Malformed UTF-8 data');
	            }
	        },

	        /**
	         * Converts a UTF-8 string to a word array.
	         *
	         * @param {string} utf8Str The UTF-8 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
	         */
	        parse: function (utf8Str) {
	            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
	        }
	    };

	    /**
	     * Abstract buffered block algorithm template.
	     *
	     * The property blockSize must be implemented in a concrete subtype.
	     *
	     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
	     */
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
	        /**
	         * Resets this block algorithm's data buffer to its initial state.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm.reset();
	         */
	        reset: function () {
	            // Initial values
	            this._data = new WordArray.init();
	            this._nDataBytes = 0;
	        },

	        /**
	         * Adds new data to this block algorithm's buffer.
	         *
	         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm._append('data');
	         *     bufferedBlockAlgorithm._append(wordArray);
	         */
	        _append: function (data) {
	            // Convert string to WordArray, else assume WordArray already
	            if (typeof data == 'string') {
	                data = Utf8.parse(data);
	            }

	            // Append
	            this._data.concat(data);
	            this._nDataBytes += data.sigBytes;
	        },

	        /**
	         * Processes available data blocks.
	         *
	         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
	         *
	         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
	         *
	         * @return {WordArray} The processed data.
	         *
	         * @example
	         *
	         *     var processedData = bufferedBlockAlgorithm._process();
	         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
	         */
	        _process: function (doFlush) {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;
	            var dataSigBytes = data.sigBytes;
	            var blockSize = this.blockSize;
	            var blockSizeBytes = blockSize * 4;

	            // Count blocks ready
	            var nBlocksReady = dataSigBytes / blockSizeBytes;
	            if (doFlush) {
	                // Round up to include partial blocks
	                nBlocksReady = Math.ceil(nBlocksReady);
	            } else {
	                // Round down to include only full blocks,
	                // less the number of blocks that must remain in the buffer
	                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
	            }

	            // Count words ready
	            var nWordsReady = nBlocksReady * blockSize;

	            // Count bytes ready
	            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

	            // Process blocks
	            if (nWordsReady) {
	                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
	                    // Perform concrete-algorithm logic
	                    this._doProcessBlock(dataWords, offset);
	                }

	                // Remove processed words
	                var processedWords = dataWords.splice(0, nWordsReady);
	                data.sigBytes -= nBytesReady;
	            }

	            // Return processed words
	            return new WordArray.init(processedWords, nBytesReady);
	        },

	        /**
	         * Creates a copy of this object.
	         *
	         * @return {Object} The clone.
	         *
	         * @example
	         *
	         *     var clone = bufferedBlockAlgorithm.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone._data = this._data.clone();

	            return clone;
	        },

	        _minBufferSize: 0
	    });

	    /**
	     * Abstract hasher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
	     */
	    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
	        /**
	         * Configuration options.
	         */
	        cfg: Base.extend(),

	        /**
	         * Initializes a newly created hasher.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
	         *
	         * @example
	         *
	         *     var hasher = CryptoJS.algo.SHA256.create();
	         */
	        init: function (cfg) {
	            // Apply config defaults
	            this.cfg = this.cfg.extend(cfg);

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this hasher to its initial state.
	         *
	         * @example
	         *
	         *     hasher.reset();
	         */
	        reset: function () {
	            // Reset data buffer
	            BufferedBlockAlgorithm.reset.call(this);

	            // Perform concrete-hasher logic
	            this._doReset();
	        },

	        /**
	         * Updates this hasher with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {Hasher} This hasher.
	         *
	         * @example
	         *
	         *     hasher.update('message');
	         *     hasher.update(wordArray);
	         */
	        update: function (messageUpdate) {
	            // Append
	            this._append(messageUpdate);

	            // Update the hash
	            this._process();

	            // Chainable
	            return this;
	        },

	        /**
	         * Finalizes the hash computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The hash.
	         *
	         * @example
	         *
	         *     var hash = hasher.finalize();
	         *     var hash = hasher.finalize('message');
	         *     var hash = hasher.finalize(wordArray);
	         */
	        finalize: function (messageUpdate) {
	            // Final message update
	            if (messageUpdate) {
	                this._append(messageUpdate);
	            }

	            // Perform concrete-hasher logic
	            var hash = this._doFinalize();

	            return hash;
	        },

	        blockSize: 512/32,

	        /**
	         * Creates a shortcut function to a hasher's object interface.
	         *
	         * @param {Hasher} hasher The hasher to create a helper for.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
	         */
	        _createHelper: function (hasher) {
	            return function (message, cfg) {
	                return new hasher.init(cfg).finalize(message);
	            };
	        },

	        /**
	         * Creates a shortcut function to the HMAC's object interface.
	         *
	         * @param {Hasher} hasher The hasher to use in this HMAC helper.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
	         */
	        _createHmacHelper: function (hasher) {
	            return function (message, key) {
	                return new C_algo.HMAC.init(hasher, key).finalize(message);
	            };
	        }
	    });

	    /**
	     * Algorithm namespace.
	     */
	    var C_algo = C.algo = {};

	    return C;
	}(Math));


	return CryptoJS;

}));
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/crypto-js/core.js","/../node_modules/crypto-js")
},{"buffer":11,"pBGvAp":74}],21:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var C_enc = C.enc;

	    /**
	     * Base64 encoding strategy.
	     */
	    var Base64 = C_enc.Base64 = {
	        /**
	         * Converts a word array to a Base64 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Base64 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;
	            var map = this._map;

	            // Clamp excess bits
	            wordArray.clamp();

	            // Convert
	            var base64Chars = [];
	            for (var i = 0; i < sigBytes; i += 3) {
	                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
	                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
	                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

	                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

	                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
	                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
	                }
	            }

	            // Add padding
	            var paddingChar = map.charAt(64);
	            if (paddingChar) {
	                while (base64Chars.length % 4) {
	                    base64Chars.push(paddingChar);
	                }
	            }

	            return base64Chars.join('');
	        },

	        /**
	         * Converts a Base64 string to a word array.
	         *
	         * @param {string} base64Str The Base64 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
	         */
	        parse: function (base64Str) {
	            // Shortcuts
	            var base64StrLength = base64Str.length;
	            var map = this._map;
	            var reverseMap = this._reverseMap;

	            if (!reverseMap) {
	                    reverseMap = this._reverseMap = [];
	                    for (var j = 0; j < map.length; j++) {
	                        reverseMap[map.charCodeAt(j)] = j;
	                    }
	            }

	            // Ignore padding
	            var paddingChar = map.charAt(64);
	            if (paddingChar) {
	                var paddingIndex = base64Str.indexOf(paddingChar);
	                if (paddingIndex !== -1) {
	                    base64StrLength = paddingIndex;
	                }
	            }

	            // Convert
	            return parseLoop(base64Str, base64StrLength, reverseMap);

	        },

	        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
	    };

	    function parseLoop(base64Str, base64StrLength, reverseMap) {
	      var words = [];
	      var nBytes = 0;
	      for (var i = 0; i < base64StrLength; i++) {
	          if (i % 4) {
	              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
	              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
	              words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);
	              nBytes++;
	          }
	      }
	      return WordArray.create(words, nBytes);
	    }
	}());


	return CryptoJS.enc.Base64;

}));
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/crypto-js/enc-base64.js","/../node_modules/crypto-js")
},{"./core":20,"buffer":11,"pBGvAp":74}],22:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	return CryptoJS.enc.Hex;

}));
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/crypto-js/enc-hex.js","/../node_modules/crypto-js")
},{"./core":20,"buffer":11,"pBGvAp":74}],23:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./sha1"), require("./hmac"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./sha1", "./hmac"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var WordArray = C_lib.WordArray;
	    var C_algo = C.algo;
	    var MD5 = C_algo.MD5;

	    /**
	     * This key derivation function is meant to conform with EVP_BytesToKey.
	     * www.openssl.org/docs/crypto/EVP_BytesToKey.html
	     */
	    var EvpKDF = C_algo.EvpKDF = Base.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
	         * @property {Hasher} hasher The hash algorithm to use. Default: MD5
	         * @property {number} iterations The number of iterations to perform. Default: 1
	         */
	        cfg: Base.extend({
	            keySize: 128/32,
	            hasher: MD5,
	            iterations: 1
	        }),

	        /**
	         * Initializes a newly created key derivation function.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
	         *
	         * @example
	         *
	         *     var kdf = CryptoJS.algo.EvpKDF.create();
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
	         */
	        init: function (cfg) {
	            this.cfg = this.cfg.extend(cfg);
	        },

	        /**
	         * Derives a key from a password.
	         *
	         * @param {WordArray|string} password The password.
	         * @param {WordArray|string} salt A salt.
	         *
	         * @return {WordArray} The derived key.
	         *
	         * @example
	         *
	         *     var key = kdf.compute(password, salt);
	         */
	        compute: function (password, salt) {
	            // Shortcut
	            var cfg = this.cfg;

	            // Init hasher
	            var hasher = cfg.hasher.create();

	            // Initial values
	            var derivedKey = WordArray.create();

	            // Shortcuts
	            var derivedKeyWords = derivedKey.words;
	            var keySize = cfg.keySize;
	            var iterations = cfg.iterations;

	            // Generate key
	            while (derivedKeyWords.length < keySize) {
	                if (block) {
	                    hasher.update(block);
	                }
	                var block = hasher.update(password).finalize(salt);
	                hasher.reset();

	                // Iterations
	                for (var i = 1; i < iterations; i++) {
	                    block = hasher.finalize(block);
	                    hasher.reset();
	                }

	                derivedKey.concat(block);
	            }
	            derivedKey.sigBytes = keySize * 4;

	            return derivedKey;
	        }
	    });

	    /**
	     * Derives a key from a password.
	     *
	     * @param {WordArray|string} password The password.
	     * @param {WordArray|string} salt A salt.
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.
	     *
	     * @return {WordArray} The derived key.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var key = CryptoJS.EvpKDF(password, salt);
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
	     */
	    C.EvpKDF = function (password, salt, cfg) {
	        return EvpKDF.create(cfg).compute(password, salt);
	    };
	}());


	return CryptoJS.EvpKDF;

}));
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/crypto-js/evpkdf.js","/../node_modules/crypto-js")
},{"./core":20,"./hmac":24,"./sha1":26,"buffer":11,"pBGvAp":74}],24:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var C_enc = C.enc;
	    var Utf8 = C_enc.Utf8;
	    var C_algo = C.algo;

	    /**
	     * HMAC algorithm.
	     */
	    var HMAC = C_algo.HMAC = Base.extend({
	        /**
	         * Initializes a newly created HMAC.
	         *
	         * @param {Hasher} hasher The hash algorithm to use.
	         * @param {WordArray|string} key The secret key.
	         *
	         * @example
	         *
	         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
	         */
	        init: function (hasher, key) {
	            // Init hasher
	            hasher = this._hasher = new hasher.init();

	            // Convert string to WordArray, else assume WordArray already
	            if (typeof key == 'string') {
	                key = Utf8.parse(key);
	            }

	            // Shortcuts
	            var hasherBlockSize = hasher.blockSize;
	            var hasherBlockSizeBytes = hasherBlockSize * 4;

	            // Allow arbitrary length keys
	            if (key.sigBytes > hasherBlockSizeBytes) {
	                key = hasher.finalize(key);
	            }

	            // Clamp excess bits
	            key.clamp();

	            // Clone key for inner and outer pads
	            var oKey = this._oKey = key.clone();
	            var iKey = this._iKey = key.clone();

	            // Shortcuts
	            var oKeyWords = oKey.words;
	            var iKeyWords = iKey.words;

	            // XOR keys with pad constants
	            for (var i = 0; i < hasherBlockSize; i++) {
	                oKeyWords[i] ^= 0x5c5c5c5c;
	                iKeyWords[i] ^= 0x36363636;
	            }
	            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this HMAC to its initial state.
	         *
	         * @example
	         *
	         *     hmacHasher.reset();
	         */
	        reset: function () {
	            // Shortcut
	            var hasher = this._hasher;

	            // Reset
	            hasher.reset();
	            hasher.update(this._iKey);
	        },

	        /**
	         * Updates this HMAC with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {HMAC} This HMAC instance.
	         *
	         * @example
	         *
	         *     hmacHasher.update('message');
	         *     hmacHasher.update(wordArray);
	         */
	        update: function (messageUpdate) {
	            this._hasher.update(messageUpdate);

	            // Chainable
	            return this;
	        },

	        /**
	         * Finalizes the HMAC computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The HMAC.
	         *
	         * @example
	         *
	         *     var hmac = hmacHasher.finalize();
	         *     var hmac = hmacHasher.finalize('message');
	         *     var hmac = hmacHasher.finalize(wordArray);
	         */
	        finalize: function (messageUpdate) {
	            // Shortcut
	            var hasher = this._hasher;

	            // Compute HMAC
	            var innerHash = hasher.finalize(messageUpdate);
	            hasher.reset();
	            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));

	            return hmac;
	        }
	    });
	}());


}));
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/crypto-js/hmac.js","/../node_modules/crypto-js")
},{"./core":20,"buffer":11,"pBGvAp":74}],25:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Constants table
	    var T = [];

	    // Compute constants
	    (function () {
	        for (var i = 0; i < 64; i++) {
	            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
	        }
	    }());

	    /**
	     * MD5 hash algorithm.
	     */
	    var MD5 = C_algo.MD5 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0x67452301, 0xefcdab89,
	                0x98badcfe, 0x10325476
	            ]);
	        },

	        _doProcessBlock: function (M, offset) {
	            // Swap endian
	            for (var i = 0; i < 16; i++) {
	                // Shortcuts
	                var offset_i = offset + i;
	                var M_offset_i = M[offset_i];

	                M[offset_i] = (
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	                );
	            }

	            // Shortcuts
	            var H = this._hash.words;

	            var M_offset_0  = M[offset + 0];
	            var M_offset_1  = M[offset + 1];
	            var M_offset_2  = M[offset + 2];
	            var M_offset_3  = M[offset + 3];
	            var M_offset_4  = M[offset + 4];
	            var M_offset_5  = M[offset + 5];
	            var M_offset_6  = M[offset + 6];
	            var M_offset_7  = M[offset + 7];
	            var M_offset_8  = M[offset + 8];
	            var M_offset_9  = M[offset + 9];
	            var M_offset_10 = M[offset + 10];
	            var M_offset_11 = M[offset + 11];
	            var M_offset_12 = M[offset + 12];
	            var M_offset_13 = M[offset + 13];
	            var M_offset_14 = M[offset + 14];
	            var M_offset_15 = M[offset + 15];

	            // Working varialbes
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];

	            // Computation
	            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);
	            d = FF(d, a, b, c, M_offset_1,  12, T[1]);
	            c = FF(c, d, a, b, M_offset_2,  17, T[2]);
	            b = FF(b, c, d, a, M_offset_3,  22, T[3]);
	            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);
	            d = FF(d, a, b, c, M_offset_5,  12, T[5]);
	            c = FF(c, d, a, b, M_offset_6,  17, T[6]);
	            b = FF(b, c, d, a, M_offset_7,  22, T[7]);
	            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);
	            d = FF(d, a, b, c, M_offset_9,  12, T[9]);
	            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
	            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
	            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);
	            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
	            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
	            b = FF(b, c, d, a, M_offset_15, 22, T[15]);

	            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);
	            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);
	            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
	            b = GG(b, c, d, a, M_offset_0,  20, T[19]);
	            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);
	            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);
	            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
	            b = GG(b, c, d, a, M_offset_4,  20, T[23]);
	            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);
	            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);
	            c = GG(c, d, a, b, M_offset_3,  14, T[26]);
	            b = GG(b, c, d, a, M_offset_8,  20, T[27]);
	            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);
	            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);
	            c = GG(c, d, a, b, M_offset_7,  14, T[30]);
	            b = GG(b, c, d, a, M_offset_12, 20, T[31]);

	            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);
	            d = HH(d, a, b, c, M_offset_8,  11, T[33]);
	            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
	            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
	            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);
	            d = HH(d, a, b, c, M_offset_4,  11, T[37]);
	            c = HH(c, d, a, b, M_offset_7,  16, T[38]);
	            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
	            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);
	            d = HH(d, a, b, c, M_offset_0,  11, T[41]);
	            c = HH(c, d, a, b, M_offset_3,  16, T[42]);
	            b = HH(b, c, d, a, M_offset_6,  23, T[43]);
	            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);
	            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
	            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
	            b = HH(b, c, d, a, M_offset_2,  23, T[47]);

	            a = II(a, b, c, d, M_offset_0,  6,  T[48]);
	            d = II(d, a, b, c, M_offset_7,  10, T[49]);
	            c = II(c, d, a, b, M_offset_14, 15, T[50]);
	            b = II(b, c, d, a, M_offset_5,  21, T[51]);
	            a = II(a, b, c, d, M_offset_12, 6,  T[52]);
	            d = II(d, a, b, c, M_offset_3,  10, T[53]);
	            c = II(c, d, a, b, M_offset_10, 15, T[54]);
	            b = II(b, c, d, a, M_offset_1,  21, T[55]);
	            a = II(a, b, c, d, M_offset_8,  6,  T[56]);
	            d = II(d, a, b, c, M_offset_15, 10, T[57]);
	            c = II(c, d, a, b, M_offset_6,  15, T[58]);
	            b = II(b, c, d, a, M_offset_13, 21, T[59]);
	            a = II(a, b, c, d, M_offset_4,  6,  T[60]);
	            d = II(d, a, b, c, M_offset_11, 10, T[61]);
	            c = II(c, d, a, b, M_offset_2,  15, T[62]);
	            b = II(b, c, d, a, M_offset_9,  21, T[63]);

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);

	            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
	            var nBitsTotalL = nBitsTotal;
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
	                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)
	            );
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)
	            );

	            data.sigBytes = (dataWords.length + 1) * 4;

	            // Hash final blocks
	            this._process();

	            // Shortcuts
	            var hash = this._hash;
	            var H = hash.words;

	            // Swap endian
	            for (var i = 0; i < 4; i++) {
	                // Shortcut
	                var H_i = H[i];

	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	            }

	            // Return final computed hash
	            return hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    function FF(a, b, c, d, x, s, t) {
	        var n = a + ((b & c) | (~b & d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function GG(a, b, c, d, x, s, t) {
	        var n = a + ((b & d) | (c & ~d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function HH(a, b, c, d, x, s, t) {
	        var n = a + (b ^ c ^ d) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function II(a, b, c, d, x, s, t) {
	        var n = a + (c ^ (b | ~d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.MD5('message');
	     *     var hash = CryptoJS.MD5(wordArray);
	     */
	    C.MD5 = Hasher._createHelper(MD5);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacMD5(message, key);
	     */
	    C.HmacMD5 = Hasher._createHmacHelper(MD5);
	}(Math));


	return CryptoJS.MD5;

}));
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/crypto-js/md5.js","/../node_modules/crypto-js")
},{"./core":20,"buffer":11,"pBGvAp":74}],26:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Reusable object
	    var W = [];

	    /**
	     * SHA-1 hash algorithm.
	     */
	    var SHA1 = C_algo.SHA1 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0x67452301, 0xefcdab89,
	                0x98badcfe, 0x10325476,
	                0xc3d2e1f0
	            ]);
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var H = this._hash.words;

	            // Working variables
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];
	            var e = H[4];

	            // Computation
	            for (var i = 0; i < 80; i++) {
	                if (i < 16) {
	                    W[i] = M[offset + i] | 0;
	                } else {
	                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
	                    W[i] = (n << 1) | (n >>> 31);
	                }

	                var t = ((a << 5) | (a >>> 27)) + e + W[i];
	                if (i < 20) {
	                    t += ((b & c) | (~b & d)) + 0x5a827999;
	                } else if (i < 40) {
	                    t += (b ^ c ^ d) + 0x6ed9eba1;
	                } else if (i < 60) {
	                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;
	                } else /* if (i < 80) */ {
	                    t += (b ^ c ^ d) - 0x359d3e2a;
	                }

	                e = d;
	                d = c;
	                c = (b << 30) | (b >>> 2);
	                b = a;
	                a = t;
	            }

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	            H[4] = (H[4] + e) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Return final computed hash
	            return this._hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA1('message');
	     *     var hash = CryptoJS.SHA1(wordArray);
	     */
	    C.SHA1 = Hasher._createHelper(SHA1);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA1(message, key);
	     */
	    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
	}());


	return CryptoJS.SHA1;

}));
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/crypto-js/sha1.js","/../node_modules/crypto-js")
},{"./core":20,"buffer":11,"pBGvAp":74}],27:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var currencySymbolMap = require('./map');

var symbolCurrencyMap = {};
Object.keys(currencySymbolMap).forEach(function (key) {
  symbolCurrencyMap[currencySymbolMap[key]] = key
})

function getSymbolFromCurrency(currencyCode) {
  if (typeof currencyCode !== 'string') return undefined
  var code = currencyCode.toUpperCase();
  if (!currencySymbolMap.hasOwnProperty(code)) return undefined
  return currencySymbolMap[code];
}

function getCurrencyFromSymbol(symbol) {
  if (!symbolCurrencyMap.hasOwnProperty(symbol)) return undefined
  return symbolCurrencyMap[symbol]
}

function getSymbol(currencyCode) {
  if (typeof currencyCode !== 'string') return '?'
  var symbol = getSymbolFromCurrency(currencyCode.toUpperCase())
  return symbol !== undefined ? symbol : '?'
}

module.exports = getSymbol
module.exports.getSymbolFromCurrency = getSymbolFromCurrency
module.exports.getCurrencyFromSymbol = getCurrencyFromSymbol
module.exports.symbolCurrencyMap = symbolCurrencyMap
module.exports.currencySymbolMap = currencySymbolMap

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/currency-symbol-map/currency-symbol-map.js","/../node_modules/currency-symbol-map")
},{"./map":28,"buffer":11,"pBGvAp":74}],28:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
module.exports =
{ "ALL": "L"
, "AFN": "؋"
, "ARS": "$"
, "AWG": "ƒ"
, "AUD": "$"
, "AZN": "₼"
, "BSD": "$"
, "BBD": "$"
, "BYR": "p."
, "BZD": "BZ$"
, "BMD": "$"
, "BOB": "Bs."
, "BAM": "KM"
, "BWP": "P"
, "BGN": "лв"
, "BRL": "R$"
, "BND": "$"
, "BTC": "Ƀ"
, "KHR": "៛"
, "CAD": "$"
, "KYD": "$"
, "CLP": "$"
, "CNY": "¥"
, "COP": "$"
, "CRC": "₡"
, "HRK": "kn"
, "CUP": "₱"
, "CZK": "Kč"
, "DKK": "kr"
, "DOP": "RD$"
, "XCD": "$"
, "EGP": "£"
, "SVC": "$"
, "EEK": "kr"
, "EUR": "€"
, "FKP": "£"
, "FJD": "$"
, "GHC": "₵"
, "GIP": "£"
, "GTQ": "Q"
, "GGP": "£"
, "GYD": "$"
, "HNL": "L"
, "HKD": "$"
, "HUF": "Ft"
, "ISK": "kr"
, "INR": "₹"
, "IDR": "Rp"
, "IRR": "﷼"
, "IMP": "£"
, "ILS": "₪"
, "JMD": "J$"
, "JPY": "¥"
, "JEP": "£"
, "KES": "KSh"
, "KZT": "лв"
, "KPW": "₩"
, "KRW": "₩"
, "KGS": "лв"
, "LAK": "₭"
, "LVL": "Ls"
, "LBP": "£"
, "LRD": "$"
, "LTL": "Lt"
, "MKD": "ден"
, "MYR": "RM"
, "MUR": "₨"
, "MXN": "$"
, "MNT": "₮"
, "MZN": "MT"
, "NAD": "$"
, "NPR": "₨"
, "ANG": "ƒ"
, "NZD": "$"
, "NIO": "C$"
, "NGN": "₦"
, "NOK": "kr"
, "OMR": "﷼"
, "PKR": "₨"
, "PAB": "B/."
, "PYG": "Gs"
, "PEN": "S/."
, "PHP": "₱"
, "PLN": "zł"
, "QAR": "﷼"
, "RON": "lei"
, "RUB": "₽"
, "RMB": "￥"
, "SHP": "£"
, "SAR": "﷼"
, "RSD": "Дин."
, "SCR": "₨"
, "SGD": "$"
, "SBD": "$"
, "SOS": "S"
, "ZAR": "R"
, "LKR": "₨"
, "SEK": "kr"
, "CHF": "CHF"
, "SRD": "$"
, "SYP": "£"
, "TZS": "TSh"
, "TWD": "NT$"
, "THB": "฿"
, "TTD": "TT$"
, "TRY": "₺"
, "TRL": "₤"
, "TVD": "$"
, "UGX": "USh"
, "UAH": "₴"
, "GBP": "£"
, "USD": "$"
, "UYU": "$U"
, "UZS": "лв"
, "VEF": "Bs"
, "VND": "₫"
, "YER": "﷼"
, "ZWD": "Z$"
, "GEL": "₾"
, "KZT": "₸"
}

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/currency-symbol-map/map.js","/../node_modules/currency-symbol-map")
},{"buffer":11,"pBGvAp":74}],29:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict'

/**
 * Diff Match and Patch
 *
 * Copyright 2006 Google Inc.
 * http://code.google.com/p/google-diff-match-patch/
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Computes the difference between two texts to create a patch.
 * Applies the patch onto another text, allowing for errors.
 * @author fraser@google.com (Neil Fraser)
 */

/**
 * Class containing the diff, match and patch methods.
 * @constructor
 */
function diff_match_patch() {

  // Defaults.
  // Redefine these in your program to override the defaults.

  // Number of seconds to map a diff before giving up (0 for infinity).
  this.Diff_Timeout = 1.0;
  // Cost of an empty edit operation in terms of edit characters.
  this.Diff_EditCost = 4;
  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).
  this.Match_Threshold = 0.5;
  // How far to search for a match (0 = exact location, 1000+ = broad match).
  // A match this many characters away from the expected location will add
  // 1.0 to the score (0.0 is a perfect match).
  this.Match_Distance = 1000;
  // When deleting a large block of text (over ~64 characters), how close do
  // the contents have to be to match the expected contents. (0.0 = perfection,
  // 1.0 = very loose).  Note that Match_Threshold controls how closely the
  // end points of a delete need to match.
  this.Patch_DeleteThreshold = 0.5;
  // Chunk size for context length.
  this.Patch_Margin = 4;

  // The number of bits in an int.
  this.Match_MaxBits = 32;
}


//  DIFF FUNCTIONS


/**
 * The data structure representing a diff is an array of tuples:
 * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
 * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
 */
var DIFF_DELETE = -1;
var DIFF_INSERT = 1;
var DIFF_EQUAL = 0;

/** @typedef {{0: number, 1: string}} */
diff_match_patch.Diff;


/**
 * Find the differences between two texts.  Simplifies the problem by stripping
 * any common prefix or suffix off the texts before diffing.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {boolean=} opt_checklines Optional speedup flag. If present and false,
 *     then don't run a line-level diff first to identify the changed areas.
 *     Defaults to true, which does a faster, slightly less optimal diff.
 * @param {number} opt_deadline Optional time when the diff should be complete
 *     by.  Used internally for recursive calls.  Users should set DiffTimeout
 *     instead.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 */
diff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,
    opt_deadline) {
  // Set a deadline by which time the diff must be complete.
  if (typeof opt_deadline == 'undefined') {
    if (this.Diff_Timeout <= 0) {
      opt_deadline = Number.MAX_VALUE;
    } else {
      opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;
    }
  }
  var deadline = opt_deadline;

  // Check for null inputs.
  if (text1 == null || text2 == null) {
    throw new Error('Null input. (diff_main)');
  }

  // Check for equality (speedup).
  if (text1 == text2) {
    if (text1) {
      return [[DIFF_EQUAL, text1]];
    }
    return [];
  }

  if (typeof opt_checklines == 'undefined') {
    opt_checklines = true;
  }
  var checklines = opt_checklines;

  // Trim off common prefix (speedup).
  var commonlength = this.diff_commonPrefix(text1, text2);
  var commonprefix = text1.substring(0, commonlength);
  text1 = text1.substring(commonlength);
  text2 = text2.substring(commonlength);

  // Trim off common suffix (speedup).
  commonlength = this.diff_commonSuffix(text1, text2);
  var commonsuffix = text1.substring(text1.length - commonlength);
  text1 = text1.substring(0, text1.length - commonlength);
  text2 = text2.substring(0, text2.length - commonlength);

  // Compute the diff on the middle block.
  var diffs = this.diff_compute_(text1, text2, checklines, deadline);

  // Restore the prefix and suffix.
  if (commonprefix) {
    diffs.unshift([DIFF_EQUAL, commonprefix]);
  }
  if (commonsuffix) {
    diffs.push([DIFF_EQUAL, commonsuffix]);
  }
  this.diff_cleanupMerge(diffs);
  return diffs;
};


/**
 * Find the differences between two texts.  Assumes that the texts do not
 * have any common prefix or suffix.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {boolean} checklines Speedup flag.  If false, then don't run a
 *     line-level diff first to identify the changed areas.
 *     If true, then run a faster, slightly less optimal diff.
 * @param {number} deadline Time when the diff should be complete by.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 * @private
 */
diff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,
    deadline) {
  var diffs;

  if (!text1) {
    // Just add some text (speedup).
    return [[DIFF_INSERT, text2]];
  }

  if (!text2) {
    // Just delete some text (speedup).
    return [[DIFF_DELETE, text1]];
  }

  var longtext = text1.length > text2.length ? text1 : text2;
  var shorttext = text1.length > text2.length ? text2 : text1;
  var i = longtext.indexOf(shorttext);
  if (i != -1) {
    // Shorter text is inside the longer text (speedup).
    diffs = [[DIFF_INSERT, longtext.substring(0, i)],
             [DIFF_EQUAL, shorttext],
             [DIFF_INSERT, longtext.substring(i + shorttext.length)]];
    // Swap insertions for deletions if diff is reversed.
    if (text1.length > text2.length) {
      diffs[0][0] = diffs[2][0] = DIFF_DELETE;
    }
    return diffs;
  }

  if (shorttext.length == 1) {
    // Single character string.
    // After the previous speedup, the character can't be an equality.
    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
  }

  // Check to see if the problem can be split in two.
  var hm = this.diff_halfMatch_(text1, text2);
  if (hm) {
    // A half-match was found, sort out the return data.
    var text1_a = hm[0];
    var text1_b = hm[1];
    var text2_a = hm[2];
    var text2_b = hm[3];
    var mid_common = hm[4];
    // Send both pairs off for separate processing.
    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);
    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);
    // Merge the results.
    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);
  }

  if (checklines && text1.length > 100 && text2.length > 100) {
    return this.diff_lineMode_(text1, text2, deadline);
  }

  return this.diff_bisect_(text1, text2, deadline);
};


/**
 * Do a quick line-level diff on both strings, then rediff the parts for
 * greater accuracy.
 * This speedup can produce non-minimal diffs.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {number} deadline Time when the diff should be complete by.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 * @private
 */
diff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {
  // Scan the text on a line-by-line basis first.
  var a = this.diff_linesToChars_(text1, text2);
  text1 = a.chars1;
  text2 = a.chars2;
  var linearray = a.lineArray;

  var diffs = this.diff_main(text1, text2, false, deadline);

  // Convert the diff back to original text.
  this.diff_charsToLines_(diffs, linearray);
  // Eliminate freak matches (e.g. blank lines)
  this.diff_cleanupSemantic(diffs);

  // Rediff any replacement blocks, this time character-by-character.
  // Add a dummy entry at the end.
  diffs.push([DIFF_EQUAL, '']);
  var pointer = 0;
  var count_delete = 0;
  var count_insert = 0;
  var text_delete = '';
  var text_insert = '';
  while (pointer < diffs.length) {
    switch (diffs[pointer][0]) {
      case DIFF_INSERT:
        count_insert++;
        text_insert += diffs[pointer][1];
        break;
      case DIFF_DELETE:
        count_delete++;
        text_delete += diffs[pointer][1];
        break;
      case DIFF_EQUAL:
        // Upon reaching an equality, check for prior redundancies.
        if (count_delete >= 1 && count_insert >= 1) {
          // Delete the offending records and add the merged ones.
          diffs.splice(pointer - count_delete - count_insert,
                       count_delete + count_insert);
          pointer = pointer - count_delete - count_insert;
          var a = this.diff_main(text_delete, text_insert, false, deadline);
          for (var j = a.length - 1; j >= 0; j--) {
            diffs.splice(pointer, 0, a[j]);
          }
          pointer = pointer + a.length;
        }
        count_insert = 0;
        count_delete = 0;
        text_delete = '';
        text_insert = '';
        break;
    }
    pointer++;
  }
  diffs.pop();  // Remove the dummy entry at the end.

  return diffs;
};


/**
 * Find the 'middle snake' of a diff, split the problem in two
 * and return the recursively constructed diff.
 * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {number} deadline Time at which to bail if not yet complete.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 * @private
 */
diff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {
  // Cache the text lengths to prevent multiple calls.
  var text1_length = text1.length;
  var text2_length = text2.length;
  var max_d = Math.ceil((text1_length + text2_length) / 2);
  var v_offset = max_d;
  var v_length = 2 * max_d;
  var v1 = new Array(v_length);
  var v2 = new Array(v_length);
  // Setting all elements to -1 is faster in Chrome & Firefox than mixing
  // integers and undefined.
  for (var x = 0; x < v_length; x++) {
    v1[x] = -1;
    v2[x] = -1;
  }
  v1[v_offset + 1] = 0;
  v2[v_offset + 1] = 0;
  var delta = text1_length - text2_length;
  // If the total number of characters is odd, then the front path will collide
  // with the reverse path.
  var front = (delta % 2 != 0);
  // Offsets for start and end of k loop.
  // Prevents mapping of space beyond the grid.
  var k1start = 0;
  var k1end = 0;
  var k2start = 0;
  var k2end = 0;
  for (var d = 0; d < max_d; d++) {
    // Bail out if deadline is reached.
    if ((new Date()).getTime() > deadline) {
      break;
    }

    // Walk the front path one step.
    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
      var k1_offset = v_offset + k1;
      var x1;
      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {
        x1 = v1[k1_offset + 1];
      } else {
        x1 = v1[k1_offset - 1] + 1;
      }
      var y1 = x1 - k1;
      while (x1 < text1_length && y1 < text2_length &&
             text1.charAt(x1) == text2.charAt(y1)) {
        x1++;
        y1++;
      }
      v1[k1_offset] = x1;
      if (x1 > text1_length) {
        // Ran off the right of the graph.
        k1end += 2;
      } else if (y1 > text2_length) {
        // Ran off the bottom of the graph.
        k1start += 2;
      } else if (front) {
        var k2_offset = v_offset + delta - k1;
        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {
          // Mirror x2 onto top-left coordinate system.
          var x2 = text1_length - v2[k2_offset];
          if (x1 >= x2) {
            // Overlap detected.
            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);
          }
        }
      }
    }

    // Walk the reverse path one step.
    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
      var k2_offset = v_offset + k2;
      var x2;
      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {
        x2 = v2[k2_offset + 1];
      } else {
        x2 = v2[k2_offset - 1] + 1;
      }
      var y2 = x2 - k2;
      while (x2 < text1_length && y2 < text2_length &&
             text1.charAt(text1_length - x2 - 1) ==
             text2.charAt(text2_length - y2 - 1)) {
        x2++;
        y2++;
      }
      v2[k2_offset] = x2;
      if (x2 > text1_length) {
        // Ran off the left of the graph.
        k2end += 2;
      } else if (y2 > text2_length) {
        // Ran off the top of the graph.
        k2start += 2;
      } else if (!front) {
        var k1_offset = v_offset + delta - k2;
        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {
          var x1 = v1[k1_offset];
          var y1 = v_offset + x1 - k1_offset;
          // Mirror x2 onto top-left coordinate system.
          x2 = text1_length - x2;
          if (x1 >= x2) {
            // Overlap detected.
            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);
          }
        }
      }
    }
  }
  // Diff took too long and hit the deadline or
  // number of diffs equals number of characters, no commonality at all.
  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
};


/**
 * Given the location of the 'middle snake', split the diff in two parts
 * and recurse.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {number} x Index of split point in text1.
 * @param {number} y Index of split point in text2.
 * @param {number} deadline Time at which to bail if not yet complete.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 * @private
 */
diff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,
    deadline) {
  var text1a = text1.substring(0, x);
  var text2a = text2.substring(0, y);
  var text1b = text1.substring(x);
  var text2b = text2.substring(y);

  // Compute both diffs serially.
  var diffs = this.diff_main(text1a, text2a, false, deadline);
  var diffsb = this.diff_main(text1b, text2b, false, deadline);

  return diffs.concat(diffsb);
};


/**
 * Split two texts into an array of strings.  Reduce the texts to a string of
 * hashes where each Unicode character represents one line.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}
 *     An object containing the encoded text1, the encoded text2 and
 *     the array of unique strings.
 *     The zeroth element of the array of unique strings is intentionally blank.
 * @private
 */
diff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {
  var lineArray = [];  // e.g. lineArray[4] == 'Hello\n'
  var lineHash = {};   // e.g. lineHash['Hello\n'] == 4

  // '\x00' is a valid character, but various debuggers don't like it.
  // So we'll insert a junk entry to avoid generating a null character.
  lineArray[0] = '';

  /**
   * Split a text into an array of strings.  Reduce the texts to a string of
   * hashes where each Unicode character represents one line.
   * Modifies linearray and linehash through being a closure.
   * @param {string} text String to encode.
   * @return {string} Encoded string.
   * @private
   */
  function diff_linesToCharsMunge_(text) {
    var chars = '';
    // Walk the text, pulling out a substring for each line.
    // text.split('\n') would would temporarily double our memory footprint.
    // Modifying text would create many large strings to garbage collect.
    var lineStart = 0;
    var lineEnd = -1;
    // Keeping our own length variable is faster than looking it up.
    var lineArrayLength = lineArray.length;
    while (lineEnd < text.length - 1) {
      lineEnd = text.indexOf('\n', lineStart);
      if (lineEnd == -1) {
        lineEnd = text.length - 1;
      }
      var line = text.substring(lineStart, lineEnd + 1);
      lineStart = lineEnd + 1;

      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :
          (lineHash[line] !== undefined)) {
        chars += String.fromCharCode(lineHash[line]);
      } else {
        chars += String.fromCharCode(lineArrayLength);
        lineHash[line] = lineArrayLength;
        lineArray[lineArrayLength++] = line;
      }
    }
    return chars;
  }

  var chars1 = diff_linesToCharsMunge_(text1);
  var chars2 = diff_linesToCharsMunge_(text2);
  return {chars1: chars1, chars2: chars2, lineArray: lineArray};
};


/**
 * Rehydrate the text in a diff from a string of line hashes to real lines of
 * text.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @param {!Array.<string>} lineArray Array of unique strings.
 * @private
 */
diff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {
  for (var x = 0; x < diffs.length; x++) {
    var chars = diffs[x][1];
    var text = [];
    for (var y = 0; y < chars.length; y++) {
      text[y] = lineArray[chars.charCodeAt(y)];
    }
    diffs[x][1] = text.join('');
  }
};


/**
 * Determine the common prefix of two strings.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {number} The number of characters common to the start of each
 *     string.
 */
diff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {
  // Quick check for common null cases.
  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
    return 0;
  }
  // Binary search.
  // Performance analysis: http://neil.fraser.name/news/2007/10/09/
  var pointermin = 0;
  var pointermax = Math.min(text1.length, text2.length);
  var pointermid = pointermax;
  var pointerstart = 0;
  while (pointermin < pointermid) {
    if (text1.substring(pointerstart, pointermid) ==
        text2.substring(pointerstart, pointermid)) {
      pointermin = pointermid;
      pointerstart = pointermin;
    } else {
      pointermax = pointermid;
    }
    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
  }
  return pointermid;
};


/**
 * Determine the common suffix of two strings.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {number} The number of characters common to the end of each string.
 */
diff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {
  // Quick check for common null cases.
  if (!text1 || !text2 ||
      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {
    return 0;
  }
  // Binary search.
  // Performance analysis: http://neil.fraser.name/news/2007/10/09/
  var pointermin = 0;
  var pointermax = Math.min(text1.length, text2.length);
  var pointermid = pointermax;
  var pointerend = 0;
  while (pointermin < pointermid) {
    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==
        text2.substring(text2.length - pointermid, text2.length - pointerend)) {
      pointermin = pointermid;
      pointerend = pointermin;
    } else {
      pointermax = pointermid;
    }
    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
  }
  return pointermid;
};


/**
 * Determine if the suffix of one string is the prefix of another.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {number} The number of characters common to the end of the first
 *     string and the start of the second string.
 * @private
 */
diff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {
  // Cache the text lengths to prevent multiple calls.
  var text1_length = text1.length;
  var text2_length = text2.length;
  // Eliminate the null case.
  if (text1_length == 0 || text2_length == 0) {
    return 0;
  }
  // Truncate the longer string.
  if (text1_length > text2_length) {
    text1 = text1.substring(text1_length - text2_length);
  } else if (text1_length < text2_length) {
    text2 = text2.substring(0, text1_length);
  }
  var text_length = Math.min(text1_length, text2_length);
  // Quick check for the worst case.
  if (text1 == text2) {
    return text_length;
  }

  // Start by looking for a single character match
  // and increase length until no match is found.
  // Performance analysis: http://neil.fraser.name/news/2010/11/04/
  var best = 0;
  var length = 1;
  while (true) {
    var pattern = text1.substring(text_length - length);
    var found = text2.indexOf(pattern);
    if (found == -1) {
      return best;
    }
    length += found;
    if (found == 0 || text1.substring(text_length - length) ==
        text2.substring(0, length)) {
      best = length;
      length++;
    }
  }
};


/**
 * Do the two texts share a substring which is at least half the length of the
 * longer text?
 * This speedup can produce non-minimal diffs.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {Array.<string>} Five element Array, containing the prefix of
 *     text1, the suffix of text1, the prefix of text2, the suffix of
 *     text2 and the common middle.  Or null if there was no match.
 * @private
 */
diff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {
  if (this.Diff_Timeout <= 0) {
    // Don't risk returning a non-optimal diff if we have unlimited time.
    return null;
  }
  var longtext = text1.length > text2.length ? text1 : text2;
  var shorttext = text1.length > text2.length ? text2 : text1;
  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
    return null;  // Pointless.
  }
  var dmp = this;  // 'this' becomes 'window' in a closure.

  /**
   * Does a substring of shorttext exist within longtext such that the substring
   * is at least half the length of longtext?
   * Closure, but does not reference any external variables.
   * @param {string} longtext Longer string.
   * @param {string} shorttext Shorter string.
   * @param {number} i Start index of quarter length substring within longtext.
   * @return {Array.<string>} Five element Array, containing the prefix of
   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix
   *     of shorttext and the common middle.  Or null if there was no match.
   * @private
   */
  function diff_halfMatchI_(longtext, shorttext, i) {
    // Start with a 1/4 length substring at position i as a seed.
    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));
    var j = -1;
    var best_common = '';
    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;
    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {
      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),
                                               shorttext.substring(j));
      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),
                                               shorttext.substring(0, j));
      if (best_common.length < suffixLength + prefixLength) {
        best_common = shorttext.substring(j - suffixLength, j) +
            shorttext.substring(j, j + prefixLength);
        best_longtext_a = longtext.substring(0, i - suffixLength);
        best_longtext_b = longtext.substring(i + prefixLength);
        best_shorttext_a = shorttext.substring(0, j - suffixLength);
        best_shorttext_b = shorttext.substring(j + prefixLength);
      }
    }
    if (best_common.length * 2 >= longtext.length) {
      return [best_longtext_a, best_longtext_b,
              best_shorttext_a, best_shorttext_b, best_common];
    } else {
      return null;
    }
  }

  // First check if the second quarter is the seed for a half-match.
  var hm1 = diff_halfMatchI_(longtext, shorttext,
                             Math.ceil(longtext.length / 4));
  // Check again based on the third quarter.
  var hm2 = diff_halfMatchI_(longtext, shorttext,
                             Math.ceil(longtext.length / 2));
  var hm;
  if (!hm1 && !hm2) {
    return null;
  } else if (!hm2) {
    hm = hm1;
  } else if (!hm1) {
    hm = hm2;
  } else {
    // Both matched.  Select the longest.
    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
  }

  // A half-match was found, sort out the return data.
  var text1_a, text1_b, text2_a, text2_b;
  if (text1.length > text2.length) {
    text1_a = hm[0];
    text1_b = hm[1];
    text2_a = hm[2];
    text2_b = hm[3];
  } else {
    text2_a = hm[0];
    text2_b = hm[1];
    text1_a = hm[2];
    text1_b = hm[3];
  }
  var mid_common = hm[4];
  return [text1_a, text1_b, text2_a, text2_b, mid_common];
};


/**
 * Reduce the number of edits by eliminating semantically trivial equalities.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 */
diff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {
  var changes = false;
  var equalities = [];  // Stack of indices where equalities are found.
  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.
  /** @type {?string} */
  var lastequality = null;
  // Always equal to diffs[equalities[equalitiesLength - 1]][1]
  var pointer = 0;  // Index of current position.
  // Number of characters that changed prior to the equality.
  var length_insertions1 = 0;
  var length_deletions1 = 0;
  // Number of characters that changed after the equality.
  var length_insertions2 = 0;
  var length_deletions2 = 0;
  while (pointer < diffs.length) {
    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.
      equalities[equalitiesLength++] = pointer;
      length_insertions1 = length_insertions2;
      length_deletions1 = length_deletions2;
      length_insertions2 = 0;
      length_deletions2 = 0;
      lastequality = diffs[pointer][1];
    } else {  // An insertion or deletion.
      if (diffs[pointer][0] == DIFF_INSERT) {
        length_insertions2 += diffs[pointer][1].length;
      } else {
        length_deletions2 += diffs[pointer][1].length;
      }
      // Eliminate an equality that is smaller or equal to the edits on both
      // sides of it.
      if (lastequality && (lastequality.length <=
          Math.max(length_insertions1, length_deletions1)) &&
          (lastequality.length <= Math.max(length_insertions2,
                                           length_deletions2))) {
        // Duplicate record.
        diffs.splice(equalities[equalitiesLength - 1], 0,
                     [DIFF_DELETE, lastequality]);
        // Change second copy to insert.
        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;
        // Throw away the equality we just deleted.
        equalitiesLength--;
        // Throw away the previous equality (it needs to be reevaluated).
        equalitiesLength--;
        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;
        length_insertions1 = 0;  // Reset the counters.
        length_deletions1 = 0;
        length_insertions2 = 0;
        length_deletions2 = 0;
        lastequality = null;
        changes = true;
      }
    }
    pointer++;
  }

  // Normalize the diff.
  if (changes) {
    this.diff_cleanupMerge(diffs);
  }
  this.diff_cleanupSemanticLossless(diffs);

  // Find any overlaps between deletions and insertions.
  // e.g: <del>abcxxx</del><ins>xxxdef</ins>
  //   -> <del>abc</del>xxx<ins>def</ins>
  // e.g: <del>xxxabc</del><ins>defxxx</ins>
  //   -> <ins>def</ins>xxx<del>abc</del>
  // Only extract an overlap if it is as big as the edit ahead or behind it.
  pointer = 1;
  while (pointer < diffs.length) {
    if (diffs[pointer - 1][0] == DIFF_DELETE &&
        diffs[pointer][0] == DIFF_INSERT) {
      var deletion = diffs[pointer - 1][1];
      var insertion = diffs[pointer][1];
      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);
      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);
      if (overlap_length1 >= overlap_length2) {
        if (overlap_length1 >= deletion.length / 2 ||
            overlap_length1 >= insertion.length / 2) {
          // Overlap found.  Insert an equality and trim the surrounding edits.
          diffs.splice(pointer, 0,
              [DIFF_EQUAL, insertion.substring(0, overlap_length1)]);
          diffs[pointer - 1][1] =
              deletion.substring(0, deletion.length - overlap_length1);
          diffs[pointer + 1][1] = insertion.substring(overlap_length1);
          pointer++;
        }
      } else {
        if (overlap_length2 >= deletion.length / 2 ||
            overlap_length2 >= insertion.length / 2) {
          // Reverse overlap found.
          // Insert an equality and swap and trim the surrounding edits.
          diffs.splice(pointer, 0,
              [DIFF_EQUAL, deletion.substring(0, overlap_length2)]);
          diffs[pointer - 1][0] = DIFF_INSERT;
          diffs[pointer - 1][1] =
              insertion.substring(0, insertion.length - overlap_length2);
          diffs[pointer + 1][0] = DIFF_DELETE;
          diffs[pointer + 1][1] =
              deletion.substring(overlap_length2);
          pointer++;
        }
      }
      pointer++;
    }
    pointer++;
  }
};


/**
 * Look for single edits surrounded on both sides by equalities
 * which can be shifted sideways to align the edit to a word boundary.
 * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 */
diff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {
  /**
   * Given two strings, compute a score representing whether the internal
   * boundary falls on logical boundaries.
   * Scores range from 6 (best) to 0 (worst).
   * Closure, but does not reference any external variables.
   * @param {string} one First string.
   * @param {string} two Second string.
   * @return {number} The score.
   * @private
   */
  function diff_cleanupSemanticScore_(one, two) {
    if (!one || !two) {
      // Edges are the best.
      return 6;
    }

    // Each port of this function behaves slightly differently due to
    // subtle differences in each language's definition of things like
    // 'whitespace'.  Since this function's purpose is largely cosmetic,
    // the choice has been made to use each language's native features
    // rather than force total conformity.
    var char1 = one.charAt(one.length - 1);
    var char2 = two.charAt(0);
    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);
    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);
    var whitespace1 = nonAlphaNumeric1 &&
        char1.match(diff_match_patch.whitespaceRegex_);
    var whitespace2 = nonAlphaNumeric2 &&
        char2.match(diff_match_patch.whitespaceRegex_);
    var lineBreak1 = whitespace1 &&
        char1.match(diff_match_patch.linebreakRegex_);
    var lineBreak2 = whitespace2 &&
        char2.match(diff_match_patch.linebreakRegex_);
    var blankLine1 = lineBreak1 &&
        one.match(diff_match_patch.blanklineEndRegex_);
    var blankLine2 = lineBreak2 &&
        two.match(diff_match_patch.blanklineStartRegex_);

    if (blankLine1 || blankLine2) {
      // Five points for blank lines.
      return 5;
    } else if (lineBreak1 || lineBreak2) {
      // Four points for line breaks.
      return 4;
    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {
      // Three points for end of sentences.
      return 3;
    } else if (whitespace1 || whitespace2) {
      // Two points for whitespace.
      return 2;
    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {
      // One point for non-alphanumeric.
      return 1;
    }
    return 0;
  }

  var pointer = 1;
  // Intentionally ignore the first and last element (don't need checking).
  while (pointer < diffs.length - 1) {
    if (diffs[pointer - 1][0] == DIFF_EQUAL &&
        diffs[pointer + 1][0] == DIFF_EQUAL) {
      // This is a single edit surrounded by equalities.
      var equality1 = diffs[pointer - 1][1];
      var edit = diffs[pointer][1];
      var equality2 = diffs[pointer + 1][1];

      // First, shift the edit as far left as possible.
      var commonOffset = this.diff_commonSuffix(equality1, edit);
      if (commonOffset) {
        var commonString = edit.substring(edit.length - commonOffset);
        equality1 = equality1.substring(0, equality1.length - commonOffset);
        edit = commonString + edit.substring(0, edit.length - commonOffset);
        equality2 = commonString + equality2;
      }

      // Second, step character by character right, looking for the best fit.
      var bestEquality1 = equality1;
      var bestEdit = edit;
      var bestEquality2 = equality2;
      var bestScore = diff_cleanupSemanticScore_(equality1, edit) +
          diff_cleanupSemanticScore_(edit, equality2);
      while (edit.charAt(0) === equality2.charAt(0)) {
        equality1 += edit.charAt(0);
        edit = edit.substring(1) + equality2.charAt(0);
        equality2 = equality2.substring(1);
        var score = diff_cleanupSemanticScore_(equality1, edit) +
            diff_cleanupSemanticScore_(edit, equality2);
        // The >= encourages trailing rather than leading whitespace on edits.
        if (score >= bestScore) {
          bestScore = score;
          bestEquality1 = equality1;
          bestEdit = edit;
          bestEquality2 = equality2;
        }
      }

      if (diffs[pointer - 1][1] != bestEquality1) {
        // We have an improvement, save it back to the diff.
        if (bestEquality1) {
          diffs[pointer - 1][1] = bestEquality1;
        } else {
          diffs.splice(pointer - 1, 1);
          pointer--;
        }
        diffs[pointer][1] = bestEdit;
        if (bestEquality2) {
          diffs[pointer + 1][1] = bestEquality2;
        } else {
          diffs.splice(pointer + 1, 1);
          pointer--;
        }
      }
    }
    pointer++;
  }
};

// Define some regex patterns for matching boundaries.
diff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;
diff_match_patch.whitespaceRegex_ = /\s/;
diff_match_patch.linebreakRegex_ = /[\r\n]/;
diff_match_patch.blanklineEndRegex_ = /\n\r?\n$/;
diff_match_patch.blanklineStartRegex_ = /^\r?\n\r?\n/;

/**
 * Reduce the number of edits by eliminating operationally trivial equalities.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 */
diff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {
  var changes = false;
  var equalities = [];  // Stack of indices where equalities are found.
  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.
  /** @type {?string} */
  var lastequality = null;
  // Always equal to diffs[equalities[equalitiesLength - 1]][1]
  var pointer = 0;  // Index of current position.
  // Is there an insertion operation before the last equality.
  var pre_ins = false;
  // Is there a deletion operation before the last equality.
  var pre_del = false;
  // Is there an insertion operation after the last equality.
  var post_ins = false;
  // Is there a deletion operation after the last equality.
  var post_del = false;
  while (pointer < diffs.length) {
    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.
      if (diffs[pointer][1].length < this.Diff_EditCost &&
          (post_ins || post_del)) {
        // Candidate found.
        equalities[equalitiesLength++] = pointer;
        pre_ins = post_ins;
        pre_del = post_del;
        lastequality = diffs[pointer][1];
      } else {
        // Not a candidate, and can never become one.
        equalitiesLength = 0;
        lastequality = null;
      }
      post_ins = post_del = false;
    } else {  // An insertion or deletion.
      if (diffs[pointer][0] == DIFF_DELETE) {
        post_del = true;
      } else {
        post_ins = true;
      }
      /*
       * Five types to be split:
       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>
       * <ins>A</ins>X<ins>C</ins><del>D</del>
       * <ins>A</ins><del>B</del>X<ins>C</ins>
       * <ins>A</del>X<ins>C</ins><del>D</del>
       * <ins>A</ins><del>B</del>X<del>C</del>
       */
      if (lastequality && ((pre_ins && pre_del && post_ins && post_del) ||
                           ((lastequality.length < this.Diff_EditCost / 2) &&
                            (pre_ins + pre_del + post_ins + post_del) == 3))) {
        // Duplicate record.
        diffs.splice(equalities[equalitiesLength - 1], 0,
                     [DIFF_DELETE, lastequality]);
        // Change second copy to insert.
        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;
        equalitiesLength--;  // Throw away the equality we just deleted;
        lastequality = null;
        if (pre_ins && pre_del) {
          // No changes made which could affect previous entry, keep going.
          post_ins = post_del = true;
          equalitiesLength = 0;
        } else {
          equalitiesLength--;  // Throw away the previous equality.
          pointer = equalitiesLength > 0 ?
              equalities[equalitiesLength - 1] : -1;
          post_ins = post_del = false;
        }
        changes = true;
      }
    }
    pointer++;
  }

  if (changes) {
    this.diff_cleanupMerge(diffs);
  }
};


/**
 * Reorder and merge like edit sections.  Merge equalities.
 * Any edit section can move as long as it doesn't cross an equality.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 */
diff_match_patch.prototype.diff_cleanupMerge = function(diffs) {
  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.
  var pointer = 0;
  var count_delete = 0;
  var count_insert = 0;
  var text_delete = '';
  var text_insert = '';
  var commonlength;
  while (pointer < diffs.length) {
    switch (diffs[pointer][0]) {
      case DIFF_INSERT:
        count_insert++;
        text_insert += diffs[pointer][1];
        pointer++;
        break;
      case DIFF_DELETE:
        count_delete++;
        text_delete += diffs[pointer][1];
        pointer++;
        break;
      case DIFF_EQUAL:
        // Upon reaching an equality, check for prior redundancies.
        if (count_delete + count_insert > 1) {
          if (count_delete !== 0 && count_insert !== 0) {
            // Factor out any common prefixies.
            commonlength = this.diff_commonPrefix(text_insert, text_delete);
            if (commonlength !== 0) {
              if ((pointer - count_delete - count_insert) > 0 &&
                  diffs[pointer - count_delete - count_insert - 1][0] ==
                  DIFF_EQUAL) {
                diffs[pointer - count_delete - count_insert - 1][1] +=
                    text_insert.substring(0, commonlength);
              } else {
                diffs.splice(0, 0, [DIFF_EQUAL,
                                    text_insert.substring(0, commonlength)]);
                pointer++;
              }
              text_insert = text_insert.substring(commonlength);
              text_delete = text_delete.substring(commonlength);
            }
            // Factor out any common suffixies.
            commonlength = this.diff_commonSuffix(text_insert, text_delete);
            if (commonlength !== 0) {
              diffs[pointer][1] = text_insert.substring(text_insert.length -
                  commonlength) + diffs[pointer][1];
              text_insert = text_insert.substring(0, text_insert.length -
                  commonlength);
              text_delete = text_delete.substring(0, text_delete.length -
                  commonlength);
            }
          }
          // Delete the offending records and add the merged ones.
          if (count_delete === 0) {
            diffs.splice(pointer - count_insert,
                count_delete + count_insert, [DIFF_INSERT, text_insert]);
          } else if (count_insert === 0) {
            diffs.splice(pointer - count_delete,
                count_delete + count_insert, [DIFF_DELETE, text_delete]);
          } else {
            diffs.splice(pointer - count_delete - count_insert,
                count_delete + count_insert, [DIFF_DELETE, text_delete],
                [DIFF_INSERT, text_insert]);
          }
          pointer = pointer - count_delete - count_insert +
                    (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;
        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {
          // Merge this equality with the previous one.
          diffs[pointer - 1][1] += diffs[pointer][1];
          diffs.splice(pointer, 1);
        } else {
          pointer++;
        }
        count_insert = 0;
        count_delete = 0;
        text_delete = '';
        text_insert = '';
        break;
    }
  }
  if (diffs[diffs.length - 1][1] === '') {
    diffs.pop();  // Remove the dummy entry at the end.
  }

  // Second pass: look for single edits surrounded on both sides by equalities
  // which can be shifted sideways to eliminate an equality.
  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC
  var changes = false;
  pointer = 1;
  // Intentionally ignore the first and last element (don't need checking).
  while (pointer < diffs.length - 1) {
    if (diffs[pointer - 1][0] == DIFF_EQUAL &&
        diffs[pointer + 1][0] == DIFF_EQUAL) {
      // This is a single edit surrounded by equalities.
      if (diffs[pointer][1].substring(diffs[pointer][1].length -
          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {
        // Shift the edit over the previous equality.
        diffs[pointer][1] = diffs[pointer - 1][1] +
            diffs[pointer][1].substring(0, diffs[pointer][1].length -
                                        diffs[pointer - 1][1].length);
        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
        diffs.splice(pointer - 1, 1);
        changes = true;
      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==
          diffs[pointer + 1][1]) {
        // Shift the edit over the next equality.
        diffs[pointer - 1][1] += diffs[pointer + 1][1];
        diffs[pointer][1] =
            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +
            diffs[pointer + 1][1];
        diffs.splice(pointer + 1, 1);
        changes = true;
      }
    }
    pointer++;
  }
  // If shifts were made, the diff needs reordering and another shift sweep.
  if (changes) {
    this.diff_cleanupMerge(diffs);
  }
};


/**
 * loc is a location in text1, compute and return the equivalent location in
 * text2.
 * e.g. 'The cat' vs 'The big cat', 1->1, 5->8
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @param {number} loc Location within text1.
 * @return {number} Location within text2.
 */
diff_match_patch.prototype.diff_xIndex = function(diffs, loc) {
  var chars1 = 0;
  var chars2 = 0;
  var last_chars1 = 0;
  var last_chars2 = 0;
  var x;
  for (x = 0; x < diffs.length; x++) {
    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.
      chars1 += diffs[x][1].length;
    }
    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.
      chars2 += diffs[x][1].length;
    }
    if (chars1 > loc) {  // Overshot the location.
      break;
    }
    last_chars1 = chars1;
    last_chars2 = chars2;
  }
  // Was the location was deleted?
  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {
    return last_chars2;
  }
  // Add the remaining character length.
  return last_chars2 + (loc - last_chars1);
};


/**
 * Convert a diff array into a pretty HTML report.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @return {string} HTML representation.
 */
diff_match_patch.prototype.diff_prettyHtml = function(diffs) {
  var html = [];
  var pattern_amp = /&/g;
  var pattern_lt = /</g;
  var pattern_gt = />/g;
  var pattern_para = /\n/g;
  for (var x = 0; x < diffs.length; x++) {
    var op = diffs[x][0];    // Operation (insert, delete, equal)
    var data = diffs[x][1];  // Text of change.
    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')
        .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');
    switch (op) {
      case DIFF_INSERT:
        html[x] = '<ins style="background:#e6ffe6;">' + text + '</ins>';
        break;
      case DIFF_DELETE:
        html[x] = '<del style="background:#ffe6e6;">' + text + '</del>';
        break;
      case DIFF_EQUAL:
        html[x] = '<span>' + text + '</span>';
        break;
    }
  }
  return html.join('');
};


/**
 * Compute and return the source text (all equalities and deletions).
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @return {string} Source text.
 */
diff_match_patch.prototype.diff_text1 = function(diffs) {
  var text = [];
  for (var x = 0; x < diffs.length; x++) {
    if (diffs[x][0] !== DIFF_INSERT) {
      text[x] = diffs[x][1];
    }
  }
  return text.join('');
};


/**
 * Compute and return the destination text (all equalities and insertions).
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @return {string} Destination text.
 */
diff_match_patch.prototype.diff_text2 = function(diffs) {
  var text = [];
  for (var x = 0; x < diffs.length; x++) {
    if (diffs[x][0] !== DIFF_DELETE) {
      text[x] = diffs[x][1];
    }
  }
  return text.join('');
};


/**
 * Compute the Levenshtein distance; the number of inserted, deleted or
 * substituted characters.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @return {number} Number of changes.
 */
diff_match_patch.prototype.diff_levenshtein = function(diffs) {
  var levenshtein = 0;
  var insertions = 0;
  var deletions = 0;
  for (var x = 0; x < diffs.length; x++) {
    var op = diffs[x][0];
    var data = diffs[x][1];
    switch (op) {
      case DIFF_INSERT:
        insertions += data.length;
        break;
      case DIFF_DELETE:
        deletions += data.length;
        break;
      case DIFF_EQUAL:
        // A deletion and an insertion is one substitution.
        levenshtein += Math.max(insertions, deletions);
        insertions = 0;
        deletions = 0;
        break;
    }
  }
  levenshtein += Math.max(insertions, deletions);
  return levenshtein;
};


/**
 * Crush the diff into an encoded string which describes the operations
 * required to transform text1 into text2.
 * E.g. =3\t-2\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.
 * Operations are tab-separated.  Inserted text is escaped using %xx notation.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @return {string} Delta text.
 */
diff_match_patch.prototype.diff_toDelta = function(diffs) {
  var text = [];
  for (var x = 0; x < diffs.length; x++) {
    switch (diffs[x][0]) {
      case DIFF_INSERT:
        text[x] = '+' + encodeURI(diffs[x][1]);
        break;
      case DIFF_DELETE:
        text[x] = '-' + diffs[x][1].length;
        break;
      case DIFF_EQUAL:
        text[x] = '=' + diffs[x][1].length;
        break;
    }
  }
  return text.join('\t').replace(/%20/g, ' ');
};


/**
 * Given the original text1, and an encoded string which describes the
 * operations required to transform text1 into text2, compute the full diff.
 * @param {string} text1 Source string for the diff.
 * @param {string} delta Delta text.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 * @throws {!Error} If invalid input.
 */
diff_match_patch.prototype.diff_fromDelta = function(text1, delta) {
  var diffs = [];
  var diffsLength = 0;  // Keeping our own length var is faster in JS.
  var pointer = 0;  // Cursor in text1
  var tokens = delta.split(/\t/g);
  for (var x = 0; x < tokens.length; x++) {
    // Each token begins with a one character parameter which specifies the
    // operation of this token (delete, insert, equality).
    var param = tokens[x].substring(1);
    switch (tokens[x].charAt(0)) {
      case '+':
        try {
          diffs[diffsLength++] = [DIFF_INSERT, decodeURI(param)];
        } catch (ex) {
          // Malformed URI sequence.
          throw new Error('Illegal escape in diff_fromDelta: ' + param);
        }
        break;
      case '-':
        // Fall through.
      case '=':
        var n = parseInt(param, 10);
        if (isNaN(n) || n < 0) {
          throw new Error('Invalid number in diff_fromDelta: ' + param);
        }
        var text = text1.substring(pointer, pointer += n);
        if (tokens[x].charAt(0) == '=') {
          diffs[diffsLength++] = [DIFF_EQUAL, text];
        } else {
          diffs[diffsLength++] = [DIFF_DELETE, text];
        }
        break;
      default:
        // Blank tokens are ok (from a trailing \t).
        // Anything else is an error.
        if (tokens[x]) {
          throw new Error('Invalid diff operation in diff_fromDelta: ' +
                          tokens[x]);
        }
    }
  }
  if (pointer != text1.length) {
    throw new Error('Delta length (' + pointer +
        ') does not equal source text length (' + text1.length + ').');
  }
  return diffs;
};


//  MATCH FUNCTIONS


/**
 * Locate the best instance of 'pattern' in 'text' near 'loc'.
 * @param {string} text The text to search.
 * @param {string} pattern The pattern to search for.
 * @param {number} loc The location to search around.
 * @return {number} Best match index or -1.
 */
diff_match_patch.prototype.match_main = function(text, pattern, loc) {
  // Check for null inputs.
  if (text == null || pattern == null || loc == null) {
    throw new Error('Null input. (match_main)');
  }

  loc = Math.max(0, Math.min(loc, text.length));
  if (text == pattern) {
    // Shortcut (potentially not guaranteed by the algorithm)
    return 0;
  } else if (!text.length) {
    // Nothing to match.
    return -1;
  } else if (text.substring(loc, loc + pattern.length) == pattern) {
    // Perfect match at the perfect spot!  (Includes case of null pattern)
    return loc;
  } else {
    // Do a fuzzy compare.
    return this.match_bitap_(text, pattern, loc);
  }
};


/**
 * Locate the best instance of 'pattern' in 'text' near 'loc' using the
 * Bitap algorithm.
 * @param {string} text The text to search.
 * @param {string} pattern The pattern to search for.
 * @param {number} loc The location to search around.
 * @return {number} Best match index or -1.
 * @private
 */
diff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {
  if (pattern.length > this.Match_MaxBits) {
    throw new Error('Pattern too long for this browser.');
  }

  // Initialise the alphabet.
  var s = this.match_alphabet_(pattern);

  var dmp = this;  // 'this' becomes 'window' in a closure.

  /**
   * Compute and return the score for a match with e errors and x location.
   * Accesses loc and pattern through being a closure.
   * @param {number} e Number of errors in match.
   * @param {number} x Location of match.
   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).
   * @private
   */
  function match_bitapScore_(e, x) {
    var accuracy = e / pattern.length;
    var proximity = Math.abs(loc - x);
    if (!dmp.Match_Distance) {
      // Dodge divide by zero error.
      return proximity ? 1.0 : accuracy;
    }
    return accuracy + (proximity / dmp.Match_Distance);
  }

  // Highest score beyond which we give up.
  var score_threshold = this.Match_Threshold;
  // Is there a nearby exact match? (speedup)
  var best_loc = text.indexOf(pattern, loc);
  if (best_loc != -1) {
    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);
    // What about in the other direction? (speedup)
    best_loc = text.lastIndexOf(pattern, loc + pattern.length);
    if (best_loc != -1) {
      score_threshold =
          Math.min(match_bitapScore_(0, best_loc), score_threshold);
    }
  }

  // Initialise the bit arrays.
  var matchmask = 1 << (pattern.length - 1);
  best_loc = -1;

  var bin_min, bin_mid;
  var bin_max = pattern.length + text.length;
  var last_rd;
  for (var d = 0; d < pattern.length; d++) {
    // Scan for the best match; each iteration allows for one more error.
    // Run a binary search to determine how far from 'loc' we can stray at this
    // error level.
    bin_min = 0;
    bin_mid = bin_max;
    while (bin_min < bin_mid) {
      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {
        bin_min = bin_mid;
      } else {
        bin_max = bin_mid;
      }
      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);
    }
    // Use the result from this iteration as the maximum for the next.
    bin_max = bin_mid;
    var start = Math.max(1, loc - bin_mid + 1);
    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;

    var rd = Array(finish + 2);
    rd[finish + 1] = (1 << d) - 1;
    for (var j = finish; j >= start; j--) {
      // The alphabet (s) is a sparse hash, so the following line generates
      // warnings.
      var charMatch = s[text.charAt(j - 1)];
      if (d === 0) {  // First pass: exact match.
        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;
      } else {  // Subsequent passes: fuzzy match.
        rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |
                (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |
                last_rd[j + 1];
      }
      if (rd[j] & matchmask) {
        var score = match_bitapScore_(d, j - 1);
        // This match will almost certainly be better than any existing match.
        // But check anyway.
        if (score <= score_threshold) {
          // Told you so.
          score_threshold = score;
          best_loc = j - 1;
          if (best_loc > loc) {
            // When passing loc, don't exceed our current distance from loc.
            start = Math.max(1, 2 * loc - best_loc);
          } else {
            // Already passed loc, downhill from here on in.
            break;
          }
        }
      }
    }
    // No hope for a (better) match at greater error levels.
    if (match_bitapScore_(d + 1, loc) > score_threshold) {
      break;
    }
    last_rd = rd;
  }
  return best_loc;
};


/**
 * Initialise the alphabet for the Bitap algorithm.
 * @param {string} pattern The text to encode.
 * @return {!Object} Hash of character locations.
 * @private
 */
diff_match_patch.prototype.match_alphabet_ = function(pattern) {
  var s = {};
  for (var i = 0; i < pattern.length; i++) {
    s[pattern.charAt(i)] = 0;
  }
  for (var i = 0; i < pattern.length; i++) {
    s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);
  }
  return s;
};


//  PATCH FUNCTIONS


/**
 * Increase the context until it is unique,
 * but don't let the pattern expand beyond Match_MaxBits.
 * @param {!diff_match_patch.patch_obj} patch The patch to grow.
 * @param {string} text Source text.
 * @private
 */
diff_match_patch.prototype.patch_addContext_ = function(patch, text) {
  if (text.length == 0) {
    return;
  }
  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);
  var padding = 0;

  // Look for the first and last matches of pattern in text.  If two different
  // matches are found, increase the pattern length.
  while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&
         pattern.length < this.Match_MaxBits - this.Patch_Margin -
         this.Patch_Margin) {
    padding += this.Patch_Margin;
    pattern = text.substring(patch.start2 - padding,
                             patch.start2 + patch.length1 + padding);
  }
  // Add one chunk for good luck.
  padding += this.Patch_Margin;

  // Add the prefix.
  var prefix = text.substring(patch.start2 - padding, patch.start2);
  if (prefix) {
    patch.diffs.unshift([DIFF_EQUAL, prefix]);
  }
  // Add the suffix.
  var suffix = text.substring(patch.start2 + patch.length1,
                              patch.start2 + patch.length1 + padding);
  if (suffix) {
    patch.diffs.push([DIFF_EQUAL, suffix]);
  }

  // Roll back the start points.
  patch.start1 -= prefix.length;
  patch.start2 -= prefix.length;
  // Extend the lengths.
  patch.length1 += prefix.length + suffix.length;
  patch.length2 += prefix.length + suffix.length;
};


/**
 * Compute a list of patches to turn text1 into text2.
 * Use diffs if provided, otherwise compute it ourselves.
 * There are four ways to call this function, depending on what data is
 * available to the caller:
 * Method 1:
 * a = text1, b = text2
 * Method 2:
 * a = diffs
 * Method 3 (optimal):
 * a = text1, b = diffs
 * Method 4 (deprecated, use method 3):
 * a = text1, b = text2, c = diffs
 *
 * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or
 * Array of diff tuples for text1 to text2 (method 2).
 * @param {string|!Array.<!diff_match_patch.Diff>} opt_b text2 (methods 1,4) or
 * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).
 * @param {string|!Array.<!diff_match_patch.Diff>} opt_c Array of diff tuples
 * for text1 to text2 (method 4) or undefined (methods 1,2,3).
 * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.
 */
diff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {
  var text1, diffs;
  if (typeof a == 'string' && typeof opt_b == 'string' &&
      typeof opt_c == 'undefined') {
    // Method 1: text1, text2
    // Compute diffs from text1 and text2.
    text1 = /** @type {string} */(a);
    diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);
    if (diffs.length > 2) {
      this.diff_cleanupSemantic(diffs);
      this.diff_cleanupEfficiency(diffs);
    }
  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&
      typeof opt_c == 'undefined') {
    // Method 2: diffs
    // Compute text1 from diffs.
    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);
    text1 = this.diff_text1(diffs);
  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&
      typeof opt_c == 'undefined') {
    // Method 3: text1, diffs
    text1 = /** @type {string} */(a);
    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);
  } else if (typeof a == 'string' && typeof opt_b == 'string' &&
      opt_c && typeof opt_c == 'object') {
    // Method 4: text1, text2, diffs
    // text2 is not used.
    text1 = /** @type {string} */(a);
    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);
  } else {
    throw new Error('Unknown call format to patch_make.');
  }

  if (diffs.length === 0) {
    return [];  // Get rid of the null case.
  }
  var patches = [];
  var patch = new diff_match_patch.patch_obj();
  var patchDiffLength = 0;  // Keeping our own length var is faster in JS.
  var char_count1 = 0;  // Number of characters into the text1 string.
  var char_count2 = 0;  // Number of characters into the text2 string.
  // Start with text1 (prepatch_text) and apply the diffs until we arrive at
  // text2 (postpatch_text).  We recreate the patches one by one to determine
  // context info.
  var prepatch_text = text1;
  var postpatch_text = text1;
  for (var x = 0; x < diffs.length; x++) {
    var diff_type = diffs[x][0];
    var diff_text = diffs[x][1];

    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {
      // A new patch starts here.
      patch.start1 = char_count1;
      patch.start2 = char_count2;
    }

    switch (diff_type) {
      case DIFF_INSERT:
        patch.diffs[patchDiffLength++] = diffs[x];
        patch.length2 += diff_text.length;
        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +
                         postpatch_text.substring(char_count2);
        break;
      case DIFF_DELETE:
        patch.length1 += diff_text.length;
        patch.diffs[patchDiffLength++] = diffs[x];
        postpatch_text = postpatch_text.substring(0, char_count2) +
                         postpatch_text.substring(char_count2 +
                             diff_text.length);
        break;
      case DIFF_EQUAL:
        if (diff_text.length <= 2 * this.Patch_Margin &&
            patchDiffLength && diffs.length != x + 1) {
          // Small equality inside a patch.
          patch.diffs[patchDiffLength++] = diffs[x];
          patch.length1 += diff_text.length;
          patch.length2 += diff_text.length;
        } else if (diff_text.length >= 2 * this.Patch_Margin) {
          // Time for a new patch.
          if (patchDiffLength) {
            this.patch_addContext_(patch, prepatch_text);
            patches.push(patch);
            patch = new diff_match_patch.patch_obj();
            patchDiffLength = 0;
            // Unlike Unidiff, our patch lists have a rolling context.
            // http://code.google.com/p/google-diff-match-patch/wiki/Unidiff
            // Update prepatch text & pos to reflect the application of the
            // just completed patch.
            prepatch_text = postpatch_text;
            char_count1 = char_count2;
          }
        }
        break;
    }

    // Update the current character count.
    if (diff_type !== DIFF_INSERT) {
      char_count1 += diff_text.length;
    }
    if (diff_type !== DIFF_DELETE) {
      char_count2 += diff_text.length;
    }
  }
  // Pick up the leftover patch if not empty.
  if (patchDiffLength) {
    this.patch_addContext_(patch, prepatch_text);
    patches.push(patch);
  }

  return patches;
};


/**
 * Given an array of patches, return another array that is identical.
 * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
 * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.
 */
diff_match_patch.prototype.patch_deepCopy = function(patches) {
  // Making deep copies is hard in JavaScript.
  var patchesCopy = [];
  for (var x = 0; x < patches.length; x++) {
    var patch = patches[x];
    var patchCopy = new diff_match_patch.patch_obj();
    patchCopy.diffs = [];
    for (var y = 0; y < patch.diffs.length; y++) {
      patchCopy.diffs[y] = patch.diffs[y].slice();
    }
    patchCopy.start1 = patch.start1;
    patchCopy.start2 = patch.start2;
    patchCopy.length1 = patch.length1;
    patchCopy.length2 = patch.length2;
    patchesCopy[x] = patchCopy;
  }
  return patchesCopy;
};


/**
 * Merge a set of patches onto the text.  Return a patched text, as well
 * as a list of true/false values indicating which patches were applied.
 * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
 * @param {string} text Old text.
 * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the
 *      new text and an array of boolean values.
 */
diff_match_patch.prototype.patch_apply = function(patches, text) {
  if (patches.length == 0) {
    return [text, []];
  }

  // Deep copy the patches so that no changes are made to originals.
  patches = this.patch_deepCopy(patches);

  var nullPadding = this.patch_addPadding(patches);
  text = nullPadding + text + nullPadding;

  this.patch_splitMax(patches);
  // delta keeps track of the offset between the expected and actual location
  // of the previous patch.  If there are patches expected at positions 10 and
  // 20, but the first patch was found at 12, delta is 2 and the second patch
  // has an effective expected position of 22.
  var delta = 0;
  var results = [];
  for (var x = 0; x < patches.length; x++) {
    var expected_loc = patches[x].start2 + delta;
    var text1 = this.diff_text1(patches[x].diffs);
    var start_loc;
    var end_loc = -1;
    if (text1.length > this.Match_MaxBits) {
      // patch_splitMax will only provide an oversized pattern in the case of
      // a monster delete.
      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),
                                  expected_loc);
      if (start_loc != -1) {
        end_loc = this.match_main(text,
            text1.substring(text1.length - this.Match_MaxBits),
            expected_loc + text1.length - this.Match_MaxBits);
        if (end_loc == -1 || start_loc >= end_loc) {
          // Can't find valid trailing context.  Drop this patch.
          start_loc = -1;
        }
      }
    } else {
      start_loc = this.match_main(text, text1, expected_loc);
    }
    if (start_loc == -1) {
      // No match found.  :(
      results[x] = false;
      // Subtract the delta for this failed patch from subsequent patches.
      delta -= patches[x].length2 - patches[x].length1;
    } else {
      // Found a match.  :)
      results[x] = true;
      delta = start_loc - expected_loc;
      var text2;
      if (end_loc == -1) {
        text2 = text.substring(start_loc, start_loc + text1.length);
      } else {
        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);
      }
      if (text1 == text2) {
        // Perfect match, just shove the replacement text in.
        text = text.substring(0, start_loc) +
               this.diff_text2(patches[x].diffs) +
               text.substring(start_loc + text1.length);
      } else {
        // Imperfect match.  Run a diff to get a framework of equivalent
        // indices.
        var diffs = this.diff_main(text1, text2, false);
        if (text1.length > this.Match_MaxBits &&
            this.diff_levenshtein(diffs) / text1.length >
            this.Patch_DeleteThreshold) {
          // The end points match, but the content is unacceptably bad.
          results[x] = false;
        } else {
          this.diff_cleanupSemanticLossless(diffs);
          var index1 = 0;
          var index2;
          for (var y = 0; y < patches[x].diffs.length; y++) {
            var mod = patches[x].diffs[y];
            if (mod[0] !== DIFF_EQUAL) {
              index2 = this.diff_xIndex(diffs, index1);
            }
            if (mod[0] === DIFF_INSERT) {  // Insertion
              text = text.substring(0, start_loc + index2) + mod[1] +
                     text.substring(start_loc + index2);
            } else if (mod[0] === DIFF_DELETE) {  // Deletion
              text = text.substring(0, start_loc + index2) +
                     text.substring(start_loc + this.diff_xIndex(diffs,
                         index1 + mod[1].length));
            }
            if (mod[0] !== DIFF_DELETE) {
              index1 += mod[1].length;
            }
          }
        }
      }
    }
  }
  // Strip the padding off.
  text = text.substring(nullPadding.length, text.length - nullPadding.length);
  return [text, results];
};


/**
 * Add some padding on text start and end so that edges can match something.
 * Intended to be called only from within patch_apply.
 * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
 * @return {string} The padding string added to each side.
 */
diff_match_patch.prototype.patch_addPadding = function(patches) {
  var paddingLength = this.Patch_Margin;
  var nullPadding = '';
  for (var x = 1; x <= paddingLength; x++) {
    nullPadding += String.fromCharCode(x);
  }

  // Bump all the patches forward.
  for (var x = 0; x < patches.length; x++) {
    patches[x].start1 += paddingLength;
    patches[x].start2 += paddingLength;
  }

  // Add some padding on start of first diff.
  var patch = patches[0];
  var diffs = patch.diffs;
  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {
    // Add nullPadding equality.
    diffs.unshift([DIFF_EQUAL, nullPadding]);
    patch.start1 -= paddingLength;  // Should be 0.
    patch.start2 -= paddingLength;  // Should be 0.
    patch.length1 += paddingLength;
    patch.length2 += paddingLength;
  } else if (paddingLength > diffs[0][1].length) {
    // Grow first equality.
    var extraLength = paddingLength - diffs[0][1].length;
    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];
    patch.start1 -= extraLength;
    patch.start2 -= extraLength;
    patch.length1 += extraLength;
    patch.length2 += extraLength;
  }

  // Add some padding on end of last diff.
  patch = patches[patches.length - 1];
  diffs = patch.diffs;
  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {
    // Add nullPadding equality.
    diffs.push([DIFF_EQUAL, nullPadding]);
    patch.length1 += paddingLength;
    patch.length2 += paddingLength;
  } else if (paddingLength > diffs[diffs.length - 1][1].length) {
    // Grow last equality.
    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;
    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);
    patch.length1 += extraLength;
    patch.length2 += extraLength;
  }

  return nullPadding;
};


/**
 * Look through the patches and break up any which are longer than the maximum
 * limit of the match algorithm.
 * Intended to be called only from within patch_apply.
 * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
 */
diff_match_patch.prototype.patch_splitMax = function(patches) {
  var patch_size = this.Match_MaxBits;
  for (var x = 0; x < patches.length; x++) {
    if (patches[x].length1 <= patch_size) {
      continue;
    }
    var bigpatch = patches[x];
    // Remove the big old patch.
    patches.splice(x--, 1);
    var start1 = bigpatch.start1;
    var start2 = bigpatch.start2;
    var precontext = '';
    while (bigpatch.diffs.length !== 0) {
      // Create one of several smaller patches.
      var patch = new diff_match_patch.patch_obj();
      var empty = true;
      patch.start1 = start1 - precontext.length;
      patch.start2 = start2 - precontext.length;
      if (precontext !== '') {
        patch.length1 = patch.length2 = precontext.length;
        patch.diffs.push([DIFF_EQUAL, precontext]);
      }
      while (bigpatch.diffs.length !== 0 &&
             patch.length1 < patch_size - this.Patch_Margin) {
        var diff_type = bigpatch.diffs[0][0];
        var diff_text = bigpatch.diffs[0][1];
        if (diff_type === DIFF_INSERT) {
          // Insertions are harmless.
          patch.length2 += diff_text.length;
          start2 += diff_text.length;
          patch.diffs.push(bigpatch.diffs.shift());
          empty = false;
        } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&
                   patch.diffs[0][0] == DIFF_EQUAL &&
                   diff_text.length > 2 * patch_size) {
          // This is a large deletion.  Let it pass in one chunk.
          patch.length1 += diff_text.length;
          start1 += diff_text.length;
          empty = false;
          patch.diffs.push([diff_type, diff_text]);
          bigpatch.diffs.shift();
        } else {
          // Deletion or equality.  Only take as much as we can stomach.
          diff_text = diff_text.substring(0,
              patch_size - patch.length1 - this.Patch_Margin);
          patch.length1 += diff_text.length;
          start1 += diff_text.length;
          if (diff_type === DIFF_EQUAL) {
            patch.length2 += diff_text.length;
            start2 += diff_text.length;
          } else {
            empty = false;
          }
          patch.diffs.push([diff_type, diff_text]);
          if (diff_text == bigpatch.diffs[0][1]) {
            bigpatch.diffs.shift();
          } else {
            bigpatch.diffs[0][1] =
                bigpatch.diffs[0][1].substring(diff_text.length);
          }
        }
      }
      // Compute the head context for the next patch.
      precontext = this.diff_text2(patch.diffs);
      precontext =
          precontext.substring(precontext.length - this.Patch_Margin);
      // Append the end context for this patch.
      var postcontext = this.diff_text1(bigpatch.diffs)
                            .substring(0, this.Patch_Margin);
      if (postcontext !== '') {
        patch.length1 += postcontext.length;
        patch.length2 += postcontext.length;
        if (patch.diffs.length !== 0 &&
            patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {
          patch.diffs[patch.diffs.length - 1][1] += postcontext;
        } else {
          patch.diffs.push([DIFF_EQUAL, postcontext]);
        }
      }
      if (!empty) {
        patches.splice(++x, 0, patch);
      }
    }
  }
};


/**
 * Take a list of patches and return a textual representation.
 * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
 * @return {string} Text representation of patches.
 */
diff_match_patch.prototype.patch_toText = function(patches) {
  var text = [];
  for (var x = 0; x < patches.length; x++) {
    text[x] = patches[x];
  }
  return text.join('');
};


/**
 * Parse a textual representation of patches and return a list of Patch objects.
 * @param {string} textline Text representation of patches.
 * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.
 * @throws {!Error} If invalid input.
 */
diff_match_patch.prototype.patch_fromText = function(textline) {
  var patches = [];
  if (!textline) {
    return patches;
  }
  var text = textline.split('\n');
  var textPointer = 0;
  var patchHeader = /^@@ -(\d+),?(\d*) \+(\d+),?(\d*) @@$/;
  while (textPointer < text.length) {
    var m = text[textPointer].match(patchHeader);
    if (!m) {
      throw new Error('Invalid patch string: ' + text[textPointer]);
    }
    var patch = new diff_match_patch.patch_obj();
    patches.push(patch);
    patch.start1 = parseInt(m[1], 10);
    if (m[2] === '') {
      patch.start1--;
      patch.length1 = 1;
    } else if (m[2] == '0') {
      patch.length1 = 0;
    } else {
      patch.start1--;
      patch.length1 = parseInt(m[2], 10);
    }

    patch.start2 = parseInt(m[3], 10);
    if (m[4] === '') {
      patch.start2--;
      patch.length2 = 1;
    } else if (m[4] == '0') {
      patch.length2 = 0;
    } else {
      patch.start2--;
      patch.length2 = parseInt(m[4], 10);
    }
    textPointer++;

    while (textPointer < text.length) {
      var sign = text[textPointer].charAt(0);
      try {
        var line = decodeURI(text[textPointer].substring(1));
      } catch (ex) {
        // Malformed URI sequence.
        throw new Error('Illegal escape in patch_fromText: ' + line);
      }
      if (sign == '-') {
        // Deletion.
        patch.diffs.push([DIFF_DELETE, line]);
      } else if (sign == '+') {
        // Insertion.
        patch.diffs.push([DIFF_INSERT, line]);
      } else if (sign == ' ') {
        // Minor equality.
        patch.diffs.push([DIFF_EQUAL, line]);
      } else if (sign == '@') {
        // Start of next patch.
        break;
      } else if (sign === '') {
        // Blank line?  Whatever.
      } else {
        // WTF?
        throw new Error('Invalid patch mode "' + sign + '" in: ' + line);
      }
      textPointer++;
    }
  }
  return patches;
};


/**
 * Class representing one patch operation.
 * @constructor
 */
diff_match_patch.patch_obj = function() {
  /** @type {!Array.<!diff_match_patch.Diff>} */
  this.diffs = [];
  /** @type {?number} */
  this.start1 = null;
  /** @type {?number} */
  this.start2 = null;
  /** @type {number} */
  this.length1 = 0;
  /** @type {number} */
  this.length2 = 0;
};


/**
 * Emmulate GNU diff's format.
 * Header: @@ -382,8 +481,9 @@
 * Indicies are printed as 1-based, not 0-based.
 * @return {string} The GNU diff string.
 */
diff_match_patch.patch_obj.prototype.toString = function() {
  var coords1, coords2;
  if (this.length1 === 0) {
    coords1 = this.start1 + ',0';
  } else if (this.length1 == 1) {
    coords1 = this.start1 + 1;
  } else {
    coords1 = (this.start1 + 1) + ',' + this.length1;
  }
  if (this.length2 === 0) {
    coords2 = this.start2 + ',0';
  } else if (this.length2 == 1) {
    coords2 = this.start2 + 1;
  } else {
    coords2 = (this.start2 + 1) + ',' + this.length2;
  }
  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\n'];
  var op;
  // Escape the body of the patch with %xx notation.
  for (var x = 0; x < this.diffs.length; x++) {
    switch (this.diffs[x][0]) {
      case DIFF_INSERT:
        op = '+';
        break;
      case DIFF_DELETE:
        op = '-';
        break;
      case DIFF_EQUAL:
        op = ' ';
        break;
    }
    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\n';
  }
  return text.join('').replace(/%20/g, ' ');
};


// The following export code was added by @ForbesLindesay
module.exports = diff_match_patch;
module.exports['diff_match_patch'] = diff_match_patch;
module.exports['DIFF_DELETE'] = DIFF_DELETE;
module.exports['DIFF_INSERT'] = DIFF_INSERT;
module.exports['DIFF_EQUAL'] = DIFF_EQUAL;

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/diff-match-patch/index.js","/../node_modules/diff-match-patch")
},{"buffer":11,"pBGvAp":74}],30:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var assert = require('assert')
var BigInteger = require('bigi')

var Point = require('./point')

function Curve (p, a, b, Gx, Gy, n, h) {
  this.p = p
  this.a = a
  this.b = b
  this.G = Point.fromAffine(this, Gx, Gy)
  this.n = n
  this.h = h

  this.infinity = new Point(this, null, null, BigInteger.ZERO)

  // result caching
  this.pOverFour = p.add(BigInteger.ONE).shiftRight(2)
}

Curve.prototype.pointFromX = function (isOdd, x) {
  var alpha = x.pow(3).add(this.a.multiply(x)).add(this.b).mod(this.p)
  var beta = alpha.modPow(this.pOverFour, this.p) // XXX: not compatible with all curves

  var y = beta
  if (beta.isEven() ^ !isOdd) {
    y = this.p.subtract(y) // -y % p
  }

  return Point.fromAffine(this, x, y)
}

Curve.prototype.isInfinity = function (Q) {
  if (Q === this.infinity) return true

  return Q.z.signum() === 0 && Q.y.signum() !== 0
}

Curve.prototype.isOnCurve = function (Q) {
  if (this.isInfinity(Q)) return true

  var x = Q.affineX
  var y = Q.affineY
  var a = this.a
  var b = this.b
  var p = this.p

  // Check that xQ and yQ are integers in the interval [0, p - 1]
  if (x.signum() < 0 || x.compareTo(p) >= 0) return false
  if (y.signum() < 0 || y.compareTo(p) >= 0) return false

  // and check that y^2 = x^3 + ax + b (mod p)
  var lhs = y.square().mod(p)
  var rhs = x.pow(3).add(a.multiply(x)).add(b).mod(p)
  return lhs.equals(rhs)
}

/**
 * Validate an elliptic curve point.
 *
 * See SEC 1, section 3.2.2.1: Elliptic Curve Public Key Validation Primitive
 */
Curve.prototype.validate = function (Q) {
  // Check Q != O
  assert(!this.isInfinity(Q), 'Point is at infinity')
  assert(this.isOnCurve(Q), 'Point is not on the curve')

  // Check nQ = O (where Q is a scalar multiple of G)
  var nQ = Q.multiply(this.n)
  assert(this.isInfinity(nQ), 'Point is not a scalar multiple of G')

  return true
}

module.exports = Curve

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/ecurve/lib/curve.js","/../node_modules/ecurve/lib")
},{"./point":34,"assert":1,"bigi":6,"buffer":11,"pBGvAp":74}],31:[function(require,module,exports){
module.exports={
  "secp128r1": {
    "p": "fffffffdffffffffffffffffffffffff",
    "a": "fffffffdfffffffffffffffffffffffc",
    "b": "e87579c11079f43dd824993c2cee5ed3",
    "n": "fffffffe0000000075a30d1b9038a115",
    "h": "01",
    "Gx": "161ff7528b899b2d0c28607ca52c5b86",
    "Gy": "cf5ac8395bafeb13c02da292dded7a83"
  },
  "secp160k1": {
    "p": "fffffffffffffffffffffffffffffffeffffac73",
    "a": "00",
    "b": "07",
    "n": "0100000000000000000001b8fa16dfab9aca16b6b3",
    "h": "01",
    "Gx": "3b4c382ce37aa192a4019e763036f4f5dd4d7ebb",
    "Gy": "938cf935318fdced6bc28286531733c3f03c4fee"
  },
  "secp160r1": {
    "p": "ffffffffffffffffffffffffffffffff7fffffff",
    "a": "ffffffffffffffffffffffffffffffff7ffffffc",
    "b": "1c97befc54bd7a8b65acf89f81d4d4adc565fa45",
    "n": "0100000000000000000001f4c8f927aed3ca752257",
    "h": "01",
    "Gx": "4a96b5688ef573284664698968c38bb913cbfc82",
    "Gy": "23a628553168947d59dcc912042351377ac5fb32"
  },
  "secp192k1": {
    "p": "fffffffffffffffffffffffffffffffffffffffeffffee37",
    "a": "00",
    "b": "03",
    "n": "fffffffffffffffffffffffe26f2fc170f69466a74defd8d",
    "h": "01",
    "Gx": "db4ff10ec057e9ae26b07d0280b7f4341da5d1b1eae06c7d",
    "Gy": "9b2f2f6d9c5628a7844163d015be86344082aa88d95e2f9d"
  },
  "secp192r1": {
    "p": "fffffffffffffffffffffffffffffffeffffffffffffffff",
    "a": "fffffffffffffffffffffffffffffffefffffffffffffffc",
    "b": "64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1",
    "n": "ffffffffffffffffffffffff99def836146bc9b1b4d22831",
    "h": "01",
    "Gx": "188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012",
    "Gy": "07192b95ffc8da78631011ed6b24cdd573f977a11e794811"
  },
  "secp256k1": {
    "p": "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f",
    "a": "00",
    "b": "07",
    "n": "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",
    "h": "01",
    "Gx": "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
    "Gy": "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"
  },
  "secp256r1": {
    "p": "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff",
    "a": "ffffffff00000001000000000000000000000000fffffffffffffffffffffffc",
    "b": "5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b",
    "n": "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551",
    "h": "01",
    "Gx": "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296",
    "Gy": "4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5"
  }
}

},{}],32:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var Point = require('./point')
var Curve = require('./curve')

var getCurveByName = require('./names')

module.exports = {
  Curve: Curve,
  Point: Point,
  getCurveByName: getCurveByName
}

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/ecurve/lib/index.js","/../node_modules/ecurve/lib")
},{"./curve":30,"./names":33,"./point":34,"buffer":11,"pBGvAp":74}],33:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var BigInteger = require('bigi')

var curves = require('./curves.json')
var Curve = require('./curve')

function getCurveByName (name) {
  var curve = curves[name]
  if (!curve) return null

  var p = new BigInteger(curve.p, 16)
  var a = new BigInteger(curve.a, 16)
  var b = new BigInteger(curve.b, 16)
  var n = new BigInteger(curve.n, 16)
  var h = new BigInteger(curve.h, 16)
  var Gx = new BigInteger(curve.Gx, 16)
  var Gy = new BigInteger(curve.Gy, 16)

  return new Curve(p, a, b, Gx, Gy, n, h)
}

module.exports = getCurveByName

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/ecurve/lib/names.js","/../node_modules/ecurve/lib")
},{"./curve":30,"./curves.json":31,"bigi":6,"buffer":11,"pBGvAp":74}],34:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var assert = require('assert')
var BigInteger = require('bigi')

var THREE = BigInteger.valueOf(3)

function Point (curve, x, y, z) {
  assert.notStrictEqual(z, undefined, 'Missing Z coordinate')

  this.curve = curve
  this.x = x
  this.y = y
  this.z = z
  this._zInv = null

  this.compressed = true
}

Object.defineProperty(Point.prototype, 'zInv', {
  get: function () {
    if (this._zInv === null) {
      this._zInv = this.z.modInverse(this.curve.p)
    }

    return this._zInv
  }
})

Object.defineProperty(Point.prototype, 'affineX', {
  get: function () {
    return this.x.multiply(this.zInv).mod(this.curve.p)
  }
})

Object.defineProperty(Point.prototype, 'affineY', {
  get: function () {
    return this.y.multiply(this.zInv).mod(this.curve.p)
  }
})

Point.fromAffine = function (curve, x, y) {
  return new Point(curve, x, y, BigInteger.ONE)
}

Point.prototype.equals = function (other) {
  if (other === this) return true
  if (this.curve.isInfinity(this)) return this.curve.isInfinity(other)
  if (this.curve.isInfinity(other)) return this.curve.isInfinity(this)

  // u = Y2 * Z1 - Y1 * Z2
  var u = other.y.multiply(this.z).subtract(this.y.multiply(other.z)).mod(this.curve.p)

  if (u.signum() !== 0) return false

  // v = X2 * Z1 - X1 * Z2
  var v = other.x.multiply(this.z).subtract(this.x.multiply(other.z)).mod(this.curve.p)

  return v.signum() === 0
}

Point.prototype.negate = function () {
  var y = this.curve.p.subtract(this.y)

  return new Point(this.curve, this.x, y, this.z)
}

Point.prototype.add = function (b) {
  if (this.curve.isInfinity(this)) return b
  if (this.curve.isInfinity(b)) return this

  var x1 = this.x
  var y1 = this.y
  var x2 = b.x
  var y2 = b.y

  // u = Y2 * Z1 - Y1 * Z2
  var u = y2.multiply(this.z).subtract(y1.multiply(b.z)).mod(this.curve.p)
  // v = X2 * Z1 - X1 * Z2
  var v = x2.multiply(this.z).subtract(x1.multiply(b.z)).mod(this.curve.p)

  if (v.signum() === 0) {
    if (u.signum() === 0) {
      return this.twice() // this == b, so double
    }

    return this.curve.infinity // this = -b, so infinity
  }

  var v2 = v.square()
  var v3 = v2.multiply(v)
  var x1v2 = x1.multiply(v2)
  var zu2 = u.square().multiply(this.z)

  // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)
  var x3 = zu2.subtract(x1v2.shiftLeft(1)).multiply(b.z).subtract(v3).multiply(v).mod(this.curve.p)
  // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3
  var y3 = x1v2.multiply(THREE).multiply(u).subtract(y1.multiply(v3)).subtract(zu2.multiply(u)).multiply(b.z).add(u.multiply(v3)).mod(this.curve.p)
  // z3 = v^3 * z1 * z2
  var z3 = v3.multiply(this.z).multiply(b.z).mod(this.curve.p)

  return new Point(this.curve, x3, y3, z3)
}

Point.prototype.twice = function () {
  if (this.curve.isInfinity(this)) return this
  if (this.y.signum() === 0) return this.curve.infinity

  var x1 = this.x
  var y1 = this.y

  var y1z1 = y1.multiply(this.z)
  var y1sqz1 = y1z1.multiply(y1).mod(this.curve.p)
  var a = this.curve.a

  // w = 3 * x1^2 + a * z1^2
  var w = x1.square().multiply(THREE)

  if (a.signum() !== 0) {
    w = w.add(this.z.square().multiply(a))
  }

  w = w.mod(this.curve.p)
  // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)
  var x3 = w.square().subtract(x1.shiftLeft(3).multiply(y1sqz1)).shiftLeft(1).multiply(y1z1).mod(this.curve.p)
  // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3
  var y3 = w.multiply(THREE).multiply(x1).subtract(y1sqz1.shiftLeft(1)).shiftLeft(2).multiply(y1sqz1).subtract(w.pow(3)).mod(this.curve.p)
  // z3 = 8 * (y1 * z1)^3
  var z3 = y1z1.pow(3).shiftLeft(3).mod(this.curve.p)

  return new Point(this.curve, x3, y3, z3)
}

// Simple NAF (Non-Adjacent Form) multiplication algorithm
// TODO: modularize the multiplication algorithm
Point.prototype.multiply = function (k) {
  if (this.curve.isInfinity(this)) return this
  if (k.signum() === 0) return this.curve.infinity

  var e = k
  var h = e.multiply(THREE)

  var neg = this.negate()
  var R = this

  for (var i = h.bitLength() - 2; i > 0; --i) {
    var hBit = h.testBit(i)
    var eBit = e.testBit(i)

    R = R.twice()

    if (hBit !== eBit) {
      R = R.add(hBit ? this : neg)
    }
  }

  return R
}

// Compute this*j + x*k (simultaneous multiplication)
Point.prototype.multiplyTwo = function (j, x, k) {
  var i = Math.max(j.bitLength(), k.bitLength()) - 1
  var R = this.curve.infinity
  var both = this.add(x)

  while (i >= 0) {
    var jBit = j.testBit(i)
    var kBit = k.testBit(i)

    R = R.twice()

    if (jBit) {
      if (kBit) {
        R = R.add(both)
      } else {
        R = R.add(this)
      }
    } else if (kBit) {
      R = R.add(x)
    }
    --i
  }

  return R
}

Point.prototype.getEncoded = function (compressed) {
  if (compressed == null) compressed = this.compressed
  if (this.curve.isInfinity(this)) return new Buffer('00', 'hex') // Infinity point encoded is simply '00'

  var x = this.affineX
  var y = this.affineY

  var buffer

  // Determine size of q in bytes
  var byteLength = Math.floor((this.curve.p.bitLength() + 7) / 8)

  // 0x02/0x03 | X
  if (compressed) {
    buffer = new Buffer(1 + byteLength)
    buffer.writeUInt8(y.isEven() ? 0x02 : 0x03, 0)

  // 0x04 | X | Y
  } else {
    buffer = new Buffer(1 + byteLength + byteLength)
    buffer.writeUInt8(0x04, 0)

    y.toBuffer(byteLength).copy(buffer, 1 + byteLength)
  }

  x.toBuffer(byteLength).copy(buffer, 1)

  return buffer
}

Point.decodeFrom = function (curve, buffer) {
  var type = buffer.readUInt8(0)
  var compressed = (type !== 4)

  var byteLength = Math.floor((curve.p.bitLength() + 7) / 8)
  var x = BigInteger.fromBuffer(buffer.slice(1, 1 + byteLength))

  var Q
  if (compressed) {
    assert.equal(buffer.length, byteLength + 1, 'Invalid sequence length')
    assert(type === 0x02 || type === 0x03, 'Invalid sequence tag')

    var isOdd = (type === 0x03)
    Q = curve.pointFromX(isOdd, x)
  } else {
    assert.equal(buffer.length, 1 + byteLength + byteLength, 'Invalid sequence length')

    var y = BigInteger.fromBuffer(buffer.slice(1 + byteLength))
    Q = Point.fromAffine(curve, x, y)
  }

  Q.compressed = compressed
  return Q
}

Point.prototype.toString = function () {
  if (this.curve.isInfinity(this)) return '(INFINITY)'

  return '(' + this.affineX.toString() + ',' + this.affineY.toString() + ')'
}

module.exports = Point

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/ecurve/lib/point.js","/../node_modules/ecurve/lib")
},{"assert":1,"bigi":6,"buffer":11,"pBGvAp":74}],35:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var TransactionBuilder = require("./src/TransactionBuilder");

module.exports = {
    TransactionBuilder: TransactionBuilder,
    ChainConfig: require("./src/ChainConfig"),
    ChainTypes: require("./src/ChainTypes"),
    ObjectId: require("./src/ObjectId"),
    NumberUtils: require("./src/NumberUtils"),
    TransactionHelper: require("./src/TransactionHelper"),
    ChainValidation: require("./src/ChainValidation"),
    Login: require("./src/AccountLogin")
};
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/chain/index.js","/../node_modules/esteem-lib/dist/chain")
},{"./src/AccountLogin":36,"./src/ChainConfig":37,"./src/ChainTypes":38,"./src/ChainValidation":39,"./src/NumberUtils":40,"./src/ObjectId":41,"./src/TransactionBuilder":42,"./src/TransactionHelper":43,"buffer":11,"pBGvAp":74}],36:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PrivateKey = require("../../ecc/src/PrivateKey");
var key = require("../../ecc/src/KeyUtils");

var KeyCache = function () {
    function KeyCache() {
        _classCallCheck(this, KeyCache);

        this._keyCachePriv = new Map();
        this._keyCachePub = new Map();
        this._myKeys = new Map();
    }

    _createClass(KeyCache, [{
        key: "setPrivKey",
        value: function setPrivKey(key, privKey) {
            this._keyCachePriv.set(key, privKey);
        }
    }, {
        key: "hasPrivKey",
        value: function hasPrivKey(key) {
            return this._keyCachePriv.has(key);
        }
    }, {
        key: "getPrivKey",
        value: function getPrivKey(key) {
            return this._keyCachePriv.get(key);
        }
    }, {
        key: "setPubKey",
        value: function setPubKey(key, pubKey) {
            this._keyCachePub.set(key, pubKey);
        }
    }, {
        key: "hasPubKey",
        value: function hasPubKey(key) {
            return this._keyCachePub.has(key);
        }
    }, {
        key: "getPubKey",
        value: function getPubKey(key) {
            return this._keyCachePub.get(key);;
        }
    }, {
        key: "setMyKey",
        value: function setMyKey(key, privKey) {
            this._myKeys.set(key, privKey);
        }
    }, {
        key: "getMyKey",
        value: function getMyKey(key) {
            return this._myKeys.get(key);
        }
    }]);

    return KeyCache;
}();

var AccountLogin = function () {
    function AccountLogin() {
        _classCallCheck(this, AccountLogin);

        this.reset();
        this.keyCache = new KeyCache();
    }

    _createClass(AccountLogin, [{
        key: "reset",
        value: function reset() {
            this.state = { loggedIn: false, roles: ["active", "owner", "posting", "memo"] };

            this.subs = {};
        }
    }, {
        key: "addSubscription",
        value: function addSubscription(cb) {
            this.subs[cb] = cb;
        }
    }, {
        key: "setRoles",
        value: function setRoles(roles) {
            this.state.roles = roles;
        }
    }, {
        key: "getRoles",
        value: function getRoles() {
            return this.state.roles;
        }
    }, {
        key: "generateKeys",
        value: function generateKeys(accountName, password, roles, prefix) {
            var _this = this;

            if (!accountName || !password) {
                throw new Error("Account name or password required");
            }
            if (password.length < 12) {
                throw new Error("Password must have at least 12 characters");
            }

            var privKeys = {};
            var pubKeys = {};

            (roles || this.state.roles).forEach(function (role) {
                var seed = accountName + role + password;
                var pkey = _this.keyCache.hasPrivKey(role) ? _this.keyCache.getPrivKey(role) : PrivateKey.fromSeed(key.normalize_brainKey(seed));
                _this.keyCache.setPrivKey(role, pkey);

                privKeys[role] = pkey;
                pubKeys[role] = _this.keyCache.getPubKey(role) ? _this.keyCache.getPubKey(role) : pkey.toPublicKey().toString(prefix);

                _this.keyCache.setPubKey(role, pubKeys[role]);
            });

            return { privKeys: privKeys, pubKeys: pubKeys };
        }
    }, {
        key: "fromPrivKey",
        value: function fromPrivKey(accountName, privateKey, roles, prefix) {
            var _this2 = this;

            if (!privateKey) {
                return null;
            }
            var privKeys = {};
            var pubKeys = {};

            (roles || this.state.roles).forEach(function (role) {

                var pkey = _this2.keyCache.hasPrivKey(role) ? _this2.keyCache.getPrivKey(role) : PrivateKey.fromWif(privateKey);
                _this2.keyCache.setPrivKey(role, pkey);

                privKeys[role] = pkey;
                pubKeys[role] = _this2.keyCache.getPubKey(role) ? _this2.keyCache.getPubKey(role) : pkey.toPublicKey().toString(prefix);

                _this2.keyCache.setPubKey(role, pubKeys[role]);
            });

            return { privKeys: privKeys, pubKeys: pubKeys };
        }
    }, {
        key: "getPubKeys",
        value: function getPubKeys() {
            var _this3 = this;

            return this.state.roles.map(function (role) {
                return _this3.keyCache.getPubKey(role);
            });
        }
    }, {
        key: "checkKeys",
        value: function checkKeys(_ref) {
            var _this4 = this;

            var accountName = _ref.accountName,
                password = _ref.password,
                auths = _ref.auths,
                _ref$privateKey = _ref.privateKey,
                privateKey = _ref$privateKey === undefined ? null : _ref$privateKey;

            if (!accountName || !password && !privateKey || !auths) {
                throw new Error("checkKeys: Missing inputs");
            }
            var hasKey = false;

            var _loop = function _loop(role) {
                var keys = void 0;
                if (password) {
                    keys = _this4.generateKeys(accountName, password, [role]);
                } else if (privateKey) {
                    keys = _this4.fromPrivKey(accountName, privateKey, [role]);
                }

                if (keys && Object.keys(keys).length) {
                    var _keys = keys,
                        privKeys = _keys.privKeys,
                        pubKeys = _keys.pubKeys;

                    auths[role].forEach(function (key) {
                        if (key[0] === pubKeys[role]) {
                            hasKey = true;
                            _this4.keyCache.setMyKey(role, { priv: privKeys[role], pub: pubKeys[role] });
                        }
                    });
                }
            };

            for (var role in auths) {
                _loop(role);
            };

            if (hasKey) {
                this.name = accountName;
            }

            this.state.loggedIn = hasKey;

            return hasKey;
        }
    }, {
        key: "signTransaction",
        value: function signTransaction(tr) {
            var _this5 = this;

            var signerPubkeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var requiredPubkeys = arguments[2];


            var myKeys = {};
            var hasKey = false;

            this.state.roles.forEach(function (role) {
                var myKey = _this5.keyCache.getMyKey(role);
                if (myKey) {
                    if (signerPubkeys[myKey.pub]) {
                        hasKey = true;
                        return;
                    }
                    hasKey = true;
                    signerPubkeys[myKey.pub] = true;
                    if (requiredPubkeys && requiredPubkeys.indexOf(myKey.pub) !== -1) {
                        tr.add_signer(myKey.priv, myKey.pub);
                    } else if (!requiredPubkeys) {
                        tr.add_signer(myKey.priv, myKey.pub);
                    }
                }
            });

            if (!hasKey) {
                console.error("You do not have any private keys to sign this transaction");
                throw new Error("You do not have any private keys to sign this transaction");
            }
        }
    }]);

    return AccountLogin;
}();

module.exports = AccountLogin;
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/chain/src/AccountLogin.js","/../node_modules/esteem-lib/dist/chain/src")
},{"../../ecc/src/KeyUtils":46,"../../ecc/src/PrivateKey":47,"buffer":11,"pBGvAp":74}],37:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

//var _this;

var ecc_config = {
    address_prefix: "STM"
};

var _this = {
    core_asset: "STEEM",
    vest_asset: "VESTS",
    dollar_asset: "SBD",
    address_prefix: "STM",
    expire_in_secs: 15,
    expire_in_secs_proposal: 24 * 60 * 60,
    chain_id: "0000000000000000000000000000000000000000000000000000000000000000",
    networks: {
        Steem: {
            core_asset: "STEEM",
            vest_asset: "VESTS",
            dollar_asset: "SBD",
            address_prefix: "STM",
            chain_id: "0000000000000000000000000000000000000000000000000000000000000000"
        },
        Golos: {
            core_asset: "GOLOS",
            vest_asset: "GESTS",
            dollar_asset: "GBG",
            address_prefix: "GLS",
            chain_id: "782a3039b478c839e4cb0c941ff4eaeb7df40bdd68bd441afd444b9da763de12"
        }
    },
    /** Set a few properties for known chain IDs. */
    setChainId: function setChainId(chain_id) {

        var i, len, network, network_name, ref;
        ref = Object.keys(_this.networks);

        for (i = 0, len = ref.length; i < len; i++) {

            network_name = ref[i];
            network = _this.networks[network_name];

            if (network.chain_id === chain_id) {

                _this.network_name = network_name;

                if (network.address_prefix) {
                    _this.address_prefix = network.address_prefix;
                    _this.dollar_asset = network.dollar_asset;
                    _this.vest_asset = network.vest_asset;
                    _this.core_asset = network.core_asset;

                    ecc_config.address_prefix = network.address_prefix;
                    _this.chain_id = chain_id;
                }

                console.log("INFO    Configured for", network_name, ":", network.core_asset, "\n");

                return {
                    network_name: network_name,
                    network: network
                };
            }
        }

        if (!_this.network_name) {
            console.log("Unknown chain id (this may be a testnet)", chain_id);
        }
    },

    reset: function reset() {
        _this.core_asset = "STEEM";
        _this.address_prefix = "STM";
        ecc_config.address_prefix = "STM";
        _this.expire_in_secs = 15;
        _this.expire_in_secs_proposal = 24 * 60 * 60;

        console.log("Chain config reset");
    },

    setPrefix: function setPrefix() {
        var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "STM";

        _this.address_prefix = prefix;
        ecc_config.address_prefix = prefix;
    }
};
module.exports = _this;
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/chain/src/ChainConfig.js","/../node_modules/esteem-lib/dist/chain/src")
},{"buffer":11,"pBGvAp":74}],38:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var ChainTypes = {};

ChainTypes.operations = {
    vote: 0,
    comment: 1,
    transfer: 2,
    transfer_to_vesting: 3,
    withdraw_vesting: 4,
    limit_order_create: 5,
    limit_order_cancel: 6,
    feed_publish: 7,
    convert: 8,
    account_create: 9,
    account_update: 10,
    witness_update: 11,
    account_witness_vote: 12,
    account_witness_proxy: 13,
    pow: 14,
    custom: 15,
    report_over_production: 16,
    delete_comment: 17,
    custom_json: 18,
    comment_options: 19,
    set_withdraw_vesting_route: 20,
    limit_order_create2: 21,
    challenge_authority: 22,
    prove_authority: 23,
    request_account_recovery: 24,
    recover_account: 25,
    change_recovery_account: 26,
    escrow_transfer: 27,
    escrow_dispute: 28,
    escrow_release: 29,
    pow2: 30,
    escrow_approve: 31,
    transfer_to_savings: 32,
    transfer_from_savings: 33,
    cancel_transfer_from_savings: 34,
    custom_binary: 35,
    decline_voting_rights: 36,
    reset_account: 37,
    set_reset_account: 38,
    claim_reward_balance: 39,
    fill_convert_request: 40,
    author_reward: 41,
    curation_reward: 42,
    comment_reward: 43,
    liquidity_reward: 44,
    interest: 45,
    fill_vesting_withdraw: 46,
    fill_order: 47,
    shutdown_witness: 48,
    fill_transfer_from_savings: 49,
    hardfork: 50,
    comment_payout_update: 51
};

module.exports = ChainTypes;
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/chain/src/ChainTypes.js","/../node_modules/esteem-lib/dist/chain/src")
},{"buffer":11,"pBGvAp":74}],39:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

/**
    Account names may contain one or more names separated by a dot.
    Each name needs to start with a letter and may contain
    numbers, or well placed dashes.
    @see is_valid_name graphene/libraries/chain/protocol/account.cpp
*/
var id_regex = /\b\d+\.\d+\.(\d+)\b/;

var chainValidation = {
    is_account_name: function is_account_name(value) {
        var allow_too_short = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        var i, label, len, length, ref;

        if (this.is_empty(value)) {
            return false;
        }

        length = value.length;

        if (!allow_too_short && length < 3 || length > 63) {
            return false;
        }

        ref = value.split('.');

        for (i = 0, len = ref.length; i < len; i++) {

            label = ref[i];

            if (!(/^[a-z][a-z0-9-]*$/.test(label) && !/--/.test(label) && /[a-z0-9]$/.test(label))) {
                return false;
            }
        }
        return true;
    },

    is_object_id: function is_object_id(obj_id) {
        if ('string' != typeof obj_id) return false;

        var match = id_regex.exec(obj_id);
        return match !== null && obj_id.split(".").length === 3;
    },

    is_empty: function is_empty(value) {
        return value == null || value.length === 0;
    },

    is_account_name_error: function is_account_name_error(value, allow_too_short) {
        var i, label, len, length, ref, suffix;
        if (allow_too_short == null) {
            allow_too_short = false;
        }
        suffix = "Account name should ";
        if (this.is_empty(value)) {
            return suffix + "not be empty.";
        }
        length = value.length;
        if (!allow_too_short && length < 3) {
            return suffix + "be longer.";
        }
        if (length > 63) {
            return suffix + "be shorter.";
        }
        if (/\./.test(value)) {
            suffix = "Each account segment should ";
        }
        ref = value.split('.');
        for (i = 0, len = ref.length; i < len; i++) {
            label = ref[i];
            if (!/^[~a-z]/.test(label)) {
                return suffix + "start with a letter.";
            }
            if (!/^[~a-z0-9-]*$/.test(label)) {
                return suffix + "have only letters, digits, or dashes.";
            }
            if (/--/.test(label)) {
                return suffix + "have only one dash in a row.";
            }
            if (!/[a-z0-9]$/.test(label)) {
                return suffix + "end with a letter or digit.";
            }
            if (!(label.length >= 3)) {
                return suffix + "be longer";
            }
        }
        return null;
    },

    is_cheap_name: function is_cheap_name(account_name) {
        return (/[0-9-]/.test(account_name) || !/[aeiouy]/.test(account_name)
        );
    },

    is_empty_user_input: function is_empty_user_input(value) {
        if (this.is_empty(value)) {
            return true;
        }
        if ((value + "").trim() === "") {
            return true;
        }
        return false;
    },

    required: function required(value) {
        var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        if (this.is_empty(value)) {
            throw new Error("value required for " + field_name + ": " + value);
        }
        return value;
    },

    /** @see is_valid_symbol graphene/libraries/chain/protocol/asset_ops.cpp */
    is_valid_symbol_error: function is_valid_symbol_error(value) {
        var suffix = "Asset name should ";
        if (this.is_empty(value)) {
            return suffix + "not be empty.";
        }
        if (value.split('.').length > 2) {
            return suffix + "have only one dot.";
        }
        if (value.length < 3) {
            return suffix + "be longer.";
        }
        if (value.length > 16) {
            return suffix + "be shorter.";
        }
        if (!/^[A-Z]/.test(value)) {
            return suffix + "start with a letter";
        }
        if (!/[A-Z]$/.test(value)) {
            return suffix + "end with a letter";
        }
        if (/^[A-Z0-9\.]$/.test(value)) {
            return suffix + "contain only letters numbers and perhaps a dot.";
        }
        return null;
    }
};

module.exports = chainValidation;
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/chain/src/ChainValidation.js","/../node_modules/esteem-lib/dist/chain/src")
},{"buffer":11,"pBGvAp":74}],40:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var assert = require("assert");

/**
    Convert 12.34 with a precision of 3 into 12340
    
    @arg {number|string} number - Use strings for large numbers.  This may contain one decimal but no sign
    @arg {number} precision - number of implied decimal places (usually causes right zero padding)
    @return {string} -
*/
module.exports = {
    toImpliedDecimal: function toImpliedDecimal(number, precision) {

        if (typeof number === "number") {
            assert(number <= 9007199254740991, "overflow");
            number = "" + number;
        } else if (number.toString) number = number.toString();

        assert(typeof number === "string", "number should be an actual number or string: " + (typeof number === "undefined" ? "undefined" : _typeof(number)));
        number = number.trim();
        assert(/^[0-9]*\.?[0-9]*$/.test(number), "Invalid decimal number " + number);

        var _number$split = number.split("."),
            _number$split2 = _slicedToArray(_number$split, 2),
            _number$split2$ = _number$split2[0],
            whole = _number$split2$ === undefined ? "" : _number$split2$,
            _number$split2$2 = _number$split2[1],
            decimal = _number$split2$2 === undefined ? "" : _number$split2$2;

        var padding = precision - decimal.length;
        assert(padding >= 0, "Too many decimal digits in " + number + " to create an implied decimal of " + precision);

        for (var i = 0; i < padding; i++) {
            decimal += "0";
        }while (whole.charAt(0) === "0") {
            whole = whole.substring(1);
        }return whole + decimal;
    }
};
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/chain/src/NumberUtils.js","/../node_modules/esteem-lib/dist/chain/src")
},{"assert":1,"buffer":11,"pBGvAp":74}],41:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = require('bytebuffer'),
    Long = _require.Long;

var v = require('../../serializer/src/SerializerValidation');

var DB_MAX_INSTANCE_ID = Long.fromNumber(Math.pow(2, 48) - 1);

var ObjectId = function () {
    function ObjectId(space, type, instance) {
        _classCallCheck(this, ObjectId);

        this.space = space;
        this.type = type;
        this.instance = instance;
        var instance_string = this.instance.toString();
        var _ObjectId = this.space + '.' + this.type + '.' + instance_string;
        if (!v.is_digits(instance_string)) {
            throw new ('Invalid object id ' + _ObjectId)();
        }
    }

    _createClass(ObjectId, [{
        key: 'toLong',
        value: function toLong() {
            return Long.fromNumber(this.space).shiftLeft(56).or(Long.fromNumber(this.type).shiftLeft(48).or(this.instance));
        }
    }, {
        key: 'appendByteBuffer',
        value: function appendByteBuffer(b) {
            return b.writeUint64(this.toLong());
        }
    }, {
        key: 'toString',
        value: function toString() {
            return this.space + '.' + this.type + '.' + this.instance.toString();
        }
    }], [{
        key: 'fromString',
        value: function fromString(value) {
            if (value.space !== undefined && value.type !== undefined && value.instance !== undefined) {
                return value;
            }

            var params = v.require_match(/^([0-9]+)\.([0-9]+)\.([0-9]+)$/, v.required(value, "ObjectId"), "ObjectId");
            return new ObjectId(parseInt(params[1]), parseInt(params[2]), Long.fromString(params[3]));
        }
    }, {
        key: 'fromLong',
        value: function fromLong(long) {
            var space = long.shiftRight(56).toInt();
            var type = long.shiftRight(48).toInt() & 0x00ff;
            var instance = long.and(DB_MAX_INSTANCE_ID);
            return new ObjectId(space, type, instance);
        }
    }, {
        key: 'fromByteBuffer',
        value: function fromByteBuffer(b) {
            return ObjectId.fromLong(b.readUint64());
        }
    }]);

    return ObjectId;
}();

module.exports = ObjectId;
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/chain/src/ObjectId.js","/../node_modules/esteem-lib/dist/chain/src")
},{"../../serializer/src/SerializerValidation":59,"buffer":11,"bytebuffer":12,"pBGvAp":74}],42:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var assert = require("assert");

var _require = require("../../ecc"),
    Signature = _require.Signature,
    PublicKey = _require.PublicKey,
    hash = _require.hash;

var _require2 = require("../../serializer"),
    ops = _require2.ops;

var ChainConfig = require("../../chain/src/ChainConfig");

var _require3 = require('steem-rpc'),
    Client = _require3.Client;

var Api = Client.get();

var _require4 = require('bytebuffer'),
    Long = _require4.Long;

var ChainTypes = require('./ChainTypes');

var head_block_time_string;

var TransactionBuilder = function () {
    function TransactionBuilder() {
        _classCallCheck(this, TransactionBuilder);

        this.ref_block_num = 0;
        this.ref_block_prefix = 0;
        this.expiration = 0;
        this.operations = [];
        this.signatures = [];
        this.signer_private_keys = [];

        // semi-private method bindings
        this._broadcast = _broadcast.bind(this);
    }

    /**
        @arg {string} name - like "transfer"
        @arg {object} operation - JSON matchching the operation's format
    */


    _createClass(TransactionBuilder, [{
        key: "add_type_operation",
        value: function add_type_operation(name, operation) {
            this.add_operation(this.get_type_operation(name, operation));
            return;
        }

        /**
            This does it all: set fees, finalize, sign, and broadcast (if wanted).
             @arg {ConfidentialWallet} cwallet - must be unlocked, used to gather signing keys
             @arg {array<string>} [signer_pubkeys = null] - Optional ["GPHAbc9Def0...", ...].  These are additional signing keys.  Some balance claims require propritary address formats, the witness node can't tell us which ones are needed so they must be passed in.  If the witness node can figure out a signing key (mostly all other transactions), it should not be passed in here.
             @arg {boolean} [broadcast = false]
        */

    }, {
        key: "process_transaction",
        value: function process_transaction(accountLogin) {
            var _this = this;

            var signer_pubkeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var broadcast = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;


            // let wallet_object = cwallet.wallet.wallet_object
            // if(Api.chain_id !== wallet_object.get("chain_id"))
            //     return Promise.reject("Mismatched chain_id; expecting " +
            //         wallet_object.get("chain_id") + ", but got " +
            //         Api.chain_id)

            var signer_pubkeys_added = {};
            // if(signer_pubkeys) {
            //
            //     // Balance claims are by address, only the private
            //     // key holder can know about these additional
            //     // potential keys.
            //     var pubkeys = accountLogin.getPubKeys()
            //     if( ! pubkeys.length)
            //         throw new Error("Missing signing key")
            //
            //     for(let pubkey_string of pubkeys) {
            //         var private_key = cwallet.getPrivateKey(pubkey_string)
            //         this.add_signer(private_key, pubkey_string)
            //         signer_pubkeys_added[pubkey_string] = true
            //     }
            // }

            // return this.get_potential_signatures().then( (pubkeys)=> {
            var my_pubkeys = accountLogin.getPubKeys();

            //{//Testing only, don't send All public keys!
            //    var pubkeys_all = PrivateKeyStore.getPubkeys() // All public keys
            //    this.get_required_signatures(pubkeys_all).then( required_pubkey_strings =>
            //        console.log('get_required_signatures all\t',required_pubkey_strings.sort(), pubkeys_all))
            //    this.get_required_signatures(my_pubkeys).then( required_pubkey_strings =>
            //        console.log('get_required_signatures normal\t',required_pubkey_strings.sort(), pubkeys))
            //}


            return this.get_required_signatures(my_pubkeys).then(function (required_pubkeys) {
                // console.log("required_pubkeys", required_pubkeys);
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = my_pubkeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var pubkey_string = _step.value;

                        // console.log("pubkey_string", pubkey_string);

                        if (signer_pubkeys_added[pubkey_string]) continue;

                        accountLogin.signTransaction(_this, signer_pubkeys_added, required_pubkeys);
                        // var private_key = cwallet.getPrivateKey(pubkey_string)
                        // if( ! private_key)
                        //     // This should not happen, get_required_signatures will only
                        //     // returned keys from my_pubkeys
                        //     throw new Error("Missing signing key for " + pubkey_string)
                        // this.add_signer(private_key, pubkey_string)
                    }

                    // console.log("signer_pubkeys_added", signer_pubkeys_added);
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }).then(function () {
                if (broadcast) {
                    return _this.broadcast();
                } else {
                    return _this.serialize();
                }
            });
        }

        /** Typically this is called automatically just prior to signing.  Once finalized this transaction can not be changed. */

    }, {
        key: "finalize",
        value: function finalize() {
            var _this2 = this;

            // console.log("Try to finalize", "expiration:", this.expiration);
            return new Promise(function (resolve, reject) {

                if (_this2.tr_buffer) {
                    throw new Error("already finalized");
                }

                resolve(Api.database_api().exec("get_dynamic_global_properties", []).then(function (r) {
                    head_block_time_string = r.time;
                    if (_this2.expiration === 0) _this2.expiration = base_expiration_sec() + ChainConfig.expire_in_secs;
                    // console.log("new expiration:", this.expiration);
                    _this2.ref_block_num = r.head_block_number & 0xFFFF;
                    _this2.ref_block_prefix = new Buffer(r.head_block_id, 'hex').readUInt32LE(4);
                    //DEBUG console.log("ref_block",@ref_block_num,@ref_block_prefix,r)

                    var iterable = _this2.operations;
                    for (var i = 0, op; i < iterable.length; i++) {
                        op = iterable[i];
                        if (op[1]["finalize"]) {
                            op[1].finalize();
                        }
                    }
                    _this2.tr_buffer = ops.transaction.toBuffer(_this2);
                }).catch(function (err) {
                    console.log("get_dynamic_global_properties err:", err);
                }));
            });
        }

        /** @return {string} hex transaction ID */

    }, {
        key: "id",
        value: function id() {
            if (!this.tr_buffer) {
                throw new Error("not finalized");
            }
            return hash.sha256(this.tr_buffer).toString('hex').substring(0, 40);
        }

        /**
            Typically one will use {@link this.add_type_operation} instead.
            @arg {array} operation - [operation_id, operation]
        */

    }, {
        key: "add_operation",
        value: function add_operation(operation) {
            if (this.tr_buffer) {
                throw new Error("already finalized");
            }
            assert(operation, "operation");
            if (!Array.isArray(operation)) {
                throw new Error("Expecting array [operation_id, operation]");
            }
            this.operations.push(operation);
            return;
        }
    }, {
        key: "get_type_operation",
        value: function get_type_operation(name, operation) {
            if (this.tr_buffer) {
                throw new Error("already finalized");
            }
            assert(name, "name");
            assert(operation, "operation");
            var _type = ops[name];
            assert(_type, "Unknown operation " + name);
            var operation_id = ChainTypes.operations[_type.operation_name];
            if (operation_id === undefined) {
                throw new Error("unknown operation: " + _type.operation_name);
            }
            if (!operation.fee) {
                operation.fee = { amount: 0, asset_id: 0 };
            }
            if (name === 'proposal_create') {
                operation.expiration_time || (operation.expiration_time = base_expiration_sec() + ChainConfig.expire_in_secs_proposal);
            }
            var operation_instance = _type.fromObject(operation);
            return [operation_id, operation_instance];
        }

        /** optional: there is a deafult expiration */

    }, {
        key: "set_expire_seconds",
        value: function set_expire_seconds(sec) {
            if (this.tr_buffer) {
                throw new Error("already finalized");
            }
            return this.expiration = base_expiration_sec() + sec;
        }

        /* Wraps this transaction in a proposal_create transaction */

    }, {
        key: "propose",
        value: function propose(proposal_create_options) {
            if (this.tr_buffer) {
                throw new Error("already finalized");
            }
            if (!this.operations.length) {
                throw new Error("add operation first");
            }

            assert(proposal_create_options, "proposal_create_options");
            assert(proposal_create_options.fee_paying_account, "proposal_create_options.fee_paying_account");

            var proposed_ops = this.operations.map(function (op) {
                return { op: op };
            });

            this.operations = [];
            this.signatures = [];
            this.signer_private_keys = [];
            proposal_create_options.proposed_ops = proposed_ops;
            this.add_type_operation("proposal_create", proposal_create_options);
            return this;
        }
    }, {
        key: "has_proposed_operation",
        value: function has_proposed_operation() {
            var hasProposed = false;
            for (var i = 0; i < this.operations.length; i++) {
                if ("proposed_ops" in this.operations[i][1]) {
                    hasProposed = true;
                    break;
                }
            }

            return hasProposed;
        }
    }, {
        key: "get_potential_signatures",
        value: function get_potential_signatures() {
            var tr_object = ops.signed_transaction.toObject(this);
            return Api.database_api().exec("get_potential_signatures", [tr_object]).then(function (pubkeys) {
                return { pubkeys: pubkeys };
            });
        }
    }, {
        key: "get_required_signatures",
        value: function get_required_signatures(available_keys) {

            if (!available_keys.length) {
                return Promise.resolve([]);
            }
            var tr_object = ops.signed_transaction.toObject(this);
            //console.log('... tr_object',tr_object);
            //DEBUG console.log('... tr_object',tr_object)
            return Api.database_api().exec("get_required_signatures", [tr_object, available_keys]).then(function (required_public_keys) {
                // DEBUG console.log('... get_required_signatures',required_public_keys)
                //console.log('... get_required_signatures',required_public_keys);
                return required_public_keys;
            });
        }
    }, {
        key: "add_signer",
        value: function add_signer(private_key) {
            var public_key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : private_key.toPublicKey();


            assert(private_key.d, "required PrivateKey object");

            if (this.signed) {
                throw new Error("already signed");
            }
            if (!public_key.Q) {
                public_key = PublicKey.fromPublicKeyString(public_key);
            }
            // prevent duplicates
            var spHex = private_key.toHex();
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.signer_private_keys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var sp = _step2.value;

                    if (sp[0].toHex() === spHex) return;
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            this.signer_private_keys.push([private_key, public_key]);
        }
    }, {
        key: "sign",
        value: function sign() {
            var chain_id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ChainConfig.chain_id;

            console.log(chain_id);
            if (!this.tr_buffer) {
                throw new Error("not finalized");
            }
            if (this.signed) {
                throw new Error("already signed");
            }
            var end = this.signer_private_keys.length;
            for (var i = 0; 0 < end ? i < end : i > end; 0 < end ? i++ : i++) {
                var _signer_private_keys$ = _slicedToArray(this.signer_private_keys[i], 2),
                    private_key = _signer_private_keys$[0],
                    public_key = _signer_private_keys$[1];

                var sig = Signature.signBuffer(Buffer.concat([new Buffer(chain_id, 'hex'), this.tr_buffer]), private_key, public_key);
                this.signatures.push(sig.toBuffer());
            }
            this.signer_private_keys = [];
            this.signed = true;
            return;
        }
    }, {
        key: "serialize",
        value: function serialize() {
            return ops.signed_transaction.toObject(this);
        }
    }, {
        key: "toObject",
        value: function toObject() {
            return ops.signed_transaction.toObject(this);
        }
    }, {
        key: "broadcast",
        value: function broadcast(was_broadcast_callback) {
            var _this3 = this;

            if (this.tr_buffer) {
                return this._broadcast(was_broadcast_callback);
            } else {
                return this.finalize().then(function () {
                    return _this3._broadcast(was_broadcast_callback);
                });
            }
        }
    }]);

    return TransactionBuilder;
}();

var base_expiration_sec = function base_expiration_sec() {
    var head_block_sec = Math.ceil(getHeadBlockDate().getTime() / 1000);
    var now_sec = Math.ceil(Date.now() / 1000);
    // The head block time should be updated every 3 seconds.  If it isn't
    // then help the transaction to expire (use head_block_sec)
    if (now_sec - head_block_sec > 30) {
        return head_block_sec;
    }
    // If the user's clock is very far behind, use the head block time.
    return Math.max(now_sec, head_block_sec);
};

function _broadcast(was_broadcast_callback) {
    var _this4 = this;

    return new Promise(function (resolve, reject) {
        if (!_this4.signed) {
            _this4.sign();
        }
        if (!_this4.tr_buffer) {
            reject(new Error("not finalized"));
        }
        if (!_this4.signatures.length) {
            reject(new Error("not signed"));
        }
        if (!_this4.operations.length) {
            reject(new Error("no operations"));
        }

        if (!("network_broadcast_api" in Api)) {
            reject(new Error("Api does not include network_broadcast_api"));
        }
        var tr_object = ops.signed_transaction.toObject(_this4);

        return Api.network_broadcast_api().exec("broadcast_transaction_with_callback", [{ reject: reject, resolve: resolve }, tr_object]).then(function () {
            // console.log('... broadcast success, waiting for callback')
            if (was_broadcast_callback) was_broadcast_callback();
            return;
        }).catch(function (error) {
            // console.log may be redundant for network errors, other errors could occur
            // console.log(error);
            var message = error.message;
            if (!message) {
                message = "";
            }
            reject(new Error(message + "\n" + 'graphene-crypto ' + ' digest ' + hash.sha256(_this4.tr_buffer).toString('hex') + ' transaction ' + _this4.tr_buffer.toString('hex') + ' ' + JSON.stringify(tr_object)));
        });
    });
}

function getHeadBlockDate() {
    return timeStringToDate(head_block_time_string);
}

function timeStringToDate(time_string) {
    if (!time_string) return new Date("1970-01-01T00:00:00.000Z");
    if (!/Z$/.test(time_string)) //does not end in Z
        // https://github.com/cryptonomex/graphene/issues/368
        time_string = time_string + "Z";
    return new Date(time_string);
}

module.exports = TransactionBuilder;
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/chain/src/TransactionBuilder.js","/../node_modules/esteem-lib/dist/chain/src")
},{"../../chain/src/ChainConfig":37,"../../ecc":44,"../../serializer":57,"./ChainTypes":38,"assert":1,"buffer":11,"bytebuffer":12,"pBGvAp":74,"steem-rpc":88}],43:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var helper;
module.exports = helper = {};

var secureRandom = require('secure-random');

//Promise = require '../common/Promise'

var _require = require('bytebuffer'),
    Long = _require.Long;

var _require2 = require("../../ecc"),
    Signature = _require2.Signature;

var _require3 = require("../../serializer"),
    ops = _require3.ops;

helper.unique_nonce_entropy = null;
helper.unique_nonce_uint64 = function () {
    var entropy = helper.unique_nonce_entropy = function () {

        if (helper.unique_nonce_entropy === null) {
            //console.log('... secureRandom.randomUint8Array(1)[0]',secureRandom.randomUint8Array(1)[0])
            return parseInt(secureRandom.randomUint8Array(1)[0]);
        } else {
            return ++helper.unique_nonce_entropy % 256;
        }
    }();
    var long = Long.fromNumber(Date.now());
    //console.log('unique_nonce_uint64 date\t',ByteBuffer.allocate(8).writeUint64(long).toHex(0))
    //console.log('unique_nonce_uint64 entropy\t',ByteBuffer.allocate(8).writeUint64(Long.fromNumber(entropy)).toHex(0))
    long = long.shiftLeft(8).or(Long.fromNumber(entropy));
    //console.log('unique_nonce_uint64 shift8\t',ByteBuffer.allocate(8).writeUint64(long).toHex(0))
    return long.toString();
};

/* Todo, set fees */
helper.to_json = function (tr) {
    var broadcast = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    return function (tr, broadcast) {
        var tr_object = ops.signed_transaction.toObject(tr);
        if (broadcast) {
            var net = Apis.instance().network_api();
            console.log('... tr_object', JSON.stringify(tr_object));
            return net.exec("broadcast_transaction", [tr_object]);
        } else {
            return tr_object;
        }
    }(tr, broadcast);
};

helper.signed_tr_json = function (tr, private_keys) {
    var tr_buffer = ops.transaction.toBuffer(tr);
    tr = ops.transaction.toObject(tr);
    tr.signatures = function () {
        var result = [];
        for (var i = 0; 0 < private_keys.length ? i < private_keys.length : i > private_keys.length; 0 < private_keys.length ? i++ : i++) {
            var private_key = private_keys[i];
            result.push(Signature.signBuffer(tr_buffer, private_key).toHex());
        }
        return result;
    }();
    return tr;
};

helper.expire_in_min = function (min) {
    return Math.round(Date.now() / 1000) + min * 60;
};

helper.seconds_from_now = function (timeout_sec) {
    return Math.round(Date.now() / 1000) + timeout_sec;
};

/**
    Print to the console a JSON representation of any object in
    @graphene/serializer { types }
*/
helper.template = function (serializer_operation_type_name) {
    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { use_default: true, annotate: true };

    var so = type[serializer_operation_type_name];
    if (!so) {
        throw new Error('unknown serializer_operation_type ' + serializer_operation_type_name);
    }
    return so.toObject(undefined, debug);
};

helper.new_operation = function (serializer_operation_type_name) {
    var so = type[serializer_operation_type_name];
    if (!so) {
        throw new Error('unknown serializer_operation_type ' + serializer_operation_type_name);
    }
    var object = so.toObject(undefined, { use_default: true, annotate: true });
    return so.fromObject(object);
};

helper.instance = function (ObjectId) {
    return ObjectId.substring("0.0.".length);
};
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/chain/src/TransactionHelper.js","/../node_modules/esteem-lib/dist/chain/src")
},{"../../ecc":44,"../../serializer":57,"buffer":11,"bytebuffer":12,"pBGvAp":74,"secure-random":76}],44:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

module.exports = {
    Address: require("./src/address"),
    Aes: require("./src/aes"),
    PrivateKey: require("./src/PrivateKey"),
    PublicKey: require("./src/PublicKey"),
    Signature: require("./src/signature"),
    brainKey: require("./src/BrainKey"),
    hash: require("./src/hash"),
    key: require("./src/KeyUtils")
};
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/ecc/index.js","/../node_modules/esteem-lib/dist/ecc")
},{"./src/BrainKey":45,"./src/KeyUtils":46,"./src/PrivateKey":47,"./src/PublicKey":48,"./src/address":49,"./src/aes":50,"./src/hash":54,"./src/signature":55,"buffer":11,"pBGvAp":74}],45:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

module.exports = function normalize(brainKey) {
    if (typeof brainKey !== 'string') {
        throw new Error("string required for brainKey");
    }
    brainKey = brainKey.trim();
    return brainKey.split(/[\t\n\v\f\r ]+/).join(' ');
};
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/ecc/src/BrainKey.js","/../node_modules/esteem-lib/dist/ecc/src")
},{"buffer":11,"pBGvAp":74}],46:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var key;
var PrivateKey = require('./PrivateKey');
var PublicKey = require('./PublicKey');
var Address = require('./address');
var Aes = require('./aes');

var hash = require('./hash');
// var dictionary = require('./dictionary_en');
var secureRandom = require('secure-random');
var ChainConfig = require("../../chain/src/ChainConfig");

// hash for .25 second
var HASH_POWER_MILLS = 250;

module.exports = key = {

    /** Uses 1 second of hashing power to create a key/password checksum.  An
    implementation can re-call this method with the same password to re-match
    the strength of the CPU (either after moving from a desktop to a mobile,
    mobile to desktop, or N years from now when CPUs are presumably stronger).
     A salt is used for all the normal reasons...
     @return object {
        aes_private: Aes,
        checksum: "{hash_iteration_count},{salt},{checksum}"
    }
    */
    aes_checksum: function aes_checksum(password) {
        if (!(typeof password === "string")) {
            throw new "password string required"();
        }
        var salt = secureRandom.randomBuffer(4).toString('hex');
        var iterations = 0;
        var secret = salt + password;
        // hash for .1 second
        var start_t = Date.now();
        while (Date.now() - start_t < HASH_POWER_MILLS) {
            secret = hash.sha256(secret);
            iterations += 1;
        }

        var checksum = hash.sha256(secret);
        var checksum_string = [iterations, salt.toString('hex'), checksum.slice(0, 4).toString('hex')].join(',');

        return { aes_private: Aes.fromSeed(secret),
            checksum: checksum_string
        };
    },


    /** Provide a matching password and key_checksum.  A "wrong password"
    error is thrown if the password does not match.  If this method takes
    much more or less than 1 second to return, one should consider updating
    all encyrpted fields using a new key.key_checksum.
    */
    aes_private: function aes_private(password, key_checksum) {
        var _key_checksum$split = key_checksum.split(','),
            _key_checksum$split2 = _slicedToArray(_key_checksum$split, 3),
            iterations = _key_checksum$split2[0],
            salt = _key_checksum$split2[1],
            checksum = _key_checksum$split2[2];

        var secret = salt + password;
        for (var i = 0; 0 < iterations ? i < iterations : i > iterations; 0 < iterations ? i++ : i++) {
            secret = hash.sha256(secret);
        }
        var new_checksum = hash.sha256(secret);
        if (!(new_checksum.slice(0, 4).toString('hex') === checksum)) {
            throw new Error("wrong password");
        }
        return Aes.fromSeed(secret);
    },


    /**
        A week random number generator can run out of entropy.  This should ensure even the worst random number implementation will be reasonably safe.
         @param1 string entropy of at least 32 bytes
    */
    random32ByteBuffer: function random32ByteBuffer() {
        var entropy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.browserEntropy();


        if (!(typeof entropy === 'string')) {
            throw new Error("string required for entropy");
        }

        if (entropy.length < 32) {
            throw new Error("expecting at least 32 bytes of entropy");
        }

        var start_t = Date.now();

        while (Date.now() - start_t < HASH_POWER_MILLS) {
            entropy = hash.sha256(entropy);
        }var hash_array = [];
        hash_array.push(entropy);

        // Hashing for 1 second may helps the computer is not low on entropy (this method may be called back-to-back).
        hash_array.push(secureRandom.randomBuffer(32));

        return hash.sha256(Buffer.concat(hash_array));
    },


    suggest_brain_key: function suggest_brain_key() {
        var dictionary = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ",";
        var entropy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.browserEntropy();


        var randomBuffer = this.random32ByteBuffer(entropy);

        var word_count = 16;
        var dictionary_lines = dictionary.split(',');

        if (!(dictionary_lines.length === 49744)) {
            throw new Error('expecting ' + 49744 + ' but got ' + dictionary_lines.length + ' dictionary words');
        }

        var brainkey = [];
        var end = word_count * 2;

        for (var i = 0; i < end; i += 2) {

            // randomBuffer has 256 bits / 16 bits per word == 16 words
            var num = (randomBuffer[i] << 8) + randomBuffer[i + 1];

            // convert into a number between 0 and 1 (inclusive)
            var rndMultiplier = num / Math.pow(2, 16);
            var wordIndex = Math.round(dictionary_lines.length * rndMultiplier);

            brainkey.push(dictionary_lines[wordIndex]);
        }
        return this.normalize_brainKey(brainkey.join(' '));
    },

    get_random_key: function get_random_key(entropy) {
        return PrivateKey.fromBuffer(this.random32ByteBuffer(entropy));
    },
    get_brainPrivateKey: function get_brainPrivateKey(brainKey) {
        var sequence = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        if (sequence < 0) {
            throw new Error("invalid sequence");
        }
        brainKey = key.normalize_brainKey(brainKey);
        return PrivateKey.fromBuffer(hash.sha256(hash.sha512(brainKey + " " + sequence)));
    },


    // Turn invisible space like characters into a single space
    normalize_brainKey: function normalize_brainKey(brainKey) {
        if (!(typeof brainKey === 'string')) {
            throw new Error("string required for brainKey");
        }

        brainKey = brainKey.trim();
        return brainKey.split(/[\t\n\v\f\r ]+/).join(' ');
    },
    browserEntropy: function browserEntropy() {

        var entropyStr = "";
        try {
            entropyStr = new Date().toString() + " " + window.screen.height + " " + window.screen.width + " " + window.screen.colorDepth + " " + " " + window.screen.availHeight + " " + window.screen.availWidth + " " + window.screen.pixelDepth + navigator.language + " " + window.location + " " + window.history.length;

            for (var i = 0, mimeType; i < navigator.mimeTypes.length; i++) {
                mimeType = navigator.mimeTypes[i];
                entropyStr += mimeType.description + " " + mimeType.type + " " + mimeType.suffixes + " ";
            }
            console.log("INFO\tbrowserEntropy gathered");
        } catch (error) {
            //nodejs:ReferenceError: window is not defined
            entropyStr = hash.sha256(new Date().toString());
        }

        var b = new Buffer(entropyStr);
        entropyStr += b.toString('binary') + " " + new Date().toString();
        return entropyStr;
    },


    // @return array of 5 legacy addresses for a pubkey string parameter.
    addresses: function addresses(pubkey) {
        var address_prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ChainConfig.address_prefix;

        var public_key = PublicKey.fromPublicKeyString(pubkey, address_prefix);
        // S L O W
        var address_string = [Address.fromPublic(public_key, false, 0).toString(address_prefix), // btc_uncompressed
        Address.fromPublic(public_key, true, 0).toString(address_prefix), // btc_compressed
        Address.fromPublic(public_key, false, 56).toString(address_prefix), // pts_uncompressed
        Address.fromPublic(public_key, true, 56).toString(address_prefix), // pts_compressed
        public_key.toAddressString(address_prefix) // bts_short, most recent format
        ];
        return address_string;
    }
};
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/ecc/src/KeyUtils.js","/../node_modules/esteem-lib/dist/ecc/src")
},{"../../chain/src/ChainConfig":37,"./PrivateKey":47,"./PublicKey":48,"./address":49,"./aes":50,"./hash":54,"buffer":11,"pBGvAp":74,"secure-random":76}],47:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ecurve = require('ecurve');

var _require = require('ecurve'),
    Point = _require.Point,
    getCurveByName = _require.getCurveByName;

var secp256k1 = getCurveByName('secp256k1');
var BigInteger = require('bigi');

var _require2 = require('bs58'),
    encode = _require2.encode,
    decode = _require2.decode;

var assert = require('assert');
var hash = require('./hash');
var PublicKey = require('./PublicKey');
var deepEqual = require("deep-equal");

var G = secp256k1.G,
    n = secp256k1.n;

var PrivateKey = function () {

    /**
        @private see static functions
        @param {BigInteger}
    */
    function PrivateKey(d) {
        _classCallCheck(this, PrivateKey);

        this.d = d;
    }

    _createClass(PrivateKey, [{
        key: 'toWif',
        value: function toWif() {
            var private_key = this.toBuffer();
            // checksum includes the version
            private_key = Buffer.concat([new Buffer([0x80]), private_key]);
            var checksum = hash.sha256(private_key);
            checksum = hash.sha256(checksum);
            checksum = checksum.slice(0, 4);
            var private_wif = Buffer.concat([private_key, checksum]);
            return encode(private_wif);
        }

        /**
            @return {Point}
        */

    }, {
        key: 'toPublicKeyPoint',
        value: function toPublicKeyPoint() {
            var Q;
            return Q = secp256k1.G.multiply(this.d);
        }
    }, {
        key: 'toPublicKey',
        value: function toPublicKey() {
            if (this.public_key) {
                return this.public_key;
            }
            return this.public_key = PublicKey.fromPoint(this.toPublicKeyPoint());
        }
    }, {
        key: 'toBuffer',
        value: function toBuffer() {
            return this.d.toBuffer(32);
        }

        /** ECIES */

    }, {
        key: 'get_shared_secret',
        value: function get_shared_secret(public_key) {
            var legacy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            public_key = toPublic(public_key);
            var KB = public_key.toUncompressed().toBuffer();
            var KBP = Point.fromAffine(secp256k1, BigInteger.fromBuffer(KB.slice(1, 33)), // x
            BigInteger.fromBuffer(KB.slice(33, 65)) // y
            );
            var r = this.toBuffer();
            var P = KBP.multiply(BigInteger.fromBuffer(r));
            var S = P.affineX.toBuffer({ size: 32 });
            /*
            the input to sha512 must be exactly 32-bytes, to match the c++ implementation
            of get_shared_secret.  Right now S will be shorter if the most significant
            byte(s) is zero.  Pad it back to the full 32-bytes
            */
            if (!legacy && S.length < 32) {
                pad = new Buffer(32 - S.length).fill(0);
                S = Buffer.concat([pad, S]);
            }

            // SHA512 used in ECIES
            return hash.sha512(S);
        }

        // /** ECIES (does not always match the Point.fromAffine version above) */
        // get_shared_secret(public_key){
        //     public_key = toPublic(public_key)
        //     var P = public_key.Q.multiply( this.d );
        //     var S = P.affineX.toBuffer({size: 32});
        //     // ECIES, adds an extra sha512
        //     return hash.sha512(S);
        // }

        /** @throws {Error} - overflow of the key could not be derived */

    }, {
        key: 'child',
        value: function child(offset) {
            offset = Buffer.concat([this.toPublicKey().toBuffer(), offset]);
            offset = hash.sha256(offset);
            var c = BigInteger.fromBuffer(offset);

            if (c.compareTo(n) >= 0) throw new Error("Child offset went out of bounds, try again");

            var derived = this.d.add(c); //.mod(n)

            if (derived.signum() === 0) throw new Error("Child offset derived to an invalid key, try again");

            return new PrivateKey(derived);
        }

        /* <helper_functions> */

    }, {
        key: 'toByteBuffer',
        value: function toByteBuffer() {
            var b = new ByteBuffer(ByteBuffer.DEFAULT_CAPACITY, ByteBuffer.LITTLE_ENDIAN);
            this.appendByteBuffer(b);
            return b.copy(0, b.offset);
        }
    }, {
        key: 'toHex',
        value: function toHex() {
            return this.toBuffer().toString('hex');
        }

        /* </helper_functions> */

    }], [{
        key: 'fromBuffer',
        value: function fromBuffer(buf) {
            if (!Buffer.isBuffer(buf)) {
                throw new Error("Expecting paramter to be a Buffer type");
            }
            if (32 !== buf.length) {
                console.log('WARN: Expecting 32 bytes, instead got ' + buf.length + ', stack trace:', new Error().stack);
            }
            if (buf.length === 0) {
                throw new Error("Empty buffer");
            }
            return new PrivateKey(BigInteger.fromBuffer(buf));
        }

        /** @arg {string} seed - any length string.  This is private, the same seed produces the same private key every time.  */

    }, {
        key: 'fromSeed',
        value: function fromSeed(seed) {
            // generate_private_key
            if (!(typeof seed === 'string')) {
                throw new Error('seed must be of type string');
            }
            return PrivateKey.fromBuffer(hash.sha256(seed));
        }

        /** @return {string} Wallet Import Format (still a secret, Not encrypted) */

    }, {
        key: 'fromWif',
        value: function fromWif(_private_wif) {
            var private_wif = new Buffer(decode(_private_wif));
            var version = private_wif.readUInt8(0);
            assert.equal(0x80, version, 'Expected version ' + 0x80 + ', instead got ' + version);
            // checksum includes the version
            var private_key = private_wif.slice(0, -4);
            var checksum = private_wif.slice(-4);
            var new_checksum = hash.sha256(private_key);
            new_checksum = hash.sha256(new_checksum);
            new_checksum = new_checksum.slice(0, 4);
            var isEqual = deepEqual(checksum, new_checksum); //, 'Invalid checksum'
            if (!isEqual) {
                throw new Error("Checksum did not match");
            }
            private_key = private_key.slice(1);
            return PrivateKey.fromBuffer(private_key);
        }
    }, {
        key: 'fromHex',
        value: function fromHex(hex) {
            return PrivateKey.fromBuffer(new Buffer(hex, 'hex'));
        }
    }]);

    return PrivateKey;
}();

module.exports = PrivateKey;

var toPublic = function toPublic(data) {
    return data == null ? data : data.Q ? data : PublicKey.fromStringOrThrow(data);
};
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/ecc/src/PrivateKey.js","/../node_modules/esteem-lib/dist/ecc/src")
},{"./PublicKey":48,"./hash":54,"assert":1,"bigi":6,"bs58":10,"buffer":11,"deep-equal":66,"ecurve":32,"pBGvAp":74}],48:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BigInteger = require('bigi');

var _require = require('ecurve'),
    Point = _require.Point,
    getCurveByName = _require.getCurveByName;

var secp256k1 = getCurveByName('secp256k1');

var _require2 = require('bs58'),
    encode = _require2.encode,
    decode = _require2.decode;

var hash = require('./hash');
var ChainConfig = require("../../chain/src/ChainConfig");
var assert = require('assert');
var deepEqual = require("deep-equal");

var G = secp256k1.G,
    n = secp256k1.n;

var PublicKey = function () {

    /** @param {Point} public key */
    function PublicKey(Q) {
        _classCallCheck(this, PublicKey);

        this.Q = Q;
    }

    _createClass(PublicKey, [{
        key: 'toBuffer',
        value: function toBuffer() {
            var compressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.Q ? this.Q.compressed : null;

            if (this.Q === null) return new Buffer('000000000000000000000000000000000000000000000000000000000000000000', 'hex');
            return this.Q.getEncoded(compressed);
        }
    }, {
        key: 'toUncompressed',
        value: function toUncompressed() {
            var buf = this.Q.getEncoded(false);
            var point = Point.decodeFrom(secp256k1, buf);
            return PublicKey.fromPoint(point);
        }

        /** bts::blockchain::address (unique but not a full public key) */

    }, {
        key: 'toBlockchainAddress',
        value: function toBlockchainAddress() {
            var pub_buf = this.toBuffer();
            var pub_sha = hash.sha512(pub_buf);
            return hash.ripemd160(pub_sha);
        }

        /** Alias for {@link toPublicKeyString} */

    }, {
        key: 'toString',
        value: function toString() {
            var address_prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ChainConfig.address_prefix;

            return this.toPublicKeyString(address_prefix);
        }

        /**
            Full public key
            {return} string
        */

    }, {
        key: 'toPublicKeyString',
        value: function toPublicKeyString() {
            var address_prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ChainConfig.address_prefix;

            var pub_buf = this.toBuffer();
            var checksum = hash.ripemd160(pub_buf);
            var addy = Buffer.concat([pub_buf, checksum.slice(0, 4)]);
            return address_prefix + encode(addy);
        }

        /**
            @arg {string} public_key - like GPHXyz...
            @arg {string} address_prefix - like GPH
            @return PublicKey or `null` (if the public_key string is invalid)
        */

    }, {
        key: 'toAddressString',
        value: function toAddressString() {
            var address_prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ChainConfig.address_prefix;

            var pub_buf = this.toBuffer();
            var pub_sha = hash.sha512(pub_buf);
            var addy = hash.ripemd160(pub_sha);
            var checksum = hash.ripemd160(addy);
            addy = Buffer.concat([addy, checksum.slice(0, 4)]);
            return address_prefix + encode(addy);
        }
    }, {
        key: 'toPtsAddy',
        value: function toPtsAddy() {
            var pub_buf = this.toBuffer();
            var pub_sha = hash.sha256(pub_buf);
            var addy = hash.ripemd160(pub_sha);
            addy = Buffer.concat([new Buffer([0x38]), addy]); //version 56(decimal)

            var checksum = hash.sha256(addy);
            checksum = hash.sha256(checksum);

            addy = Buffer.concat([addy, checksum.slice(0, 4)]);
            return encode(addy);
        }
    }, {
        key: 'child',
        value: function child(offset) {

            assert(Buffer.isBuffer(offset), "Buffer required: offset");
            assert.equal(offset.length, 32, "offset length");

            offset = Buffer.concat([this.toBuffer(), offset]);
            offset = hash.sha256(offset);

            var c = BigInteger.fromBuffer(offset);

            if (c.compareTo(n) >= 0) throw new Error("Child offset went out of bounds, try again");

            var cG = G.multiply(c);
            var Qprime = this.Q.add(cG);

            if (secp256k1.isInfinity(Qprime)) throw new Error("Child offset derived to an invalid key, try again");

            return PublicKey.fromPoint(Qprime);
        }

        /* <HEX> */

    }, {
        key: 'toByteBuffer',
        value: function toByteBuffer() {
            var b = new ByteBuffer(ByteBuffer.DEFAULT_CAPACITY, ByteBuffer.LITTLE_ENDIAN);
            this.appendByteBuffer(b);
            return b.copy(0, b.offset);
        }
    }, {
        key: 'toHex',
        value: function toHex() {
            return this.toBuffer().toString('hex');
        }
    }], [{
        key: 'fromBinary',
        value: function fromBinary(bin) {
            return PublicKey.fromBuffer(new Buffer(bin, 'binary'));
        }
    }, {
        key: 'fromBuffer',
        value: function fromBuffer(buffer) {
            if (buffer.toString('hex') === '000000000000000000000000000000000000000000000000000000000000000000') return new PublicKey(null);
            return new PublicKey(Point.decodeFrom(secp256k1, buffer));
        }
    }, {
        key: 'fromPoint',
        value: function fromPoint(point) {
            return new PublicKey(point);
        }
    }, {
        key: 'fromPublicKeyString',
        value: function fromPublicKeyString(public_key) {
            var address_prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ChainConfig.address_prefix;

            try {
                return PublicKey.fromStringOrThrow(public_key, address_prefix);
            } catch (e) {
                return null;
            }
        }

        /**
            @arg {string} public_key - like GPHXyz...
            @arg {string} address_prefix - like GPH
            @throws {Error} if public key is invalid
            @return PublicKey
        */

    }, {
        key: 'fromStringOrThrow',
        value: function fromStringOrThrow(public_key) {
            var address_prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ChainConfig.address_prefix;

            var prefix = public_key.slice(0, address_prefix.length);
            assert.equal(address_prefix, prefix, 'Expecting key to begin with ' + address_prefix + ', instead got ' + prefix);
            public_key = public_key.slice(address_prefix.length);

            public_key = new Buffer(decode(public_key), 'binary');
            var checksum = public_key.slice(-4);
            public_key = public_key.slice(0, -4);
            var new_checksum = hash.ripemd160(public_key);
            new_checksum = new_checksum.slice(0, 4);
            var isEqual = deepEqual(checksum, new_checksum); //, 'Invalid checksum'
            if (!isEqual) {
                throw new Error("Checksum did not match");
            }
            return PublicKey.fromBuffer(public_key);
        }
    }, {
        key: 'fromHex',
        value: function fromHex(hex) {
            return PublicKey.fromBuffer(new Buffer(hex, 'hex'));
        }
    }, {
        key: 'fromPublicKeyStringHex',
        value: function fromPublicKeyStringHex(hex) {
            return PublicKey.fromPublicKeyString(new Buffer(hex, 'hex'));
        }

        /* </HEX> */

    }]);

    return PublicKey;
}();

module.exports = PublicKey;
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/ecc/src/PublicKey.js","/../node_modules/esteem-lib/dist/ecc/src")
},{"../../chain/src/ChainConfig":37,"./hash":54,"assert":1,"bigi":6,"bs58":10,"buffer":11,"deep-equal":66,"ecurve":32,"pBGvAp":74}],49:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var assert = require('assert');
var ChainConfig = require("../../chain/src/ChainConfig");
var hash = require('./hash');

var _require = require('bs58'),
    encode = _require.encode,
    decode = _require.decode;

var deepEqual = require("deep-equal");

/** Addresses are shortened non-reversable hashes of a public key.  The full PublicKey is preferred.
    @deprecated
*/

var Address = function () {
    function Address(addy) {
        _classCallCheck(this, Address);

        this.addy = addy;
    }

    _createClass(Address, [{
        key: 'toBuffer',
        value: function toBuffer() {
            return this.addy;
        }
    }, {
        key: 'toString',
        value: function toString() {
            var address_prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ChainConfig.address_prefix;

            var checksum = hash.ripemd160(this.addy);
            var addy = Buffer.concat([this.addy, checksum.slice(0, 4)]);
            return address_prefix + encode(addy);
        }
    }], [{
        key: 'fromBuffer',
        value: function fromBuffer(buffer) {
            var _hash = hash.sha512(buffer);
            var addy = hash.ripemd160(_hash);
            return new Address(addy);
        }
    }, {
        key: 'fromString',
        value: function fromString(string) {
            var address_prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ChainConfig.address_prefix;

            var prefix = string.slice(0, address_prefix.length);
            assert.equal(address_prefix, prefix, 'Expecting key to begin with ' + address_prefix + ', instead got ' + prefix);
            var addy = string.slice(address_prefix.length);
            addy = new Buffer(decode(addy), 'binary');
            var checksum = addy.slice(-4);
            addy = addy.slice(0, -4);
            var new_checksum = hash.ripemd160(addy);
            new_checksum = new_checksum.slice(0, 4);
            var isEqual = deepEqual(checksum, new_checksum); //, 'Invalid checksum'
            if (!isEqual) {
                throw new Error("Checksum did not match");
            }
            return new Address(addy);
        }
    }, {
        key: 'fromPublic',


        /** @return Address - Compressed PTS format (by default) */
        value: function fromPublic(public_key) {
            var compressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 56;

            var sha2 = hash.sha256(public_key.toBuffer(compressed));
            var rep = hash.ripemd160(sha2);
            var versionBuffer = new Buffer(1);
            versionBuffer.writeUInt8(0xFF & version, 0);
            var addr = Buffer.concat([versionBuffer, rep]);
            var check = hash.sha256(addr);
            check = hash.sha256(check);
            var buffer = Buffer.concat([addr, check.slice(0, 4)]);
            return new Address(hash.ripemd160(buffer));
        }
    }]);

    return Address;
}();

module.exports = Address;
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/ecc/src/address.js","/../node_modules/esteem-lib/dist/ecc/src")
},{"../../chain/src/ChainConfig":37,"./hash":54,"assert":1,"bs58":10,"buffer":11,"deep-equal":66,"pBGvAp":74}],50:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// https://code.google.com/p/crypto-js
var AES = require("crypto-js/aes");
var encHex = require("crypto-js/enc-hex");
var encBase64 = require("crypto-js/enc-base64");
var assert = require("assert");

var _require = require("bytebuffer"),
    Long = _require.Long;

var hash = require('./hash');

/** Provides symetric encrypt and decrypt via AES. */

var Aes = function () {

    /** @private */
    function Aes(iv, key) {
        _classCallCheck(this, Aes);

        this.iv = iv, this.key = key;
    }

    /** This is an excellent way to ensure that all references to Aes can not operate anymore (example: a wallet becomes locked).  An application should ensure there is only one Aes object instance for a given secret `seed`. */


    _createClass(Aes, [{
        key: "clear",
        value: function clear() {
            return this.iv = this.key = undefined;
        }

        /** @arg {string} seed - secret seed may be used to encrypt or decrypt. */

    }, {
        key: "_decrypt_word_array",


        /** @private */
        value: function _decrypt_word_array(cipher) {
            // https://code.google.com/p/crypto-js/#Custom_Key_and_IV
            // see wallet_records.cpp master_key::decrypt_key
            return AES.decrypt({ ciphertext: cipher, salt: null }, this.key, { iv: this.iv });
        }

        /** @private */

    }, {
        key: "_encrypt_word_array",
        value: function _encrypt_word_array(plaintext) {
            //https://code.google.com/p/crypto-js/issues/detail?id=85
            var cipher = AES.encrypt(plaintext, this.key, { iv: this.iv });
            return encBase64.parse(cipher.toString());
        }

        /** This method does not use a checksum, the returned data must be validated some other way.
            @arg {string} ciphertext
            @return {Buffer} binary
        */

    }, {
        key: "decrypt",
        value: function decrypt(ciphertext) {
            if (typeof ciphertext === "string") {
                ciphertext = new Buffer(ciphertext, 'binary');
            }
            if (!Buffer.isBuffer(ciphertext)) {
                throw new Error("buffer required");
            }
            assert(ciphertext, "Missing cipher text");
            // hex is the only common format
            var hex = this.decryptHex(ciphertext.toString('hex'));
            return new Buffer(hex, 'hex');
        }

        /** This method does not use a checksum, the returned data must be validated some other way.
            @arg {string} plaintext
            @return {Buffer} binary
        */

    }, {
        key: "encrypt",
        value: function encrypt(plaintext) {
            if (typeof plaintext === "string") {
                plaintext = new Buffer(plaintext, 'binary');
            }
            if (!Buffer.isBuffer(plaintext)) {
                throw new Error("buffer required");
            }
            //assert plaintext, "Missing plain text"
            // hex is the only common format
            var hex = this.encryptHex(plaintext.toString('hex'));
            return new Buffer(hex, 'hex');
        }

        /** This method does not use a checksum, the returned data must be validated some other way.
            @arg {string|Buffer} plaintext
            @return {string} hex
        */

    }, {
        key: "encryptToHex",
        value: function encryptToHex(plaintext) {
            if (typeof plaintext === "string") {
                plaintext = new Buffer(plaintext, 'binary');
            }
            if (!Buffer.isBuffer(plaintext)) {
                throw new Error("buffer required");
            }
            //assert plaintext, "Missing plain text"
            // hex is the only common format
            return this.encryptHex(plaintext.toString('hex'));
        }

        /** This method does not use a checksum, the returned data must be validated some other way.
            @arg {string} cipher - hex
            @return {string} binary (could easily be readable text)
        */

    }, {
        key: "decryptHex",
        value: function decryptHex(cipher) {
            assert(cipher, "Missing cipher text");
            // Convert data into word arrays (used by Crypto)
            var cipher_array = encHex.parse(cipher);
            var plainwords = this._decrypt_word_array(cipher_array);
            return encHex.stringify(plainwords);
        }

        /** This method does not use a checksum, the returned data must be validated some other way.
            @arg {string} cipher - hex
            @return {Buffer} encoded as specified by the parameter
        */

    }, {
        key: "decryptHexToBuffer",
        value: function decryptHexToBuffer(cipher) {
            assert(cipher, "Missing cipher text");
            // Convert data into word arrays (used by Crypto)
            var cipher_array = encHex.parse(cipher);
            var plainwords = this._decrypt_word_array(cipher_array);
            var plainhex = encHex.stringify(plainwords);
            return new Buffer(plainhex, 'hex');
        }

        /** This method does not use a checksum, the returned data must be validated some other way.
            @arg {string} cipher - hex
            @arg {string} [encoding = 'binary'] - a valid Buffer encoding
            @return {String} encoded as specified by the parameter
        */

    }, {
        key: "decryptHexToText",
        value: function decryptHexToText(cipher) {
            var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'binary';

            return this.decryptHexToBuffer(cipher).toString(encoding);
        }

        /** This method does not use a checksum, the returned data must be validated some other way.
            @arg {string} plainhex - hex format
            @return {String} hex
        */

    }, {
        key: "encryptHex",
        value: function encryptHex(plainhex) {
            var plain_array = encHex.parse(plainhex);
            var cipher_array = this._encrypt_word_array(plain_array);
            return encHex.stringify(cipher_array);
        }
    }], [{
        key: "fromSeed",
        value: function fromSeed(seed) {
            if (seed === undefined) {
                throw new Error("seed is required");
            }
            var _hash = hash.sha512(seed);
            _hash = _hash.toString('hex');
            // DEBUG console.log('... fromSeed _hash',_hash)
            return Aes.fromSha512(_hash);
        }
    }, {
        key: "fromSha512",


        /** @arg {string} hash - A 128 byte hex string, typically one would call {@link fromSeed} instead. */
        value: function fromSha512(hash) {
            assert.equal(hash.length, 128, "A Sha512 in HEX should be 128 characters long, instead got " + hash.length);
            var iv = encHex.parse(hash.substring(64, 96));
            var key = encHex.parse(hash.substring(0, 64));
            return new Aes(iv, key);
        }
    }, {
        key: "fromBuffer",
        value: function fromBuffer(buf) {
            assert(Buffer.isBuffer(buf), "Expecting Buffer");
            assert.equal(buf.length, 64, "A Sha512 Buffer should be 64 characters long, instead got " + buf.length);
            return Aes.fromSha512(buf.toString("hex"));
        }
        /**
            @throws {Error} - "Invalid Key, ..."
            @arg {PrivateKey} private_key - required and used for decryption
            @arg {PublicKey} public_key - required and used to calcualte the shared secret
            @arg {string} [nonce = ""] optional but should always be provided and be unique when re-using the same private/public keys more than once.  This nonce is not a secret.
            @arg {string|Buffer} message - Encrypted message containing a checksum
            @return {Buffer}
        */

    }, {
        key: "decrypt_with_checksum",
        value: function decrypt_with_checksum(private_key, public_key, nonce, message) {
            var legacy = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;


            // Warning: Do not put `nonce = ""` in the arguments, in es6 this will not convert "null" into an emtpy string
            if (nonce == null) // null or undefined
                nonce = "";

            if (!Buffer.isBuffer(message)) {
                message = new Buffer(message, 'hex');
            }

            var S = private_key.get_shared_secret(public_key, legacy);
            // D E B U G
            // console.log('decrypt_with_checksum', {
            //     priv_to_pub: private_key.toPublicKey().toString(),
            //     pub: public_key.toPublicKeyString(),
            //     nonce: nonce,
            //     message: message.length,
            //     S: S.toString('hex')
            // })

            var aes = Aes.fromSeed(Buffer.concat([
            // A null or empty string nonce will not effect the hash
            new Buffer("" + nonce), new Buffer(S.toString('hex'))]));

            var planebuffer = aes.decrypt(message);
            if (!(planebuffer.length >= 4)) {
                throw new Error("Invalid key, could not decrypt message(1)");
            }

            // DEBUG console.log('... planebuffer',planebuffer)
            var checksum = planebuffer.slice(0, 4);
            var plaintext = planebuffer.slice(4);

            // console.log('... checksum',checksum.toString('hex'))
            // console.log('... plaintext',plaintext.toString())

            var new_checksum = hash.sha256(plaintext);
            new_checksum = new_checksum.slice(0, 4);
            new_checksum = new_checksum.toString('hex');

            if (!(checksum.toString('hex') === new_checksum)) {
                throw new Error("Invalid key, could not decrypt message(2)");
            }

            return plaintext;
        }
    }, {
        key: "encrypt_with_checksum",


        /** Identical to {@link decrypt_with_checksum} but used to encrypt.  Should not throw an error.
            @return {Buffer} message - Encrypted message which includes a checksum
        */
        value: function encrypt_with_checksum(private_key, public_key, nonce, message) {

            // Warning: Do not put `nonce = ""` in the arguments, in es6 this will not convert "null" into an emtpy string

            if (nonce == null) // null or undefined
                nonce = "";

            if (!Buffer.isBuffer(message)) {
                message = new Buffer(message, 'binary');
            }

            var S = private_key.get_shared_secret(public_key);

            // D E B U G
            // console.log('encrypt_with_checksum', {
            //     priv_to_pub: private_key.toPublicKey().toString()
            //     pub: public_key.toPublicKeyString()
            //     nonce: nonce
            //     message: message.length
            //     S: S.toString('hex')
            // })

            var aes = Aes.fromSeed(Buffer.concat([
            // A null or empty string nonce will not effect the hash
            new Buffer("" + nonce), new Buffer(S.toString('hex'))]));
            // DEBUG console.log('... S',S.toString('hex'))
            var checksum = hash.sha256(message).slice(0, 4);
            var payload = Buffer.concat([checksum, message]);
            // DEBUG console.log('... payload',payload.toString())
            return aes.encrypt(payload);
        }
    }]);

    return Aes;
}();

module.exports = Aes;
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/ecc/src/aes.js","/../node_modules/esteem-lib/dist/ecc/src")
},{"./hash":54,"assert":1,"buffer":11,"bytebuffer":12,"crypto-js/aes":18,"crypto-js/enc-base64":21,"crypto-js/enc-hex":22,"pBGvAp":74}],51:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var assert = require('assert'); // from github.com/bitcoinjs/bitcoinjs-lib from github.com/cryptocoinjs/ecdsa
var crypto = require('./hash');
var enforceType = require('./enforce_types');

var BigInteger = require('bigi');
var ECSignature = require('./ecsignature');

// https://tools.ietf.org/html/rfc6979#section-3.2
function deterministicGenerateK(curve, hash, d, checkSig, nonce) {

  enforceType('Buffer', hash);
  enforceType(BigInteger, d);

  if (nonce) {
    hash = crypto.sha256(Buffer.concat([hash, new Buffer(nonce)]));
  }

  // sanity check
  assert.equal(hash.length, 32, 'Hash must be 256 bit');

  var x = d.toBuffer(32);
  var k = new Buffer(32);
  var v = new Buffer(32);

  // Step B
  v.fill(1);

  // Step C
  k.fill(0);

  // Step D
  k = crypto.HmacSHA256(Buffer.concat([v, new Buffer([0]), x, hash]), k);

  // Step E
  v = crypto.HmacSHA256(v, k);

  // Step F
  k = crypto.HmacSHA256(Buffer.concat([v, new Buffer([1]), x, hash]), k);

  // Step G
  v = crypto.HmacSHA256(v, k);

  // Step H1/H2a, ignored as tlen === qlen (256 bit)
  // Step H2b
  v = crypto.HmacSHA256(v, k);

  var T = BigInteger.fromBuffer(v);

  // Step H3, repeat until T is within the interval [1, n - 1]
  while (T.signum() <= 0 || T.compareTo(curve.n) >= 0 || !checkSig(T)) {
    k = crypto.HmacSHA256(Buffer.concat([v, new Buffer([0])]), k);
    v = crypto.HmacSHA256(v, k);

    // Step H1/H2a, again, ignored as tlen === qlen (256 bit)
    // Step H2b again
    v = crypto.HmacSHA256(v, k);

    T = BigInteger.fromBuffer(v);
  }

  return T;
}

function sign(curve, hash, d, nonce) {

  var e = BigInteger.fromBuffer(hash);
  var n = curve.n;
  var G = curve.G;

  var r, s;
  var k = deterministicGenerateK(curve, hash, d, function (k) {
    // find canonically valid signature
    var Q = G.multiply(k);

    if (curve.isInfinity(Q)) return false;

    r = Q.affineX.mod(n);
    if (r.signum() === 0) return false;

    s = k.modInverse(n).multiply(e.add(d.multiply(r))).mod(n);
    if (s.signum() === 0) return false;

    return true;
  }, nonce);

  var N_OVER_TWO = n.shiftRight(1);

  // enforce low S values, see bip62: 'low s values in signatures'
  if (s.compareTo(N_OVER_TWO) > 0) {
    s = n.subtract(s);
  }

  return new ECSignature(r, s);
}

function verifyRaw(curve, e, signature, Q) {
  var n = curve.n;
  var G = curve.G;

  var r = signature.r;
  var s = signature.s;

  // 1.4.1 Enforce r and s are both integers in the interval [1, n − 1]
  if (r.signum() <= 0 || r.compareTo(n) >= 0) return false;
  if (s.signum() <= 0 || s.compareTo(n) >= 0) return false;

  // c = s^-1 mod n
  var c = s.modInverse(n);

  // 1.4.4 Compute u1 = es^−1 mod n
  //               u2 = rs^−1 mod n
  var u1 = e.multiply(c).mod(n);
  var u2 = r.multiply(c).mod(n);

  // 1.4.5 Compute R = (xR, yR) = u1G + u2Q
  var R = G.multiplyTwo(u1, Q, u2);

  // 1.4.5 (cont.) Enforce R is not at infinity
  if (curve.isInfinity(R)) return false;

  // 1.4.6 Convert the field element R.x to an integer
  var xR = R.affineX;

  // 1.4.7 Set v = xR mod n
  var v = xR.mod(n);

  // 1.4.8 If v = r, output "valid", and if v != r, output "invalid"
  return v.equals(r);
}

function verify(curve, hash, signature, Q) {
  // 1.4.2 H = Hash(M), already done by the user
  // 1.4.3 e = H
  var e = BigInteger.fromBuffer(hash);
  return verifyRaw(curve, e, signature, Q);
}

/**
  * Recover a public key from a signature.
  *
  * See SEC 1: Elliptic Curve Cryptography, section 4.1.6, "Public
  * Key Recovery Operation".
  *
  * http://www.secg.org/download/aid-780/sec1-v2.pdf
  */
function recoverPubKey(curve, e, signature, i) {
  assert.strictEqual(i & 3, i, 'Recovery param is more than two bits');

  var n = curve.n;
  var G = curve.G;

  var r = signature.r;
  var s = signature.s;

  assert(r.signum() > 0 && r.compareTo(n) < 0, 'Invalid r value');
  assert(s.signum() > 0 && s.compareTo(n) < 0, 'Invalid s value');

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = i & 1;

  // The more significant bit specifies whether we should use the
  // first or second candidate key.
  var isSecondKey = i >> 1;

  // 1.1 Let x = r + jn
  var x = isSecondKey ? r.add(n) : r;
  var R = curve.pointFromX(isYOdd, x);

  // 1.4 Check that nR is at infinity
  var nR = R.multiply(n);
  assert(curve.isInfinity(nR), 'nR is not a valid curve point');

  // Compute -e from e
  var eNeg = e.negate().mod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  var rInv = r.modInverse(n);

  var Q = R.multiplyTwo(s, G, eNeg).multiply(rInv);
  curve.validate(Q);

  return Q;
}

/**
  * Calculate pubkey extraction parameter.
  *
  * When extracting a pubkey from a signature, we have to
  * distinguish four different cases. Rather than putting this
  * burden on the verifier, Bitcoin includes a 2-bit value with the
  * signature.
  *
  * This function simply tries all four cases and returns the value
  * that resulted in a successful pubkey recovery.
  */
function calcPubKeyRecoveryParam(curve, e, signature, Q) {
  for (var i = 0; i < 4; i++) {
    var Qprime = recoverPubKey(curve, e, signature, i);

    // 1.6.2 Verify Q
    if (Qprime.equals(Q)) {
      return i;
    }
  }

  throw new Error('Unable to find valid recovery factor');
}

module.exports = {
  calcPubKeyRecoveryParam: calcPubKeyRecoveryParam,
  deterministicGenerateK: deterministicGenerateK,
  recoverPubKey: recoverPubKey,
  sign: sign,
  verify: verify,
  verifyRaw: verifyRaw
};
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/ecc/src/ecdsa.js","/../node_modules/esteem-lib/dist/ecc/src")
},{"./ecsignature":52,"./enforce_types":53,"./hash":54,"assert":1,"bigi":6,"buffer":11,"pBGvAp":74}],52:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var assert = require('assert'); // from https://github.com/bitcoinjs/bitcoinjs-lib
var enforceType = require('./enforce_types');

var BigInteger = require('bigi');

function ECSignature(r, s) {
  enforceType(BigInteger, r);
  enforceType(BigInteger, s);

  this.r = r;
  this.s = s;
}

// Import operations
ECSignature.parseCompact = function (buffer) {
  assert.equal(buffer.length, 65, 'Invalid signature length');
  var i = buffer.readUInt8(0) - 27;

  // At most 3 bits
  assert.equal(i, i & 7, 'Invalid signature parameter');
  var compressed = !!(i & 4);

  // Recovery param only
  i = i & 3;

  var r = BigInteger.fromBuffer(buffer.slice(1, 33));
  var s = BigInteger.fromBuffer(buffer.slice(33));

  return {
    compressed: compressed,
    i: i,
    signature: new ECSignature(r, s)
  };
};

ECSignature.fromDER = function (buffer) {
  assert.equal(buffer.readUInt8(0), 0x30, 'Not a DER sequence');
  assert.equal(buffer.readUInt8(1), buffer.length - 2, 'Invalid sequence length');
  assert.equal(buffer.readUInt8(2), 0x02, 'Expected a DER integer');

  var rLen = buffer.readUInt8(3);
  assert(rLen > 0, 'R length is zero');

  var offset = 4 + rLen;
  assert.equal(buffer.readUInt8(offset), 0x02, 'Expected a DER integer (2)');

  var sLen = buffer.readUInt8(offset + 1);
  assert(sLen > 0, 'S length is zero');

  var rB = buffer.slice(4, offset);
  var sB = buffer.slice(offset + 2);
  offset += 2 + sLen;

  if (rLen > 1 && rB.readUInt8(0) === 0x00) {
    assert(rB.readUInt8(1) & 0x80, 'R value excessively padded');
  }

  if (sLen > 1 && sB.readUInt8(0) === 0x00) {
    assert(sB.readUInt8(1) & 0x80, 'S value excessively padded');
  }

  assert.equal(offset, buffer.length, 'Invalid DER encoding');
  var r = BigInteger.fromDERInteger(rB);
  var s = BigInteger.fromDERInteger(sB);

  assert(r.signum() >= 0, 'R value is negative');
  assert(s.signum() >= 0, 'S value is negative');

  return new ECSignature(r, s);
};

// FIXME: 0x00, 0x04, 0x80 are SIGHASH_* boundary constants, importing Transaction causes a circular dependency
ECSignature.parseScriptSignature = function (buffer) {
  var hashType = buffer.readUInt8(buffer.length - 1);
  var hashTypeMod = hashType & ~0x80;

  assert(hashTypeMod > 0x00 && hashTypeMod < 0x04, 'Invalid hashType');

  return {
    signature: ECSignature.fromDER(buffer.slice(0, -1)),
    hashType: hashType
  };
};

// Export operations
ECSignature.prototype.toCompact = function (i, compressed) {
  if (compressed) i += 4;
  i += 27;

  var buffer = new Buffer(65);
  buffer.writeUInt8(i, 0);

  this.r.toBuffer(32).copy(buffer, 1);
  this.s.toBuffer(32).copy(buffer, 33);

  return buffer;
};

ECSignature.prototype.toDER = function () {
  var rBa = this.r.toDERInteger();
  var sBa = this.s.toDERInteger();

  var sequence = [];

  // INTEGER
  sequence.push(0x02, rBa.length);
  sequence = sequence.concat(rBa);

  // INTEGER
  sequence.push(0x02, sBa.length);
  sequence = sequence.concat(sBa);

  // SEQUENCE
  sequence.unshift(0x30, sequence.length);

  return new Buffer(sequence);
};

ECSignature.prototype.toScriptSignature = function (hashType) {
  var hashTypeBuffer = new Buffer(1);
  hashTypeBuffer.writeUInt8(hashType, 0);

  return Buffer.concat([this.toDER(), hashTypeBuffer]);
};

module.exports = ECSignature;
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/ecc/src/ecsignature.js","/../node_modules/esteem-lib/dist/ecc/src")
},{"./enforce_types":53,"assert":1,"bigi":6,"buffer":11,"pBGvAp":74}],53:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

module.exports = function enforce(type, value) {
  // Copied from https://github.com/bitcoinjs/bitcoinjs-lib
  switch (type) {
    case 'Array':
      {
        if (Array.isArray(value)) return;
        break;
      }

    case 'Boolean':
      {
        if (typeof value === 'boolean') return;
        break;
      }

    case 'Buffer':
      {
        if (Buffer.isBuffer(value)) return;
        break;
      }

    case 'Number':
      {
        if (typeof value === 'number') return;
        break;
      }

    case 'String':
      {
        if (typeof value === 'string') return;
        break;
      }

    default:
      {
        if (getName(value.constructor) === getName(type)) return;
      }
  }

  throw new TypeError('Expected ' + (getName(type) || type) + ', got ' + value);
};

function getName(fn) {
  // Why not fn.name: https://kangax.github.io/compat-table/es6/#function_name_property
  var match = fn.toString().match(/function (.*?)\(/);
  return match ? match[1] : null;
}
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/ecc/src/enforce_types.js","/../node_modules/esteem-lib/dist/ecc/src")
},{"buffer":11,"pBGvAp":74}],54:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var createHash = require("create-hash");
var createHmac = require("create-hmac");

/** @arg {string|Buffer} data
    @arg {string} [digest = null] - 'hex', 'binary' or 'base64'
    @return {string|Buffer} - Buffer when digest is null, or string
*/
function sha1(data, encoding) {
    return createHash('sha1').update(data).digest(encoding);
}

/** @arg {string|Buffer} data
    @arg {string} [digest = null] - 'hex', 'binary' or 'base64'
    @return {string|Buffer} - Buffer when digest is null, or string
*/
function sha256(data, encoding) {
    return createHash('sha256').update(data).digest(encoding);
}

/** @arg {string|Buffer} data
    @arg {string} [digest = null] - 'hex', 'binary' or 'base64'
    @return {string|Buffer} - Buffer when digest is null, or string
*/
function sha512(data, encoding) {
    return createHash('sha512').update(data).digest(encoding);
}

function HmacSHA256(buffer, secret) {
    return createHmac('sha256', secret).update(buffer).digest();
}

function ripemd160(data) {
    return createHash('rmd160').update(data).digest();
}

// function hash160(buffer) {
//   return ripemd160(sha256(buffer))
// }
//
// function hash256(buffer) {
//   return sha256(sha256(buffer))
// }

//
// function HmacSHA512(buffer, secret) {
//   return crypto.createHmac('sha512', secret).update(buffer).digest()
// }

module.exports = {
    sha1: sha1,
    sha256: sha256,
    sha512: sha512,
    HmacSHA256: HmacSHA256,
    ripemd160: ripemd160
    // hash160: hash160,
    // hash256: hash256,
    // HmacSHA512: HmacSHA512
};
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/ecc/src/hash.js","/../node_modules/esteem-lib/dist/ecc/src")
},{"buffer":11,"create-hash":14,"create-hmac":17,"pBGvAp":74}],55:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ecdsa = require('./ecdsa');
var hash = require('./hash');

var _require = require('ecurve'),
    getCurveByName = _require.getCurveByName;

var secp256k1 = getCurveByName('secp256k1');
var assert = require('assert');
var BigInteger = require('bigi');
var PublicKey = require('./PublicKey');

var Signature = function () {
    function Signature(r1, s1, i1) {
        _classCallCheck(this, Signature);

        this.r = r1;
        this.s = s1;
        this.i = i1;
        assert.equal(this.r != null, true, 'Missing parameter');
        assert.equal(this.s != null, true, 'Missing parameter');
        assert.equal(this.i != null, true, 'Missing parameter');
    }

    _createClass(Signature, [{
        key: 'toBuffer',
        value: function toBuffer() {
            var buf;
            buf = new Buffer(65);
            buf.writeUInt8(this.i, 0);
            this.r.toBuffer(32).copy(buf, 1);
            this.s.toBuffer(32).copy(buf, 33);
            return buf;
        }
    }, {
        key: 'recoverPublicKeyFromBuffer',
        value: function recoverPublicKeyFromBuffer(buffer) {
            return this.recoverPublicKey(hash.sha256(buffer));
        }
    }, {
        key: 'recoverPublicKey',


        /**
            @return {PublicKey}
        */
        value: function recoverPublicKey(sha256_buffer) {
            var Q = void 0,
                e = void 0,
                i = void 0;
            e = BigInteger.fromBuffer(sha256_buffer);
            i = this.i;
            i -= 27;
            i = i & 3;
            Q = ecdsa.recoverPubKey(secp256k1, e, this, i);
            return PublicKey.fromPoint(Q);
        }
    }, {
        key: 'verifyBuffer',


        /**
            @param {Buffer} un-hashed
            @param {./PublicKey}
            @return {boolean}
        */
        value: function verifyBuffer(buf, public_key) {
            var _hash = hash.sha256(buf);
            return this.verifyHash(_hash, public_key);
        }
    }, {
        key: 'verifyHash',
        value: function verifyHash(hash, public_key) {
            assert.equal(hash.length, 32, "A SHA 256 should be 32 bytes long, instead got " + hash.length);
            return ecdsa.verify(secp256k1, hash, {
                r: this.r,
                s: this.s
            }, public_key.Q);
        }
    }, {
        key: 'toByteBuffer',


        /* <HEX> */

        value: function toByteBuffer() {
            var b;
            b = new ByteBuffer(ByteBuffer.DEFAULT_CAPACITY, ByteBuffer.LITTLE_ENDIAN);
            this.appendByteBuffer(b);
            return b.copy(0, b.offset);
        }
    }, {
        key: 'toHex',
        value: function toHex() {
            return this.toBuffer().toString("hex");
        }
    }, {
        key: 'verifyHex',
        value: function verifyHex(hex, public_key) {
            var buf;
            buf = new Buffer(hex, 'hex');
            return this.verifyBuffer(buf, public_key);
        }
    }], [{
        key: 'fromBuffer',
        value: function fromBuffer(buf) {
            var i, r, s;
            assert.equal(buf.length, 65, 'Invalid signature length');
            i = buf.readUInt8(0);
            assert.equal(i - 27, i - 27 & 7, 'Invalid signature parameter');
            r = BigInteger.fromBuffer(buf.slice(1, 33));
            s = BigInteger.fromBuffer(buf.slice(33));
            return new Signature(r, s, i);
        }
    }, {
        key: 'signBuffer',


        /**
            @param {Buffer} buf
            @param {PrivateKey} private_key
            @return {Signature}
        */
        value: function signBuffer(buf, private_key) {
            var _hash = hash.sha256(buf);
            return Signature.signBufferSha256(_hash, private_key);
        }

        /** Sign a buffer of exactally 32 bytes in size (sha256(text))
            @param {Buffer} buf - 32 bytes binary
            @param {PrivateKey} private_key
            @return {Signature}
        */

    }, {
        key: 'signBufferSha256',
        value: function signBufferSha256(buf_sha256, private_key) {
            if (buf_sha256.length !== 32 || !Buffer.isBuffer(buf_sha256)) throw new Error("buf_sha256: 32 byte buffer requred");
            var der, e, ecsignature, i, lenR, lenS, nonce;
            i = null;
            nonce = 0;
            e = BigInteger.fromBuffer(buf_sha256);
            while (true) {
                ecsignature = ecdsa.sign(secp256k1, buf_sha256, private_key.d, nonce++);
                der = ecsignature.toDER();
                lenR = der[3];
                lenS = der[5 + lenR];
                if (lenR === 32 && lenS === 32) {
                    i = ecdsa.calcPubKeyRecoveryParam(secp256k1, e, ecsignature, private_key.toPublicKey().Q);
                    i += 4; // compressed
                    i += 27; // compact  //  24 or 27 :( forcing odd-y 2nd key candidate)
                    break;
                }
                if (nonce % 10 === 0) {
                    console.log("WARN: " + nonce + " attempts to find canonical signature");
                }
            }
            return new Signature(ecsignature.r, ecsignature.s, i);
        }
    }, {
        key: 'sign',
        value: function sign(string, private_key) {
            return Signature.signBuffer(new Buffer(string), private_key);
        }
    }, {
        key: 'fromHex',
        value: function fromHex(hex) {
            return Signature.fromBuffer(new Buffer(hex, "hex"));
        }
    }, {
        key: 'signHex',
        value: function signHex(hex, private_key) {
            var buf;
            buf = new Buffer(hex, 'hex');
            return Signature.signBuffer(buf, private_key);
        }
    }]);

    return Signature;
}();

module.exports = Signature;
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/ecc/src/signature.js","/../node_modules/esteem-lib/dist/ecc/src")
},{"./PublicKey":48,"./ecdsa":51,"./hash":54,"assert":1,"bigi":6,"buffer":11,"ecurve":32,"pBGvAp":74}],56:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

module.exports = Object.assign(require("./chain"), require("./ecc"), require("./serializer"));
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/index.js","/../node_modules/esteem-lib/dist")
},{"./chain":35,"./ecc":44,"./serializer":57,"buffer":11,"pBGvAp":74}],57:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

module.exports = {

    // Primary class for creating operations
    Serializer: require('./src/serializer'),

    // helper functions for creating operations
    fp: require('./src/FastParser'),

    // Low level types
    types: require('./src/types'),

    // Higher level operations (made out of generic types)
    ops: require('./src/operations'),

    // Utility that generates JSON examples
    template: require('./src/template'),

    // Serializer validation
    SerializerValidation: require('./src/SerializerValidation')
};
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/serializer/index.js","/../node_modules/esteem-lib/dist/serializer")
},{"./src/FastParser":58,"./src/SerializerValidation":59,"./src/operations":62,"./src/serializer":63,"./src/template":64,"./src/types":65,"buffer":11,"pBGvAp":74}],58:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PublicKey = require("../../ecc/src/PublicKey");

var FastParser = function () {
    function FastParser() {
        _classCallCheck(this, FastParser);
    }

    _createClass(FastParser, null, [{
        key: 'fixed_data',
        value: function fixed_data(b, len, buffer) {
            if (!b) {
                return;
            }
            if (buffer) {
                var data = buffer.slice(0, len).toString('binary');
                b.append(data, 'binary');
                while (len-- > data.length) {
                    b.writeUint8(0);
                }
            } else {
                var b_copy = b.copy(b.offset, b.offset + len);
                b.skip(len);
                return new Buffer(b_copy.toBinary(), 'binary');
            }
        }
    }, {
        key: 'public_key',
        value: function public_key(b, _public_key) {
            if (!b) {
                return;
            }
            if (_public_key) {
                var buffer = _public_key.toBuffer();
                b.append(buffer.toString('binary'), 'binary');
                return;
            } else {
                buffer = FastParser.fixed_data(b, 33);
                return PublicKey.fromBuffer(buffer);
            }
        }
    }, {
        key: 'ripemd160',
        value: function ripemd160(b, _ripemd) {
            if (!b) {
                return;
            }
            if (_ripemd) {
                FastParser.fixed_data(b, 20, _ripemd);
                return;
            } else {
                return FastParser.fixed_data(b, 20);
            }
        }
    }, {
        key: 'time_point_sec',
        value: function time_point_sec(b, epoch) {
            if (epoch) {
                epoch = Math.ceil(epoch / 1000);
                b.writeInt32(epoch);
                return;
            } else {
                epoch = b.readInt32(); // fc::time_point_sec
                return new Date(epoch * 1000);
            }
        }
    }]);

    return FastParser;
}();

module.exports = FastParser;
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/serializer/src/FastParser.js","/../node_modules/esteem-lib/dist/serializer/src")
},{"../../ecc/src/PublicKey":48,"buffer":11,"pBGvAp":74}],59:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _my;
var is_empty;
var is_digits;
var to_number;
var require_match;
var require_object_id;
var require_object_type;
var get_instance;
var require_relative_type;
var get_relative_instance;
var require_protocol_type;
var get_protocol_instance;
var get_protocol_type;
var require_implementation_type;
var get_implementation_instance;
var Long = require('bytebuffer').Long;
// var BigInteger = require('bigi');

var chain_types = require('../../chain/src/ChainTypes');

var MAX_SAFE_INT = 9007199254740991;
var MIN_SAFE_INT = -9007199254740991;

/**
    Most validations are skipped and the value returned unchanged when an empty string, null, or undefined is encountered (except "required"). 
    Validations support a string format for dealing with large numbers.
*/
module.exports = _my = {

    is_empty: is_empty = function is_empty(value) {
        return value === null || value === undefined;
    },

    required: function required(value) {
        var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        if (is_empty(value)) {
            throw new Error('value required ' + field_name + ' ' + value);
        }
        return value;
    },
    require_long: function require_long(value) {
        var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        if (!Long.isLong(value)) {
            throw new Error('Long value required ' + field_name + ' ' + value);
        }
        return value;
    },
    string: function string(value) {
        if (is_empty(value)) {
            return value;
        }
        if (typeof value !== "string") {
            throw new Error('string required: ' + value);
        }
        return value;
    },
    number: function number(value) {
        if (is_empty(value)) {
            return value;
        }
        if (typeof value !== "number") {
            throw new Error('number required: ' + value);
        }
        return value;
    },
    whole_number: function whole_number(value) {
        var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        if (is_empty(value)) {
            return value;
        }
        if (/\./.test(value)) {
            throw new Error('whole number required ' + field_name + ' ' + value);
        }
        return value;
    },
    unsigned: function unsigned(value) {
        var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        if (is_empty(value)) {
            return value;
        }
        if (/-/.test(value)) {
            throw new Error('unsigned required ' + field_name + ' ' + value);
        }
        return value;
    },


    is_digits: is_digits = function is_digits(value) {
        if (typeof value === "numeric") {
            return true;
        }
        return (/^[0-9]+$/.test(value)
        );
    },

    to_number: to_number = function to_number(value) {
        var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        if (is_empty(value)) {
            return value;
        }
        _my.no_overflow53(value, field_name);
        var int_value = function () {
            if (typeof value === "number") {
                return value;
            } else {
                return parseInt(value);
            }
        }();
        return int_value;
    },

    to_long: function to_long(value) {
        var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        if (is_empty(value)) {
            return value;
        }
        if (Long.isLong(value)) {
            return value;
        }

        _my.no_overflow64(value, field_name);
        if (typeof value === "number") {
            value = "" + value;
        }
        return Long.fromString(value);
    },
    to_string: function to_string(value) {
        var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        if (is_empty(value)) {
            return value;
        }
        if (typeof value === "string") {
            return value;
        }
        if (typeof value === "number") {
            _my.no_overflow53(value, field_name);
            return "" + value;
        }
        if (Long.isLong(value)) {
            return value.toString();
        }
        throw 'unsupported type ' + field_name + ': (' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)) + ') ' + value;
    },
    require_test: function require_test(regex, value) {
        var field_name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

        if (is_empty(value)) {
            return value;
        }
        if (!regex.test(value)) {
            throw new Error('unmatched ' + regex + ' ' + field_name + ' ' + value);
        }
        return value;
    },


    require_match: require_match = function require_match(regex, value) {
        var field_name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

        if (is_empty(value)) {
            return value;
        }
        var match = value.match(regex);
        if (match === null) {
            throw new Error('unmatched ' + regex + ' ' + field_name + ' ' + value);
        }
        return match;
    },

    // require_object_id: require_object_id=function(value, field_name){
    //     return require_match(
    //         /^([0-9]+)\.([0-9]+)\.([0-9]+)$/,
    //         value,
    //         field_name
    //     );
    // },

    // Does not support over 53 bits
    require_range: function require_range(min, max, value) {
        var field_name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";

        if (is_empty(value)) {
            return value;
        }
        var number = to_number(value);
        if (value < min || value > max) {
            throw new Error('out of range ' + value + ' ' + field_name + ' ' + value);
        }
        return value;
    },


    require_object_type: require_object_type = function require_object_type() {
        var reserved_spaces = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var type = arguments[1];
        var value = arguments[2];
        var field_name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";

        if (is_empty(value)) {
            return value;
        }
        var object_type = chain_types.object_type[type];
        if (!object_type) {
            throw new Error('Unknown object type: ' + type + ', ' + field_name + ', ' + value);
        }
        var re = new RegExp(reserved_spaces + '.' + object_type + '.[0-9]+$');
        if (!re.test(value)) {
            throw new Error('Expecting ' + type + ' in format ' + (reserved_spaces + '.' + object_type + '.[0-9]+ ') + ('instead of ' + value + ' ' + field_name + ' ' + value));
        }
        return value;
    },

    get_instance: get_instance = function get_instance(reserve_spaces, type, value, field_name) {
        if (is_empty(value)) {
            return value;
        }
        require_object_type(reserve_spaces, type, value, field_name);
        return to_number(value.split('.')[2]);
    },

    require_relative_type: require_relative_type = function require_relative_type(type, value, field_name) {
        require_object_type(0, type, value, field_name);
        return value;
    },

    get_relative_instance: get_relative_instance = function get_relative_instance(type, value, field_name) {
        if (is_empty(value)) {
            return value;
        }
        require_object_type(0, type, value, field_name);
        return to_number(value.split('.')[2]);
    },

    require_protocol_type: require_protocol_type = function require_protocol_type(type, value, field_name) {
        require_object_type(1, type, value, field_name);
        return value;
    },

    get_protocol_instance: get_protocol_instance = function get_protocol_instance(type, value, field_name) {
        if (is_empty(value)) {
            return value;
        }
        require_object_type(1, type, value, field_name);
        return to_number(value.split('.')[2]);
    },

    get_protocol_type: get_protocol_type = function get_protocol_type(value, field_name) {
        if (is_empty(value)) {
            return value;
        }
        require_object_id(value, field_name);
        var values = value.split('.');
        return to_number(values[1]);
    },

    get_protocol_type_name: function get_protocol_type_name(value, field_name) {
        if (is_empty(value)) {
            return value;
        }
        var type_id = get_protocol_type(value, field_name);
        return Object.keys(chain_types.object_type)[type_id];
    },


    require_implementation_type: require_implementation_type = function require_implementation_type(type, value, field_name) {
        require_object_type(2, type, value, field_name);
        return value;
    },

    get_implementation_instance: get_implementation_instance = function get_implementation_instance(type, value, field_name) {
        if (is_empty(value)) {
            return value;
        }
        require_object_type(2, type, value, field_name);
        return to_number(value.split('.')[2]);
    },

    // signed / unsigned decimal
    no_overflow53: function no_overflow53(value) {
        var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        if (typeof value === "number") {
            if (value > MAX_SAFE_INT || value < MIN_SAFE_INT) {
                throw new Error('overflow ' + field_name + ' ' + value);
            }
            return;
        }
        if (typeof value === "string") {
            var int = parseInt(value);
            if (value > MAX_SAFE_INT || value < MIN_SAFE_INT) {
                throw new Error('overflow ' + field_name + ' ' + value);
            }
            return;
        }
        if (Long.isLong(value)) {
            // typeof value.toInt() is 'number'
            _my.no_overflow53(value.toInt(), field_name);
            return;
        }
        throw 'unsupported type ' + field_name + ': (' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)) + ') ' + value;
    },


    // signed / unsigned whole numbers only
    no_overflow64: function no_overflow64(value) {
        var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        // https://github.com/dcodeIO/Long.js/issues/20
        if (Long.isLong(value)) {
            return;
        }

        // BigInteger#isBigInteger https://github.com/cryptocoinjs/bigi/issues/20
        if (value.t !== undefined && value.s !== undefined) {
            _my.no_overflow64(value.toString(), field_name);
            return;
        }

        if (typeof value === "string") {
            // remove leading zeros, will cause a false positive
            value = value.replace(/^0+/, '');
            // remove trailing zeros
            while (/0$/.test(value)) {
                value = value.substring(0, value.length - 1);
            }
            if (/\.$/.test(value)) {
                // remove trailing dot
                value = value.substring(0, value.length - 1);
            }
            if (value === "") {
                value = "0";
            }
            var long_string = Long.fromString(value).toString();
            if (long_string !== value.trim()) {
                throw new Error('overflow ' + field_name + ' ' + value);
            }
            return;
        }
        if (typeof value === "number") {
            if (value > MAX_SAFE_INT || value < MIN_SAFE_INT) {
                throw new Error('overflow ' + field_name + ' ' + value);
            }
            return;
        }

        throw 'unsupported type ' + field_name + ': (' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)) + ') ' + value;
    }
};
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/serializer/src/SerializerValidation.js","/../node_modules/esteem-lib/dist/serializer/src")
},{"../../chain/src/ChainTypes":38,"buffer":11,"bytebuffer":12,"pBGvAp":74}],60:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/** Exception nesting.  */
var ErrorWithCause = function () {
    function ErrorWithCause(message, cause) {
        _classCallCheck(this, ErrorWithCause);

        this.message = message;
        if (typeof cause !== "undefined" && cause !== null ? cause.message : undefined) {
            this.message = "cause\t" + cause.message + "\t" + this.message;
        }

        var stack = ""; //(new Error).stack
        if (typeof cause !== "undefined" && cause !== null ? cause.stack : undefined) {
            stack = "caused by\n\t" + cause.stack + "\t" + stack;
        }

        this.stack = this.message + "\n" + stack;
    }

    _createClass(ErrorWithCause, null, [{
        key: "throw",
        value: function _throw(message, cause) {
            var msg = message;
            if (typeof cause !== "undefined" && cause !== null ? cause.message : undefined) {
                msg += "\t cause: " + cause.message + " ";
            }
            if (typeof cause !== "undefined" && cause !== null ? cause.stack : undefined) {
                msg += "\n stack: " + cause.stack + " ";
            }
            throw new Error(msg);
        }
    }]);

    return ErrorWithCause;
}();

module.exports = ErrorWithCause;
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/serializer/src/error_with_cause.js","/../node_modules/esteem-lib/dist/serializer/src")
},{"buffer":11,"pBGvAp":74}],61:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var assert = require("assert");

/**
    Convert 12.34 with a precision of 3 into 12340

    @arg {number|string} number - Use strings for large numbers.  This may contain one decimal but no sign
    @arg {number} precision - number of implied decimal places (usually causes right zero padding)
    @return {string} -
*/
module.exports = {
    toImpliedDecimal: function toImpliedDecimal(number, precision) {

        if (typeof number === "number") {
            assert(number <= 9007199254740991, "overflow");
            number = "" + number;
        } else if (number.toString) number = number.toString();

        assert(typeof number === "string", "number should be an actual number or string: " + (typeof number === "undefined" ? "undefined" : _typeof(number)));
        number = number.trim();
        assert(/^[0-9]*\.?[0-9]*$/.test(number), "Invalid decimal number " + number);

        var _number$split = number.split("."),
            _number$split2 = _slicedToArray(_number$split, 2),
            _number$split2$ = _number$split2[0],
            whole = _number$split2$ === undefined ? "" : _number$split2$,
            _number$split2$2 = _number$split2[1],
            decimal = _number$split2$2 === undefined ? "" : _number$split2$2;

        var padding = precision - decimal.length;
        assert(padding >= 0, "Too many decimal digits in " + number + " to create an implied decimal of " + precision);

        for (var i = 0; i < padding; i++) {
            decimal += "0";
        }while (whole.charAt(0) === "0") {
            whole = whole.substring(1);
        }return whole + decimal;
    },

    fromImpliedDecimal: function fromImpliedDecimal(number, precision) {
        if (typeof number === "number") {
            assert(number <= 9007199254740991, "overflow");
            number = "" + number;
        } else if (number.toString) number = number.toString();

        while (number.length < precision + 1) {
            // 0.123
            number = "0" + number;
        } // 44000 => 44.000
        var dec_string = number.substring(number.length - precision);
        return number.substring(0, number.length - precision) + (dec_string ? "." + dec_string : "");
    }
};
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/serializer/src/numberUtils.js","/../node_modules/esteem-lib/dist/serializer/src")
},{"assert":1,"buffer":11,"pBGvAp":74}],62:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var types = require("./types");
var SerializerImpl = require("./serializer");

var int16 = types.int16,
    uint16 = types.uint16,
    uint32 = types.uint32,
    int64 = types.int64,
    uint64 = types.uint64,
    string = types.string,
    bytes = types.bytes,
    bool = types.bool,
    array = types.array,
    fixed_array = types.fixed_array,
    object_id_type = types.object_id_type,
    vote_id = types.vote_id,
    string_binary = types.string_binary,
    future_extensions = types.future_extensions,
    hardfork_version_vote = types.hardfork_version_vote,
    version = types.version,
    static_variant = types.static_variant,
    map = types.map,
    set = types.set,
    public_key = types.public_key,
    address = types.address,
    time_point_sec = types.time_point_sec,
    optional = types.optional,
    asset = types.asset;


future_extensions = types.void;
hardfork_version_vote = types.void;
version = types.void;

/*
When updating generated code
Replace:  operation = static_variant [
with:     operation.st_operations = [

at the end of this file.

Then, delete this part:
public_key = new Serializer(
    "public_key"
    key_data: bytes 33
)

*/
// Place-holder, their are dependencies on "operation" .. The final list of
// operations is not avialble until the very end of the generated code.
// See: operation.st_operations = ...
var operation = static_variant();
module.exports["operation"] = operation;

// For module.exports
var Serializer = function Serializer(operation_name, serilization_types_object) {
    var s = new SerializerImpl(operation_name, serilization_types_object);
    return module.exports[operation_name] = s;
};

// Custom-types follow Generated code:

// ##  Generated code follows
// # npm i -g decaffeinate
// # programs/js_operation_serializer > ops.coffee && decaffeinate ops.coffee
// # open ops.txt, copy to Chain/ChainTypes and operations.js
// ## -------------------------------
var signed_transaction = new Serializer("signed_transaction", {
    ref_block_num: uint16,
    ref_block_prefix: uint32,
    expiration: time_point_sec,
    operations: array(operation),
    extensions: set(future_extensions),
    signatures: array(bytes(65))
});

var signed_block = new Serializer("signed_block", {
    previous: bytes(20),
    timestamp: time_point_sec,
    witness: string,
    transaction_merkle_root: bytes(20),
    extensions: set(static_variant([future_extensions, version, hardfork_version_vote])),
    witness_signature: bytes(65),
    transactions: array(signed_transaction)
});

var block_header = new Serializer("block_header", {
    previous: bytes(20),
    timestamp: time_point_sec,
    witness: string,
    transaction_merkle_root: bytes(20),
    extensions: set(static_variant([future_extensions, version, hardfork_version_vote]))
});

var signed_block_header = new Serializer("signed_block_header", {
    previous: bytes(20),
    timestamp: time_point_sec,
    witness: string,
    transaction_merkle_root: bytes(20),
    extensions: set(static_variant([future_extensions, version, hardfork_version_vote])),
    witness_signature: bytes(65)
});

var vote = new Serializer("vote", {
    voter: string,
    author: string,
    permlink: string,
    weight: int16
});

var comment = new Serializer("comment", {
    parent_author: string,
    parent_permlink: string,
    author: string,
    permlink: string,
    title: string,
    body: string,
    json_metadata: string
});

var transfer = new Serializer("transfer", {
    from: string,
    to: string,
    amount: asset,
    memo: string
});

var transfer_to_vesting = new Serializer("transfer_to_vesting", {
    from: string,
    to: string,
    amount: asset
});

var withdraw_vesting = new Serializer("withdraw_vesting", {
    account: string,
    vesting_shares: asset
});

var limit_order_create = new Serializer("limit_order_create", {
    owner: string,
    orderid: uint32,
    amount_to_sell: asset,
    min_to_receive: asset,
    fill_or_kill: bool,
    expiration: time_point_sec
});

var limit_order_cancel = new Serializer("limit_order_cancel", {
    owner: string,
    orderid: uint32
});

var price = new Serializer("price", {
    base: asset,
    quote: asset
});

var feed_publish = new Serializer("feed_publish", {
    publisher: string,
    exchange_rate: price
});

var convert = new Serializer("convert", {
    owner: string,
    requestid: uint32,
    amount: asset
});

var authority = new Serializer("authority", {
    weight_threshold: uint32,
    account_auths: map(string, uint16),
    key_auths: map(public_key, uint16)
});

var account_create = new Serializer("account_create", {
    fee: asset,
    creator: string,
    new_account_name: string,
    owner: authority,
    active: authority,
    posting: authority,
    memo_key: public_key,
    json_metadata: string
});

var account_update = new Serializer("account_update", {
    account: string,
    owner: optional(authority),
    active: optional(authority),
    posting: optional(authority),
    memo_key: public_key,
    json_metadata: string
});

var chain_properties = new Serializer("chain_properties", {
    account_creation_fee: asset,
    maximum_block_size: uint32,
    sbd_interest_rate: uint16
});

var witness_update = new Serializer("witness_update", {
    owner: string,
    url: string,
    block_signing_key: public_key,
    props: chain_properties,
    fee: asset
});

var account_witness_vote = new Serializer("account_witness_vote", {
    account: string,
    witness: string,
    approve: bool
});

var account_witness_proxy = new Serializer("account_witness_proxy", {
    account: string,
    proxy: string
});

var pow = new Serializer("pow", {
    worker: public_key,
    input: bytes(32),
    signature: bytes(65),
    work: bytes(32)
});

var custom = new Serializer("custom", {
    required_auths: set(string),
    id: uint16,
    data: bytes()
});

var report_over_production = new Serializer("report_over_production", {
    reporter: string,
    first_block: signed_block_header,
    second_block: signed_block_header
});

var delete_comment = new Serializer("delete_comment", {
    author: string,
    permlink: string
});

var custom_json = new Serializer("custom_json", {
    required_auths: set(string),
    required_posting_auths: set(string),
    id: string,
    json: string
});

var comment_options = new Serializer("comment_options", {
    author: string,
    permlink: string,
    max_accepted_payout: asset,
    percent_steem_dollars: uint16,
    allow_votes: bool,
    allow_curation_rewards: bool,
    extensions: set(future_extensions)
});

var set_withdraw_vesting_route = new Serializer("set_withdraw_vesting_route", {
    from_account: string,
    to_account: string,
    percent: uint16,
    auto_vest: bool
});

var limit_order_create2 = new Serializer("limit_order_create2", {
    owner: string,
    orderid: uint32,
    amount_to_sell: asset,
    exchange_rate: price,
    fill_or_kill: bool,
    expiration: time_point_sec
});

var challenge_authority = new Serializer("challenge_authority", {
    challenger: string,
    challenged: string,
    require_owner: bool
});

var prove_authority = new Serializer("prove_authority", {
    challenged: string,
    require_owner: bool
});

var request_account_recovery = new Serializer("request_account_recovery", {
    recovery_account: string,
    account_to_recover: string,
    new_owner_authority: authority,
    extensions: set(future_extensions)
});

var recover_account = new Serializer("recover_account", {
    account_to_recover: string,
    new_owner_authority: authority,
    recent_owner_authority: authority,
    extensions: set(future_extensions)
});

var change_recovery_account = new Serializer("change_recovery_account", {
    account_to_recover: string,
    new_recovery_account: string,
    extensions: set(future_extensions)
});

var escrow_transfer = new Serializer("escrow_transfer", {
    from: string,
    to: string,
    sbd_amount: asset,
    steem_amount: asset,
    escrow_id: uint32,
    agent: string,
    fee: asset,
    json_meta: string,
    ratification_deadline: time_point_sec,
    escrow_expiration: time_point_sec
});

var escrow_dispute = new Serializer("escrow_dispute", {
    from: string,
    to: string,
    agent: string,
    who: string,
    escrow_id: uint32
});

var escrow_release = new Serializer("escrow_release", {
    from: string,
    to: string,
    agent: string,
    who: string,
    receiver: string,
    escrow_id: uint32,
    sbd_amount: asset,
    steem_amount: asset
});

var pow2_input = new Serializer("pow2_input", {
    worker_account: string,
    prev_block: bytes(20),
    nonce: uint64
});

var pow2 = new Serializer("pow2", {
    input: pow2_input,
    pow_summary: uint32
});

var equihash_proof = new Serializer("equihash_proof", {
    n: uint32,
    k: uint32,
    seed: bytes(32),
    inputs: array(uint32)
});

var equihash_pow = new Serializer("equihash_pow", {
    input: pow2_input,
    proof: equihash_proof,
    prev_block: bytes(20),
    pow_summary: uint32
});

var escrow_approve = new Serializer("escrow_approve", {
    from: string,
    to: string,
    agent: string,
    who: string,
    escrow_id: uint32,
    approve: bool
});

var transfer_to_savings = new Serializer("transfer_to_savings", {
    from: string,
    to: string,
    amount: asset,
    memo: string
});

var transfer_from_savings = new Serializer("transfer_from_savings", {
    from: string,
    request_id: uint32,
    to: string,
    amount: asset,
    memo: string
});

var cancel_transfer_from_savings = new Serializer("cancel_transfer_from_savings", {
    from: string,
    request_id: uint32
});

var custom_binary = new Serializer("custom_binary", {
    required_owner_auths: set(string),
    required_active_auths: set(string),
    required_posting_auths: set(string),
    required_auths: array(authority),
    id: string,
    data: bytes()
});

var decline_voting_rights = new Serializer("decline_voting_rights", {
    account: string,
    decline: bool
});

var reset_account = new Serializer("reset_account", {
    reset_account: string,
    account_to_reset: string,
    new_owner_authority: authority
});

var set_reset_account = new Serializer("set_reset_account", {
    account: string,
    current_reset_account: string,
    reset_account: string
});

var claim_reward_balance = new Serializer("claim_reward_balance", {
    account: string,
    reward_steem: asset,
    reward_sbd: asset,
    reward_vests: asset
});

var fill_convert_request = new Serializer("fill_convert_request", {
    owner: string,
    requestid: uint32,
    amount_in: asset,
    amount_out: asset
});

var author_reward = new Serializer("author_reward", {
    author: string,
    permlink: string,
    sbd_payout: asset,
    steem_payout: asset,
    vesting_payout: asset
});

var curation_reward = new Serializer("curation_reward", {
    curator: string,
    reward: asset,
    comment_author: string,
    comment_permlink: string
});

var comment_reward = new Serializer("comment_reward", {
    author: string,
    permlink: string,
    payout: asset
});

var liquidity_reward = new Serializer("liquidity_reward", {
    owner: string,
    payout: asset
});

var interest = new Serializer("interest", {
    owner: string,
    interest: asset
});

var fill_vesting_withdraw = new Serializer("fill_vesting_withdraw", {
    from_account: string,
    to_account: string,
    withdrawn: asset,
    deposited: asset
});

var fill_order = new Serializer("fill_order", {
    current_owner: string,
    current_orderid: uint32,
    current_pays: asset,
    open_owner: string,
    open_orderid: uint32,
    open_pays: asset
});

var shutdown_witness = new Serializer("shutdown_witness", { owner: string });

var fill_transfer_from_savings = new Serializer("fill_transfer_from_savings", {
    from: string,
    to: string,
    amount: asset,
    request_id: uint32,
    memo: string
});

var hardfork = new Serializer("hardfork", { hardfork_id: uint32 });

var comment_payout_update = new Serializer("comment_payout_update", {
    author: string,
    permlink: string
});

operation.st_operations = [vote, comment, transfer, transfer_to_vesting, withdraw_vesting, limit_order_create, limit_order_cancel, feed_publish, convert, account_create, account_update, witness_update, account_witness_vote, account_witness_proxy, pow, custom, report_over_production, delete_comment, custom_json, comment_options, set_withdraw_vesting_route, limit_order_create2, challenge_authority, prove_authority, request_account_recovery, recover_account, change_recovery_account, escrow_transfer, escrow_dispute, escrow_release, pow2, escrow_approve, transfer_to_savings, transfer_from_savings, cancel_transfer_from_savings, custom_binary, decline_voting_rights, reset_account, set_reset_account, claim_reward_balance, fill_convert_request, author_reward, curation_reward, comment_reward, liquidity_reward, interest, fill_vesting_withdraw, fill_order, shutdown_witness, fill_transfer_from_savings, hardfork, comment_payout_update];

var transaction = new Serializer("transaction", {
    ref_block_num: uint16,
    ref_block_prefix: uint32,
    expiration: time_point_sec,
    operations: array(operation),
    extensions: set(future_extensions)
});

//# -------------------------------
//#  Generated code end  S T O P
//# -------------------------------

// Custom Types (do not over-write)

var encrypted_memo = new Serializer("encrypted_memo", { from: public_key,
    to: public_key,
    nonce: uint64,
    check: uint32,
    encrypted: string_binary });

//# -------------------------------
//#  Generated code end
//# -------------------------------
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/serializer/src/operations.js","/../node_modules/esteem-lib/dist/serializer/src")
},{"./serializer":63,"./types":65,"buffer":11,"pBGvAp":74}],63:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ByteBuffer = require('bytebuffer');
var EC = require('./error_with_cause');

var HEX_DUMP = process.env.npm_config__graphene_serializer_hex_dump;

var Serializer = function () {
    function Serializer(operation_name, types) {
        _classCallCheck(this, Serializer);

        this.operation_name = operation_name;
        this.types = types;
        if (this.types) this.keys = Object.keys(this.types);

        Serializer.printDebug = true;
    }

    _createClass(Serializer, [{
        key: 'fromByteBuffer',
        value: function fromByteBuffer(b) {
            var object = {};
            var field = null;
            try {
                var iterable = this.keys;
                for (var i = 0, field; i < iterable.length; i++) {
                    field = iterable[i];
                    var type = this.types[field];
                    try {
                        if (HEX_DUMP) {
                            if (type.operation_name) {
                                console.error(type.operation_name);
                            } else {
                                var o1 = b.offset;
                                type.fromByteBuffer(b);
                                var o2 = b.offset;
                                b.offset = o1;
                                //b.reset()
                                var _b = b.copy(o1, o2);
                                console.error(this.operation_name + '.' + field + '\t', _b.toHex());
                            }
                        }
                        object[field] = type.fromByteBuffer(b);
                    } catch (e) {
                        if (Serializer.printDebug) {
                            console.error('Error reading ' + this.operation_name + '.' + field + ' in data:');
                            b.printDebug();
                        }
                        throw e;
                    }
                }
            } catch (error) {
                EC.throw(this.operation_name + '.' + field, error);
            }

            return object;
        }
    }, {
        key: 'appendByteBuffer',
        value: function appendByteBuffer(b, object) {
            var field = null;
            try {
                var iterable = this.keys;
                for (var i = 0, field; i < iterable.length; i++) {
                    field = iterable[i];
                    var type = this.types[field];
                    type.appendByteBuffer(b, object[field]);
                }
            } catch (error) {
                try {
                    EC.throw(this.operation_name + '.' + field + " = " + JSON.stringify(object[field]), error);
                } catch (e) {
                    // circular ref
                    EC.throw(this.operation_name + '.' + field + " = " + object[field], error);
                }
            }
            return;
        }
    }, {
        key: 'fromObject',
        value: function fromObject(serialized_object) {
            var result = {};
            var field = null;
            try {
                var iterable = this.keys;
                for (var i = 0, field; i < iterable.length; i++) {
                    field = iterable[i];
                    var type = this.types[field];
                    var value = serialized_object[field];
                    //DEBUG value = value.resolve if value.resolve
                    //DEBUG console.log('... value',field,value)
                    var object = type.fromObject(value);
                    result[field] = object;
                }
            } catch (error) {
                EC.throw(this.operation_name + '.' + field, error);
            }

            return result;
        }

        /**
            @arg {boolean} [debug.use_default = false] - more template friendly
            @arg {boolean} [debug.annotate = false] - add user-friendly information
        */

    }, {
        key: 'toObject',
        value: function toObject() {
            var serialized_object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { use_default: false, annotate: false };

            var result = {};
            var field = null;
            try {
                if (!this.types) return result;

                var iterable = this.keys;
                for (var i = 0, field; i < iterable.length; i++) {
                    field = iterable[i];
                    var type = this.types[field];
                    var object = type.toObject(typeof serialized_object !== "undefined" && serialized_object !== null ? serialized_object[field] : undefined, debug);
                    result[field] = object;
                    if (HEX_DUMP) {
                        var b = new ByteBuffer(ByteBuffer.DEFAULT_CAPACITY, ByteBuffer.LITTLE_ENDIAN);
                        var has_value = typeof serialized_object !== "undefined" && serialized_object !== null;
                        if (has_value) {
                            var value = serialized_object[field];
                            if (value) type.appendByteBuffer(b, value);
                        }
                        b = b.copy(0, b.offset);
                        console.error(this.operation_name + '.' + field, b.toHex());
                    }
                }
            } catch (error) {
                EC.throw(this.operation_name + '.' + field, error);
            }

            return result;
        }

        /** Sort by the first element in a operation */

    }, {
        key: 'compare',
        value: function compare(a, b) {

            var first_key = this.keys[0];
            var first_type = this.types[first_key];

            var valA = a[first_key];
            var valB = b[first_key];

            if (first_type.compare) return first_type.compare(valA, valB);

            if (typeof valA === "number" && typeof valB === "number") return valA - valB;

            var encoding = void 0;
            if (Buffer.isBuffer(valA) && Buffer.isBuffer(valB)) {
                // A binary string compare does not work.  If localeCompare is well supported that could replace HEX.  Performanance is very good so comparing HEX works.
                encoding = "hex";
            }

            var strA = valA.toString(encoding);
            var strB = valB.toString(encoding);
            return strA > strB ? 1 : strA < strB ? -1 : 0;
        }

        // <helper_functions>

    }, {
        key: 'fromHex',
        value: function fromHex(hex) {
            var b = ByteBuffer.fromHex(hex, ByteBuffer.LITTLE_ENDIAN);
            return this.fromByteBuffer(b);
        }
    }, {
        key: 'fromBuffer',
        value: function fromBuffer(buffer) {
            var b = ByteBuffer.fromBinary(buffer.toString("binary"), ByteBuffer.LITTLE_ENDIAN);
            return this.fromByteBuffer(b);
        }
    }, {
        key: 'toHex',
        value: function toHex(object) {
            // return this.toBuffer(object).toString("hex")
            var b = this.toByteBuffer(object);
            return b.toHex();
        }
    }, {
        key: 'toByteBuffer',
        value: function toByteBuffer(object) {
            var b = new ByteBuffer(ByteBuffer.DEFAULT_CAPACITY, ByteBuffer.LITTLE_ENDIAN);
            this.appendByteBuffer(b, object);
            return b.copy(0, b.offset);
        }
    }, {
        key: 'toBuffer',
        value: function toBuffer(object) {
            return new Buffer(this.toByteBuffer(object).toBinary(), 'binary');
        }
    }]);

    return Serializer;
}();

module.exports = Serializer;
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/serializer/src/serializer.js","/../node_modules/esteem-lib/dist/serializer/src")
},{"./error_with_cause":60,"buffer":11,"bytebuffer":12,"pBGvAp":74}],64:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

/** Console print any transaction object with zero default values. */
module.exports = function template(op) {

    var object = op.toObject(void 0, { use_default: true, annotate: true });

    // visual (with descriptions)
    console.error(JSON.stringify(object, null, 4));

    // usable in a copy-paste

    object = op.toObject(void 0, { use_default: true, annotate: false });

    // copy-paste one-lineer
    console.error(JSON.stringify(object));
};
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/serializer/src/template.js","/../node_modules/esteem-lib/dist/serializer/src")
},{"buffer":11,"pBGvAp":74}],65:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

// Low-level types that make up operations

var v = require('./SerializerValidation');
var fp = require('./FastParser');

var ChainTypes = require("../../chain/src/ChainTypes");
var ObjectId = require("../../chain/src/ObjectId");

var _require = require("../../ecc"),
    PublicKey = _require.PublicKey,
    Address = _require.Address;

var ChainConfig = require("../../chain/src/ChainConfig");

var _require2 = require("./numberUtils"),
    fromImpliedDecimal = _require2.fromImpliedDecimal;

var Types = {};
module.exports = Types;

var HEX_DUMP = process.env.npm_config__graphene_serializer_hex_dump;

/**
* Asset symbols contain the following information
*
*  4 bit PRECISION
*  4 bit RESERVED
*  CHAR[6] up to 6 upper case alpha numeric ascii characters,
*  char = \0  null terminated
*
*  It is treated as a uint64_t for all internal operations, but
*  is easily converted to something that can be displayed.
*/
Types.asset = {
    fromByteBuffer: function fromByteBuffer(b) {
        var amount = b.readInt64();
        var precision = b.readUint8();
        var b_copy = b.copy(b.offset, b.offset + 7);
        var symbol = new Buffer(b_copy.toBinary(), "binary").toString().replace(/\x00/g, "");
        b.skip(7);
        // "1.000 STEEM" always written with full precision
        var amount_string = fromImpliedDecimal(amount, precision);
        return amount_string + " " + symbol;
    },
    appendByteBuffer: function appendByteBuffer(b, object) {
        object = object.trim();
        if (!/^[0-9]+\.?[0-9]* [A-Za-z0-9]+$/.test(object)) throw new Error("Expecting amount like '99.000 SYMBOL', instead got '" + object + "'");

        var _object$split = object.split(" "),
            _object$split2 = _slicedToArray(_object$split, 2),
            amount = _object$split2[0],
            symbol = _object$split2[1];

        if (symbol.length > 6) throw new Error("Symbols are not longer than 6 characters " + symbol + "-" + symbol.length);

        b.writeInt64(v.to_long(amount.replace(".", "")));
        var dot = amount.indexOf("."); // 0.000
        var precision = dot === -1 ? 0 : amount.length - dot - 1;
        b.writeUint8(precision);
        b.append(symbol.toUpperCase(), 'binary');
        for (var i = 0; i < 7 - symbol.length; i++) {
            b.writeUint8(0);
        }return;
    },
    fromObject: function fromObject(object) {
        return object;
    },
    toObject: function toObject(object) {
        var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (debug.use_default && object === undefined) {
            return "0.000 STEEM";
        }
        return object;
    }
};

Types.uint8 = {
    fromByteBuffer: function fromByteBuffer(b) {
        return b.readUint8();
    },
    appendByteBuffer: function appendByteBuffer(b, object) {
        v.require_range(0, 0xFF, object, 'uint8 ' + object);
        b.writeUint8(object);
        return;
    },
    fromObject: function fromObject(object) {
        v.require_range(0, 0xFF, object, 'uint8 ' + object);
        return object;
    },
    toObject: function toObject(object) {
        var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (debug.use_default && object === undefined) {
            return 0;
        }
        v.require_range(0, 0xFF, object, 'uint8 ' + object);
        return parseInt(object);
    }
};

Types.uint16 = {
    fromByteBuffer: function fromByteBuffer(b) {
        return b.readUint16();
    },
    appendByteBuffer: function appendByteBuffer(b, object) {
        v.require_range(0, 0xFFFF, object, 'uint16 ' + object);
        b.writeUint16(object);
        return;
    },
    fromObject: function fromObject(object) {
        v.require_range(0, 0xFFFF, object, 'uint16 ' + object);
        return object;
    },
    toObject: function toObject(object) {
        var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (debug.use_default && object === undefined) {
            return 0;
        }
        v.require_range(0, 0xFFFF, object, 'uint16 ' + object);
        return parseInt(object);
    }
};

Types.uint32 = {
    fromByteBuffer: function fromByteBuffer(b) {
        return b.readUint32();
    },
    appendByteBuffer: function appendByteBuffer(b, object) {
        v.require_range(0, 0xFFFFFFFF, object, 'uint32 ' + object);
        b.writeUint32(object);
        return;
    },
    fromObject: function fromObject(object) {
        v.require_range(0, 0xFFFFFFFF, object, 'uint32 ' + object);
        return object;
    },
    toObject: function toObject(object) {
        var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (debug.use_default && object === undefined) {
            return 0;
        }
        v.require_range(0, 0xFFFFFFFF, object, 'uint32 ' + object);
        return parseInt(object);
    }
};

var MIN_SIGNED_32 = -1 * Math.pow(2, 31);
var MAX_SIGNED_32 = Math.pow(2, 31) - 1;

Types.varint32 = {
    fromByteBuffer: function fromByteBuffer(b) {
        return b.readVarint32();
    },
    appendByteBuffer: function appendByteBuffer(b, object) {
        v.require_range(MIN_SIGNED_32, MAX_SIGNED_32, object, 'uint32 ' + object);
        b.writeVarint32(object);
        return;
    },
    fromObject: function fromObject(object) {
        v.require_range(MIN_SIGNED_32, MAX_SIGNED_32, object, 'uint32 ' + object);
        return object;
    },
    toObject: function toObject(object) {
        var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (debug.use_default && object === undefined) {
            return 0;
        }
        v.require_range(MIN_SIGNED_32, MAX_SIGNED_32, object, 'uint32 ' + object);
        return parseInt(object);
    }
};

Types.int16 = {
    fromByteBuffer: function fromByteBuffer(b) {
        return b.readInt16();
    },
    appendByteBuffer: function appendByteBuffer(b, object) {
        b.writeInt16(object);
        return;
    },
    fromObject: function fromObject(object) {
        return object;
    },
    toObject: function toObject(object) {
        var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (debug.use_default && object === undefined) {
            return 0;
        }
        return parseInt(object);
    }
};

Types.int64 = {
    fromByteBuffer: function fromByteBuffer(b) {
        return b.readInt64();
    },
    appendByteBuffer: function appendByteBuffer(b, object) {
        v.required(object);
        b.writeInt64(v.to_long(object));
        return;
    },
    fromObject: function fromObject(object) {
        v.required(object);
        return v.to_long(object);
    },
    toObject: function toObject(object) {
        var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (debug.use_default && object === undefined) {
            return "0";
        }
        v.required(object);
        return v.to_long(object).toString();
    }
};

Types.uint64 = {
    fromByteBuffer: function fromByteBuffer(b) {
        return b.readUint64();
    },
    appendByteBuffer: function appendByteBuffer(b, object) {
        b.writeUint64(v.to_long(v.unsigned(object)));
        return;
    },
    fromObject: function fromObject(object) {
        return v.to_long(v.unsigned(object));
    },
    toObject: function toObject(object) {
        var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (debug.use_default && object === undefined) {
            return "0";
        }
        return v.to_long(object).toString();
    }
};

Types.string = {
    fromByteBuffer: function fromByteBuffer(b) {
        return new Buffer(b.readVString(), 'utf8');
    },
    appendByteBuffer: function appendByteBuffer(b, object) {
        v.required(object);
        b.writeVString(object.toString());
        return;
    },
    fromObject: function fromObject(object) {
        v.required(object);
        return new Buffer(object, 'utf8');
    },
    toObject: function toObject(object) {
        var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (debug.use_default && object === undefined) {
            return "";
        }
        return object.toString('utf8');
    }
};

Types.string_binary = {
    fromByteBuffer: function fromByteBuffer(b) {
        var b_copy;
        var len = b.readVarint32();
        b_copy = b.copy(b.offset, b.offset + len), b.skip(len);
        return new Buffer(b_copy.toBinary(), 'binary');
    },
    appendByteBuffer: function appendByteBuffer(b, object) {
        b.writeVarint32(object.length);
        b.append(object.toString('binary'), 'binary');
        return;
    },
    fromObject: function fromObject(object) {
        v.required(object);
        return new Buffer(object);
    },
    toObject: function toObject(object) {
        var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (debug.use_default && object === undefined) {
            return "";
        }
        return object.toString();
    }
};

Types.bytes = function (size) {
    return {
        fromByteBuffer: function fromByteBuffer(b) {
            if (size === undefined) {
                var b_copy;
                var len = b.readVarint32();
                b_copy = b.copy(b.offset, b.offset + len), b.skip(len);
                return new Buffer(b_copy.toBinary(), 'binary');
            } else {
                b_copy = b.copy(b.offset, b.offset + size), b.skip(size);
                return new Buffer(b_copy.toBinary(), 'binary');
            }
        },
        appendByteBuffer: function appendByteBuffer(b, object) {
            v.required(object);
            if (typeof object === "string") object = new Buffer(object, "hex");

            if (size === undefined) {
                b.writeVarint32(object.length);
            }
            b.append(object.toString('binary'), 'binary');
            return;
        },
        fromObject: function fromObject(object) {
            v.required(object);
            if (Buffer.isBuffer(object)) return object;

            return new Buffer(object, 'hex');
        },
        toObject: function toObject(object) {
            var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            if (debug.use_default && object === undefined) {
                var zeros = function zeros(num) {
                    return new Array(num).join("00");
                };
                return zeros(size);
            }
            v.required(object);
            return object.toString('hex');
        }
    };
};

Types.bool = {
    fromByteBuffer: function fromByteBuffer(b) {
        return b.readUint8() === 1;
    },
    appendByteBuffer: function appendByteBuffer(b, object) {
        // supports boolean or integer
        b.writeUint8(JSON.parse(object) ? 1 : 0);
        return;
    },
    fromObject: function fromObject(object) {
        return JSON.parse(object) ? true : false;
    },
    toObject: function toObject(object) {
        var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (debug.use_default && object === undefined) {
            return false;
        }
        return JSON.parse(object) ? true : false;
    }
};

Types.void = {
    fromByteBuffer: function fromByteBuffer(b) {
        throw new Error("(void) undefined type");
    },
    appendByteBuffer: function appendByteBuffer(b, object) {
        throw new Error("(void) undefined type");
    },
    fromObject: function fromObject(object) {
        throw new Error("(void) undefined type");
    },
    toObject: function toObject(object) {
        var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (debug.use_default && object === undefined) {
            return undefined;
        }
        throw new Error("(void) undefined type");
    }
};

Types.array = function (st_operation) {
    return {
        fromByteBuffer: function fromByteBuffer(b) {
            var size = b.readVarint32();
            if (HEX_DUMP) {
                console.log("varint32 size = " + size.toString(16));
            }
            var result = [];
            for (var i = 0; 0 < size ? i < size : i > size; 0 < size ? i++ : i++) {
                result.push(st_operation.fromByteBuffer(b));
            }
            return sortOperation(result, st_operation);
        },
        appendByteBuffer: function appendByteBuffer(b, object) {
            v.required(object);
            object = sortOperation(object, st_operation);
            b.writeVarint32(object.length);
            for (var i = 0, o; i < object.length; i++) {
                o = object[i];
                st_operation.appendByteBuffer(b, o);
            }
        },
        fromObject: function fromObject(object) {
            v.required(object);
            object = sortOperation(object, st_operation);
            var result = [];
            for (var i = 0, o; i < object.length; i++) {
                o = object[i];
                result.push(st_operation.fromObject(o));
            }
            return result;
        },
        toObject: function toObject(object) {
            var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            if (debug.use_default && object === undefined) {
                return [st_operation.toObject(object, debug)];
            }
            v.required(object);
            object = sortOperation(object, st_operation);

            var result = [];
            for (var i = 0, o; i < object.length; i++) {
                o = object[i];
                result.push(st_operation.toObject(o, debug));
            }
            return result;
        }
    };
};

Types.time_point_sec = {
    fromByteBuffer: function fromByteBuffer(b) {
        return b.readUint32();
    },
    appendByteBuffer: function appendByteBuffer(b, object) {
        if (typeof object !== "number") object = Types.time_point_sec.fromObject(object);

        b.writeUint32(object);
        return;
    },
    fromObject: function fromObject(object) {
        v.required(object);

        if (typeof object === "number") return object;

        if (object.getTime) return Math.floor(object.getTime() / 1000);

        if (typeof object !== "string") throw new Error("Unknown date type: " + object);

        if (typeof object === "string" && !/Z$/.test(object)) object = object + "Z";

        return Math.floor(new Date(object).getTime() / 1000);
    },
    toObject: function toObject(object) {
        var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (debug.use_default && object === undefined) return new Date(0).toISOString().split('.')[0];

        v.required(object);

        if (typeof object === "string") return object;

        if (object.getTime) return object.toISOString().split('.')[0];

        var int = parseInt(object);
        v.require_range(0, 0xFFFFFFFF, int, 'uint32 ' + object);
        return new Date(int * 1000).toISOString().split('.')[0];
    }
};

Types.set = function (st_operation) {
    return {
        validate: function validate(array) {
            var dup_map = {};
            for (var i = 0, o; i < array.length; i++) {
                o = array[i];
                var ref;
                if (ref = typeof o === 'undefined' ? 'undefined' : _typeof(o), ['string', 'number'].indexOf(ref) >= 0) {
                    if (dup_map[o] !== undefined) {
                        throw new Error("duplicate (set)");
                    }
                    dup_map[o] = true;
                }
            }
            return sortOperation(array, st_operation);
        },
        fromByteBuffer: function fromByteBuffer(b) {
            var size = b.readVarint32();
            if (HEX_DUMP) {
                console.log("varint32 size = " + size.toString(16));
            }
            return this.validate(function () {
                var result = [];
                for (var i = 0; 0 < size ? i < size : i > size; 0 < size ? i++ : i++) {
                    result.push(st_operation.fromByteBuffer(b));
                }
                return result;
            }());
        },
        appendByteBuffer: function appendByteBuffer(b, object) {
            if (!object) {
                object = [];
            }
            b.writeVarint32(object.length);
            var iterable = this.validate(object);
            for (var i = 0, o; i < iterable.length; i++) {
                o = iterable[i];
                st_operation.appendByteBuffer(b, o);
            }
            return;
        },
        fromObject: function fromObject(object) {
            if (!object) {
                object = [];
            }
            return this.validate(function () {
                var result = [];
                for (var i = 0, o; i < object.length; i++) {
                    o = object[i];
                    result.push(st_operation.fromObject(o));
                }
                return result;
            }());
        },
        toObject: function toObject(object) {
            var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            if (debug.use_default && object === undefined) {
                return [st_operation.toObject(object, debug)];
            }
            if (!object) {
                object = [];
            }
            return this.validate(function () {
                var result = [];
                for (var i = 0, o; i < object.length; i++) {
                    o = object[i];
                    result.push(st_operation.toObject(o, debug));
                }
                return result;
            }());
        }
    };
};

// global_parameters_update_operation current_fees
Types.fixed_array = function (count, st_operation) {
    return {
        fromByteBuffer: function fromByteBuffer(b) {
            var i, j, ref, results;
            results = [];
            for (i = j = 0, ref = count; j < ref; i = j += 1) {
                results.push(st_operation.fromByteBuffer(b));
            }
            return sortOperation(results, st_operation);
        },
        appendByteBuffer: function appendByteBuffer(b, object) {
            var i, j, ref;
            if (count !== 0) {
                v.required(object);
                object = sortOperation(object, st_operation);
            }
            for (i = j = 0, ref = count; j < ref; i = j += 1) {
                st_operation.appendByteBuffer(b, object[i]);
            }
        },
        fromObject: function fromObject(object) {
            var i, j, ref, results;
            if (count !== 0) {
                v.required(object);
            }
            results = [];
            for (i = j = 0, ref = count; j < ref; i = j += 1) {
                results.push(st_operation.fromObject(object[i]));
            }
            return results;
        },
        toObject: function toObject(object, debug) {
            var i, j, k, ref, ref1, results, results1;
            if (debug == null) {
                debug = {};
            }
            if (debug.use_default && object === void 0) {
                results = [];
                for (i = j = 0, ref = count; j < ref; i = j += 1) {
                    results.push(st_operation.toObject(void 0, debug));
                }
                return results;
            }
            if (count !== 0) {
                v.required(object);
            }
            results1 = [];
            for (i = k = 0, ref1 = count; k < ref1; i = k += 1) {
                results1.push(st_operation.toObject(object[i], debug));
            }
            return results1;
        }
    };
};

/* Supports instance numbers (11) or object types (1.2.11).  Object type
validation is enforced when an object type is used. */
var id_type = function id_type(reserved_spaces, object_type) {
    v.required(reserved_spaces, "reserved_spaces");
    v.required(object_type, "object_type");
    return {
        fromByteBuffer: function fromByteBuffer(b) {
            return b.readVarint32();
        },
        appendByteBuffer: function appendByteBuffer(b, object) {
            v.required(object);
            if (object.resolve !== undefined) {
                object = object.resolve;
            }
            // convert 1.2.n into just n
            if (/^[0-9]+\.[0-9]+\.[0-9]+$/.test(object)) {
                object = v.get_instance(reserved_spaces, object_type, object);
            }
            b.writeVarint32(v.to_number(object));
            return;
        },
        fromObject: function fromObject(object) {
            v.required(object);
            if (object.resolve !== undefined) {
                object = object.resolve;
            }
            if (v.is_digits(object)) {
                return v.to_number(object);
            }
            return v.get_instance(reserved_spaces, object_type, object);
        },
        toObject: function toObject(object) {
            var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var object_type_id = chain_types.object_type[object_type];
            if (debug.use_default && object === undefined) {
                return reserved_spaces + '.' + object_type_id + '.0';
            }
            v.required(object);
            if (object.resolve !== undefined) {
                object = object.resolve;
            }
            if (/^[0-9]+\.[0-9]+\.[0-9]+$/.test(object)) {
                object = v.get_instance(reserved_spaces, object_type, object);
            }

            return reserved_spaces + '.' + object_type_id + '.' + object;
        }
    };
};

Types.protocol_id_type = function (name) {
    v.required(name, "name");
    return id_type(chain_types.reserved_spaces.protocol_ids, name);
};

Types.object_id_type = {
    fromByteBuffer: function fromByteBuffer(b) {
        return ObjectId.fromByteBuffer(b);
    },
    appendByteBuffer: function appendByteBuffer(b, object) {
        v.required(object);
        if (object.resolve !== undefined) {
            object = object.resolve;
        }
        object = ObjectId.fromString(object);
        object.appendByteBuffer(b);
        return;
    },
    fromObject: function fromObject(object) {
        v.required(object);
        if (object.resolve !== undefined) {
            object = object.resolve;
        }
        return ObjectId.fromString(object);
    },
    toObject: function toObject(object) {
        var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (debug.use_default && object === undefined) {
            return "0.0.0";
        }
        v.required(object);
        if (object.resolve !== undefined) {
            object = object.resolve;
        }
        object = ObjectId.fromString(object);
        return object.toString();
    }
};

Types.vote_id = { TYPE: 0x000000FF,
    ID: 0xFFFFFF00,
    fromByteBuffer: function fromByteBuffer(b) {
        var value = b.readUint32();
        return {
            type: value & this.TYPE,
            id: value & this.ID
        };
    },
    appendByteBuffer: function appendByteBuffer(b, object) {
        v.required(object);
        if (object === "string") object = Types.vote_id.fromObject(object);

        var value = object.id << 8 | object.type;
        b.writeUint32(value);
        return;
    },
    fromObject: function fromObject(object) {
        v.required(object, "(type vote_id)");
        if ((typeof object === 'undefined' ? 'undefined' : _typeof(object)) === "object") {
            v.required(object.type, "type");
            v.required(object.id, "id");
            return object;
        }
        v.require_test(/^[0-9]+:[0-9]+$/, object, 'vote_id format ' + object);

        var _object$split3 = object.split(':'),
            _object$split4 = _slicedToArray(_object$split3, 2),
            type = _object$split4[0],
            id = _object$split4[1];

        v.require_range(0, 0xff, type, 'vote type ' + object);
        v.require_range(0, 0xffffff, id, 'vote id ' + object);
        return { type: type, id: id };
    },
    toObject: function toObject(object) {
        var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (debug.use_default && object === undefined) {
            return "0:0";
        }
        v.required(object);
        if (typeof object === "string") object = Types.vote_id.fromObject(object);

        return object.type + ":" + object.id;
    },
    compare: function compare(a, b) {
        if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) !== "object") a = Types.vote_id.fromObject(a);
        if ((typeof b === 'undefined' ? 'undefined' : _typeof(b)) !== "object") b = Types.vote_id.fromObject(b);
        return parseInt(a.id) - parseInt(b.id);
    }
};

Types.optional = function (st_operation) {
    v.required(st_operation, "st_operation");
    return {
        fromByteBuffer: function fromByteBuffer(b) {
            if (!(b.readUint8() === 1)) {
                return undefined;
            }
            return st_operation.fromByteBuffer(b);
        },
        appendByteBuffer: function appendByteBuffer(b, object) {
            if (object !== null && object !== undefined) {
                b.writeUint8(1);
                st_operation.appendByteBuffer(b, object);
            } else {
                b.writeUint8(0);
            }
            return;
        },
        fromObject: function fromObject(object) {
            if (object === undefined) {
                return undefined;
            }
            return st_operation.fromObject(object);
        },
        toObject: function toObject(object) {
            var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            // toObject is only null save if use_default is true
            var result_object = function () {
                if (!debug.use_default && object === undefined) {
                    return undefined;
                } else {
                    return st_operation.toObject(object, debug);
                }
            }();

            if (debug.annotate) {
                if ((typeof result_object === 'undefined' ? 'undefined' : _typeof(result_object)) === "object") {
                    result_object.__optional = "parent is optional";
                } else {
                    result_object = { __optional: result_object };
                }
            }
            return result_object;
        }
    };
};

Types.static_variant = function (_st_operations) {
    return {
        nosort: true,
        st_operations: _st_operations,
        opTypeId: function opTypeId(value) {
            var pos = 0,
                type_id = void 0;
            if (typeof value === "number") type_id = value;else {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = this.st_operations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var op = _step.value;

                        if (op.operation_name === value) {
                            type_id = pos;
                            break;
                        }
                        pos++;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
            return type_id;
        },
        fromByteBuffer: function fromByteBuffer(b) {
            var type_id = b.readVarint32();
            var st_operation = this.st_operations[type_id];
            if (HEX_DUMP) {
                console.error('static_variant id 0x' + type_id.toString(16) + ' (' + type_id + ')');
            }
            v.required(st_operation, 'operation ' + type_id);
            return [type_id, st_operation.fromByteBuffer(b)];
        },
        appendByteBuffer: function appendByteBuffer(b, object) {
            v.required(object);
            var type_id = this.opTypeId(object[0]);
            var st_operation = this.st_operations[type_id];
            v.required(st_operation, 'operation ' + type_id);
            b.writeVarint32(type_id);
            st_operation.appendByteBuffer(b, object[1]);
            return;
        },
        fromObject: function fromObject(object) {
            v.required(object);
            var type_id = this.opTypeId(object[0]);
            var st_operation = this.st_operations[type_id];
            v.required(st_operation, 'operation ' + type_id);
            return [type_id, st_operation.fromObject(object[1])];
        },
        toObject: function toObject(object) {
            var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            if (debug.use_default && object === undefined) {
                return [this.st_operations[0].operation_name, this.st_operations[0].toObject(undefined, debug)];
            }
            v.required(object);
            var type_id = this.opTypeId(object[0]);
            var st_operation = this.st_operations[type_id];
            v.required(st_operation, 'operation ' + type_id);
            return [st_operation.operation_name, st_operation.toObject(object[1], debug)];
        },
        compare: function compare(a, b) {
            return strCmp(this.opTypeId(a[0]), this.opTypeId(b[0]));
        }
    };
};

Types.map = function (key_st_operation, value_st_operation) {
    return {
        validate: function validate(array) {
            if (!Array.isArray(array)) {
                throw new Error("expecting array");
            }
            var dup_map = {};
            for (var i = 0, o; i < array.length; i++) {
                o = array[i];
                var ref;
                if (!(o.length === 2)) {
                    throw new Error("expecting two elements");
                }
                if (ref = _typeof(o[0]), ['number', 'string'].indexOf(ref) >= 0) {
                    if (dup_map[o[0]] !== undefined) {
                        throw new Error("duplicate (map)");
                    }
                    dup_map[o[0]] = true;
                }
            }
            return sortOperation(array, key_st_operation);
        },
        fromByteBuffer: function fromByteBuffer(b) {
            var result = [];
            var end = b.readVarint32();
            for (var i = 0; 0 < end ? i < end : i > end; 0 < end ? i++ : i++) {
                result.push([key_st_operation.fromByteBuffer(b), value_st_operation.fromByteBuffer(b)]);
            }
            return this.validate(result);
        },
        appendByteBuffer: function appendByteBuffer(b, object) {
            this.validate(object);
            b.writeVarint32(object.length);
            for (var i = 0, o; i < object.length; i++) {
                o = object[i];
                key_st_operation.appendByteBuffer(b, o[0]);
                value_st_operation.appendByteBuffer(b, o[1]);
            }
            return;
        },
        fromObject: function fromObject(object) {
            v.required(object);
            var result = [];
            for (var i = 0, o; i < object.length; i++) {
                o = object[i];
                result.push([key_st_operation.fromObject(o[0]), value_st_operation.fromObject(o[1])]);
            }
            return this.validate(result);
        },
        toObject: function toObject(object) {
            var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            if (debug.use_default && object === undefined) {
                return [[key_st_operation.toObject(undefined, debug), value_st_operation.toObject(undefined, debug)]];
            }
            v.required(object);
            object = this.validate(object);
            var result = [];
            for (var i = 0, o; i < object.length; i++) {
                o = object[i];
                result.push([key_st_operation.toObject(o[0], debug), value_st_operation.toObject(o[1], debug)]);
            }
            return result;
        }
    };
};

Types.public_key = {
    toPublic: function toPublic(object) {
        if (object.resolve !== undefined) {
            object = object.resolve;
        }
        return object == null ? object : object.Q ? object : PublicKey.fromStringOrThrow(object);
    },
    fromByteBuffer: function fromByteBuffer(b) {
        return fp.public_key(b);
    },
    appendByteBuffer: function appendByteBuffer(b, object) {
        v.required(object);
        fp.public_key(b, Types.public_key.toPublic(object));
        return;
    },
    fromObject: function fromObject(object) {
        v.required(object);
        if (object.Q) {
            return object;
        }
        return Types.public_key.toPublic(object);
    },
    toObject: function toObject(object) {
        var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (debug.use_default && object === undefined) {
            return ChainConfig.address_prefix + "859gxfnXyUriMgUeThh1fWv3oqcpLFyHa3TfFYC4PK2HqhToVM";
        }
        v.required(object);
        return object.toString();
    },
    compare: function compare(a, b) {
        return strCmp(a.toString(), b.toString());
    }
};

Types.address = {
    _to_address: function _to_address(object) {
        v.required(object);
        if (object.addy) {
            return object;
        }
        return Address.fromString(object);
    },
    fromByteBuffer: function fromByteBuffer(b) {
        return new Address(fp.ripemd160(b));
    },
    appendByteBuffer: function appendByteBuffer(b, object) {
        fp.ripemd160(b, Types.address._to_address(object).toBuffer());
        return;
    },
    fromObject: function fromObject(object) {
        return Types.address._to_address(object);
    },
    toObject: function toObject(object) {
        var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (debug.use_default && object === undefined) {
            return ChainConfig.address_prefix + "664KmHxSuQyDsfwo4WEJvWpzg1QKdg67S";
        }
        return Types.address._to_address(object).toString();
    },
    compare: function compare(a, b) {
        // sort decending
        return -1 * strCmp(a.toString(), b.toString());
    }
};

var strCmp = function strCmp(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
};
var firstEl = function firstEl(el) {
    return Array.isArray(el) ? el[0] : el;
};
var sortOperation = function sortOperation(array, st_operation) {
    return st_operation.nosort ? array : st_operation.compare ? array.sort(function (a, b) {
        return st_operation.compare(firstEl(a), firstEl(b));
    }) : // custom compare operation
    array.sort(function (a, b) {
        return typeof firstEl(a) === "number" && typeof firstEl(b) === "number" ? firstEl(a) - firstEl(b) :
        // A binary string compare does not work. Performanance is very good so HEX is used..  localeCompare is another option.
        Buffer.isBuffer(firstEl(a)) && Buffer.isBuffer(firstEl(b)) ? strCmp(firstEl(a).toString("hex"), firstEl(b).toString("hex")) : strCmp(firstEl(a).toString(), firstEl(b).toString());
    });
};
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/dist/serializer/src/types.js","/../node_modules/esteem-lib/dist/serializer/src")
},{"../../chain/src/ChainConfig":37,"../../chain/src/ChainTypes":38,"../../chain/src/ObjectId":41,"../../ecc":44,"./FastParser":58,"./SerializerValidation":59,"./numberUtils":61,"buffer":11,"pBGvAp":74}],66:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var pSlice = Array.prototype.slice;
var objectKeys = require('./lib/keys.js');
var isArguments = require('./lib/is_arguments.js');

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer (x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') return false;
  return true;
}

function objEquiv(a, b, opts) {
  var i, key;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  if (isBuffer(a)) {
    if (!isBuffer(b)) {
      return false;
    }
    if (a.length !== b.length) return false;
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b);
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return typeof a === typeof b;
}

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/node_modules/deep-equal/index.js","/../node_modules/esteem-lib/node_modules/deep-equal")
},{"./lib/is_arguments.js":67,"./lib/keys.js":68,"buffer":11,"pBGvAp":74}],67:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/node_modules/deep-equal/lib/is_arguments.js","/../node_modules/esteem-lib/node_modules/deep-equal/lib")
},{"buffer":11,"pBGvAp":74}],68:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/esteem-lib/node_modules/deep-equal/lib/keys.js","/../node_modules/esteem-lib/node_modules/deep-equal/lib")
},{"buffer":11,"pBGvAp":74}],69:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/events/events.js","/../node_modules/events")
},{"buffer":11,"pBGvAp":74}],70:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/ieee754/index.js","/../node_modules/ieee754")
},{"buffer":11,"pBGvAp":74}],71:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/inherits/inherits_browser.js","/../node_modules/inherits")
},{"buffer":11,"pBGvAp":74}],72:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*
 Copyright 2013 Daniel Wirtz <dcode@dcode.io>
 Copyright 2009 The Closure Library Authors. All Rights Reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS-IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/**
 * @license long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>
 * Released under the Apache License, Version 2.0
 * see: https://github.com/dcodeIO/long.js for details
 */
(function(global, factory) {

    /* AMD */ if (typeof define === 'function' && define["amd"])
        define([], factory);
    /* CommonJS */ else if (typeof require === 'function' && typeof module === "object" && module && module["exports"])
        module["exports"] = factory();
    /* Global */ else
        (global["dcodeIO"] = global["dcodeIO"] || {})["Long"] = factory();

})(this, function() {
    "use strict";

    /**
     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
     *  See the from* functions below for more convenient ways of constructing Longs.
     * @exports Long
     * @class A Long class for representing a 64 bit two's-complement integer value.
     * @param {number} low The low (signed) 32 bits of the long
     * @param {number} high The high (signed) 32 bits of the long
     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
     * @constructor
     */
    function Long(low, high, unsigned) {

        /**
         * The low 32 bits as a signed value.
         * @type {number}
         */
        this.low = low | 0;

        /**
         * The high 32 bits as a signed value.
         * @type {number}
         */
        this.high = high | 0;

        /**
         * Whether unsigned or not.
         * @type {boolean}
         */
        this.unsigned = !!unsigned;
    }

    // The internal representation of a long is the two given signed, 32-bit values.
    // We use 32-bit pieces because these are the size of integers on which
    // Javascript performs bit-operations.  For operations like addition and
    // multiplication, we split each number into 16 bit pieces, which can easily be
    // multiplied within Javascript's floating-point representation without overflow
    // or change in sign.
    //
    // In the algorithms below, we frequently reduce the negative case to the
    // positive case by negating the input(s) and then post-processing the result.
    // Note that we must ALWAYS check specially whether those values are MIN_VALUE
    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
    // a positive number, it overflows back into a negative).  Not handling this
    // case would often result in infinite recursion.
    //
    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
    // methods on which they depend.

    /**
     * An indicator used to reliably determine if an object is a Long or not.
     * @type {boolean}
     * @const
     * @private
     */
    Long.prototype.__isLong__;

    Object.defineProperty(Long.prototype, "__isLong__", {
        value: true,
        enumerable: false,
        configurable: false
    });

    /**
     * @function
     * @param {*} obj Object
     * @returns {boolean}
     * @inner
     */
    function isLong(obj) {
        return (obj && obj["__isLong__"]) === true;
    }

    /**
     * Tests if the specified object is a Long.
     * @function
     * @param {*} obj Object
     * @returns {boolean}
     */
    Long.isLong = isLong;

    /**
     * A cache of the Long representations of small integer values.
     * @type {!Object}
     * @inner
     */
    var INT_CACHE = {};

    /**
     * A cache of the Long representations of small unsigned integer values.
     * @type {!Object}
     * @inner
     */
    var UINT_CACHE = {};

    /**
     * @param {number} value
     * @param {boolean=} unsigned
     * @returns {!Long}
     * @inner
     */
    function fromInt(value, unsigned) {
        var obj, cachedObj, cache;
        if (unsigned) {
            value >>>= 0;
            if (cache = (0 <= value && value < 256)) {
                cachedObj = UINT_CACHE[value];
                if (cachedObj)
                    return cachedObj;
            }
            obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
            if (cache)
                UINT_CACHE[value] = obj;
            return obj;
        } else {
            value |= 0;
            if (cache = (-128 <= value && value < 128)) {
                cachedObj = INT_CACHE[value];
                if (cachedObj)
                    return cachedObj;
            }
            obj = fromBits(value, value < 0 ? -1 : 0, false);
            if (cache)
                INT_CACHE[value] = obj;
            return obj;
        }
    }

    /**
     * Returns a Long representing the given 32 bit integer value.
     * @function
     * @param {number} value The 32 bit integer in question
     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
     * @returns {!Long} The corresponding Long value
     */
    Long.fromInt = fromInt;

    /**
     * @param {number} value
     * @param {boolean=} unsigned
     * @returns {!Long}
     * @inner
     */
    function fromNumber(value, unsigned) {
        if (isNaN(value) || !isFinite(value))
            return unsigned ? UZERO : ZERO;
        if (unsigned) {
            if (value < 0)
                return UZERO;
            if (value >= TWO_PWR_64_DBL)
                return MAX_UNSIGNED_VALUE;
        } else {
            if (value <= -TWO_PWR_63_DBL)
                return MIN_VALUE;
            if (value + 1 >= TWO_PWR_63_DBL)
                return MAX_VALUE;
        }
        if (value < 0)
            return fromNumber(-value, unsigned).neg();
        return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
    }

    /**
     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
     * @function
     * @param {number} value The number in question
     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
     * @returns {!Long} The corresponding Long value
     */
    Long.fromNumber = fromNumber;

    /**
     * @param {number} lowBits
     * @param {number} highBits
     * @param {boolean=} unsigned
     * @returns {!Long}
     * @inner
     */
    function fromBits(lowBits, highBits, unsigned) {
        return new Long(lowBits, highBits, unsigned);
    }

    /**
     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
     *  assumed to use 32 bits.
     * @function
     * @param {number} lowBits The low 32 bits
     * @param {number} highBits The high 32 bits
     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
     * @returns {!Long} The corresponding Long value
     */
    Long.fromBits = fromBits;

    /**
     * @function
     * @param {number} base
     * @param {number} exponent
     * @returns {number}
     * @inner
     */
    var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

    /**
     * @param {string} str
     * @param {(boolean|number)=} unsigned
     * @param {number=} radix
     * @returns {!Long}
     * @inner
     */
    function fromString(str, unsigned, radix) {
        if (str.length === 0)
            throw Error('empty string');
        if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
            return ZERO;
        if (typeof unsigned === 'number') {
            // For goog.math.long compatibility
            radix = unsigned,
            unsigned = false;
        } else {
            unsigned = !! unsigned;
        }
        radix = radix || 10;
        if (radix < 2 || 36 < radix)
            throw RangeError('radix');

        var p;
        if ((p = str.indexOf('-')) > 0)
            throw Error('interior hyphen');
        else if (p === 0) {
            return fromString(str.substring(1), unsigned, radix).neg();
        }

        // Do several (8) digits each time through the loop, so as to
        // minimize the calls to the very expensive emulated div.
        var radixToPower = fromNumber(pow_dbl(radix, 8));

        var result = ZERO;
        for (var i = 0; i < str.length; i += 8) {
            var size = Math.min(8, str.length - i),
                value = parseInt(str.substring(i, i + size), radix);
            if (size < 8) {
                var power = fromNumber(pow_dbl(radix, size));
                result = result.mul(power).add(fromNumber(value));
            } else {
                result = result.mul(radixToPower);
                result = result.add(fromNumber(value));
            }
        }
        result.unsigned = unsigned;
        return result;
    }

    /**
     * Returns a Long representation of the given string, written using the specified radix.
     * @function
     * @param {string} str The textual representation of the Long
     * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to `false` for signed
     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
     * @returns {!Long} The corresponding Long value
     */
    Long.fromString = fromString;

    /**
     * @function
     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
     * @returns {!Long}
     * @inner
     */
    function fromValue(val) {
        if (val /* is compatible */ instanceof Long)
            return val;
        if (typeof val === 'number')
            return fromNumber(val);
        if (typeof val === 'string')
            return fromString(val);
        // Throws for non-objects, converts non-instanceof Long:
        return fromBits(val.low, val.high, val.unsigned);
    }

    /**
     * Converts the specified value to a Long.
     * @function
     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
     * @returns {!Long}
     */
    Long.fromValue = fromValue;

    // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
    // no runtime penalty for these.

    /**
     * @type {number}
     * @const
     * @inner
     */
    var TWO_PWR_16_DBL = 1 << 16;

    /**
     * @type {number}
     * @const
     * @inner
     */
    var TWO_PWR_24_DBL = 1 << 24;

    /**
     * @type {number}
     * @const
     * @inner
     */
    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

    /**
     * @type {number}
     * @const
     * @inner
     */
    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

    /**
     * @type {number}
     * @const
     * @inner
     */
    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

    /**
     * @type {!Long}
     * @const
     * @inner
     */
    var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);

    /**
     * @type {!Long}
     * @inner
     */
    var ZERO = fromInt(0);

    /**
     * Signed zero.
     * @type {!Long}
     */
    Long.ZERO = ZERO;

    /**
     * @type {!Long}
     * @inner
     */
    var UZERO = fromInt(0, true);

    /**
     * Unsigned zero.
     * @type {!Long}
     */
    Long.UZERO = UZERO;

    /**
     * @type {!Long}
     * @inner
     */
    var ONE = fromInt(1);

    /**
     * Signed one.
     * @type {!Long}
     */
    Long.ONE = ONE;

    /**
     * @type {!Long}
     * @inner
     */
    var UONE = fromInt(1, true);

    /**
     * Unsigned one.
     * @type {!Long}
     */
    Long.UONE = UONE;

    /**
     * @type {!Long}
     * @inner
     */
    var NEG_ONE = fromInt(-1);

    /**
     * Signed negative one.
     * @type {!Long}
     */
    Long.NEG_ONE = NEG_ONE;

    /**
     * @type {!Long}
     * @inner
     */
    var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);

    /**
     * Maximum signed value.
     * @type {!Long}
     */
    Long.MAX_VALUE = MAX_VALUE;

    /**
     * @type {!Long}
     * @inner
     */
    var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);

    /**
     * Maximum unsigned value.
     * @type {!Long}
     */
    Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;

    /**
     * @type {!Long}
     * @inner
     */
    var MIN_VALUE = fromBits(0, 0x80000000|0, false);

    /**
     * Minimum signed value.
     * @type {!Long}
     */
    Long.MIN_VALUE = MIN_VALUE;

    /**
     * @alias Long.prototype
     * @inner
     */
    var LongPrototype = Long.prototype;

    /**
     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
     * @returns {number}
     */
    LongPrototype.toInt = function toInt() {
        return this.unsigned ? this.low >>> 0 : this.low;
    };

    /**
     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
     * @returns {number}
     */
    LongPrototype.toNumber = function toNumber() {
        if (this.unsigned)
            return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);
        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
    };

    /**
     * Converts the Long to a string written in the specified radix.
     * @param {number=} radix Radix (2-36), defaults to 10
     * @returns {string}
     * @override
     * @throws {RangeError} If `radix` is out of range
     */
    LongPrototype.toString = function toString(radix) {
        radix = radix || 10;
        if (radix < 2 || 36 < radix)
            throw RangeError('radix');
        if (this.isZero())
            return '0';
        if (this.isNegative()) { // Unsigned Longs are never negative
            if (this.eq(MIN_VALUE)) {
                // We need to change the Long value before it can be negated, so we remove
                // the bottom-most digit in this base and then recurse to do the rest.
                var radixLong = fromNumber(radix),
                    div = this.div(radixLong),
                    rem1 = div.mul(radixLong).sub(this);
                return div.toString(radix) + rem1.toInt().toString(radix);
            } else
                return '-' + this.neg().toString(radix);
        }

        // Do several (6) digits each time through the loop, so as to
        // minimize the calls to the very expensive emulated div.
        var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
            rem = this;
        var result = '';
        while (true) {
            var remDiv = rem.div(radixToPower),
                intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
                digits = intval.toString(radix);
            rem = remDiv;
            if (rem.isZero())
                return digits + result;
            else {
                while (digits.length < 6)
                    digits = '0' + digits;
                result = '' + digits + result;
            }
        }
    };

    /**
     * Gets the high 32 bits as a signed integer.
     * @returns {number} Signed high bits
     */
    LongPrototype.getHighBits = function getHighBits() {
        return this.high;
    };

    /**
     * Gets the high 32 bits as an unsigned integer.
     * @returns {number} Unsigned high bits
     */
    LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
        return this.high >>> 0;
    };

    /**
     * Gets the low 32 bits as a signed integer.
     * @returns {number} Signed low bits
     */
    LongPrototype.getLowBits = function getLowBits() {
        return this.low;
    };

    /**
     * Gets the low 32 bits as an unsigned integer.
     * @returns {number} Unsigned low bits
     */
    LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
        return this.low >>> 0;
    };

    /**
     * Gets the number of bits needed to represent the absolute value of this Long.
     * @returns {number}
     */
    LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
        if (this.isNegative()) // Unsigned Longs are never negative
            return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
        var val = this.high != 0 ? this.high : this.low;
        for (var bit = 31; bit > 0; bit--)
            if ((val & (1 << bit)) != 0)
                break;
        return this.high != 0 ? bit + 33 : bit + 1;
    };

    /**
     * Tests if this Long's value equals zero.
     * @returns {boolean}
     */
    LongPrototype.isZero = function isZero() {
        return this.high === 0 && this.low === 0;
    };

    /**
     * Tests if this Long's value is negative.
     * @returns {boolean}
     */
    LongPrototype.isNegative = function isNegative() {
        return !this.unsigned && this.high < 0;
    };

    /**
     * Tests if this Long's value is positive.
     * @returns {boolean}
     */
    LongPrototype.isPositive = function isPositive() {
        return this.unsigned || this.high >= 0;
    };

    /**
     * Tests if this Long's value is odd.
     * @returns {boolean}
     */
    LongPrototype.isOdd = function isOdd() {
        return (this.low & 1) === 1;
    };

    /**
     * Tests if this Long's value is even.
     * @returns {boolean}
     */
    LongPrototype.isEven = function isEven() {
        return (this.low & 1) === 0;
    };

    /**
     * Tests if this Long's value equals the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.equals = function equals(other) {
        if (!isLong(other))
            other = fromValue(other);
        if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)
            return false;
        return this.high === other.high && this.low === other.low;
    };

    /**
     * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.eq = LongPrototype.equals;

    /**
     * Tests if this Long's value differs from the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.notEquals = function notEquals(other) {
        return !this.eq(/* validates */ other);
    };

    /**
     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.neq = LongPrototype.notEquals;

    /**
     * Tests if this Long's value is less than the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.lessThan = function lessThan(other) {
        return this.comp(/* validates */ other) < 0;
    };

    /**
     * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.lt = LongPrototype.lessThan;

    /**
     * Tests if this Long's value is less than or equal the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
        return this.comp(/* validates */ other) <= 0;
    };

    /**
     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.lte = LongPrototype.lessThanOrEqual;

    /**
     * Tests if this Long's value is greater than the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.greaterThan = function greaterThan(other) {
        return this.comp(/* validates */ other) > 0;
    };

    /**
     * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.gt = LongPrototype.greaterThan;

    /**
     * Tests if this Long's value is greater than or equal the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
        return this.comp(/* validates */ other) >= 0;
    };

    /**
     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.gte = LongPrototype.greaterThanOrEqual;

    /**
     * Compares this Long's value with the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {number} 0 if they are the same, 1 if the this is greater and -1
     *  if the given one is greater
     */
    LongPrototype.compare = function compare(other) {
        if (!isLong(other))
            other = fromValue(other);
        if (this.eq(other))
            return 0;
        var thisNeg = this.isNegative(),
            otherNeg = other.isNegative();
        if (thisNeg && !otherNeg)
            return -1;
        if (!thisNeg && otherNeg)
            return 1;
        // At this point the sign bits are the same
        if (!this.unsigned)
            return this.sub(other).isNegative() ? -1 : 1;
        // Both are positive if at least one is unsigned
        return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;
    };

    /**
     * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {number} 0 if they are the same, 1 if the this is greater and -1
     *  if the given one is greater
     */
    LongPrototype.comp = LongPrototype.compare;

    /**
     * Negates this Long's value.
     * @returns {!Long} Negated Long
     */
    LongPrototype.negate = function negate() {
        if (!this.unsigned && this.eq(MIN_VALUE))
            return MIN_VALUE;
        return this.not().add(ONE);
    };

    /**
     * Negates this Long's value. This is an alias of {@link Long#negate}.
     * @function
     * @returns {!Long} Negated Long
     */
    LongPrototype.neg = LongPrototype.negate;

    /**
     * Returns the sum of this and the specified Long.
     * @param {!Long|number|string} addend Addend
     * @returns {!Long} Sum
     */
    LongPrototype.add = function add(addend) {
        if (!isLong(addend))
            addend = fromValue(addend);

        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

        var a48 = this.high >>> 16;
        var a32 = this.high & 0xFFFF;
        var a16 = this.low >>> 16;
        var a00 = this.low & 0xFFFF;

        var b48 = addend.high >>> 16;
        var b32 = addend.high & 0xFFFF;
        var b16 = addend.low >>> 16;
        var b00 = addend.low & 0xFFFF;

        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 + b00;
        c16 += c00 >>> 16;
        c00 &= 0xFFFF;
        c16 += a16 + b16;
        c32 += c16 >>> 16;
        c16 &= 0xFFFF;
        c32 += a32 + b32;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c48 += a48 + b48;
        c48 &= 0xFFFF;
        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
    };

    /**
     * Returns the difference of this and the specified Long.
     * @param {!Long|number|string} subtrahend Subtrahend
     * @returns {!Long} Difference
     */
    LongPrototype.subtract = function subtract(subtrahend) {
        if (!isLong(subtrahend))
            subtrahend = fromValue(subtrahend);
        return this.add(subtrahend.neg());
    };

    /**
     * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
     * @function
     * @param {!Long|number|string} subtrahend Subtrahend
     * @returns {!Long} Difference
     */
    LongPrototype.sub = LongPrototype.subtract;

    /**
     * Returns the product of this and the specified Long.
     * @param {!Long|number|string} multiplier Multiplier
     * @returns {!Long} Product
     */
    LongPrototype.multiply = function multiply(multiplier) {
        if (this.isZero())
            return ZERO;
        if (!isLong(multiplier))
            multiplier = fromValue(multiplier);
        if (multiplier.isZero())
            return ZERO;
        if (this.eq(MIN_VALUE))
            return multiplier.isOdd() ? MIN_VALUE : ZERO;
        if (multiplier.eq(MIN_VALUE))
            return this.isOdd() ? MIN_VALUE : ZERO;

        if (this.isNegative()) {
            if (multiplier.isNegative())
                return this.neg().mul(multiplier.neg());
            else
                return this.neg().mul(multiplier).neg();
        } else if (multiplier.isNegative())
            return this.mul(multiplier.neg()).neg();

        // If both longs are small, use float multiplication
        if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
            return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
        // We can skip products that would overflow.

        var a48 = this.high >>> 16;
        var a32 = this.high & 0xFFFF;
        var a16 = this.low >>> 16;
        var a00 = this.low & 0xFFFF;

        var b48 = multiplier.high >>> 16;
        var b32 = multiplier.high & 0xFFFF;
        var b16 = multiplier.low >>> 16;
        var b00 = multiplier.low & 0xFFFF;

        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 * b00;
        c16 += c00 >>> 16;
        c00 &= 0xFFFF;
        c16 += a16 * b00;
        c32 += c16 >>> 16;
        c16 &= 0xFFFF;
        c16 += a00 * b16;
        c32 += c16 >>> 16;
        c16 &= 0xFFFF;
        c32 += a32 * b00;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c32 += a16 * b16;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c32 += a00 * b32;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
        c48 &= 0xFFFF;
        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
    };

    /**
     * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
     * @function
     * @param {!Long|number|string} multiplier Multiplier
     * @returns {!Long} Product
     */
    LongPrototype.mul = LongPrototype.multiply;

    /**
     * Returns this Long divided by the specified. The result is signed if this Long is signed or
     *  unsigned if this Long is unsigned.
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Quotient
     */
    LongPrototype.divide = function divide(divisor) {
        if (!isLong(divisor))
            divisor = fromValue(divisor);
        if (divisor.isZero())
            throw Error('division by zero');
        if (this.isZero())
            return this.unsigned ? UZERO : ZERO;
        var approx, rem, res;
        if (!this.unsigned) {
            // This section is only relevant for signed longs and is derived from the
            // closure library as a whole.
            if (this.eq(MIN_VALUE)) {
                if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
                    return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
                else if (divisor.eq(MIN_VALUE))
                    return ONE;
                else {
                    // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                    var halfThis = this.shr(1);
                    approx = halfThis.div(divisor).shl(1);
                    if (approx.eq(ZERO)) {
                        return divisor.isNegative() ? ONE : NEG_ONE;
                    } else {
                        rem = this.sub(divisor.mul(approx));
                        res = approx.add(rem.div(divisor));
                        return res;
                    }
                }
            } else if (divisor.eq(MIN_VALUE))
                return this.unsigned ? UZERO : ZERO;
            if (this.isNegative()) {
                if (divisor.isNegative())
                    return this.neg().div(divisor.neg());
                return this.neg().div(divisor).neg();
            } else if (divisor.isNegative())
                return this.div(divisor.neg()).neg();
            res = ZERO;
        } else {
            // The algorithm below has not been made for unsigned longs. It's therefore
            // required to take special care of the MSB prior to running it.
            if (!divisor.unsigned)
                divisor = divisor.toUnsigned();
            if (divisor.gt(this))
                return UZERO;
            if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
                return UONE;
            res = UZERO;
        }

        // Repeat the following until the remainder is less than other:  find a
        // floating-point that approximates remainder / other *from below*, add this
        // into the result, and subtract it from the remainder.  It is critical that
        // the approximate value is less than or equal to the real value so that the
        // remainder never becomes negative.
        rem = this;
        while (rem.gte(divisor)) {
            // Approximate the result of division. This may be a little greater or
            // smaller than the actual value.
            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));

            // We will tweak the approximate result by changing it in the 48-th digit or
            // the smallest non-fractional digit, whichever is larger.
            var log2 = Math.ceil(Math.log(approx) / Math.LN2),
                delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),

            // Decrease the approximation until it is smaller than the remainder.  Note
            // that if it is too large, the product overflows and is negative.
                approxRes = fromNumber(approx),
                approxRem = approxRes.mul(divisor);
            while (approxRem.isNegative() || approxRem.gt(rem)) {
                approx -= delta;
                approxRes = fromNumber(approx, this.unsigned);
                approxRem = approxRes.mul(divisor);
            }

            // We know the answer can't be zero... and actually, zero would cause
            // infinite recursion since we would make no progress.
            if (approxRes.isZero())
                approxRes = ONE;

            res = res.add(approxRes);
            rem = rem.sub(approxRem);
        }
        return res;
    };

    /**
     * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
     * @function
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Quotient
     */
    LongPrototype.div = LongPrototype.divide;

    /**
     * Returns this Long modulo the specified.
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Remainder
     */
    LongPrototype.modulo = function modulo(divisor) {
        if (!isLong(divisor))
            divisor = fromValue(divisor);
        return this.sub(this.div(divisor).mul(divisor));
    };

    /**
     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
     * @function
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Remainder
     */
    LongPrototype.mod = LongPrototype.modulo;

    /**
     * Returns the bitwise NOT of this Long.
     * @returns {!Long}
     */
    LongPrototype.not = function not() {
        return fromBits(~this.low, ~this.high, this.unsigned);
    };

    /**
     * Returns the bitwise AND of this Long and the specified.
     * @param {!Long|number|string} other Other Long
     * @returns {!Long}
     */
    LongPrototype.and = function and(other) {
        if (!isLong(other))
            other = fromValue(other);
        return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
    };

    /**
     * Returns the bitwise OR of this Long and the specified.
     * @param {!Long|number|string} other Other Long
     * @returns {!Long}
     */
    LongPrototype.or = function or(other) {
        if (!isLong(other))
            other = fromValue(other);
        return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
    };

    /**
     * Returns the bitwise XOR of this Long and the given one.
     * @param {!Long|number|string} other Other Long
     * @returns {!Long}
     */
    LongPrototype.xor = function xor(other) {
        if (!isLong(other))
            other = fromValue(other);
        return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
    };

    /**
     * Returns this Long with bits shifted to the left by the given amount.
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */
    LongPrototype.shiftLeft = function shiftLeft(numBits) {
        if (isLong(numBits))
            numBits = numBits.toInt();
        if ((numBits &= 63) === 0)
            return this;
        else if (numBits < 32)
            return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);
        else
            return fromBits(0, this.low << (numBits - 32), this.unsigned);
    };

    /**
     * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
     * @function
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */
    LongPrototype.shl = LongPrototype.shiftLeft;

    /**
     * Returns this Long with bits arithmetically shifted to the right by the given amount.
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */
    LongPrototype.shiftRight = function shiftRight(numBits) {
        if (isLong(numBits))
            numBits = numBits.toInt();
        if ((numBits &= 63) === 0)
            return this;
        else if (numBits < 32)
            return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);
        else
            return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
    };

    /**
     * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
     * @function
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */
    LongPrototype.shr = LongPrototype.shiftRight;

    /**
     * Returns this Long with bits logically shifted to the right by the given amount.
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */
    LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
        if (isLong(numBits))
            numBits = numBits.toInt();
        numBits &= 63;
        if (numBits === 0)
            return this;
        else {
            var high = this.high;
            if (numBits < 32) {
                var low = this.low;
                return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);
            } else if (numBits === 32)
                return fromBits(high, 0, this.unsigned);
            else
                return fromBits(high >>> (numBits - 32), 0, this.unsigned);
        }
    };

    /**
     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
     * @function
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */
    LongPrototype.shru = LongPrototype.shiftRightUnsigned;

    /**
     * Converts this Long to signed.
     * @returns {!Long} Signed long
     */
    LongPrototype.toSigned = function toSigned() {
        if (!this.unsigned)
            return this;
        return fromBits(this.low, this.high, false);
    };

    /**
     * Converts this Long to unsigned.
     * @returns {!Long} Unsigned long
     */
    LongPrototype.toUnsigned = function toUnsigned() {
        if (this.unsigned)
            return this;
        return fromBits(this.low, this.high, true);
    };

    /**
     * Converts this Long to its byte representation.
     * @param {boolean=} le Whether little or big endian, defaults to big endian
     * @returns {!Array.<number>} Byte representation
     */
    LongPrototype.toBytes = function(le) {
        return le ? this.toBytesLE() : this.toBytesBE();
    }

    /**
     * Converts this Long to its little endian byte representation.
     * @returns {!Array.<number>} Little endian byte representation
     */
    LongPrototype.toBytesLE = function() {
        var hi = this.high,
            lo = this.low;
        return [
             lo         & 0xff,
            (lo >>>  8) & 0xff,
            (lo >>> 16) & 0xff,
            (lo >>> 24) & 0xff,
             hi         & 0xff,
            (hi >>>  8) & 0xff,
            (hi >>> 16) & 0xff,
            (hi >>> 24) & 0xff
        ];
    }

    /**
     * Converts this Long to its big endian byte representation.
     * @returns {!Array.<number>} Big endian byte representation
     */
    LongPrototype.toBytesBE = function() {
        var hi = this.high,
            lo = this.low;
        return [
            (hi >>> 24) & 0xff,
            (hi >>> 16) & 0xff,
            (hi >>>  8) & 0xff,
             hi         & 0xff,
            (lo >>> 24) & 0xff,
            (lo >>> 16) & 0xff,
            (lo >>>  8) & 0xff,
             lo         & 0xff
        ];
    }

    return Long;
});

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/long/dist/long.js","/../node_modules/long/dist")
},{"buffer":11,"pBGvAp":74}],73:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
/* eslint-disable no-unused-vars */
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (e) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (Object.getOwnPropertySymbols) {
			symbols = Object.getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/object-assign/index.js","/../node_modules/object-assign")
},{"buffer":11,"pBGvAp":74}],74:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/process/browser.js","/../node_modules/process")
},{"buffer":11,"pBGvAp":74}],75:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
/** @preserve
(c) 2012 by Cédric Mesnil. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// constants table
var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]
var hr = [0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]

function bytesToWords (bytes) {
  var words = []
  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
    words[b >>> 5] |= bytes[i] << (24 - b % 32)
  }
  return words
}

function wordsToBytes (words) {
  var bytes = []
  for (var b = 0; b < words.length * 32; b += 8) {
    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF)
  }
  return bytes
}

function processBlock (H, M, offset) {
  // swap endian
  for (var i = 0; i < 16; i++) {
    var offset_i = offset + i
    var M_offset_i = M[offset_i]

    // Swap
    M[offset_i] = (
      (((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff) |
      (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00)
    )
  }

  // Working variables
  var al, bl, cl, dl, el
  var ar, br, cr, dr, er

  ar = al = H[0]
  br = bl = H[1]
  cr = cl = H[2]
  dr = dl = H[3]
  er = el = H[4]

  // computation
  var t
  for (i = 0; i < 80; i += 1) {
    t = (al + M[offset + zl[i]]) | 0
    if (i < 16) {
      t += f1(bl, cl, dl) + hl[0]
    } else if (i < 32) {
      t += f2(bl, cl, dl) + hl[1]
    } else if (i < 48) {
      t += f3(bl, cl, dl) + hl[2]
    } else if (i < 64) {
      t += f4(bl, cl, dl) + hl[3]
    } else {// if (i<80) {
      t += f5(bl, cl, dl) + hl[4]
    }
    t = t | 0
    t = rotl(t, sl[i])
    t = (t + el) | 0
    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = t

    t = (ar + M[offset + zr[i]]) | 0
    if (i < 16) {
      t += f5(br, cr, dr) + hr[0]
    } else if (i < 32) {
      t += f4(br, cr, dr) + hr[1]
    } else if (i < 48) {
      t += f3(br, cr, dr) + hr[2]
    } else if (i < 64) {
      t += f2(br, cr, dr) + hr[3]
    } else {// if (i<80) {
      t += f1(br, cr, dr) + hr[4]
    }

    t = t | 0
    t = rotl(t, sr[i])
    t = (t + er) | 0
    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = t
  }

  // intermediate hash value
  t = (H[1] + cl + dr) | 0
  H[1] = (H[2] + dl + er) | 0
  H[2] = (H[3] + el + ar) | 0
  H[3] = (H[4] + al + br) | 0
  H[4] = (H[0] + bl + cr) | 0
  H[0] = t
}

function f1 (x, y, z) {
  return ((x) ^ (y) ^ (z))
}

function f2 (x, y, z) {
  return (((x) & (y)) | ((~x) & (z)))
}

function f3 (x, y, z) {
  return (((x) | (~(y))) ^ (z))
}

function f4 (x, y, z) {
  return (((x) & (z)) | ((y) & (~(z))))
}

function f5 (x, y, z) {
  return ((x) ^ ((y) | (~(z))))
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function ripemd160 (message) {
  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]

  if (typeof message === 'string') {
    message = new Buffer(message, 'utf8')
  }

  var m = bytesToWords(message)

  var nBitsLeft = message.length * 8
  var nBitsTotal = message.length * 8

  // Add padding
  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32)
  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
    (((nBitsTotal << 8) | (nBitsTotal >>> 24)) & 0x00ff00ff) |
    (((nBitsTotal << 24) | (nBitsTotal >>> 8)) & 0xff00ff00)
  )

  for (var i = 0; i < m.length; i += 16) {
    processBlock(H, m, i)
  }

  // swap endian
  for (i = 0; i < 5; i++) {
    // shortcut
    var H_i = H[i]

    // Swap
    H[i] = (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff) |
      (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00)
  }

  var digestbytes = wordsToBytes(H)
  return new Buffer(digestbytes)
}

module.exports = ripemd160

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/ripemd160/lib/ripemd160.js","/../node_modules/ripemd160/lib")
},{"buffer":11,"pBGvAp":74}],76:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
!function(globals){
'use strict'

//*** UMD BEGIN
if (typeof define !== 'undefined' && define.amd) { //require.js / AMD
  define([], function() {
    return secureRandom
  })
} else if (typeof module !== 'undefined' && module.exports) { //CommonJS
  module.exports = secureRandom
} else { //script / browser
  globals.secureRandom = secureRandom
}
//*** UMD END

//options.type is the only valid option
function secureRandom(count, options) {
  options = options || {type: 'Array'}
  //we check for process.pid to prevent browserify from tricking us
  if (typeof process != 'undefined' && typeof process.pid == 'number') {
    return nodeRandom(count, options)
  } else {
    var crypto = window.crypto || window.msCrypto
    if (!crypto) throw new Error("Your browser does not support window.crypto.")
    return browserRandom(count, options)
  }
}

function nodeRandom(count, options) {
  var crypto = require('crypto')
  var buf = crypto.randomBytes(count)

  switch (options.type) {
    case 'Array':
      return [].slice.call(buf)
    case 'Buffer':
      return buf
    case 'Uint8Array':
      var arr = new Uint8Array(count)
      for (var i = 0; i < count; ++i) { arr[i] = buf.readUInt8(i) }
      return arr
    default:
      throw new Error(options.type + " is unsupported.")
  }
}

function browserRandom(count, options) {
  var nativeArr = new Uint8Array(count)
  var crypto = window.crypto || window.msCrypto
  crypto.getRandomValues(nativeArr)

  switch (options.type) {
    case 'Array':
      return [].slice.call(nativeArr)
    case 'Buffer':
      try { var b = new Buffer(1) } catch(e) { throw new Error('Buffer not supported in this environment. Use Node.js or Browserify for browser support.')}
      return new Buffer(nativeArr)
    case 'Uint8Array':
      return nativeArr
    default:
      throw new Error(options.type + " is unsupported.")
  }
}

secureRandom.randomArray = function(byteCount) {
  return secureRandom(byteCount, {type: 'Array'})
}

secureRandom.randomUint8Array = function(byteCount) {
  return secureRandom(byteCount, {type: 'Uint8Array'})
}

secureRandom.randomBuffer = function(byteCount) {
  return secureRandom(byteCount, {type: 'Buffer'})
}


}(this);

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/secure-random/lib/secure-random.js","/../node_modules/secure-random/lib")
},{"buffer":11,"crypto":8,"pBGvAp":74}],77:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = new Buffer(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
  this._s = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = new Buffer(data, enc)
  }

  var l = this._len += data.length
  var s = this._s || 0
  var f = 0
  var buffer = this._block

  while (s < l) {
    var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
    var ch = (t - f)

    for (var i = 0; i < ch; i++) {
      buffer[(s % this._blockSize) + i] = data[i + f]
    }

    s += ch
    f += ch

    if ((s % this._blockSize) === 0) {
      this._update(buffer)
    }
  }
  this._s = s

  return this
}

Hash.prototype.digest = function (enc) {
  // Suppose the length of the message M, in bits, is l
  var l = this._len * 8

  // Append the bit 1 to the end of the message
  this._block[this._len % this._blockSize] = 0x80

  // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
  this._block.fill(0, this._len % this._blockSize + 1)

  if (l % (this._blockSize * 8) >= this._finalSize * 8) {
    this._update(this._block)
    this._block.fill(0)
  }

  // to this append the block which is equal to the number l written in binary
  // TODO: handle case where l is > Math.pow(2, 29)
  this._block.writeInt32BE(l, this._blockSize - 4)

  var hash = this._update(this._block) || this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/sha.js/hash.js","/../node_modules/sha.js")
},{"buffer":11,"pBGvAp":74}],78:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = require('./sha')
exports.sha1 = require('./sha1')
exports.sha224 = require('./sha224')
exports.sha256 = require('./sha256')
exports.sha384 = require('./sha384')
exports.sha512 = require('./sha512')

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/sha.js/index.js","/../node_modules/sha.js")
},{"./sha":79,"./sha1":80,"./sha224":81,"./sha256":82,"./sha384":83,"./sha512":84,"buffer":11,"pBGvAp":74}],79:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = require('inherits')
var Hash = require('./hash')

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = new Buffer(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/sha.js/sha.js","/../node_modules/sha.js")
},{"./hash":77,"buffer":11,"inherits":71,"pBGvAp":74}],80:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits')
var Hash = require('./hash')

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = new Buffer(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/sha.js/sha1.js","/../node_modules/sha.js")
},{"./hash":77,"buffer":11,"inherits":71,"pBGvAp":74}],81:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Sha256 = require('./sha256')
var Hash = require('./hash')

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = new Buffer(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/sha.js/sha224.js","/../node_modules/sha.js")
},{"./hash":77,"./sha256":82,"buffer":11,"inherits":71,"pBGvAp":74}],82:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Hash = require('./hash')

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = new Buffer(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/sha.js/sha256.js","/../node_modules/sha.js")
},{"./hash":77,"buffer":11,"inherits":71,"pBGvAp":74}],83:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var inherits = require('inherits')
var SHA512 = require('./sha512')
var Hash = require('./hash')

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = new Buffer(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/sha.js/sha384.js","/../node_modules/sha.js")
},{"./hash":77,"./sha512":84,"buffer":11,"inherits":71,"pBGvAp":74}],84:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var inherits = require('inherits')
var Hash = require('./hash')

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = new Buffer(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/sha.js/sha512.js","/../node_modules/sha.js")
},{"./hash":77,"buffer":11,"inherits":71,"pBGvAp":74}],85:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WsRpc = require("./WebSocketRpc");
var SteemApi = require("./SteemApi");

var defaultOptions = {
    url: "wss://node.steem.ws",
    user: "",
    pass: "",
    debug: false,
    apis: ["database_api", "network_broadcast_api", "follow_api", "market_history_api", "login_api", "private_message_api"]
};

var objectAssign = require('object-assign');

var apiInstance;

module.exports = {

    reset: function reset() {
        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        if (apiInstance) {
            this.close();
        }
        apiInstance = new ApiInstance(options);
        apiInstance.connect();

        return apiInstance;
    },

    get: function get() {
        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
        var connect = arguments[1];

        if (!apiInstance) {
            apiInstance = new ApiInstance(options);
        }

        if (connect) {
            apiInstance.setOptions(options);
            apiInstance.connect();
        }

        return apiInstance;
    },


    close: function close() {
        apiInstance.close();apiInstance = null;
    }
};

var ApiInstance = function () {
    function ApiInstance(options) {
        _classCallCheck(this, ApiInstance);

        this.setOptions(options);
        this.statusCallback = options.statusCallback;
    }

    _createClass(ApiInstance, [{
        key: "setOptions",
        value: function setOptions(options) {
            this.options = objectAssign({}, defaultOptions, options);//Object.assign({}, defaultOptions, options);
            if (this.options.apis.indexOf("database_api") === -1) {
                this.options.apis.unshift("database_api");
            }
        }
    }, {
        key: "connect",
        value: function connect() {
            if (this.wsRpc) {
                return;
            }

            try {
                this.wsRpc = new WsRpc(this.options, this.onReconnect.bind(this), this.onStatusChange.bind(this));
                return this.login();
            } catch (err) {
                console.error("wsRpc open error:", err);
            }
        }
    }, {
        key: "login",
        value: function login() {
            var _this = this;

            return this.initPromise = this.wsRpc.login(this.options.user, this.options.pass).then(function () {
                var apiPromises = [];

                _this.options.apis.forEach(function (api) {
                    _this["_" + api] = new SteemApi(_this.wsRpc, api);
                    _this[api] = function () {
                        return this["_" + api];
                    };
                    apiPromises.push(_this["_" + api].init().then(function () {
                        if (api === "database_api") {
                            return _this[api]().exec("get_config", []).then(function (res) {
                                console.log(res.STEEMIT_CHAIN_ID);
                                _this.chainId = res.STEEMIT_CHAIN_ID;
                                return "connected to " + api;
                            });
                        } else {
                            return "connected to " + api;
                        }
                    }));
                });
                return Promise.all(apiPromises);
            }).catch(function (err) {
                // console.error("Unable to connect to", this.options.url);
                throw new Error("Unable to connect to " + _this.options.url);
            });
        }
    }, {
        key: "onReconnect",
        value: function onReconnect() {
            this.login();
        }
    }, {
        key: "onStatusChange",
        value: function onStatusChange(e) {
            if (this.statusCallback) {
                this.statusCallback(e);
            }
        }
    }, {
        key: "close",
        value: function close() {
            if (this.wsRpc) {
                this.wsRpc.close();
                this.wsRpc = null;
            }
        }
    }]);

    return ApiInstance;
}();
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/steem-rpc/lib/ApiInstance.js","/../node_modules/steem-rpc/lib")
},{"./SteemApi":86,"./WebSocketRpc":87,"buffer":11,"object-assign":73,"pBGvAp":74}],86:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SteemApi = function () {
	function SteemApi(wsRpc, apiName) {
		_classCallCheck(this, SteemApi);

		this.wsRpc = wsRpc;
		this.apiName = apiName;
	}

	_createClass(SteemApi, [{
		key: "init",
		value: function init() {
			var _this = this;

			return this.wsRpc.getApiByName(this.apiName).then(function (response) {
				_this.apiId = response;
				return _this;
			});
		}
	}, {
		key: "exec",
		value: function exec(method, params) {
			return this.wsRpc.call([this.apiId, method, params]).catch(function (error) {
				console.error("Api error:", method, params, JSON.stringify(error));
				var newErr = new Error("Api error:" + method + params + JSON.stringify(error));
				newErr.original = error;
				localStorage.error = 1;
				localStorage.errormessage = error.message?error.message.split("\n")[1]:'Connection lost, reconnecting...';
				throw newErr;
			});
		}
	}]);

	return SteemApi;
}();

module.exports = SteemApi;
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/steem-rpc/lib/SteemApi.js","/../node_modules/steem-rpc/lib")
},{"buffer":11,"pBGvAp":74}],87:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RWebSocket = require("./reconnecting-websocket");

var WebSocketRpc = function () {
	function WebSocketRpc(options) {
		var _this = this;

		var rcCallback = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
		var statusCallback = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

		_classCallCheck(this, WebSocketRpc);

		this.rcCallback = rcCallback;
		this.statusCallback = statusCallback;

		if (typeof WebSocket !== "undefined") {
			options.WebSocket = WebSocket;
			options.idleTreshold = "idleTreshold" in options ? options.idleTreshold : 60000; // Only use idle threshold in browsers
		} else {
				options.WebSocket = require("ws");
				options.idleTreshold = 0; // Always reconnect in node.js
			}
		options.reconnectInterval = 1000;
		options.reconnectDecay = 1.2;

		this.ws = new RWebSocket(options);
		this.ws.timeoutInterval = 15000;

		var initialConnect = true;

		this.connectPromise = new Promise(function (resolve, reject) {

			_this.ws.onopen = function () {
				if (_this.statusCallback) _this.statusCallback("open");
				if (initialConnect) {
					initialConnect = false;
					resolve();
				} else {
					if (_this.rcCallback) _this.rcCallback();
				}
			};

			_this.ws.onerror = function (err) {
				if (_this.statusCallback) _this.statusCallback("error");
				reject(err);
			};

			_this.ws.onmessage = function (message) {
				var data = {};
				try {
					data = JSON.parse(message.data);
				} catch (e) {
					console.log("Unable to parse API response:", e);
					data.error = "Unable to parse response " + JSON.stringify(message);
				}
				_this.listener(data);
			};

			_this.ws.onclose = function () {
				// web socket may re-connect
				_this.cbs.forEach(function (value) {
					value.reject('connection closed');
				});

				_this.methodCbs.forEach(function (value) {
					value.reject('connection closed');
				});

				_this.cbs.clear();
				_this.methodCbs.clear();
				_this.cbId = 0;

				if (_this.statusCallback) _this.statusCallback("closed");
			};
		});

		this.cbId = 0;
		this.cbs = new Map();
		this.methodCbs = new Map();

		if (typeof window !== "undefined") {
			window.onbeforeunload = function () {
				_this.close();
			};
		}
	}

	_createClass(WebSocketRpc, [{
		key: "listener",
		value: function listener(message) {
			var callback = this.cbs.get(message.id);
			var methodCallback = this.methodCbs.get(message.id);

			if (methodCallback) {
				this.methodCbs.delete(message.id);
				if ("error" in message && "reject" in methodCallback) {
					methodCallback.reject(message.error);
				} else if ("resolve" in methodCallback) {
					methodCallback.resolve();
				}
			}

			if (callback) {
				this.cbs.delete(message.id);
				if ("error" in message) {
					callback.reject(message.error);
				} else {
					callback.resolve(message.result);
				}
			}
		}
	}, {
		key: "call",
		value: function call(params) {
			var _this2 = this;

			var request = {
				method: "call",
				params: params,
				id: this.cbId++
			};

			return new Promise(function (resolve, reject) {

				_this2.cbs.set(request.id, {
					time: new Date(),
					resolve: resolve,
					reject: reject
				});

				if (request.params[1] === "broadcast_transaction_with_callback" && request.params[2][0]) {
					_this2.methodCbs.set(request.id, request.params[2][0]);
					request.params[2][0] = request.params[2][0].resolve;
				}

				_this2.ws.onerror = function (error) {
					reject(error);
				};

				_this2.ws.send(JSON.stringify(request));
			});
		}
	}, {
		key: "getApiByName",
		value: function getApiByName(api) {
			return this.call([1, "get_api_by_name", [api]]);
		}
	}, {
		key: "login",
		value: function login(user, password) {
			var _this3 = this;

			return this.connectPromise.then(function () {
				return _this3.call([1, "login", [user, password]]);
			});
		}
	}, {
		key: "close",
		value: function close() {
			console.log('closing ws');
			if (this.ws) {
				this.ws.onclose();
				this.ws.close();
				this.ws = null;
			}
		}
	}]);

	return WebSocketRpc;
}();

module.exports = WebSocketRpc;
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/steem-rpc/lib/WebSocketRpc.js","/../node_modules/steem-rpc/lib")
},{"./reconnecting-websocket":89,"buffer":11,"pBGvAp":74,"ws":8}],88:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var Client = require("./ApiInstance");

module.exports = {
	Client: Client
};
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/steem-rpc/lib/index.js","/../node_modules/steem-rpc/lib")
},{"./ApiInstance":85,"buffer":11,"pBGvAp":74}],89:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

// MIT License:
//
// Copyright (c) 2010-2012, Joe Walnes
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/**
 * This behaves like a WebSocket in every way, except if it fails to connect,
 * or it gets disconnected, it will repeatedly poll until it successfully connects
 * again.
 *
 * It is API compatible, so when you have:
 *   ws = new WebSocket('ws://....');
 * you can replace with:
 *   ws = new ReconnectingWebSocket('ws://....');
 *
 * The event stream will typically look like:
 *  onconnecting
 *  onopen
 *  onmessage
 *  onmessage
 *  onclose // lost connection
 *  onconnecting
 *  onopen  // sometime later...
 *  onmessage
 *  onmessage
 *  etc...
 *
 * It is API compatible with the standard WebSocket API, apart from the following members:
 *
 * - `bufferedAmount`
 * - `extensions`
 * - `binaryType`
 *
 * Latest version: https://github.com/joewalnes/reconnecting-websocket/
 * - Joe Walnes
 *
 * Syntax
 * ======
 * var socket = new ReconnectingWebSocket(url, protocols, options);
 *
 * Parameters
 * ==========
 * url - The url you are connecting to.
 * protocols - Optional string or array of protocols.
 * options - See below
 *
 * Options
 * =======
 * Options can either be passed upon instantiation or set after instantiation:
 *
 * var socket = new ReconnectingWebSocket(url, null, { debug: true, reconnectInterval: 4000 });
 *
 * or
 *
 * var socket = new ReconnectingWebSocket(url);
 * socket.debug = true;
 * socket.reconnectInterval = 4000;
 *
 * debug
 * - Whether this instance should log debug messages. Accepts true or false. Default: false.
 *
 * automaticOpen
 * - Whether or not the websocket should attempt to connect immediately upon instantiation. The socket can be manually opened or closed at any time using ws.open() and ws.close().
 *
 * reconnectInterval
 * - The number of milliseconds to delay before attempting to reconnect. Accepts integer. Default: 1000.
 *
 * maxReconnectInterval
 * - The maximum number of milliseconds to delay a reconnection attempt. Accepts integer. Default: 30000.
 *
 * reconnectDecay
 * - The rate of increase of the reconnect delay. Allows reconnect attempts to back off when problems persist. Accepts integer or float. Default: 1.5.
 *
 * timeoutInterval
 * - The maximum time in milliseconds to wait for a connection to succeed before closing and retrying. Accepts integer. Default: 2000.
 *
 */
(function (global, factory) {
    if (typeof define === 'function' && define.amd) {
        define([], factory);
    } else if (typeof module !== 'undefined' && module.exports) {
        module.exports = factory();
    } else {
        global.ReconnectingWebSocket = factory();
    }
})(undefined, function () {

    //if (!('WebSocket' in window)) {
    //    return;
    //}

    var WebSocket;

    function ReconnectingWebSocket(options) {

        // Default settings
        var settings = {

            /** Whether this instance should log debug messages. */
            debug: false,

            /** Whether or not the websocket should attempt to connect immediately upon instantiation. */
            automaticOpen: true,

            /** The number of milliseconds to delay before attempting to reconnect. */
            reconnectInterval: 2000,
            /** The maximum number of milliseconds to delay a reconnection attempt. */
            maxReconnectInterval: 300000,
            /** The rate of increase of the reconnect delay. Allows reconnect attempts to back off when problems persist. */
            reconnectDecay: 1.5,

            /** The maximum time in milliseconds to wait for a connection to succeed before closing and retrying. */
            timeoutInterval: 2000,

            /** The maximum number of reconnection attempts to make. Unlimited if null. */
            maxReconnectAttempts: 100,

            /** The binary type, possible values 'blob' or 'arraybuffer', default 'blob'. */
            binaryType: 'arraybuffer',

            /** Don't reconnect if idle (no user activity after idleTreshold), pass 0 to always reconnect **/
            idleTreshold: 0
        };
        if (!options) {
            options = {};
        }

        WebSocket = options.WebSocket;
        ReconnectingWebSocket.CONNECTING = WebSocket.CONNECTING;
        ReconnectingWebSocket.OPEN = WebSocket.OPEN;
        ReconnectingWebSocket.CLOSING = WebSocket.CLOSING;
        ReconnectingWebSocket.CLOSED = WebSocket.CLOSED;
        if (!console.debug) console.debug = console.log;

        // Overwrite and define settings with options if they exist.
        for (var key in settings) {
            if (typeof options[key] !== 'undefined') {
                this[key] = options[key];
            } else {
                this[key] = settings[key];
            }
        }

        // These should be treated as read-only properties

        /** The URL as resolved by the constructor. This is always an absolute URL. Read only. */
        this.url = options.url;

        /** The number of attempted reconnects since starting, or the last successful connection. Read only. */
        this.reconnectAttempts = 0;

        /**
         * The current state of the connection.
         * Can be one of: WebSocket.CONNECTING, WebSocket.OPEN, WebSocket.CLOSING, WebSocket.CLOSED
         * Read only.
         */
        this.readyState = WebSocket.CONNECTING;

        /**
         * A string indicating the name of the sub-protocol the server selected; this will be one of
         * the strings specified in the protocols parameter when creating the WebSocket object.
         * Read only.
         */
        this.protocol = null;

        // Private state variables

        var self = this;
        var ws;
        var forcedClose = false;
        var timedOut = false;
        var handlers = {};
        var eventTarget = {
            addEventListener: function addEventListener(event, handler) {
                handlers[event] = handler;
            },
            removeEventListener: function removeEventListener(event) {
                delete handlers[event];
            },
            dispatchEvent: function dispatchEvent(event) {
                var handler = handlers[event.name];
                if (handler) handler(event);
            }
        }; //document.createElement('div');

        // Wire up "on*" properties as event handlers

        eventTarget.addEventListener('open', function (event) {
            self.onopen(event);
        });
        eventTarget.addEventListener('close', function (event) {
            self.onclose(event);
        });
        eventTarget.addEventListener('connecting', function (event) {
            self.onconnecting(event);
        });
        eventTarget.addEventListener('message', function (event) {
            self.onmessage(event);
        });
        eventTarget.addEventListener('error', function (event) {
            self.onerror(event);
        });

        // Expose the API required by EventTarget

        this.addEventListener = eventTarget.addEventListener.bind(eventTarget);
        this.removeEventListener = eventTarget.removeEventListener.bind(eventTarget);
        this.dispatchEvent = eventTarget.dispatchEvent.bind(eventTarget);

        /**
         * This function generates an event that is compatible with standard
         * compliant browsers and IE9 - IE11
         *
         * This will prevent the error:
         * Object doesn't support this action
         *
         * http://stackoverflow.com/questions/19345392/why-arent-my-parameters-getting-passed-through-to-a-dispatched-event/19345563#19345563
         * @param s String The name that the event should use
         * @param args Object an optional object that the event will use
         */
        function generateEvent(s, args) {
            //var evt = document.createEvent("CustomEvent");
            //evt.initCustomEvent(s, false, false, args);
            //return evt;
            return { name: s };
        };

        self.pendingReconnect = false;
        self.idleSince = new Date();

        if (this.idleTreshold) {
            if (typeof document !== 'undefined') {
                document.onkeypress = document.onmousemove = document.onclick = document.onscroll = document.touchstart = function () {
                    self.idleSince = new Date();
                    if (self.pendingReconnect) {
                        self.pendingReconnect = false;
                        self.reconnect();
                    }
                };
            }
        }

        this.reconnect = function () {
            var timeout = self.reconnectInterval * Math.pow(self.reconnectDecay, self.reconnectAttempts);
            timeout = timeout > self.maxReconnectInterval ? self.maxReconnectInterval : timeout;
            if (self.debug) {
                console.debug('WebSocket: will try to reconnect in ' + parseInt(timeout / 1000) + ' sec, attempt #' + (self.reconnectAttempts + 1));
            }
            setTimeout(function () {
                self.reconnectAttempts++;
                self.open(true);
            }, timeout);
        };

        this.open = function (reconnectAttempt) {
            if (reconnectAttempt) {
                if (this.maxReconnectAttempts && this.reconnectAttempts > this.maxReconnectAttempts) {
                    return;
                }
            } else {
                eventTarget.dispatchEvent(generateEvent('connecting'));
                this.reconnectAttempts = 0;
            }

            var surl = self.url;
            if (Array.isArray(self.url)) {
                surl = self.url[this.reconnectAttempts % self.url.length];
            }

            if (self.debug) {
                console.debug('connecting to', surl);
            }
            ws = new WebSocket(surl);
            ws.binaryType = this.binaryType;

            if (self.debug || ReconnectingWebSocket.debugAll) {
                console.debug('ReconnectingWebSocket', 'attempt-connect', self.url);
            }

            var localWs = ws;
            var timeout = setTimeout(function () {
                if (self.debug || ReconnectingWebSocket.debugAll) {
                    console.debug('ReconnectingWebSocket', 'connection-timeout', self.url);
                }
                timedOut = true;
                localWs.close();
                timedOut = false;
            }, self.timeoutInterval);

            ws.onopen = function (event) {
                clearTimeout(timeout);
                if (self.debug || ReconnectingWebSocket.debugAll) {
                    console.debug('ReconnectingWebSocket**', 'onopen', self.url);
                }
                self.protocol = ws.protocol;
                self.readyState = WebSocket.OPEN;
                self.reconnectAttempts = 0;
                var e = generateEvent('open');
                e.isReconnect = reconnectAttempt;
                reconnectAttempt = false;
                eventTarget.dispatchEvent(e);
            };

            ws.onclose = function (event) {
                if (event.code !== 1000 && self.debug) console.log('WARNING! ws connection', surl, 'closed');
                clearTimeout(timeout);
                ws = null;
                if (forcedClose) {
                    self.readyState = WebSocket.CLOSED;
                    eventTarget.dispatchEvent(generateEvent('close'));
                } else {
                    self.readyState = WebSocket.CONNECTING;
                    var e = generateEvent('connecting');
                    e.code = event.code;
                    e.reason = event.reason;
                    e.wasClean = event.wasClean;
                    eventTarget.dispatchEvent(e);
                    if (!reconnectAttempt && !timedOut) {
                        if (self.debug || ReconnectingWebSocket.debugAll) {
                            console.debug('ReconnectingWebSocket', 'onclose', self.url);
                        }
                        eventTarget.dispatchEvent(generateEvent('close'));
                    }

                    if (!self.idleTreshold || new Date() - self.idleSince < self.idleTreshold) {
                        self.reconnect();
                    } else {
                        if (self.debug) {
                            console.debug('idle - will reconnect later');
                        }
                        self.pendingReconnect = true;
                    }
                }
            };
            ws.onmessage = function (event) {
                if (self.debug || ReconnectingWebSocket.debugAll) {
                    console.debug('ReconnectingWebSocket', 'onmessage', self.url);
                }
                var e = generateEvent('message');
                e.data = event.data;
                eventTarget.dispatchEvent(e);
            };
            ws.onerror = function (event) {
                if (self.debug || ReconnectingWebSocket.debugAll) {
                    console.debug('ReconnectingWebSocket', 'onerror', self.url, event);
                }
                eventTarget.dispatchEvent(generateEvent(event));
            };
        };

        // Whether or not to create a websocket upon instantiation
        if (this.automaticOpen == true) {
            this.open(false);
        }

        /**
         * Transmits data to the server over the WebSocket connection.
         *
         * @param data a text string, ArrayBuffer or Blob to send to the server.
         */
        this.send = function (data) {
            if (ws) {
                if (self.debug || ReconnectingWebSocket.debugAll) {
                    console.debug('ReconnectingWebSocket', 'send', self.url, data);
                }
                return ws.send(data);
            } else {
                throw 'INVALID_STATE_ERR : Pausing to reconnect websocket';
            }
        };

        /**
         * Closes the WebSocket connection or connection attempt, if any.
         * If the connection is already CLOSED, this method does nothing.
         */
        this.close = function (code, reason) {
            // Default CLOSE_NORMAL code
            if (typeof code == 'undefined') {
                code = 1000;
            }
            forcedClose = true;
            if (ws) {
                ws.close(code, reason);
            }
        };

        /**
         * Additional public API method to refresh the connection if still open (close, re-open).
         * For example, if the app suspects bad data / missed heart beats, it can try to refresh.
         */
        this.refresh = function () {
            if (ws) {
                ws.close();
            }
        };
    }

    /**
     * An event listener to be called when the WebSocket connection's readyState changes to OPEN;
     * this indicates that the connection is ready to send and receive data.
     */
    ReconnectingWebSocket.prototype.onopen = function (event) {};
    /** An event listener to be called when the WebSocket connection's readyState changes to CLOSED. */
    ReconnectingWebSocket.prototype.onclose = function (event) {};
    /** An event listener to be called when a connection begins being attempted. */
    ReconnectingWebSocket.prototype.onconnecting = function (event) {};
    /** An event listener to be called when a message is received from the server. */
    ReconnectingWebSocket.prototype.onmessage = function (event) {};
    /** An event listener to be called when an error occurs. */
    ReconnectingWebSocket.prototype.onerror = function (event) {};

    /**
     * Whether all instances of ReconnectingWebSocket should log debug messages.
     * Setting this to true is the equivalent of setting all instances of ReconnectingWebSocket.debug to true.
     */
    ReconnectingWebSocket.debugAll = false;

    return ReconnectingWebSocket;
});
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/steem-rpc/lib/reconnecting-websocket.js","/../node_modules/steem-rpc/lib")
},{"buffer":11,"pBGvAp":74}],90:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

module.exports = Duplex;
var inherits = require('inherits');
var setImmediate = require('process/browser.js').nextTick;
var Readable = require('./readable.js');
var Writable = require('./writable.js');

inherits(Duplex, Readable);

Duplex.prototype.write = Writable.prototype.write;
Duplex.prototype.end = Writable.prototype.end;
Duplex.prototype._write = Writable.prototype._write;

function Duplex(options) {
  if (!(this instanceof Duplex))
    return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false)
    this.readable = false;

  if (options && options.writable === false)
    this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false)
    this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended)
    return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  var self = this;
  setImmediate(function () {
    self.end();
  });
}

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/stream-browserify/duplex.js","/../node_modules/stream-browserify")
},{"./readable.js":94,"./writable.js":96,"buffer":11,"inherits":71,"pBGvAp":74,"process/browser.js":92}],91:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('./readable.js');
Stream.Writable = require('./writable.js');
Stream.Duplex = require('./duplex.js');
Stream.Transform = require('./transform.js');
Stream.PassThrough = require('./passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/stream-browserify/index.js","/../node_modules/stream-browserify")
},{"./duplex.js":90,"./passthrough.js":93,"./readable.js":94,"./transform.js":95,"./writable.js":96,"buffer":11,"events":69,"inherits":71,"pBGvAp":74}],92:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/stream-browserify/node_modules/process/browser.js","/../node_modules/stream-browserify/node_modules/process")
},{"buffer":11,"pBGvAp":74}],93:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

module.exports = PassThrough;

var Transform = require('./transform.js');
var inherits = require('inherits');
inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough))
    return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function(chunk, encoding, cb) {
  cb(null, chunk);
};

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/stream-browserify/passthrough.js","/../node_modules/stream-browserify")
},{"./transform.js":95,"buffer":11,"inherits":71,"pBGvAp":74}],94:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Readable;
Readable.ReadableState = ReadableState;

var EE = require('events').EventEmitter;
var Stream = require('./index.js');
var Buffer = require('buffer').Buffer;
var setImmediate = require('process/browser.js').nextTick;
var StringDecoder;

var inherits = require('inherits');
inherits(Readable, Stream);

function ReadableState(options, stream) {
  options = options || {};

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = false;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // In streams that never have any data, and do push(null) right away,
  // the consumer can miss the 'end' event if they do some I/O before
  // consuming the stream.  So, we don't emit('end') until some reading
  // happens.
  this.calledRead = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, becuase any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;


  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder)
      StringDecoder = require('string_decoder').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  if (!(this instanceof Readable))
    return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
  var state = this._readableState;

  if (typeof chunk === 'string' && !state.objectMode) {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null || chunk === undefined) {
    state.reading = false;
    if (!state.ended)
      onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      if (state.decoder && !addToFront && !encoding)
        chunk = state.decoder.write(chunk);

      // update the buffer info.
      state.length += state.objectMode ? 1 : chunk.length;
      if (addToFront) {
        state.buffer.unshift(chunk);
      } else {
        state.reading = false;
        state.buffer.push(chunk);
      }

      if (state.needReadable)
        emitReadable(stream);

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}



// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended &&
         (state.needReadable ||
          state.length < state.highWaterMark ||
          state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
  if (!StringDecoder)
    StringDecoder = require('string_decoder').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
};

// Don't raise the hwm > 128MB
var MAX_HWM = 0x800000;
function roundUpToNextPowerOf2(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended)
    return 0;

  if (state.objectMode)
    return n === 0 ? 0 : 1;

  if (isNaN(n) || n === null) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length)
      return state.buffer[0].length;
    else
      return state.length;
  }

  if (n <= 0)
    return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark)
    state.highWaterMark = roundUpToNextPowerOf2(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else
      return state.length;
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
  var state = this._readableState;
  state.calledRead = true;
  var nOrig = n;

  if (typeof n !== 'number' || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;

  // if we currently have less than the highWaterMark, then also read some
  if (state.length - n <= state.highWaterMark)
    doRead = true;

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading)
    doRead = false;

  if (doRead) {
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read called its callback synchronously, then `reading`
  // will be false, and we need to re-evaluate how much data we
  // can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we happened to read() exactly the remaining amount in the
  // buffer, and the EOF has been seen at this point, then make sure
  // that we emit 'end' on the very next tick.
  if (state.ended && !state.endEmitted && state.length === 0)
    endReadable(this);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!Buffer.isBuffer(chunk) &&
      'string' !== typeof chunk &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode &&
      !er) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}


function onEofChunk(stream, state) {
  if (state.decoder && !state.ended) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // if we've ended and we have some data left, then emit
  // 'readable' now to make sure it gets picked up.
  if (state.length > 0)
    emitReadable(stream);
  else
    endReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (state.emittedReadable)
    return;

  state.emittedReadable = true;
  if (state.sync)
    setImmediate(function() {
      emitReadable_(stream);
    });
  else
    emitReadable_(stream);
}

function emitReadable_(stream) {
  stream.emit('readable');
}


// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    setImmediate(function() {
      maybeReadMore_(stream, state);
    });
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended &&
         state.length < state.highWaterMark) {
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
    else
      len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function(dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;

  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted)
    setImmediate(endFn);
  else
    src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    if (readable !== src) return;
    cleanup();
  }

  function onend() {
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  function cleanup() {
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (!dest._writableState || dest._writableState.needDrain)
      ondrain();
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  // check for listeners before emit removes one-time listeners.
  var errListeners = EE.listenerCount(dest, 'error');
  function onerror(er) {
    unpipe();
    if (errListeners === 0 && EE.listenerCount(dest, 'error') === 0)
      dest.emit('error', er);
  }
  dest.once('error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    // the handler that waits for readable events after all
    // the data gets sucked out in flow.
    // This would be easier to follow with a .once() handler
    // in flow(), but that is too slow.
    this.on('readable', pipeOnReadable);

    state.flowing = true;
    setImmediate(function() {
      flow(src);
    });
  }

  return dest;
};

function pipeOnDrain(src) {
  return function() {
    var dest = this;
    var state = src._readableState;
    state.awaitDrain--;
    if (state.awaitDrain === 0)
      flow(src);
  };
}

function flow(src) {
  var state = src._readableState;
  var chunk;
  state.awaitDrain = 0;

  function write(dest, i, list) {
    var written = dest.write(chunk);
    if (false === written) {
      state.awaitDrain++;
    }
  }

  while (state.pipesCount && null !== (chunk = src.read())) {

    if (state.pipesCount === 1)
      write(state.pipes, 0, null);
    else
      forEach(state.pipes, write);

    src.emit('data', chunk);

    // if anyone needs a drain, then we have to wait for that.
    if (state.awaitDrain > 0)
      return;
  }

  // if every destination was unpiped, either before entering this
  // function, or in the while loop, then stop flowing.
  //
  // NB: This is a pretty rare edge case.
  if (state.pipesCount === 0) {
    state.flowing = false;

    // if there were data event listeners added, then switch to old mode.
    if (EE.listenerCount(src, 'data') > 0)
      emitDataEvents(src);
    return;
  }

  // at this point, no one needed a drain, so we just ran out of data
  // on the next readable event, start it over again.
  state.ranOut = true;
}

function pipeOnReadable() {
  if (this._readableState.ranOut) {
    this._readableState.ranOut = false;
    flow(this);
  }
}


Readable.prototype.unpipe = function(dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0)
    return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes)
      return this;

    if (!dest)
      dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    this.removeListener('readable', pipeOnReadable);
    state.flowing = false;
    if (dest)
      dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    this.removeListener('readable', pipeOnReadable);
    state.flowing = false;

    for (var i = 0; i < len; i++)
      dests[i].emit('unpipe', this);
    return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1)
    return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1)
    state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data' && !this._readableState.flowing)
    emitDataEvents(this);

  if (ev === 'readable' && this.readable) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        this.read(0);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
  emitDataEvents(this);
  this.read(0);
  this.emit('resume');
};

Readable.prototype.pause = function() {
  emitDataEvents(this, true);
  this.emit('pause');
};

function emitDataEvents(stream, startPaused) {
  var state = stream._readableState;

  if (state.flowing) {
    // https://github.com/isaacs/readable-stream/issues/16
    throw new Error('Cannot switch to old mode now.');
  }

  var paused = startPaused || false;
  var readable = false;

  // convert to an old-style stream.
  stream.readable = true;
  stream.pipe = Stream.prototype.pipe;
  stream.on = stream.addListener = Stream.prototype.on;

  stream.on('readable', function() {
    readable = true;

    var c;
    while (!paused && (null !== (c = stream.read())))
      stream.emit('data', c);

    if (c === null) {
      readable = false;
      stream._readableState.needReadable = true;
    }
  });

  stream.pause = function() {
    paused = true;
    this.emit('pause');
  };

  stream.resume = function() {
    paused = false;
    if (readable)
      setImmediate(function() {
        stream.emit('readable');
      });
    else
      this.read(0);
    this.emit('resume');
  };

  // now make it start, just in case it hadn't already.
  stream.emit('readable');
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function() {
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length)
        self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function(chunk) {
    if (state.decoder)
      chunk = state.decoder.write(chunk);
    if (!chunk || !state.objectMode && !chunk.length)
      return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (typeof stream[i] === 'function' &&
        typeof this[i] === 'undefined') {
      this[i] = function(method) { return function() {
        return stream[method].apply(stream, arguments);
      }}(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function(ev) {
    stream.on(ev, function (x) {
      return self.emit.apply(self, ev, x);
    });
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function(n) {
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};



// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0)
    return null;

  if (length === 0)
    ret = null;
  else if (objectMode)
    ret = list.shift();
  else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode)
      ret = list.join('');
    else
      ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode)
        ret = '';
      else
        ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode)
          ret += buf.slice(0, cpy);
        else
          buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length)
          list[0] = buf.slice(cpy);
        else
          list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0)
    throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted && state.calledRead) {
    state.ended = true;
    setImmediate(function() {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    });
  }
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf (xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/stream-browserify/readable.js","/../node_modules/stream-browserify")
},{"./index.js":91,"buffer":11,"events":69,"inherits":71,"pBGvAp":74,"process/browser.js":92,"string_decoder":9}],95:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

module.exports = Transform;

var Duplex = require('./duplex.js');
var inherits = require('inherits');
inherits(Transform, Duplex);


function TransformState(options, stream) {
  this.afterTransform = function(er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb)
    return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined)
    stream.push(data);

  if (cb)
    cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}


function Transform(options) {
  if (!(this instanceof Transform))
    return new Transform(options);

  Duplex.call(this, options);

  var ts = this._transformState = new TransformState(options, this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  this.once('finish', function() {
    if ('function' === typeof this._flush)
      this._flush(function(er) {
        done(stream, er);
      });
    else
      done(stream);
  });
}

Transform.prototype.push = function(chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function(chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform ||
        rs.needReadable ||
        rs.length < rs.highWaterMark)
      this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
  var ts = this._transformState;

  if (ts.writechunk && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};


function done(stream, er) {
  if (er)
    return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var rs = stream._readableState;
  var ts = stream._transformState;

  if (ws.length)
    throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming)
    throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/stream-browserify/transform.js","/../node_modules/stream-browserify")
},{"./duplex.js":90,"buffer":11,"inherits":71,"pBGvAp":74}],96:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, cb), and it'll handle all
// the drain event emission and buffering.

module.exports = Writable;
Writable.WritableState = WritableState;

var isUint8Array = typeof Uint8Array !== 'undefined'
  ? function (x) { return x instanceof Uint8Array }
  : function (x) {
    return x && x.constructor && x.constructor.name === 'Uint8Array'
  }
;
var isArrayBuffer = typeof ArrayBuffer !== 'undefined'
  ? function (x) { return x instanceof ArrayBuffer }
  : function (x) {
    return x && x.constructor && x.constructor.name === 'ArrayBuffer'
  }
;

var inherits = require('inherits');
var Stream = require('./index.js');
var setImmediate = require('process/browser.js').nextTick;
var Buffer = require('buffer').Buffer;

inherits(Writable, Stream);

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
}

function WritableState(options, stream) {
  options = options || {};

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, becuase any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function(er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.buffer = [];
}

function Writable(options) {
  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Stream.Duplex))
    return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};


function writeAfterEnd(stream, state, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  setImmediate(function() {
    cb(er);
  });
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  if (!Buffer.isBuffer(chunk) &&
      'string' !== typeof chunk &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    setImmediate(function() {
      cb(er);
    });
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function(chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (!Buffer.isBuffer(chunk) && isUint8Array(chunk))
    chunk = new Buffer(chunk);
  if (isArrayBuffer(chunk) && typeof Uint8Array !== 'undefined')
    chunk = new Buffer(new Uint8Array(chunk));
  
  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  else if (!encoding)
    encoding = state.defaultEncoding;

  if (typeof cb !== 'function')
    cb = function() {};

  if (state.ended)
    writeAfterEnd(this, state, cb);
  else if (validChunk(this, state, chunk, cb))
    ret = writeOrBuffer(this, state, chunk, encoding, cb);

  return ret;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode &&
      state.decodeStrings !== false &&
      typeof chunk === 'string') {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  state.needDrain = !ret;

  if (state.writing)
    state.buffer.push(new WriteReq(chunk, encoding, cb));
  else
    doWrite(stream, state, len, chunk, encoding, cb);

  return ret;
}

function doWrite(stream, state, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  if (sync)
    setImmediate(function() {
      cb(er);
    });
  else
    cb(er);

  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er)
    onwriteError(stream, state, sync, er, cb);
  else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(stream, state);

    if (!finished && !state.bufferProcessing && state.buffer.length)
      clearBuffer(stream, state);

    if (sync) {
      setImmediate(function() {
        afterWrite(stream, state, finished, cb);
      });
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished)
    onwriteDrain(stream, state);
  cb();
  if (finished)
    finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}


// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;

  for (var c = 0; c < state.buffer.length; c++) {
    var entry = state.buffer[c];
    var chunk = entry.chunk;
    var encoding = entry.encoding;
    var cb = entry.callback;
    var len = state.objectMode ? 1 : chunk.length;

    doWrite(stream, state, len, chunk, encoding, cb);

    // if we didn't call the onwrite immediately, then
    // it means that we need to wait until it does.
    // also, that means that the chunk and cb are currently
    // being processed, so move the buffer counter past them.
    if (state.writing) {
      c++;
      break;
    }
  }

  state.bufferProcessing = false;
  if (c < state.buffer.length)
    state.buffer = state.buffer.slice(c);
  else
    state.buffer.length = 0;
}

Writable.prototype._write = function(chunk, encoding, cb) {
  cb(new Error('not implemented'));
};

Writable.prototype.end = function(chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (typeof chunk !== 'undefined' && chunk !== null)
    this.write(chunk, encoding);

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished)
    endWritable(this, state, cb);
};


function needFinish(stream, state) {
  return (state.ending &&
          state.length === 0 &&
          !state.finished &&
          !state.writing);
}

function finishMaybe(stream, state) {
  var need = needFinish(stream, state);
  if (need) {
    state.finished = true;
    stream.emit('finish');
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished)
      setImmediate(cb);
    else
      stream.once('finish', cb);
  }
  state.ended = true;
}

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/stream-browserify/writable.js","/../node_modules/stream-browserify")
},{"./index.js":91,"buffer":11,"inherits":71,"pBGvAp":74,"process/browser.js":92}],97:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/util/node_modules/inherits/inherits_browser.js","/../node_modules/util/node_modules/inherits")
},{"buffer":11,"pBGvAp":74}],98:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/util/support/isBufferBrowser.js","/../node_modules/util/support")
},{"buffer":11,"pBGvAp":74}],99:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/util/util.js","/../node_modules/util")
},{"./support/isBuffer":98,"buffer":11,"inherits":97,"pBGvAp":74}],100:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
require('./posts')
//require('steemjs-lib')

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/fake_ebce88b2.js","/")
},{"./posts":103,"buffer":11,"pBGvAp":74}],101:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
module.exports = function (app) {
	app.constant('API_END_POINT','http://api.esteem.ws:8080');
}

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/posts/config.js","/posts")
},{"buffer":11,"pBGvAp":74}],102:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
module.exports = function (app) {
//angular.module('steem.controllers', [])

app.controller('AppCtrl', function($scope, $ionicModal, $timeout, $rootScope, $state, $ionicHistory, $cordovaSocialSharing, ImageUploadService, $cordovaCamera, $ionicSideMenuDelegate, $ionicPlatform, $filter, APIs, $window, $ionicPopover) {

  $scope.loginData = {};

  $ionicModal.fromTemplateUrl('templates/login.html', {
    scope: $scope  }).then(function(modal) {
    $scope.loginModal = modal;
  });

  //window.ejs.ChainConfig.setChainId("782a3039b478c839e4cb0c941ff4eaeb7df40bdd68bd441afd444b9da763de12");
  //console.log(window.ejs);

  //var {key} = require($rootScope.$storage.chain+"js-lib");
  /*console.log(window.steemJS);
  let seed = "THIS IS A TERRIBLE BRAINKEY SEED WORD SEQUENCE";
  let pkey = window[$rootScope.$storage.chain+"JS"].PrivateKey.fromSeed((window[$rootScope.$storage.chain+"JS"].key).normalize_brainKey(seed) );

  console.log("\nPrivate key:", pkey.toWif());
  console.log("Public key :", pkey.toPublicKey().toString(), "\n");

  console.log((new window[$rootScope.$storage.chain+"JS"].Login()).generateKeys('mgood',pkey.toWif()));
  */
  $ionicPopover.fromTemplateUrl('templates/popover.html', {
    scope: $scope,
  }).then(function(popover) {
    $scope.menupopover = popover;
  });

  $scope.openMenuPopover = function($event) {
    $scope.menupopover.show($event);
  };
  $scope.closeMenuPopover = function() {
    $scope.menupopover.hide();
  };

  $rootScope.$on('close:popover', function(){
    console.log('close:popover');
    $scope.menupopover.hide();

    $ionicHistory.nextViewOptions({
      disableBack: true
    });
    //$scope.closeMenuPopover();
    //$scope.fetchPosts();
  });

  $scope.$on('$destroy', function() {
    $scope.menupopover.remove();
  });

  $scope.changeUsername = function(){
    $scope.loginData.username = angular.lowercase($scope.loginData.username);
    if (!$scope.$$phase) {
      $scope.$apply();
    }
  }
  $scope.open = function(item) {
    item.json_metadata = angular.fromJson(item.json_metadata);
    $rootScope.$storage.sitem = item;
    console.log(item);

    //$state.go('app.single');*/
    $state.go('app.post', {category: item.category, author: item.author, permlink: item.permlink});
  };
  $scope.advancedChange = function() {
    $rootScope.log(angular.toJson($scope.loginData.advanced));
    if ($scope.loginData.advanced) {
      $scope.loginData.password = null;
    }
  }
  $scope.closeLogin = function() {
    $scope.loginModal.hide();
  };
  
  $scope.openSignUP = function() {
    $scope.chainurl = $rootScope.$storage.chain=='steem'?'https://steemit.com/create_account':'https://golos.io/create_account';
    window.open($scope.chainurl, '_blank', 'location=yes');
    return false;  
  }
  $scope.openLogin = function() {
    if ($rootScope.$storage.language == 'ru-RU') {
      $scope.loginData.chain = "golos";
    } else {
      $scope.loginData.chain = "steem";
    }
    setTimeout(function() {
      $scope.loginModal.show();
    }, 1);
  };
  $scope.goProfile = function() {
    $state.go("app.profile", {username:$rootScope.$storage.user.username});
    //$ionicSideMenuDelegate.toggleLeft();
  }
  $scope.share = function() {
    var host = "";
    if ($rootScope.$storage.chain == 'steem') {
      host = "https://steemit.com/";
    } else {
      host = "https://golos.io/";
    }
    var link = host+$rootScope.$storage.sitem.category+"/@"+$rootScope.$storage.sitem.author+"/"+$rootScope.$storage.sitem.permlink;
    var message = "Hey! Checkout blog post on Steem "+link;
    var subject = "Via eSteem Mobile";
    var file = null;
    $cordovaSocialSharing.share(message, subject, file, link) // Share via native share sheet
    .then(function(result) {
      // Success!
      $rootScope.log("shared");
    }, function(err) {
      // An error occured. Show a message to the user
      $rootScope.log("not shared");
    });
  }


  $scope.loginChain = function(x){
    console.log(x);
    $scope.loginData.chain = x;
  }
  
  $scope.doLogin = function() {
    $rootScope.log('Doing login');
    if ($scope.loginData.password || $scope.loginData.privatePostingKey) {
      $rootScope.$broadcast('show:loading');
      $scope.loginData.username = $scope.loginData.username.trim();
      console.log('doLogin'+$scope.loginData.username+$scope.loginData.password);
      window.Api.close();
      window.Api = null;
      window.steemRPC.Client.close();
      
      var socketUrl = $rootScope.$storage["socket"+$scope.loginData.chain];
      console.log(socketUrl);

      window.Api = window.steemRPC.Client.get({url:socketUrl}, true);
      setTimeout(function() {
        window.Api.initPromise.then(function(response) {
          window.Api.database_api().exec("get_accounts", [[$scope.loginData.username]]).then(function(dd){
            dd = dd[0];
            console.log(dd);
            $scope.loginData.id = dd.id;
            $scope.loginData.owner = dd.owner;
            $scope.loginData.active = dd.active;
            $scope.loginData.reputation = dd.reputation;
            $scope.loginData.posting = dd.posting;
            $scope.loginData.memo_key = dd.memo_key;
            $scope.loginData.post_count = dd.post_count;
            $scope.loginData.voting_power = dd.voting_power;
            $scope.loginData.witness_votes = dd.witness_votes;
            $scope.login = new window.ejs.Login();
            $scope.login.setRoles(["posting"]);
            
            var loginSuccess = $scope.login.checkKeys({
                accountName: $scope.loginData.username,
                password: $scope.loginData.password || null,
                auths: {
                    posting: dd.posting.key_auths
                },
                privateKey: $scope.loginData.privatePostingKey || null
              }
            );

            if (!loginSuccess) {
                $rootScope.$broadcast('hide:loading');
                $rootScope.showMessage($filter('translate')('ERROR'), $filter('translate')('PASSWORD_INCORRECT'));
            } else {
              $rootScope.$storage.user = $scope.loginData;
              var found = false;
              if ($rootScope.$storage.users.length>0){
                angular.forEach($rootScope.$storage.users, function(v,k){
                  if (v.username == $rootScope.$storage.user.username && v.chain == $rootScope.$storage.user.chain){
                    found = true;
                  }
                });
              }
              if (found) {
              } else {
                $rootScope.$storage.users.push($rootScope.$storage.user);  
              }
              $rootScope.$storage.mylogin = $scope.login;
              APIs.updateSubscription($rootScope.$storage.deviceid, $rootScope.$storage.user.username, {device: ionic.Platform.platform(), timestamp: $filter('date')(new Date(), 'medium'), appversion: $rootScope.$storage.appversion}).then(function(res){
                $rootScope.$broadcast('hide:loading');
                //$state.go($state.current, {}, {reload: true});
                //$state.go('app.posts', {}, { reload: true });
                //$scope.closeLogin();
                $scope.loginModal.hide();
                //$ionicHistory.clearCache();
                //$ionicHistory.clearHistory();
                $rootScope.$broadcast('refreshLocalUserData');
                  
                //window.Api.close();
                //var steemRPC = require("steem-rpc");
                //window.Api = steemRPC.Client.get({url:localStorage.socketUrl}, true);

                //window.Api = steemRPC.Client.get({url:localStorage.socketUrl}, true);
                $rootScope.$storage.chain = $scope.loginData.chain;

                $rootScope.$broadcast('changedChain');
                $rootScope.$broadcast('changedCurrency', {currency: $rootScope.$storage.currency, enforce: true});

                setTimeout(function() {
                  //$window.location.reload(true);
                  $state.go('app.posts',{renew:true},{reload: true});
                  $rootScope.$broadcast('fetchPosts');
                }, 1000);

              });
            }
            /*if(!$scope.$$phase) {
              $scope.$apply();
            }*/
          });
        });
      }, 1000);
      
    } else {
      $scope.loginModal.hide();
      $rootScope.showAlert($filter('translate')('WARNING'), $filter('translate')('LOGIN_FAIL'));
    }
  };

  $scope.selectAccount = function(user) {
    $rootScope.$storage.user = user;
    
    if ($rootScope.$storage.chain !== user.chain) {
      $rootScope.$storage.chain = user.chain;  
      $rootScope.$broadcast('changedChain');
    }
    setTimeout(function() {
      $rootScope.$broadcast('changedCurrency', {currency: $rootScope.$storage.currency, enforce: true});
    
      $rootScope.$broadcast('refreshLocalUserData');  
    }, 100);
    
    
    setTimeout(function() {
      //$window.location.reload(true);
      if (!$rootScope.$$phase) {
        $rootScope.$apply();
      }
      $state.go('app.posts',{renew:true},{reload: true});
    }, 1000);
  }

  $rootScope.$on('refreshLocalUserData', function() {
    $rootScope.log('refreshLocalUserData');
    if ($rootScope.$storage.user && $rootScope.$storage.user.username && $rootScope.$storage.user.chain == $rootScope.$storage.chain) {
      window.Api.initPromise.then(function(response) {
        if (typeof window.Api.database_api === "function") {
          window.Api.database_api().exec("get_accounts", [ [ $rootScope.$storage.user.username ] ]).then(function(dd){
            dd = dd[0];
            if (dd && dd.json_metadata) {
              dd.json_metadata = angular.fromJson(dd.json_metadata);
            }
            angular.merge($rootScope.$storage.user, dd);

            $scope.mcss = ($rootScope.$storage.user.json_metadata && $rootScope.$storage.user.json_metadata.profile && $rootScope.$storage.user.json_metadata.profile.cover_image) ? {'background': 'url('+$rootScope.$storage.user.json_metadata.profile.cover_image+')', 'background-size': 'cover', 'background-position':'fixed'} : null;
            
            if (!$scope.$$phase) {
              $scope.$apply();
            }
            if (!$rootScope.$$phase) {
              $rootScope.$apply();
            }
          });
        }
      });
    }
  })

  $scope.openPostModal = function() {
    $state.go('app.posts');
    $rootScope.$broadcast('openPostModal');
  }

  $scope.changeView = function(view) {
    $rootScope.$storage.view = view;
    $rootScope.$broadcast('changeView');
  }
  $scope.changeLight = function(light) {
    $rootScope.$storage.theme = light;
    $rootScope.$broadcast('changeLight');
  }

  $scope.$on("$ionicView.enter", function(){
    $rootScope.$broadcast('refreshLocalUserData');
    $scope.theme = $rootScope.$storage.theme;
  });

  // get app version
  $ionicPlatform.ready(function(){
    if (window.cordova) {
      cordova.getAppVersion.getVersionNumber(function (version) {
        $rootScope.$storage.appversion = version;
      });
    } else {
      $rootScope.$storage.appversion = 'debug';
    }
  });

  $scope.logout = function() {
    if ($rootScope.$storage.users.length>1) {
      angular.forEach($rootScope.$storage.users, function(v,k){
        if (v.chain == $rootScope.$storage.user.chain && v.username == $rootScope.$storage.user.username) {
          $rootScope.$storage.users.splice(k,1);
        }
      });
      $rootScope.$storage.user = $rootScope.$storage.users[0];
    } else {
      $rootScope.$storage.user = undefined;
      $rootScope.$storage.user = null;
      $rootScope.$storage.mylogin = undefined;
      $rootScope.$storage.mylogin = null;
    }
    //make sure user credentials cleared.
    if ($rootScope.$storage.deviceid) {
      APIs.deleteSubscription($rootScope.$storage.deviceid).then(function(res){
        $ionicSideMenuDelegate.toggleLeft();
        //$window.location.reload(true);
        $state.go('app.posts',{renew:true},{reload: true});
      });
    } else {
      $ionicSideMenuDelegate.toggleLeft();
      //$window.location.reload(true);
      $state.go('app.posts',{renew:true},{reload: true});
    }
    $rootScope.$storage.filter = undefined;
    $rootScope.$storage.tag = undefined;

    $ionicHistory.clearCache();
    $ionicHistory.clearHistory();
  };
  $scope.data = {};
  $ionicModal.fromTemplateUrl('templates/search.html', {
    scope: $scope,
    animation: 'slide-in-down'
  }).then(function(modal) {
    $scope.smodal = modal;
  });

  // Triggered in the login modal to close it
  $scope.closeSmodal = function() {
    $scope.smodal.hide();
    if (!$scope.$$phase) {
      $scope.$apply();
    }
  };

  // Open the login modal
  $scope.openSmodal = function() {
    //if(!$scope.smodal) return;
    $rootScope.$broadcast('close:popover');
    setTimeout(function() {
      $scope.data.type="tag";
      $scope.data.searchResult = [];
      $scope.smodal.show();
    }, 5);
  };
  $scope.clearSearch = function() {
    if ($rootScope.$storage.tag) {
      $rootScope.$storage.tag = undefined;
      $rootScope.$storage.taglimits = undefined;
      $rootScope.$broadcast('close:popover');
      $rootScope.$broadcast('fetchPosts');
    }
  };
  $scope.showMeExtra = function() {
    if ($scope.showExtra) {
      $scope.showExtra = false;
    } else {
      $scope.showExtra = true;
    }
  }
  $scope.search = function() {
    $rootScope.log('Doing search '+$scope.data.search);
    $scope.data.search = angular.lowercase($scope.data.search);
    setTimeout(function() {
      if ($scope.data.search.length > 1) {
        if ($scope.data.type == "tag"){
          window.Api.initPromise.then(function(response) {
            window.Api.database_api().exec("get_trending_tags", [$scope.data.search, 15]).then(function(result){
              var ee = [];
              //console.log(result);
              /*if (result){
                var ll = result.length;
                for (var i = ll - 1; i >= 0; i--) {
                  if (result[i].name.indexOf($scope.data.search) > -1){
                    ee.push(result[i]);
                  }
                }
                $scope.data.searchResult = ee;
              }*/
              $scope.data.searchResult = result;

              if (!$scope.$$phase) {
                $scope.$apply();
              }
            });
          });
        }
        if ($scope.data.type == "user"){
          var ee = [];
          window.Api.initPromise.then(function(response) {
            window.Api.database_api().exec("lookup_accounts", [$scope.data.search, 15]).then(function(result){
              if (result){
                $scope.data.searchResult = result;
              }

                if (!$scope.$$phase) {
                  $scope.$apply();
                }
            });
          });
        }

      }
    }, 5);

  };
  $scope.typechange = function() {
    $scope.data.searchResult = undefined;
    if (!$scope.$$phase) {
      $scope.$apply();
    }
    $rootScope.log("changing search type");
  }
  $scope.openTag = function(xx, yy) {
    $rootScope.log("opening tag "+xx);
    $rootScope.$storage.tag = xx;
    $rootScope.$storage.filter = 'created';
    $rootScope.$storage.taglimits = yy;
    if ($scope.smodal.isShown()){
      $scope.closeSmodal();
    }
    $rootScope.$broadcast('close:popover');
    //$rootScope.$broadcast('filter:change');
    $state.go("app.posts", {tags: xx});
  };
  $scope.openUser = function(xy) {
    $rootScope.log("opening user "+xy);
    $scope.closeSmodal();
    $rootScope.$broadcast('close:popover');
    $state.go("app.profile", {username: xy});
  };
  $scope.testfunction = function() {
    window.Api.initPromise.then(function(response) {
      window.Api.database_api().exec("get_account_history", [$rootScope.$storage.user.username, -1, 25]).then(function(response){
        $rootScope.log(angular.toJson(response));
      });
    });
  }

})

app.controller('SendCtrl', function($scope, $rootScope, $state, $ionicPopup, $ionicPopover, $interval, $filter, $q, $timeout, $cordovaBarcodeScanner, $ionicPlatform, $ionicModal, APIs) {

  if ($rootScope.$storage.chain == "steem") {
    $scope.data = {types: [{type: "steem", name:"Steem", id:1},{type: "sbd", name:"Steem Dollar", id:2}, {type: "sp", name:"Steem Power", id:3}], type: "steem", amount: 0.001, etypes: [{type: "approve", name: $filter('translate')("APPROVE"), id:1},{type: "dispute", name: $filter('translate')("DISPUTE"), id:2},{type: "release", name: $filter('translate')("RELEASE"), id:3}]};
  } else {
    $scope.data = {types: [{type: "golos", name: "ГОЛОС", id:1},{type: "gbg", name:"ЗОЛОТОЙ", id:2}, {type: "golosp", name:"СИЛА ГОЛОСА", id:3}], type: "golos", amount: 0.001, etypes: [{type: "approve", name: $filter('translate')("APPROVE"), id:1},{type: "dispute", name: $filter('translate')("DISPUTE"), id:2},{type: "release", name: $filter('translate')("RELEASE"), id:3}]};
  }
  $scope.ttype = 'transfer';
  $scope.changeTransfer = function(type){
    $scope.ttype = type;
    $scope.data.advanced = false;
  }
  $ionicModal.fromTemplateUrl('my-modal.html', {
    scope: $scope,
    animation: 'slide-in-up'
  }).then(function(modal) {
    $scope.modal = modal;
  });
  $scope.openUModal = function() {
    $scope.modal.show();
  };
  $scope.closeUModal = function() {
    $scope.modal.hide();
  };
  // Cleanup the modal when we're done with it!
  $scope.$on('$destroy', function() {
    $scope.modal.remove();
  });
  // Execute action on hide modal
  $scope.$on('modal.hidden', function() {
    // Execute action
  });
  $scope.showLiquid = function (token) {
    return token.type !== $filter('lowercase')($rootScope.$storage.platformpunit);
  }
  $scope.searchUser = function(query) {
    return window.Api.initPromise.then(function(response) {
      return window.Api.database_api().exec("lookup_accounts", [query, 15]).then(function(response){
        return response;
      });
    });
  }
  $scope.selectAgent = function(agent) {
    $scope.data.agent = agent;
    if (!$scope.$$phase) {
      $scope.$apply();
    }
    $scope.closeUModal();
  }
  $scope.getUserAgent = function(query){
    $scope.res = [];
    if (query) {
      window.Api.database_api().exec("lookup_account_names", [[query]]).then(function(response){
        //console.log(response)
        var dd = response[0];
        if (dd && dd.json_metadata) {
          var vv = angular.fromJson(dd.json_metadata);
          if (vv.escrow) {
            console.log('escrow');
            $scope.res.push({name: query, escrow: vv.escrow});
          } else {
            console.log('noescrow');
            $scope.res.push({name: query, escrow: {terms: "-", fees: {"STEEM": 0.001, "SBD": 0.001, "GBG": 0.001, "GOLOS": 0.001}} });
          }
        }
      });
      setTimeout(function() {
        if (query && $scope.res) {
          $scope.data.searchResult = $scope.res;
        } else {
          $scope.data.searchResult = [];  
        }
        if (!$scope.$$phase) {
          $scope.$apply();
        }
      }, 500);   
    }
  }
  $scope.changeUsername = function(typed) {
    $rootScope.log('searching');
    $scope.data.username = angular.lowercase($scope.data.username);
    window.Api.initPromise.then(function(response) {
      window.Api.database_api().exec("lookup_account_names", [[$scope.data.username]]).then(function(response){
        $scope.users = response[0];
        if (!$scope.$$phase) {
          $scope.$apply();
        }
      });
    });
  }
  $scope.qrScan = function() {
    $ionicPlatform.ready(function() {
      $cordovaBarcodeScanner.scan({
          "preferFrontCamera" : false, // iOS and Android
          "showFlipCameraButton" : false, // iOS and Android
          "prompt" : $filter('translate')('QR_TEXT'), // supported on Android only
          "formats" : "QR_CODE" // default: all but PDF_417 and RSS_EXPANDED
          //"orientation" : "landscape" // Android only (portrait|landscape), default unset so it rotates with the device
        }).then(function(barcodeData) {
        //alert(barcodeData);
        if (barcodeData.text.indexOf('?amount')>-1) {
          //steem dollar:blocktrades?amount=12.080

          $scope.data.username = barcodeData.text.split(':')[1].split('?')[0].trim();
          $scope.data.amount = Number(barcodeData.text.split('=')[1]);
          if (barcodeData.text.split(':')[0]==='steem dollar') {
            $scope.data.type = 'sbd';
          }
          if (barcodeData.text.split(':')[0]==='steem') {
            $scope.data.type = 'steem';
          }
          if (barcodeData.text.split(':')[0]==='steem power') {
            $scope.data.type = 'sp';
          }

        } else {
          $scope.data.username = barcodeData.text;
        }
        $scope.changeUsername();
      }, function(error) {
        $rootScope.showMessage('Error',angular.toJson(error));
      });
    });
  };
  $scope.advancedEChange = function(){
    console.log('advancedEChange', $scope.data.advanced);
    $scope.data.etype = "";
    $scope.escrow = {};
    if (!$scope.$$phase){
      $scope.$apply();
    }
  }
  $scope.actionEChange = function(){
    console.log('actionEChange', $scope.data.etype);
    if (!$scope.$$phase){
      $scope.$apply();
    }
  }

  $scope.escrowAction = function(){
    console.log($scope.data.etype);
    if ($scope.data.etype && $scope.escrow.escrow_id) {
      var confirmPopup = $ionicPopup.confirm({
        title: $filter('translate')('CONFIRMATION'),
        template: ""
      });
      confirmPopup.then(function(res) {
        if(res) {
          $rootScope.log('You are sure');
          $rootScope.$broadcast('show:loading');

          var mylogin = new window.ejs.Login();
          mylogin.setRoles(["active"]);
          var loginSuccesss = mylogin.checkKeys({
              accountName: $rootScope.$storage.user.username,
              password: $rootScope.$storage.user.password,
              auths: {
                active: $rootScope.$storage.user.active.key_auths
              },
              privateKey: $rootScope.$storage.user.privateActiveKey || null
            }
          );
          if (loginSuccesss) {
            var tre = new window.ejs.TransactionBuilder();
            if ($scope.data.etype == "approve") {
              tre.add_type_operation("escrow_approve", { 
                from: $scope.escrow.from,
                to: $scope.escrow.to,
                agent: $scope.escrow.agent,
                who: $rootScope.$storage.user.username,
                escrow_id: $scope.escrow.escrow_id,
                approve: true
              });
            } else if ($scope.data.etype == "dispute") {
              tre.add_type_operation("escrow_dispute", { 
                from: $scope.escrow.from,
                to: $scope.escrow.to,
                agent: $scope.escrow.agent,
                who: $rootScope.$storage.user.username,
                escrow_id: $scope.escrow.escrow_id
              });
            } else if ($scope.data.etype == "release") {
              tre.add_type_operation("escrow_release", {
                from: $scope.escrow.from,
                to: $scope.escrow.to,
                agent: $scope.escrow.agent,
                who: $rootScope.$storage.user.username,
                escrow_id: $scope.escrow.escrow_id,
                receiver: $scope.escrow.receiver,
                sbd_amount: $scope.escrow.sbd_amount+" "+angular.uppercase($rootScope.$storage.platformdunit),
                steem_amount: $scope.escrow.steem_amount+" "+angular.uppercase($rootScope.$storage.platformlunit) 
              });
            }
            
            localStorage.error = 0;
            tre.process_transaction(mylogin, null, true);  

            setTimeout(function() {
              if (localStorage.error == 1) {
                $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('BROADCAST_ERROR')+" "+localStorage.errormessage);
              } else {
                $rootScope.showAlert($filter('translate')('INFO'), $filter('translate')('TX_BROADCASTED')).then(function(){
                  $scope.data.type=$rootScope.$storage.chain;
                  $scope.data.amount= 0.001;
                });
              }
            }, 3000);
          }
        }
      });
    } 
  }
  $scope.escrow = {};
  $scope.searchEscrowID = function(id){
    if (id.length>3){
      APIs.searchEscrow(id).then(function(res){
        //console.log(res.data);
        $scope.escrow = res.data[0];
        $scope.escrow.json_meta = angular.fromJson($scope.escrow.json_meta);
      });  
    }
  }
  $scope.transfer = function (type) {
    if ($rootScope.$storage.user) {
      if (!$rootScope.$storage.user.password && !$rootScope.$storage.user.privateActiveKey) {
        $rootScope.showMessage($filter('translate')('ERROR'), $filter('translate')('ACTIVE_KEY_REQUIRED_TEXT'));
      } else {
        if ($scope.data.type === 'sbd' || $scope.data.type === 'gbg') {
          if ($scope.data.amount > Number($scope.balance.sbd_balance.split(" ")[0])) {
            $rootScope.showAlert($filter('translate')('WARNING'), $filter('translate')('BALANCE_TEXT'));
          } else {
            $scope.okbalance = true;
          }
        }
        if ($scope.data.type === 'sp' || $scope.data.type === 'steem' || $scope.data.type === 'golos' || $scope.data.type === 'golosp') {
          if ($scope.data.amount > Number($scope.balance.balance.split(" ")[0])) {
            $rootScope.showAlert($filter('translate')('WARNING'), $filter('translate')('BALANCE_TEXT'));
          } else {
            $scope.okbalance = true;
          }
        }
        if (!$scope.users || $scope.users.name !== $scope.data.username) {
          $rootScope.showAlert($filter('translate')('WARNING'), $filter('translate')('NONEXIST_USER'));
        } else {
          $scope.okuser = true;
        }
        if ($scope.okbalance && $scope.okuser) {
          var confirmPopup = $ionicPopup.confirm({
            title: $filter('translate')('CONFIRMATION'),
            template: $filter('translate')('TRANSFER_TEXT')
          });

          confirmPopup.then(function(res) {
            if(res) {
              $rootScope.log('You are sure');
              $rootScope.$broadcast('show:loading');
              
              if (type == 'transfer') {
                $scope.mylogin = new window.ejs.Login();
                $scope.mylogin.setRoles(["active"]);
                var loginSuccess = $scope.mylogin.checkKeys({
                    accountName: $rootScope.$storage.user.username,
                    password: $rootScope.$storage.user.password || null,
                    auths: {
                      active: $rootScope.$storage.user.active.key_auths
                    },
                    privateKey: $rootScope.$storage.user.privateActiveKey || null
                  }
                );
                if (loginSuccess) {
                  var tr = new window.ejs.TransactionBuilder();
                  //transfer
                  if ($scope.data.type !== 'sp' && $scope.data.type !== 'golosp') {
                    var tt = $filter('number')($scope.data.amount) +" "+angular.uppercase($scope.data.type);
                    tr.add_type_operation("transfer", {
                      from: $rootScope.$storage.user.username,
                      to: $scope.data.username,
                      amount: tt,
                      memo: $scope.data.memo || ""
                    });
                    localStorage.error = 0;
                    tr.process_transaction($scope.mylogin, null, true);
                    setTimeout(function() {
                      if (localStorage.error == 1) {
                        $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('BROADCAST_ERROR')+" "+localStorage.errormessage)
                      } else {
                        $rootScope.showAlert($filter('translate')('INFO'), $filter('translate')('TX_BROADCASTED')).then(function(){
                          $scope.data.type=$rootScope.$storage.chain;
                          $scope.data.amount= 0.001;
                        });
                      }
                    }, 3000);
                  } else {
                    var tt = $filter('number')($scope.data.amount) + " "+$filter('uppercase')($rootScope.$storage.chain);
                    tr.add_type_operation("transfer_to_vesting", {
                      from: $rootScope.$storage.user.username,
                      to: $scope.data.username,
                      amount: tt
                    });
                    localStorage.error = 0;
                    tr.process_transaction($scope.mylogin, null, true);
                    setTimeout(function() {
                      if (localStorage.error == 1) {
                        $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('BROADCAST_ERROR')+" "+localStorage.errormessage)
                      } else {
                        $rootScope.showAlert($filter('translate')('INFO'), $filter('translate')('TX_BROADCASTED')).then(function(){
                          $scope.data.type=$rootScope.$storage.chain;
                          $scope.data.amount= 0.001;
                        });
                      }
                    }, 3000);
                  }
                } else {
                  $rootScope.showMessage($filter('translate')('ERROR'), $filter('translate')('LOGIN_FAIL_A'));
                }
              }

              if (type == 'escrow') {
                console.log($rootScope.$storage.user.active.key_auths, $rootScope.$storage.user.password, $rootScope.$storage.user.privateActiveKey);

                var mylogin = new window.ejs.Login();
                mylogin.setRoles(["active"]);
                var loginSuccesss = mylogin.checkKeys({
                    accountName: $rootScope.$storage.user.username,
                    password: $rootScope.$storage.user.password,
                    auths: {
                      active: $rootScope.$storage.user.active.key_auths
                    },
                    privateKey: $rootScope.$storage.user.privateActiveKey || null
                  }
                );
                if (loginSuccesss) {
                  var tre = new window.ejs.TransactionBuilder();
                  var escrow_id = (new Date().getTime())>>>0;
                  var tt = $filter('number')($scope.data.amount, 3) +" "+angular.uppercase($scope.data.type);
                  var sbd = ($scope.data.type=='sbd'||$scope.data.type=='gbg')?tt:("0.000 "+angular.uppercase($rootScope.$storage.platformdunit));
                  var stem = ($scope.data.type=='steem'||$scope.data.type=='golos')?tt:("0.000 "+angular.uppercase($rootScope.$storage.platformlunit));
                  var fe = $scope.data.agent.escrow.fees[angular.uppercase($scope.data.type)]+" "+angular.uppercase($scope.data.type);
                  var rt = new Date($scope.data.ratification);
                  var et = new Date($scope.data.expiration);
                  var jn = {
                    terms: $scope.data.agent.escrow.terms, 
                    memo: ($scope.data.memo||"")+" "+escrow_id
                  }
                  tre.add_type_operation("escrow_transfer", { 
                    from: $rootScope.$storage.user.username, 
                    to: $scope.data.username, 
                    agent: $scope.data.agent.name, 
                    escrow_id: escrow_id, 
                    sbd_amount: sbd, 
                    steem_amount: stem, 
                    fee: fe, 
                    ratification_deadline: rt, 
                    escrow_expiration: et, 
                    json_meta: angular.toJson(jn) 
                  });

                  localStorage.error = 0;

                  //tre.process_transaction($scope.mylogin, null, true);
                  //mylogin.signTransaction(tre);
                  
                  tre.process_transaction(mylogin, null, true);  
                  
                  
                  /*tre.finalize().then(function() {
                      tre.sign();
                      console.log('signed');
                      tre.broadcast(true);
                      console.log('broadcasted');
                  });*/


                  setTimeout(function() {
                    if (localStorage.error == 1) {
                      $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('BROADCAST_ERROR')+" "+localStorage.errormessage);
                    } else {
                      $rootScope.showAlert($filter('translate')('INFO'), $filter('translate')('TX_BROADCASTED') + " "+$filter('translate')('ESCROW')+" "+$filter('translate')('ID')+": "+escrow_id).then(function(){
                        $scope.data.type=$rootScope.$storage.chain;
                        $scope.data.amount= 0.001;
                      });
                    }
                  }, 3000);
                } else {
                  $rootScope.showMessage($filter('translate')('ERROR'), $filter('translate')('LOGIN_FAIL_A'));
                }
              }
              $rootScope.$broadcast('hide:loading');
             } else {
               $rootScope.log('You are not sure');
             }
          });
        }
      }
    } else {
      $rootScope.$broadcast('hide:loading');
      $rootScope.showAlert($filter('translate')('WARNING'), $filter('translate')('LOGIN_TO_X'));
    }
  };


  $scope.refresh = function() {
    $rootScope.$broadcast('show:loading');
    window.Api.initPromise.then(function(response) {
      window.Api.database_api().exec("get_accounts", [ [ $rootScope.$storage.user.username ] ]).then(function(dd){
        $scope.balance = dd[0];
        console.log($scope.balance);
        $rootScope.$broadcast('hide:loading');
        if (!$scope.$$phase){
          $scope.$apply();
        }
      });
    });
    $rootScope.$broadcast('hide:loading');
  }
  $scope.$on('$ionicView.beforeEnter', function(){
    window.Api.initPromise.then(function(response) {
      window.Api.database_api().exec("get_accounts", [ [ $rootScope.$storage.user.username ] ]).then(function(dd){
        $scope.balance = dd[0];
        if (!$scope.$$phase){
          $scope.$apply();
        }
      });
    });
  });

});
app.controller('PostsCtrl', function($scope, $rootScope, $state, $ionicPopup, $ionicPopover, $interval, $ionicScrollDelegate, $ionicModal, $filter, $stateParams, $ionicSlideBoxDelegate, $ionicActionSheet, $ionicPlatform, $cordovaCamera, ImageUploadService, $filter, $ionicHistory, $timeout, APIs, $translate) {

  var formatToPercentage = function (value) {
    return value + '%';
  };

  $scope.pslider = {
    value: $rootScope.$storage.voteWeight/100,
    options: {
      floor: 1,
      ceil: 100,
      hideLimitLabels: true
      //translate: formatToPercentage,
      //showSelectionBar: true,
    }
  };

  $ionicPopover.fromTemplateUrl('popoverSlider.html', {
      scope: $scope
  }).then(function(popover) {
      $scope.tooltipSlider = popover;
  });
  
  $scope.openSlider = function($event, d) {
    $scope.votingPost = d;
    if (!$scope.$$phase) {
      $scope.$apply();
    }
    $scope.rangeValue = $rootScope.$storage.voteWeight/100;
    $scope.tooltipSlider.show($event);
  };
  $scope.drag = function(v) {
    //console.log(v);
    $rootScope.$storage.voteWeight = v*100;
  }
  $scope.votePostS = function() {
    $scope.tooltipSlider.hide();
    $scope.votePost($scope.votingPost);
  }
  $scope.closeSlider = function() {
    $scope.tooltipSlider.hide();
  };

  $scope.options = {
    loop: false,
    speed: 500,
    /*pagination: false,*/
    showPager: false,
    slidesPerView: 3,
    spaceBetween: 20,
    breakpoints: {
      1024: {
          slidesPerView: 5,
          spaceBetween: 15
      },
      768: {
          slidesPerView: 4,
          spaceBetween: 10
      },
      640: {
          slidesPerView: 3,
          spaceBetween: 5
      },
      320: {
          slidesPerView: 3,
          spaceBetween: 3
      }
    }
  }


  $rootScope.$on('filter:change', function() {
    //$rootScope.$broadcast('show:loading');
    $rootScope.log($rootScope.$storage.filter);
    var type = $rootScope.$storage.filter || "trending";
    var tag = $rootScope.$storage.tag || "";
    console.log(type, $scope.limit, tag);
    $scope.fetchPosts(type, $scope.limit, tag);
  });

  $scope.filterChanged = function(t) {
    var fil = $scope.mymenu[t].custom;
    $rootScope.$storage.filter = fil;
    angular.forEach($scope.mymenu, function(v,k){
      if (v.custom == fil) {
        $rootScope.$storage.filterName = v.text;
      }
    });
    $scope.data = [];
    $scope.error = false;
    $rootScope.$broadcast('filter:change');
  }
  $scope.showFilter = function() {
    var filterSheet = $ionicActionSheet.show({
     buttons: $scope.mymenu,
     titleText: $filter('translate')('SORT_POST_BY'),
     cancelText: $filter('translate')('CANCEL'),
     cancel: function() {
        // add cancel code..
      },
     buttonClicked: function(index) {
        $scope.filterChanged(index);
        return true;
     }
    });
  }

  $ionicPopover.fromTemplateUrl('popoverT.html', {
      scope: $scope
  }).then(function(popover) {
    $scope.tooltip = popover;
  });

  $scope.openTooltip = function($event, d) {
    var tppv = Number(d.total_pending_payout_value.split(' ')[0])*$rootScope.$storage.currencyRate;
    var p = Number(d.promoted.split(' ')[0])*$rootScope.$storage.currencyRate;
    var tpv = Number(d.total_payout_value.split(' ')[0])*$rootScope.$storage.currencyRate;
    var ar = Number(d.total_payout_value.split(' ')[0]-d.curator_payout_value.split(' ')[0])*$rootScope.$storage.currencyRate;
    var crp = Number(d.curator_payout_value.split(' ')[0])*$rootScope.$storage.currencyRate;
    var texth = "<div class='row'><div class='col'><b>"+$filter('translate')('PAYOUT_CYCLE')+"</b></div><div class='col'>"+d.mode.replace('_',' ')+"</div></div><div class='row'><div class='col'><b>"+$filter('translate')('POTENTIAL_PAYOUT')+"</b></div><div class='col'>"+$filter('getCurrencySymbol')($rootScope.$storage.currency)+$filter('number')(tppv, 3)+"</div></div><div class='row'><div class='col'><b>"+$filter('translate')('PROMOTED')+"</b></div><div class='col'>"+$filter('getCurrencySymbol')($rootScope.$storage.currency)+$filter('number')(p,3)+"</div></div><div class='row'><div class='col'><b>"+$filter('translate')('PAST_PAYOUT')+"</b></div><div class='col'>"+$filter('getCurrencySymbol')($rootScope.$storage.currency)+$filter('number')(tpv,3)+"</div></div><div class='row'><div class='col'><b>"+$filter('translate')('AUTHOR_PAYOUT')+"</b></div><div class='col'>"+$filter('getCurrencySymbol')($rootScope.$storage.currency)+$filter('number')(ar,3)+"</div></div><div class='row'><div class='col'><b>"+$filter('translate')('CURATION_PAYOUT')+"</b></div><div class='col'>"+$filter('getCurrencySymbol')($rootScope.$storage.currency)+$filter('number')(crp,3)+"</div></div><div class='row'><div class='col'><b>"+$filter('translate')('PAYOUT')+"</b></div><div class='col'>"+$filter('timeago')(d.cashout_time, true)+"</div></div>";
    $scope.tooltipText = texth;
    if (!$scope.$$phase) {
      $scope.$apply();
    }
    $scope.tooltip.show($event);
  };

  $scope.closeTooltip = function() {
      $scope.tooltip.hide();
  };

   //Cleanup the popover when we're done with it!
   $scope.$on('$destroy', function() {
      $scope.tooltip.remove();
   });

   // Execute action on hide popover
   $scope.$on('popover.hidden', function() {
      // Execute action
      $scope.tooltipText = undefined;
   });

   // Execute action on remove popover
   $scope.$on('popover.removed', function() {
      // Execute action
   });

  $ionicModal.fromTemplateUrl('templates/story.html', { scope: $scope  }).then(function(modal) {
      $scope.modalp = modal;
  });
  $scope.lastFocused;

  $rootScope.$on('openPostModal', function() {

    $rootScope.$broadcast('close:popover');

    $scope.spost = $rootScope.$storage.spost || $scope.spost;

    

    $timeout(function(){
      if (!$scope.spost.operation_type) {
        $scope.spost.operation_type = 'default';
      }
      $scope.tagsChange();

      $scope.modalp.show();
      /*angular.element("textarea").focus(function() {
        $scope.lastFocused = document.activeElement;
        //console.log(document);
      });*/
    }, 10);
    //$scope.modalp.show();
  });

  $rootScope.$on('closePostModal', function() {
    $scope.modalp.hide();
  });

  $scope.closePostModal = function() {
    //$scope.$broadcast('close:popover');
    $scope.modalp.hide();
  };


  $scope.cfocus = function(){
    $scope.lastFocused = document.activeElement;
  }
  //http://stackoverflow.com/questions/1064089/inserting-a-text-where-cursor-is-using-javascript-jquery
  $scope.insertText = function(text) {
    var input = $scope.lastFocused;
    //console.log(input);
    if (input == undefined) { return; }
    var scrollPos = input.scrollTop;
    var pos = 0;
    var browser = ((input.selectionStart || input.selectionStart == "0") ?
                   "ff" : (document.selection ? "ie" : false ) );
    if (browser == "ie") {
      input.focus();
      var range = document.selection.createRange();
      range.moveStart ("character", -input.value.length);
      pos = range.text.length;
    }
    else if (browser == "ff") { pos = input.selectionStart };

    var front = (input.value).substring(0, pos);
    var back = (input.value).substring(pos, input.value.length);
    input.value = front+text+back;
    pos = pos + text.length;
    if (browser == "ie") {
      input.focus();
      var range = document.selection.createRange();
      range.moveStart ("character", -input.value.length);
      range.moveStart ("character", pos);
      range.moveEnd ("character", 0);
      range.select();
    }
    else if (browser == "ff") {
      input.selectionStart = pos;
      input.selectionEnd = pos;
      input.focus();
    }
    input.scrollTop = scrollPos;
    //console.log(angular.element(input).val());
    angular.element(input).trigger('input');
  }


  $scope.showImg = function() {
   var hideSheet = $ionicActionSheet.show({
     buttons: [
       { text: $filter('translate')('CAPTURE_PICTURE') },
       { text: $filter('translate')('SELECT_PICTURE') },
       { text: $filter('translate')('SET_CUSTOM_URL') },
       { text: $filter('translate')('GALLERY') }
     ],
     titleText: $filter('translate')('INSERT_PICTURE'),
     cancelText: $filter('translate')('CANCEL'),
     cancel: function() {
        // add cancel code..
      },
     buttonClicked: function(index) {
        $scope.insertImage(index);
        return true;
     }
   });
  };
  $scope.insertImage = function(type) {
    var options = {};

    if (type == 0 || type == 1) {
      options = {
        quality: 50,
        destinationType: Camera.DestinationType.FILE_URI,
        sourceType: (type===0)?Camera.PictureSourceType.CAMERA:Camera.PictureSourceType.PHOTOLIBRARY,
        allowEdit: (type===0)?true:false,
        encodingType: Camera.EncodingType.JPEG,
        popoverOptions: CameraPopoverOptions,
        saveToPhotoAlbum: false
        //correctOrientation:true
      };
      $cordovaCamera.getPicture(options).then(function(imageData) {
        setTimeout(function() {
          ImageUploadService.uploadImage(imageData).then(function(result) {
            //var url = result.secure_url || '';
            var url = result.imageUrl || '';
            var final = " ![image](" + url + ")";
            /*if ($scope.spost.body) {
              $scope.spost.body += final;
            } else {
              $scope.spost.body = final;
            }*/
            $scope.insertText(final);
            if (!ionic.Platform.isAndroid() || !ionic.Platform.isWindowsPhone()) {
              $cordovaCamera.cleanup();
            }
          },
          function(err) {
            $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('UPLOAD_ERROR'));
            if (!ionic.Platform.isAndroid() || !ionic.Platform.isWindowsPhone()) {
              $cordovaCamera.cleanup();
            }
          });
        }, 10);
      }, function(err) {
        $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('CAMERA_CANCELLED'));
      });
    } else if (type == 2){
      $ionicPopup.prompt({
        title: $filter('translate')('SET_URL'),
        template: $filter('translate')('DIRECT_LINK_PICTURE'),
        inputType: 'text',
        inputPlaceholder: 'http://example.com/image.jpg'
      }).then(function(res) {
        $rootScope.log('Your url is' + res);
        if (res) {
          var url = res.trim();
          var final = " ![image](" + url + ")";
          /*if ($scope.spost.body) {
            $scope.spost.body += final;
          } else {
            $scope.spost.body = final;
          }*/
          $scope.insertText(final);
        }
      });
    } else {
      $scope.gallery = [];
      APIs.fetchImages($rootScope.$storage.user.username).then(function(res){
        var imgs = res.data;
        if (imgs.length>0){
          $scope.showgallery = true;
          $scope.gallery.images = imgs;
        } else {
          $scope.showgallery = false;
          $rootScope.showMessage($filter('translate')('SUCCESS'), $filter('translate')('NO_IMAGE'));
          console.log('no images available')
        }
      });
    }
  };
  $scope.closeGallery = function(){
    $scope.showgallery = false;
  }
  $scope.manageGallery = function(){
    $rootScope.$broadcast('closePostModal');
    $state.go('app.images');
  }
  function slug(text) {
    return getSlug(text, {truncate: 128});
  };
  function createPermlink(title) {
    var permlink;
    var t = new Date();
    var timeformat = t.getFullYear().toString()+(t.getMonth()+1).toString()+t.getDate().toString()+"t"+t.getHours().toString()+t.getMinutes().toString()+t.getSeconds().toString()+t.getMilliseconds().toString()+"z";
    if (title && title.trim() !== '') {
      var s = slug(title);
      permlink = s.toString()+"-"+timeformat;
      if(permlink.length > 255) {
        // STEEMIT_MAX_PERMLINK_LENGTH
        permlink = permlink.substring(permlink.length - 255, permlink.length)
      }
      // only letters numbers and dashes shall survive
      permlink = permlink.toLowerCase().replace(/[^a-z0-9-]+/g, '')
      return permlink;
    }
  };
  //$scope.operation_type = 'default';
  $scope.spost = {};
  $scope.tagsChange = function() {
    $rootScope.log("tagsChange");
    $scope.spost.tags = $filter('lowercase')($scope.spost.tags);
    $scope.spost.category = $scope.spost.tags?$scope.spost.tags.split(" "):[];

    angular.forEach($scope.spost.category, function(v,k){
      if(/^[а-яё]/.test(v)) {
        v = 'ru--' + $filter('detransliterate')(v, true);
        $scope.spost.category[k] = v;
      }
    });

    //console.log($scope.spost.category);
    if ($scope.spost.category.length > 5) {
      $scope.disableBtn = true;
    } else {
      $scope.disableBtn = false;
    }
  }
  $scope.contentChanged = function (editor, html, text) {
    //console.log($scope.spost.body);
    //console.log('editor: ', editor, 'html: ', html, 'text:', text);
  };

  $scope.submitStory = function() {
    //console.log($scope.spost.body);
    $scope.tagsChange();
    if (!$scope.$$phase){
      $scope.$apply();
    }
    $rootScope.$broadcast('show:loading');
    if ($rootScope.$storage.user) {
      $scope.mylogin = new window.ejs.Login();
      $scope.mylogin.setRoles(["posting"]);
      var loginSuccess = $scope.mylogin.checkKeys({
          accountName: $rootScope.$storage.user.username,
          password: $rootScope.$storage.user.password || null,
          auths: {
              posting: $rootScope.$storage.user.posting.key_auths
          },
          privateKey: $rootScope.$storage.user.privatePostingKey || null
        }
      );
      if (loginSuccess) {
        var tr = new window.ejs.TransactionBuilder();
        var permlink = createPermlink($scope.spost.title);
        var json = $filter("metadata")($scope.spost.body);
        angular.merge(json, {tags: $scope.spost.category, app: 'esteem/'+$rootScope.$storage.appversion, format: 'markdown+html' });

        if (!$scope.spost.operation_type) {
          $scope.spost.operation_type = 'default';
        }
        if ($scope.spost.operation_type !== 'default') {
          //console.log('NOT Default');
          tr.add_type_operation("comment", {
            parent_author: "",
            parent_permlink: $scope.spost.category[0],
            author: $rootScope.$storage.user.username,
            permlink: permlink,
            title: $scope.spost.title,
            body: $scope.spost.body,
            json_metadata: angular.toJson(json)
          });
          tr.add_type_operation("comment_options", {
            allow_curation_rewards: true,
            allow_votes: true,
            author: $rootScope.$storage.user.username,
            permlink: permlink,
            max_accepted_payout: $scope.spost.operation_type==='sp'?"1000000.000 "+$rootScope.$storage.platformdunit:"0.000 "+$rootScope.$storage.platformdunit,
            percent_steem_dollars: $scope.spost.operation_type==='sp'?0:10000
          });
        } else {
          //console.log('default');
          tr.add_type_operation("comment", {
            parent_author: "",
            parent_permlink: $scope.spost.category[0],
            author: $rootScope.$storage.user.username,
            permlink: permlink,
            title: $scope.spost.title,
            body: $scope.spost.body,
            json_metadata: angular.toJson(json)
          });
        }

        localStorage.error = 0;
        tr.process_transaction($scope.mylogin, null, true);
        $scope.replying = false;
        setTimeout(function() {
          $rootScope.$broadcast('hide:loading');
          if (localStorage.error == 1) {
            $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('BROADCAST_ERROR')+" "+localStorage.errormessage)
          } else {
            //$scope.closePostModal();
            $rootScope.$broadcast('closePostModal');

            //$scope.menupopover.hide();
            $rootScope.$broadcast('close:popover');
            $scope.spost = {};
            $rootScope.showMessage($filter('translate')('SUCCESS'), $filter('translate')('POST_SUBMITTED'));
            //$scope.closeMenuPopover();
            $state.go("app.profile", {username: $rootScope.$storage.user.username});
          }
        }, 3000);
      } else {
        $rootScope.$broadcast('hide:loading');
        $rootScope.showMessage($filter('translate')('ERROR'), $filter('translate')('LOGIN_FAIL'));
      }
    } else {
      $rootScope.$broadcast('hide:loading');
      $rootScope.showAlert($filter('translate')('WARNING'), $filter('translate')('LOGIN_TO_X'));
    }
  }
  $scope.savePost = function() {
    console.log($scope.modalp);
    $rootScope.$storage.spost = $scope.spost;
    //adddraft
    var dr = {title:$scope.spost.title, body: $scope.spost.body, tags: $scope.spost.tags, post_type: $scope.spost.operation_type};
    APIs.addDraft($rootScope.$storage.user.username, dr).then(function(res){
      console.log(res.data);
      //$scope.drafts = res.data;
    });
    $rootScope.$broadcast('closePostModal');
    $rootScope.$broadcast('close:popover');
    $scope.modalp.hide();
    $rootScope.showMessage($filter('translate')('SAVED'), $filter('translate')('POST_LATER'));
  }
  $scope.clearPost = function() {
    $rootScope.$storage.spost = {};
    $scope.spost = {};
    $rootScope.showMessage($filter('translate')('CLEARED'), $filter('translate')('POST'));
  }


  $rootScope.$on('fetchPosts', function(){
    $scope.fetchPosts();
  });

  $rootScope.$on('fetchContent', function(event, args) {
    var post = args.any;
    //console.log(post);
    $scope.fetchContent(post.author, post.permlink);
  });

  $scope.votePost = function(post) {
    $rootScope.votePost(post, 'upvote', 'fetchContent');
    if (!$scope.$$phase) {
      $scope.$apply();
    }
  };

  $scope.downvotePost = function(post) {

    var confirmPopup = $ionicPopup.confirm({
      title: $filter('translate')('ARE_YOU_SURE'),
      template: $filter('translate')('FLAGGING_TEXT')
    });
    confirmPopup.then(function(res) {
      if(res) {
        $rootScope.log('You are sure');
        $rootScope.votePost(post, 'downvote', 'fetchContent');
      } else {
        $rootScope.log('You are not sure');
      }
    });

  };

  $scope.unvotePost = function(post) {
    $rootScope.votePost(post, 'unvote', 'fetchContent');
  };


  $rootScope.$on("user:logout", function(){
    $scope.fetchPosts();
    $rootScope.$broadcast('filter:change');
  });

  $scope.loadMore = function() {
    //$rootScope.$broadcast('show:loading');
    $scope.limit += 5;
    //if (!$scope.error) {
    $scope.fetchPosts(null, $scope.limit, null);
    //}
  };
  $scope.refresh = function(){
    $scope.limit = 10;
    //if (!$scope.error) {
    $scope.fetchPosts(null, $scope.limit, null);
    $scope.$broadcast('scroll.refreshComplete');
  }

  $scope.$on('$stateChangeSuccess', function() {
    console.log('stateChangeSuccess', $stateParams.renew);
    if ($stateParams.renew) {
      $scope.data = null;
      $scope.data = [];
    }
    $scope.loadMore();
  });

  $scope.moreDataCanBeLoaded = function(){
    return !$scope.error;
  }

  $rootScope.$on('changeView', function(){
    //$scope.menupopover.hide();
    $rootScope.$broadcast('close:popover');
    if (!$scope.$$phase){
      $scope.$apply();
    }
    if ($rootScope.$storage.view === 'card') {
      angular.forEach($scope.data, function(v,k){
        v.json_metadata = angular.fromJson(v.json_metadata);
      });
    }
  });

  $rootScope.$on('changeLight', function(){
    //$scope.menupopover.hide();
    $rootScope.$broadcast('close:popover');
    if (!$scope.$$phase){
      $scope.$apply();
    }
  });

  function arrayObjectIndexOf(myArray, searchTerm, property) {
    var llen = myArray.length;
    for(var i = 0; i < llen; i++) {
        if (myArray[i][property] === searchTerm) return i;
    }
    return -1;
  }
  $scope.data = [];
  $scope.tempData = [];

  $scope.dataChanged = function(newValue) {
    if (newValue) {
      var lenn = newValue.length;
      var user = $rootScope.$storage.user || null;
      var view = $rootScope.$storage.view;

      if (user){
        for (var i = 0; i < lenn; i++) {
          if (newValue[i] && newValue[i].active_votes) {
            var len = newValue[i].active_votes.length-1;
            for (var j = len; j >= 0; j--) {
              if (newValue[i].active_votes[j].voter === user.username) {
                if (newValue[i].active_votes[j].percent > 0) {
                  newValue[i].upvoted = true;
                } else if (newValue[i].active_votes[j].percent < 0) {
                  newValue[i].downvoted = true;
                } else {
                  newValue[i].downvoted = false;
                  newValue[i].upvoted = false;
                }
              }
            }
          }
          if (view === 'card') {
            if (newValue[i].json_metadata){
              newValue[i].json_metadata = angular.fromJson(newValue[i].json_metadata);
            }
          }
        }
      } else {
        if (view === 'card') {
          for (var i = 0; i < lenn; i++) {
            if (newValue[i].json_metadata){
              newValue[i].json_metadata = angular.fromJson(newValue[i].json_metadata);
            }
          }
        }
      }
      return newValue;
    }
  }

  $scope.fetchContent = function(author, permlink) {
    window.Api.initPromise.then(function(response) {
      window.Api.database_api().exec("get_content", [author, permlink]).then(function(result){
        var len = result.active_votes.length;
        var user = $rootScope.$storage.user;
        if (user) {
          for (var j = len - 1; j >= 0; j--) {
            if (result.active_votes[j].voter === user.username) {
              if (result.active_votes[j].percent > 0) {
                result.upvoted = true;
              } else if (result.active_votes[j].percent < 0) {
                result.downvoted = true;
              } else {
                result.downvoted = false;
                result.upvoted = false;
              }
            }
          }
        }
        result.json_metadata = angular.fromJson(result.json_metadata);
        angular.forEach($scope.data, function(value, key) {
          if (value.permlink === result.permlink) {
            $scope.data[key] = result;
          }
        });
        $rootScope.$broadcast('hide:loading');
        if (!$scope.$$phase) {
          $scope.$apply();
        }
      });
    });
  }
  $scope.ifExists = function(xx){
    for (var i = 0; i < $scope.data.length; i++) {
      if ($scope.data[i].permlink === xx){
        return true;
      }
    }
    return false;
  }
  $scope.fetchPosts = function(type, limit, tag) {
    type = type || $rootScope.$storage.filter || "trending";
    tag = tag || $rootScope.$storage.tag || "";
    limit = 10;//limit || $scope.limit || 10;

    var params = {};

    if (type === "feed" && $rootScope.$storage.user) {
      params = {tag: $rootScope.$storage.user.username, limit: limit, filter_tags: ["bm-open"]};
    } else {
      if ($rootScope.$storage.filter === "feed") {
        $rootScope.$storage.filter = "trending";
        type = "trending";
      }
      params = {tag: tag, limit: limit, filter_tags: ["bm-open"]};
    }
    if ($scope.data && $scope.data.length>0) {
      params.start_author = $scope.data[$scope.data.length-1].author;
      params.start_permlink = $scope.data[$scope.data.length-1].permlink;
    }
    if ($scope.error) {
      //$rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('REQUEST_LIMIT_TEXT'));
      $scope.$broadcast('scroll.infiniteScrollComplete');
      $rootScope.$broadcast('hide:loading');
    } else {
      window.Api.initPromise.then(function(response) {
        $rootScope.log("fetching..."+type+" "+limit+" "+tag);
        if (typeof window.Api.database_api === "function") {
          /*window.Api.database_api().exec("get_state", ["/"+type]).then(function(response){
            console.log(response);
          });*/
          window.Api.database_api().exec("get_discussions_by_"+type, [params]).then(function(response){
            $rootScope.log(response);
            if (response.length <= 1) {
              $scope.error = true;
            }
            if (response) {
              for (var i = 0; i < response.length; i++) {
                response[i].json_metadata = response[i].json_metadata?angular.fromJson(response[i].json_metadata):response[i].json_metadata;
                var permlink = response[i].permlink;
                if (!$scope.ifExists(permlink)) {
                  var user = $rootScope.$storage.user || undefined;
                  if (user) {
                    //console.log('exist');
                    if (response[i] && response[i].active_votes) {
                      var len = response[i].active_votes.length-1;
                      for (var j = 0; j < len; j++) {
                        if (response[i].active_votes[j].voter === user.username) {
                          if (response[i].active_votes[j].percent > 0) {
                            response[i].upvoted = true;
                          } else if (response[i].active_votes[j].percent < 0) {
                            response[i].downvoted = true;
                          } else {
                            response[i].downvoted = false;
                            response[i].upvoted = false;
                          }
                        }
                      }
                    }
                  }
                  $scope.data.push(response[i]);
                }
              }
            }

            if (!$scope.$$phase) {
              $scope.$apply();
            }
            //console.log($scope.data.length);
            $scope.$broadcast('scroll.infiniteScrollComplete');
            $rootScope.$broadcast('hide:loading');
          });
        }
      });
    }
  };

  $scope.$on('$ionicView.loaded', function(){
    $scope.limit = 10;
    //$rootScope.$broadcast('show:loading');
    if (!$rootScope.$storage["socket"+$rootScope.$storage.chain]) {
      $rootScope.$storage["socket"+$rootScope.$storage.chain] = localStorage.socketUrl;
    }
    if (!$rootScope.$storage.view) {
      $rootScope.$storage.view = 'card';
    }
    if (!$rootScope.$storage.filter) {
      $rootScope.$storage.filter = "trending";
    }
    if (window.Api) {
      /*if (!angular.isDefined($rootScope.timeint)) {
        window.Api.initPromise.then(function(response) {
          $rootScope.log("Api ready:" + angular.toJson(response));
          $rootScope.timeint = $interval(function(){
            window.Api.database_api().exec("get_dynamic_global_properties", []).then(function(response){
              $rootScope.log("get_dynamic_global_properties "+ response.head_block_number);
              if ($rootScope.$storage.user) {
                $scope.mylogin = new window.ejs.Login();
                $scope.mylogin.setRoles(["posting"]);
                var loginSuccess = $scope.mylogin.checkKeys({
                    accountName: $rootScope.$storage.user.username,
                    password: $rootScope.$storage.user.password || null,
                    auths: {
                        posting: $rootScope.$storage.user.posting.key_auths
                    },
                    privateKey: $rootScope.$storage.user.privatePostingKey || null
                  }
                );
                $rootScope.log("login "+loginSuccess);
              }
            });
          }, 15000);
          $rootScope.$broadcast('fetchPosts');
        });
      }*/
    }

    setTimeout(function() {
      $ionicScrollDelegate.$getByHandle('mainScroll').scrollTop();
    }, 10);
  });
  
  $scope.$on('$ionicView.beforeEnter', function(){
    $scope.theme = $rootScope.$storage.theme;
    if ($stateParams.tags) {
      $rootScope.$storage.tag = $stateParams.tags;
    }

    if (!angular.isDefined($rootScope.$storage.language)) {
      if(typeof navigator.globalization !== "undefined") {
          navigator.globalization.getPreferredLanguage(function(language) {
              $translate.use((language.value).split("-")[0]).then(function(data) {
                  console.log("SUCCESS -> " + data);
                  $rootScope.$storage.language = language.value.split('-')[0];
              }, function(error) {
                  console.log("ERROR -> " + error);
              });
          }, null);
      } else {
        $rootScope.$storage.language = 'en';
      }
    } else {
      $translate.use($rootScope.$storage.language);
    }

    $scope.activeMenu = $rootScope.$storage.filter || "trending";
    $scope.mymenu = $rootScope.$storage.user ? [{text: $filter('translate')('FEED'), custom:'feed'}, {text: $filter('translate')('TRENDING'), custom:'trending'}, {text: $filter('translate')('HOT'), custom:'hot'}, {text: $filter('translate')('NEW'), custom:'created'}, {text: $filter('translate')('ACTIVE'), custom:'active'}, {text: $filter('translate')('PROMOTED'), custom: 'promoted'}, {text: $filter('translate')('TRENDING_30'), custom:'trending30'}, {text:$filter('translate')('VOTES'), custom:'votes'}, {text: $filter('translate')('COMMENTS'), custom:'children'}, {text: $filter('translate')('PAYOUT'), custom: 'cashout'}] : [ {text: $filter('translate')('TRENDING'), custom:'trending'}, {text: $filter('translate')('HOT'), custom:'hot'}, {text: $filter('translate')('NEW'), custom:'created'}, {text: $filter('translate')('ACTIVE'), custom:'active'}, {text: $filter('translate')('PROMOTED'), custom: 'promoted'}, {text: $filter('translate')('TRENDING_30'), custom:'trending30'}, {text:$filter('translate')('VOTES'), custom:'votes'}, {text: $filter('translate')('COMMENTS'), custom:'children'}, {text: $filter('translate')('PAYOUT'), custom: 'cashout'}];

    angular.forEach($scope.mymenu, function(v,k){
      if (v.custom === $rootScope.$storage.filter) {
        $rootScope.$storage.filterName = v.text;
      }
    });

  });

})

app.controller('PostCtrl', function($scope, $stateParams, $rootScope, $interval, $ionicScrollDelegate, $ionicModal, $filter, $ionicActionSheet, $cordovaCamera, $ionicPopup, ImageUploadService, $ionicPlatform, $ionicSlideBoxDelegate, $ionicPopover, $filter, $state, APIs) {
  $scope.post = $rootScope.$storage.sitem;
  $scope.data = {};
  $scope.spost = {};
  $scope.replying = false;

  $ionicPopover.fromTemplateUrl('popoverSliderr.html', {
      scope: $scope
  }).then(function(popover) {
      $scope.tooltipSliderr = popover;
  });
  
  $scope.openSliderr = function($event, d) {
    $scope.votingPost = d;
    if (!$scope.$$phase) {
      $scope.$apply();
    }
    $scope.rangeValue = $rootScope.$storage.voteWeight/100;
    $scope.tooltipSliderr.show($event);
  };
  $scope.votePostS = function() {
    $scope.tooltipSliderr.hide();
    $scope.upvotePost($scope.votingPost);
  }
  $scope.drag = function(v) {
    //console.log(v);
    $rootScope.$storage.voteWeight = v*100;
  };

  $scope.closeSliderr = function() {
    $scope.tooltipSliderr.hide();
  };

  $scope.isBookmarked = function() {
    var bookm = $rootScope.$storage.bookmark || undefined;
    if (bookm) {
      var len = bookm.length;
      for (var i = 0; i < len; i++) {
        if (bookm[i] && bookm[i].permlink === $rootScope.$storage.sitem.permlink) {
          return true;
        }
      }
    } else {
      return false;
    }
  };
  $scope.options = {
    loop: false,
    speed: 500,
    /*pagination: false,*/
    showPager: false,
    slidesPerView: 3,
    spaceBetween: 20,
    breakpoints: {
      1024: {
          slidesPerView: 5,
          spaceBetween: 15
      },
      768: {
          slidesPerView: 4,
          spaceBetween: 10
      },
      640: {
          slidesPerView: 3,
          spaceBetween: 5
      },
      320: {
          slidesPerView: 3,
          spaceBetween: 3
      }
    }
  }
  $scope.bookmark = function() {
    var book = $rootScope.$storage.bookmark;
    if ($scope.isBookmarked()) {
      var len = book.length;
      var id = undefined;
      for (var i = 0; i < len; i++) {
        if (book[i].permlink === $rootScope.$storage.sitem.permlink) {
          id = book[i]._id;
          book.splice(i, 1);
        }
      }
      if (id){
        APIs.removeBookmark(id,$rootScope.$storage.user.username).then(function(res){
          $rootScope.$storage.bookmark = book;
          $rootScope.showMessage($filter('translate')('SUCCESS'), $filter('translate')('POST_IS_UNBOOKMARK'));
        });
      }
    } else {
      if (book) {
        var oo = { author:$rootScope.$storage.sitem.author,permlink:$rootScope.$storage.sitem.permlink};
        $rootScope.$storage.bookmark.push(oo);
        APIs.addBookmark($rootScope.$storage.user.username, oo ).then(function(res){
          $rootScope.showMessage($filter('translate')('SUCCESS'), $filter('translate')('POST_IS_BOOKMARK'));
        });
      } else {
        var oo = { author:$rootScope.$storage.sitem.author,permlink:$rootScope.$storage.sitem.permlink};
        $rootScope.$storage.bookmark = [oo];

        APIs.addBookmark($rootScope.$storage.user.username, oo ).then(function(res){
          $rootScope.showMessage($filter('translate')('SUCCESS'), $filter('translate')('POST_IS_BOOKMARK'));
        });
      }
      //$rootScope.showMessage($filter('translate')('SUCCESS'), $filter('translate')('POST_IS_BOOKMARK'));
    }
  };

  $scope.lastFocused;


  //http://stackoverflow.com/questions/1064089/inserting-a-text-where-cursor-is-using-javascript-jquery
  $scope.insertText = function(text) {
    var input = $scope.lastFocused;
    //console.log(input);
    if (input == undefined) { return; }
    var scrollPos = input.scrollTop;
    var pos = 0;
    var browser = ((input.selectionStart || input.selectionStart == "0") ?
                   "ff" : (document.selection ? "ie" : false ) );
    if (browser == "ie") {
      input.focus();
      var range = document.selection.createRange();
      range.moveStart ("character", -input.value.length);
      pos = range.text.length;
    }
    else if (browser == "ff") { pos = input.selectionStart };

    var front = (input.value).substring(0, pos);
    var back = (input.value).substring(pos, input.value.length);
    input.value = front+text+back;
    pos = pos + text.length;
    if (browser == "ie") {
      input.focus();
      var range = document.selection.createRange();
      range.moveStart ("character", -input.value.length);
      range.moveStart ("character", pos);
      range.moveEnd ("character", 0);
      range.select();
    }
    else if (browser == "ff") {
      input.selectionStart = pos;
      input.selectionEnd = pos;
      input.focus();
    }
    input.scrollTop = scrollPos;
    console.log(angular.element(input).val());
    angular.element(input).trigger('input');
  }

  $ionicPopover.fromTemplateUrl('popoverTr.html', {
      scope: $scope
   }).then(function(popover) {
      $scope.tooltip = popover;
   });

   $scope.openTooltip = function($event, d) {
    var tppv = Number(d.total_pending_payout_value.split(' ')[0])*$rootScope.$storage.currencyRate;
    var p = Number(d.promoted.split(' ')[0])*$rootScope.$storage.currencyRate;
    var tpv = Number(d.total_payout_value.split(' ')[0])*$rootScope.$storage.currencyRate;
    var ar = Number(d.total_payout_value.split(' ')[0]-d.curator_payout_value.split(' ')[0])*$rootScope.$storage.currencyRate;
    var crp = Number(d.curator_payout_value.split(' ')[0])*$rootScope.$storage.currencyRate;
    var texth = "<div class='row'><div class='col'><b>"+$filter('translate')('PAYOUT_CYCLE')+"</b></div><div class='col'>"+d.mode.replace('_',' ')+"</div></div><div class='row'><div class='col'><b>"+$filter('translate')('POTENTIAL_PAYOUT')+"</b></div><div class='col'>"+$filter('getCurrencySymbol')($rootScope.$storage.currency)+$filter('number')(tppv, 3)+"</div></div><div class='row'><div class='col'><b>"+$filter('translate')('PROMOTED')+"</b></div><div class='col'>"+$filter('getCurrencySymbol')($rootScope.$storage.currency)+$filter('number')(p,3)+"</div></div><div class='row'><div class='col'><b>"+$filter('translate')('PAST_PAYOUT')+"</b></div><div class='col'>"+$filter('getCurrencySymbol')($rootScope.$storage.currency)+$filter('number')(tpv,3)+"</div></div><div class='row'><div class='col'><b>"+$filter('translate')('AUTHOR_PAYOUT')+"</b></div><div class='col'>"+$filter('getCurrencySymbol')($rootScope.$storage.currency)+$filter('number')(ar,3)+"</div></div><div class='row'><div class='col'><b>"+$filter('translate')('CURATION_PAYOUT')+"</b></div><div class='col'>"+$filter('getCurrencySymbol')($rootScope.$storage.currency)+$filter('number')(crp,3)+"</div></div><div class='row'><div class='col'><b>"+$filter('translate')('PAYOUT')+"</b></div><div class='col'>"+$filter('timeago')(d.cashout_time, true)+"</div></div>";
    $scope.tooltipText = texth;
    $scope.tooltip.show($event);
   };

   $scope.closeTooltip = function() {
      $scope.tooltip.hide();
   };

   //Cleanup the popover when we're done with it!
   $scope.$on('$destroy', function() {
      $scope.tooltip.remove();
   });

   // Execute action on hide popover
   $scope.$on('popover.hidden', function() {
      // Execute action
   });

   // Execute action on remove popover
   $scope.$on('popover.removed', function() {
      // Execute action
   });


  $scope.isImages = function() {
    if ($rootScope.$storage.sitem) {
      var len = $rootScope.$storage.sitem.json_metadata.image?$rootScope.$storage.sitem.json_metadata.image.length:0;
      if (len > 0) {
        $scope.images = $rootScope.$storage.sitem.json_metadata.image;
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  };
  $scope.zoomMin = 1;
  $scope.showImages = function(index) {
    $scope.activeSlide = index;
    $rootScope.log(angular.toJson($scope.images[index]));
    $scope.showGalleryModal('templates/gallery_images.html');
  };

  $scope.showGalleryModal = function(templateUrl) {
    $ionicModal.fromTemplateUrl(templateUrl, {
      scope: $scope
    }).then(function(modal) {
      $scope.modalg = modal;
      $scope.modalg.show();
    });
  }

  $scope.closeGalleryModal = function() {
    $scope.modalg.hide();
    $scope.modalg.remove()
  };

  $scope.updateSlideStatus = function(slide) {
    var zoomFactor = $ionicScrollDelegate.$getByHandle('scrollHandle' + slide).getScrollPosition().zoom;
    if (zoomFactor == $scope.zoomMin) {
      $ionicSlideBoxDelegate.enableSlide(true);
    } else {
      $ionicSlideBoxDelegate.enableSlide(false);
    }
  };

  $scope.showImg = function() {
   var hideSheet = $ionicActionSheet.show({
     buttons: [
       { text: $filter('translate')('CAPTURE_PICTURE') },
       { text: $filter('translate')('SELECT_PICTURE') },
       { text: $filter('translate')('SET_CUSTOM_URL') },
       { text: $filter('translate')('GALLERY') }
     ],
     titleText: $filter('translate')('INSERT_PICTURE'),
     cancelText: $filter('translate')('CANCEL'),
     cancel: function() {
        // add cancel code..
      },
     buttonClicked: function(index) {
        $scope.insertImage(index);
        return true;
     }
   });
  };
  $scope.insertImage = function(type) {
    var options = {};
    if ($scope.edit) {
      if (type == 0 || type == 1) {
        options = {
          quality: 50,
          destinationType: Camera.DestinationType.FILE_URI,
          sourceType: (type===0)?Camera.PictureSourceType.CAMERA:Camera.PictureSourceType.PHOTOLIBRARY,
          allowEdit: (type===0)?true:false,
          encodingType: Camera.EncodingType.JPEG,
          popoverOptions: CameraPopoverOptions,
          saveToPhotoAlbum: false
          //correctOrientation:true
        };
        $cordovaCamera.getPicture(options).then(function(imageData) {
          setTimeout(function() {
            ImageUploadService.uploadImage(imageData).then(function(result) {
              //var url = result.secure_url || '';
              var url = result.imageUrl || '';
              var final = " ![image](" + url + ")";
              $rootScope.log(final);
              /*if ($scope.spost.body) {
                $scope.spost.body += final;
              } else {
                $scope.spost.body = final;
              }*/
              $scope.insertText(final);
              if (!ionic.Platform.isAndroid() || !ionic.Platform.isWindowsPhone()) {
                $cordovaCamera.cleanup();
              }
            },
            function(err) {
              $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('UPLOAD_ERROR'));
              if (!ionic.Platform.isAndroid() || !ionic.Platform.isWindowsPhone()) {
                $cordovaCamera.cleanup();
              }
            });
          }, 10);
        }, function(err) {
          $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('CAMERA_CANCELLED'));
        });
      } else if (type == 2){
        $ionicPopup.prompt({
          title: $filter('translate')('SET_URL'),
          template: $filter('translate')('DIRECT_LINK_PICTURE'),
          inputType: 'text',
          inputPlaceholder: 'http://example.com/image.jpg'
        }).then(function(res) {
          $rootScope.log('Your url is' + res);
          if (res) {
            var url = res.trim();
            var final = " ![image](" + url + ")";
            $rootScope.log(final);
            /*if ($scope.spost.body) {
              $scope.spost.body += final;
            } else {
              $scope.spost.body = final;
            }*/
            $scope.insertText(final);
          }
        });
      } else {
        $scope.gallery = [];
        APIs.fetchImages($rootScope.$storage.user.username).then(function(res){
          var imgs = res.data;
          if (imgs.length>0){
            $scope.showgallery = true;
            $scope.gallery.images = imgs;
          } else {
            $scope.showgallery = false;
            $rootScope.showMessage($filter('translate')('SUCCESS'), $filter('translate')('NO_IMAGE'));
            console.log('no images available')
          }
        });
      }
    } else {
      if (type == 0 || type == 1) {
        options = {
          quality: 50,
          destinationType: Camera.DestinationType.FILE_URI,
          sourceType: (type===0)?Camera.PictureSourceType.CAMERA:Camera.PictureSourceType.PHOTOLIBRARY,
          allowEdit: (type===0)?true:false,
          encodingType: Camera.EncodingType.JPEG,
          popoverOptions: CameraPopoverOptions,
          saveToPhotoAlbum: false
          //correctOrientation:true
        };
        $cordovaCamera.getPicture(options).then(function(imageData) {
          setTimeout(function() {
            ImageUploadService.uploadImage(imageData).then(function(result) {
              //var url = result.secure_url || '';
              var url = result.imageUrl || '';
              var final = " ![image](" + url + ")";
              $rootScope.log(final);
              /*if ($scope.data.comment) {
                $scope.data.comment += final;
              } else {
                $scope.data.comment = final;
              }*/
              $scope.insertText(final);
              if (!ionic.Platform.isAndroid() || !ionic.Platform.isWindowsPhone()) {
                $cordovaCamera.cleanup();
              }
            },
            function(err) {
              $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('UPLOAD_ERROR'));
              if (!ionic.Platform.isAndroid() || !ionic.Platform.isWindowsPhone()) {
                $cordovaCamera.cleanup();
              }
            });
          }, 10);
        }, function(err) {
          $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('CAMERA_CANCELLED'));
        });
      } else if (type == 2){
        $ionicPopup.prompt({
          title: $filter('translate')('SET_URL'),
          template: $filter('translate')('DIRECT_LINK_PICTURE'),
          inputType: 'text',
          inputPlaceholder: 'http://example.com/image.jpg'
        }).then(function(res) {
          $rootScope.log('Your url is' + res);
          if (res) {
            var url = res.trim();
            var final = " ![image](" + url + ")";
            $rootScope.log(final);
            /*if ($scope.data.comment) {
              $scope.data.comment += final;
            } else {
              $scope.data.comment = final;
            }*/
            $scope.insertText(final);
          }
        });
      } else {
        $scope.gallery = [];
        APIs.fetchImages($rootScope.$storage.user.username).then(function(res){
          var imgs = res.data;
          if (imgs.length>0){
            $scope.showgallery = true;
            $scope.gallery.images = imgs;
          } else {
            $scope.showgallery = false;
            $rootScope.showMessage($filter('translate')('SUCCESS'), $filter('translate')('NO_IMAGE'));
            console.log('no images available')
          }
        });
      }
    }
  };

  $ionicModal.fromTemplateUrl('templates/story.html', {
    scope: $scope  }).then(function(modal) {
    $scope.pmodal = modal;
  });
  $scope.openPostModal = function() {
    //if(!$scope.pmodal) return;
    setTimeout(function() {
      $scope.pmodal.show();
      /*angular.element("textarea").focus(function() {
        $scope.lastFocused = document.activeElement;
        console.log(document);
      });*/
    }, 10);
  };

  $rootScope.$on('closePostModal', function(){
    $scope.pmodal.hide();
  });

  $scope.closeGallery = function(){
    $scope.showgallery = false;
  }
  $scope.manageGallery = function(){
    $scope.modal.hide();
    $state.go('app.images');
  }
  var dmp = new window.diff_match_patch();

  function createPatch(text1, text2) {
      if (!text1 && text1 === '') return undefined;
      var patches = dmp.patch_make(text1, text2);
      var patch = dmp.patch_toText(patches);
      return patch;
  }
  $scope.cfocus = function(){
    $scope.lastFocused = document.activeElement;
  }
  $scope.deletePost = function(xx) {
    $rootScope.log('delete post '+ angular.toJson(xx));
    var confirmPopup = $ionicPopup.confirm({
        title: $filter('translate')('ARE_YOU_SURE'),
        template: $filter('translate')('DELETE_COMMENT')
    });
    confirmPopup.then(function(res) {
        if(res) {
            $rootScope.log('You are sure');
            $rootScope.$broadcast('show:loading');
            if ($rootScope.$storage.user) {
              $scope.mylogin = new window.ejs.Login();
              $scope.mylogin.setRoles(["posting"]);
              var loginSuccess = $scope.mylogin.checkKeys({
                  accountName: $rootScope.$storage.user.username,
                  password: $rootScope.$storage.user.password || null,
                  auths: {
                      posting: $rootScope.$storage.user.posting.key_auths
                  },
                  privateKey: $rootScope.$storage.user.privatePostingKey || null
                }
              );
              if (loginSuccess) {
                var tr = new window.ejs.TransactionBuilder();

                tr.add_type_operation("delete_comment", {
                  author: xx.author,
                  permlink: xx.permlink
                });
                //$rootScope.log(my_pubkeys);
                localStorage.error = 0;
                tr.process_transaction($scope.mylogin, null, true);

                setTimeout(function() {
                  if (localStorage.error == 1) {
                    $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('BROADCAST_ERROR')+" "+localStorage.errormessage)
                  } else {
                    $rootScope.showMessage($filter('translate')('SUCCESS'), $filter('translate')('DELETED_COMMENT'));
                    $state.go('app.posts');
                  }
                  $rootScope.$broadcast('hide:loading');
                }, 3000);
              } else {
                $rootScope.$broadcast('hide:loading');
              }
            } else {
              $rootScope.$broadcast('hide:loading');
              $rootScope.showAlert($filter('translate')('WARNING'), $filter('translate')('LOGIN_TO_X'));
            }
        } else {
          $rootScope.log('You are not sure');
        }
    });
  }
  $scope.edit = false;
  $scope.editPost = function(xx) {
    $scope.edit = true;
    $scope.openPostModal();
    angular.element("textarea").focus(function() {
      $scope.lastFocused = document.activeElement;
      console.log(document);
    });
    setTimeout(function() {
      if (!$scope.spost.body) {
        $scope.spost = xx;
        $scope.patchbody = xx.body;
      }
      $scope.spost.tags = angular.fromJson(xx.json_metadata).tags.join().replace(/\,/g,' ');
    }, 10);
  }

  $scope.submitStory = function() {
    if (!$scope.$$phase){
      $scope.$apply();
    }
    $rootScope.$broadcast('show:loading');
    if ($scope.edit) {
      var patch = createPatch($scope.patchbody, $scope.spost.body)
      // Putting body into buffer will expand Unicode characters into their true length
      if (patch && patch.length < new Buffer($scope.spost.body, 'utf-8').length) {
        $scope.spost.body2 = patch;
      }
      //$rootScope.log(patch);
    } else {
      $scope.spost.body2 = undefined;
    }

    if ($rootScope.$storage.user) {
      $scope.mylogin = new window.ejs.Login();
      $scope.mylogin.setRoles(["posting"]);
      var loginSuccess = $scope.mylogin.checkKeys({
          accountName: $rootScope.$storage.user.username,
          password: $rootScope.$storage.user.password || null,
          auths: {
              posting: $rootScope.$storage.user.posting.key_auths
          },
          privateKey: $rootScope.$storage.user.privatePostingKey || null
        }
      );
      if (loginSuccess) {
        var tr = new window.ejs.TransactionBuilder();
        var permlink = $scope.spost.permlink;
        var jjson = $filter("metadata")($scope.spost.body);
        //console.log(jjson);
        //$scope.spost.tags = $filter('lowercase')($scope.spost.tags);
        var json = angular.merge(jjson, {tags: $scope.spost.tags.split(" "), app: 'esteem/'+$rootScope.$storage.appversion, format: 'markdown+html' });
        //console.log(json);
        tr.add_type_operation("comment", {
          parent_author: "",
          parent_permlink: $scope.spost.parent_permlink,
          author: $rootScope.$storage.user.username,
          permlink: $scope.spost.permlink,
          title: $scope.spost.title,
          body: $scope.spost.body2 || $scope.spost.body,
          json_metadata: angular.toJson(json)
        });
        //$rootScope.log(my_pubkeys);
        localStorage.error = 0;
        tr.process_transaction($scope.mylogin, null, true);
        $scope.replying = false;
        setTimeout(function() {
          $rootScope.$broadcast('hide:loading');
          if (localStorage.error == 1) {
            $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('BROADCAST_ERROR')+" "+localStorage.errormessage)
          } else {
            //$scope.closePostModal();

            $rootScope.$broadcast('closePostModal');

            setTimeout(function() {
              $scope.spost = {};
              $rootScope.showMessage($filter('translate')('SUCCESS'), $filter('translate')('POST_SUBMITTED'));
            //$scope.closePostPopover();
              $state.go("app.profile", {username: $rootScope.$storage.user.username});
            }, 1);
          }
        }, 3000);
      } else {
        $rootScope.$broadcast('hide:loading');
        $rootScope.showMessage($filter('translate')('ERROR'), $filter('translate')('LOGIN_FAIL'));
      }
    } else {
      $rootScope.$broadcast('hide:loading');
      $rootScope.showAlert($filter('translate')('WARNING'), $filter('translate')('LOGIN_TO_X'));
    }
  }
  $scope.addImage = function(url) {
    $scope.data.comment += ' ![image]('+url+') ';
  }
  $scope.reply = function (xx) {
    //$rootScope.log(xx);
    if (!$scope.$$phase){
      $scope.$apply();
    }
    $rootScope.$broadcast('show:loading');
    if ($rootScope.$storage.user) {
      $scope.mylogin = new window.ejs.Login();
      $scope.mylogin.setRoles(["posting"]);
      var loginSuccess = $scope.mylogin.checkKeys({
          accountName: $rootScope.$storage.user.username,
          password: $rootScope.$storage.user.password || null,
          auths: {
              posting: $rootScope.$storage.user.posting.key_auths
          },
          privateKey: $rootScope.$storage.user.privatePostingKey || null
        }
      );
      if (loginSuccess) {
        var tr = new window.ejs.TransactionBuilder();
        var t = new Date();
        var timeformat = t.getFullYear().toString()+(t.getMonth()+1).toString()+t.getDate().toString()+"t"+t.getHours().toString()+t.getMinutes().toString()+t.getSeconds().toString()+t.getMilliseconds().toString()+"z";
        var json = {tags: angular.fromJson($scope.post.json_metadata).tags[0] || ["esteem"] , app: 'esteem/'+$rootScope.$storage.appversion, format: 'markdown+html' };
        tr.add_type_operation("comment", {
          parent_author: $scope.post.author,
          parent_permlink: $scope.post.permlink,
          author: $rootScope.$storage.user.username,
          permlink: "re-"+$scope.post.author+"-"+$scope.post.permlink+"-"+timeformat,
          title: "",
          body: $scope.data.comment,
          json_metadata: angular.toJson(json)
        });
        localStorage.error = 0;
        tr.process_transaction($scope.mylogin, null, true);
        $scope.replying = false;
        setTimeout(function() {
          $rootScope.$broadcast('hide:loading');
          if (localStorage.error == 1) {
            $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('BROADCAST_ERROR')+" "+localStorage.errormessage)
          } else {
            $scope.closeModal();
            $scope.data.comment = "";

            $rootScope.showMessage($filter('translate')('SUCCESS'), $filter('translate')('COMMENT_SUBMITTED'));
            window.Api.initPromise.then(function(response) {
              window.Api.database_api().exec("get_content_replies", [$rootScope.$storage.sitem.author, $rootScope.$storage.sitem.permlink]).then(function(result){
                if (result)
                  $scope.comments = result;
                if (!$scope.$$phase) {
                  $scope.$apply();
                }
              });
            });
          }
        }, 3000);
      } else {
        $rootScope.$broadcast('hide:loading');
        $rootScope.showMessage($filter('translate')('ERROR'), $filter('translate')('LOGIN_FAIL'));
      }
    } else {
      $rootScope.$broadcast('hide:loading');
      $rootScope.showAlert($filter('translate')('WARNING'), $filter('translate')('LOGIN_TO_X'));
    }
  }
  $rootScope.$on("update:content", function(){
    $rootScope.log("update:content");
    setTimeout(function() {
      $scope.getContent($scope.post.author, $scope.post.permlink);  
    }, 100);
    $rootScope.$broadcast('hide:loading');
  });
  $ionicModal.fromTemplateUrl('templates/reply.html', {
    scope: $scope  }).then(function(modal) {
    $scope.modal = modal;
  });

  $scope.openModal = function(item) {
    //if(!$scope.modal) return;
    setTimeout(function() {
      $scope.modal.show();
    }, 5);
  };

  $scope.closeModal = function() {
    $scope.replying = false;
    $scope.modal.hide();
  };

  $scope.isreplying = function(cho, xx) {
    $scope.replying = xx;
    angular.merge($scope.post, cho);
    if (xx) {
      $scope.openModal();
    } else {
      $scope.closeModal();
    }
  };
  $scope.accounts = {};
  $scope.getContent = function(author, permlink) {
    var url = "/"+$stateParams.category+"/@"+author+"/"+permlink;
    window.Api.initPromise.then(function(response) {
      window.Api.database_api().exec("get_state", [url]).then(function(dd){
        console.log(dd);
        var con = dd.content;
        var acon = dd.accounts;

        angular.forEach(con, function(v,k){
          v.comments = [];
        });
        //setTimeout(function() {
        angular.forEach(con, function(v,k){
          var vparent = v.parent_author==""?v.author:v.parent_author;
          var vperm = v.parent_author==""?v.permlink:v.parent_permlink;
          var keyy = vparent+"/"+vperm;
          if (v.parent_permlink!==v.category) {
            if (con[keyy])
              con[keyy].comments.push(v);  
          }
        });
        //console.log(acon);  
        //}, 1);
        angular.forEach(acon, function(v,k){
          //console.log(v.json_metadata);
          if (typeof v.json_metadata === 'string' || v.json_metadata instanceof String) {
            //console.log(v.json_metadata);
            if (v.json_metadata)
              v.json_metadata = angular.fromJson(v.json_metadata);
          }
        });
        var result = con[author+"/"+permlink];

        var len = result.active_votes.length;
        var user = $rootScope.$storage.user;
        if (user) {
          for (var j = len - 1; j >= 0; j--) {
            if (result.active_votes[j].voter === user.username) {
              if (result.active_votes[j].percent > 0) {
                result.upvoted = true;
              } else if (result.active_votes[j].percent < 0) {
                result.downvoted = true;
              } else {
                result.downvoted = false;
                result.upvoted = false;
              }
            }
          }
        }

        result.json_metadata = angular.fromJson(result.json_metadata);
        
        //console.log(result);
        $rootScope.$broadcast('hide:loading');
        $scope.post = result;
        $rootScope.$storage.sitem = result;
        $rootScope.$storage.paccounts = acon;

        if (!$scope.$$phase) {
          $scope.$apply();
        }

      });
    });
    /*window.Api.database_api().exec("get_content", [author, permlink]).then(function(result){
      //console.log(result);
        var len = result.active_votes.length;
        var user = $rootScope.$storage.user;
        if (user) {
          for (var j = len - 1; j >= 0; j--) {
            if (result.active_votes[j].voter === user.username) {
              if (result.active_votes[j].percent > 0) {
                result.upvoted = true;
              } else if (result.active_votes[j].percent < 0) {
                result.downvoted = true;
              } else {
                result.downvoted = false;
                result.upvoted = false;
              }
            }
          }
        }
        result.json_metadata = angular.fromJson(result.json_metadata);
        $rootScope.$storage.sitem = result;
        console.log(result);
        $scope.post = result;
        //$ionicScrollDelegate.$getByHandle('mainScroll').scrollTop();
      $rootScope.$broadcast('hide:loading');
      //console.log($scope.post);
      if (!$scope.$$phase) {
        $scope.$apply();
      }
    });
    //$rootScope.$broadcast('hide:loading');
    */
  };
  $scope.fetchComments = function(){
    $rootScope.$broadcast('update:content');
  }
  $scope.$on('$ionicView.beforeEnter', function(){
    $rootScope.log('beforeEnter postctrl');
    //$rootScope.$broadcast('show:loading');
    if ($stateParams.category === '111') {
      var ttemp = $rootScope.$storage.sitem;
      $scope.post = ttemp;
      $rootScope.$broadcast('update:content');
    } else {
      if ($stateParams.author.indexOf('@')>-1){
        $stateParams.author = $stateParams.author.substr(1);
      }
      $scope.getContent($stateParams.author, $stateParams.permlink);
      //$scope.post = $rootScope.$storage.sitem;
      //$rootScope.$broadcast('update:content');
    }
  });

  $scope.upvotePost = function(post) {
    $rootScope.votePost(post, 'upvote', 'getContent');
  };
  $rootScope.$on('getContent', function() {
    setTimeout(function() {
      $scope.getContent($rootScope.$storage.sitem.author, $rootScope.$storage.sitem.permlink);  
    }, 100);
  });
  $scope.downvotePost = function(post) {
    var confirmPopup = $ionicPopup.confirm({
      title: $filter('translate')('ARE_YOU_SURE'),
      template: $filter('translate')('FLAGGING_TEXT')
    });
    confirmPopup.then(function(res) {
      if(res) {
        $rootScope.log('You are sure');
        $rootScope.votePost(post, 'downvote', 'getContent');
      } else {
        $rootScope.log('You are not sure');
      }
    });
  };
  $scope.unvotePost = function(post) {
    $rootScope.votePost(post, 'unvote', 'getContent');
  };


})
app.controller('BookmarkCtrl', function($scope, $stateParams, $rootScope, $state, APIs, $interval, $ionicScrollDelegate, $filter) {

  $scope.removeBookmark = function(index) {
    if ($rootScope.$storage.bookmark) {
      APIs.removeBookmark($rootScope.$storage.bookmark[index]._id,$rootScope.$storage.user.username).then(function(res){
        $rootScope.$storage.bookmark.splice(index,1);
        $rootScope.showMessage($filter('translate')('SUCCESS'), $filter('translate')('POST_IS_UNBOOKMARK'));
      });
    }
  };

  $scope.$on('$ionicView.beforeEnter', function(){
    APIs.getBookmarks($rootScope.$storage.user.username).then(function(res){
      //console.log(res);
      $rootScope.$storage.bookmark = res.data;
    });
  });
});

app.controller('DraftsCtrl', function($scope, $stateParams, $rootScope, $state, APIs, $interval, $ionicScrollDelegate, $filter) {
  //JSON.stringify({
  $scope.removeDraft = function(_id) {
    APIs.removeDraft(_id,$rootScope.$storage.user.username).then(function(res){
      APIs.getDrafts($rootScope.$storage.user.username).then(function(res){
        //console.log(res);
        $scope.drafts = res.data;
      });
      $rootScope.showMessage($filter('translate')('SUCCESS'), $filter('translate')('POST_IS_UNDRAFT'));
    });
  };

  $scope.$on('$ionicView.beforeEnter', function(){
    APIs.getDrafts($rootScope.$storage.user.username).then(function(res){
      //console.log(res);
      $scope.drafts = res.data;
    });
  });
});

app.controller('ImagesCtrl', function($scope, $stateParams, $rootScope, $state, APIs, $interval, $ionicScrollDelegate, $filter) {
  //JSON.stringify({
  $scope.removeImage = function(_id) {
    APIs.removeImage(_id,$rootScope.$storage.user.username).then(function(res){
      APIs.fetchImages($rootScope.$storage.user.username).then(function(res){
        //console.log(res);
        $scope.images = res.data;
      });
      $rootScope.showMessage($filter('translate')('SUCCESS'), $filter('translate')('IMAGE_REMOVED'));
    });
  };
  $scope.copyImage = function(url){
    cordova.plugins.clipboard.copy(url);
  };
  $scope.$on('$ionicView.beforeEnter', function(){
    APIs.fetchImages($rootScope.$storage.user.username).then(function(res){
      //console.log(res);
      $scope.images = res.data;
    });
  });
});

app.controller('NotificationsCtrl', function($scope, $stateParams, $rootScope, $state, APIs, $interval, $ionicScrollDelegate) {

  $scope.removeNotification = function(index) {
    if ($rootScope.$storage.notifications) {
      $rootScope.$storage.notifications.splice(index,1);
    }
  };
})
app.controller('FollowCtrl', function($scope, $stateParams, $rootScope, $state, APIs, $interval, $ionicScrollDelegate) {
  $scope.searchu = {};

  $scope.$on('$ionicView.beforeEnter', function(){
    $scope.active = "followers";
    $scope.followers = [];
    $scope.following = [];
    $scope.limit = 100;
    $scope.tt = {ruser:"", duser:""};

    $scope.rfetching = function(){
      window.Api.initPromise.then(function(response) {
        window.Api.follow_api().exec("get_followers", [$rootScope.$storage.user.username, $scope.tt.ruser, "blog", $scope.limit]).then(function(res){
          if (res && res.length===$scope.limit) {
            $scope.tt.ruser = res[res.length-1].follower;
          }
          //console.log(res);
          var ll = res.length;
          for (var i = 0; i < ll; i++) {
            res[i].id += 1;
            $scope.followers.push(res[i]);
          }
          if (res.length < $scope.limit) {
            if (!$scope.$$phase){
              $scope.$apply();
            }
          } else {
            setTimeout($scope.rfetching, 5);
          }
        });
      });
    };

    $scope.dfetching = function(){
      window.Api.initPromise.then(function(response) {
        window.Api.follow_api().exec("get_following", [$rootScope.$storage.user.username, $scope.tt.duser, "blog", $scope.limit]).then(function(res){
          if (res && res.length===$scope.limit) {
            $scope.tt.duser = res[res.length-1].following;
          }
          var ll = res.length;

          //console.log(res);
          for (var i = 0; i < ll; i++) {
            res[i].id += 1;
            $scope.following.push(res[i]);
          }
          if (res.length<$scope.limit) {
            if (!$scope.$$phase){
              $scope.$apply();
            }
          } else {
            setTimeout($scope.dfetching, 5);
          }
        });
      });
    };

    $scope.rfetching();
    $scope.dfetching();

  });

  $scope.$on('$ionicView.leave', function(){
    /*if (angular.isDefined($scope.dfetching)){
      $interval.cancel($scope.dfetching);
      $scope.dfetching = undefined;
      $scope.following = undefined;
    }
    if (angular.isDefined($scope.rfetching)){
      $interval.cancel($scope.rfetching);
      $scope.rfetching = undefined;
      $scope.followers = undefined;
    }*/
  });
  $scope.isFollowed = function(x) {
    var len = $scope.following.length;
    for (var i = 0; i < len; i++) {
      if ($scope.following[i].following == x) {
        return true;
      }
    }
    return false;
  };
  $scope.isFollowing = function(x) {
    var len = $scope.followers.length;
    for (var i = 0; i < len; i++) {
      if ($scope.followers[i].follower == x) {
        return true;
      }
    }
    return false;
  };
  $scope.change = function(type){
    $scope.active = type;
    $rootScope.log(type);

    $ionicScrollDelegate.$getByHandle('listScroll').scrollTop();
    if (!$scope.$$phase) {
      $scope.$apply();
    }
    //$scope.loadMore(type);
  }

  $scope.$on('current:reload', function(){
    $rootScope.log('current:reload');
    //$state.go($state.current, {}, {reload: true});
    $scope.followers = [];
    $scope.following = [];
    $scope.rfetching();
    $scope.dfetching();
  });

  $scope.unfollowUser = function(xx){
    $rootScope.following(xx, "unfollow");
  };
  $scope.followUser = function(xx){
    $rootScope.following(xx, "follow");
  };
  $scope.profileView = function(xx){
    $state.go('app.profile', {username: xx});
  };

})

app.controller('ProfileCtrl', function($scope, $stateParams, $rootScope, $ionicActionSheet, $cordovaCamera, ImageUploadService, $ionicPopup, $ionicSideMenuDelegate, $ionicHistory, $state, APIs, $ionicPopover, $filter, $ionicModal) {

  $ionicPopover.fromTemplateUrl('popoverSliderrp.html', {
      scope: $scope
  }).then(function(popover) {
      $scope.tooltipSlider = popover;
  });
  
  $scope.openSlider = function($event, d) {
    $scope.votingPost = d;
    if (!$scope.$$phase) {
      $scope.$apply();
    }
    $scope.rangeValue = $rootScope.$storage.voteWeight/100;
    $scope.tooltipSlider.show($event);
  };

  $scope.drag = function(v) {
    //console.log(v);
    $rootScope.$storage.voteWeight = v*100;
  }
  $scope.votePostS = function() {
    $scope.tooltipSlider.hide();
    $scope.upvotePost($scope.votingPost);
  };

  $scope.closeSlider = function() {
    $scope.tooltipSlider.hide();
  };

  $scope.translationData = { platformname: $rootScope.$storage.platformname, platformpower: $rootScope.$storage.platformpower, platformsunit:"$1.00" };

  $scope.goBack = function() {
    var viewHistory = $ionicHistory.viewHistory();
    if (!viewHistory.backView) {
      $scope.openMenu();
    } else {
      $ionicHistory.goBack();
    }
  };
  $scope.followUser = function(xx){
    $rootScope.following(xx, "follow");
  };
  $scope.unfollowUser = function(xx){
    $rootScope.log(xx);
    $rootScope.following(xx, "unfollow");
  };

  $scope.$on('current:reload', function(){
    $state.go($state.current, {}, {reload: true});
  });

  $ionicPopover.fromTemplateUrl('popoverPTr.html', {
      scope: $scope
   }).then(function(popover) {
      $scope.tooltip = popover;
   });

   $scope.openTooltip = function($event, d) {
    var tppv = Number(d.total_pending_payout_value.split(' ')[0])*$rootScope.$storage.currencyRate;
    var p = Number(d.promoted.split(' ')[0])*$rootScope.$storage.currencyRate;
    var tpv = Number(d.total_payout_value.split(' ')[0])*$rootScope.$storage.currencyRate;
    var ar = Number(d.total_payout_value.split(' ')[0]-d.curator_payout_value.split(' ')[0])*$rootScope.$storage.currencyRate;
    var crp = Number(d.curator_payout_value.split(' ')[0])*$rootScope.$storage.currencyRate;
    var texth = "<div class='row'><div class='col'><b>"+$filter('translate')('PAYOUT_CYCLE')+"</b></div><div class='col'>"+d.mode.replace('_',' ')+"</div></div><div class='row'><div class='col'><b>"+$filter('translate')('POTENTIAL_PAYOUT')+"</b></div><div class='col'>"+$filter('getCurrencySymbol')($rootScope.$storage.currency)+$filter('number')(tppv, 3)+"</div></div><div class='row'><div class='col'><b>"+$filter('translate')('PROMOTED')+"</b></div><div class='col'>"+$filter('getCurrencySymbol')($rootScope.$storage.currency)+$filter('number')(p,3)+"</div></div><div class='row'><div class='col'><b>"+$filter('translate')('PAST_PAYOUT')+"</b></div><div class='col'>"+$filter('getCurrencySymbol')($rootScope.$storage.currency)+$filter('number')(tpv,3)+"</div></div><div class='row'><div class='col'><b>"+$filter('translate')('AUTHOR_PAYOUT')+"</b></div><div class='col'>"+$filter('getCurrencySymbol')($rootScope.$storage.currency)+$filter('number')(ar,3)+"</div></div><div class='row'><div class='col'><b>"+$filter('translate')('CURATION_PAYOUT')+"</b></div><div class='col'>"+$filter('getCurrencySymbol')($rootScope.$storage.currency)+$filter('number')(crp,3)+"</div></div><div class='row'><div class='col'><b>"+$filter('translate')('PAYOUT')+"</b></div><div class='col'>"+$filter('timeago')(d.cashout_time, true)+"</div></div>";
    $scope.tooltipText = texth;
    $scope.tooltip.show($event);
   };

   $scope.closeTooltip = function() {
      $scope.tooltip.hide();
   };

   //Cleanup the popover when we're done with it!
   $scope.$on('$destroy', function() {
      $scope.tooltip.remove();
   });

   // Execute action on hide popover
   $scope.$on('popover.hidden', function() {
      // Execute action
   });

   // Execute action on remove popover
   $scope.$on('popover.removed', function() {
      // Execute action
   });

  $ionicModal.fromTemplateUrl('my-edit.html', {
    scope: $scope,
    animation: 'slide-in-up'
  }).then(function(modal) {
    $scope.modalEdit = modal;
  });
  $scope.closeEdits = function() {
    $scope.modalEdit.hide();
  };
  // Cleanup the modal when we're done with it!
  $scope.$on('$destroy', function() {
    $scope.modalEdit.remove();
  });
  // Execute action on hide modal
  $scope.$on('modal.hidden', function() {
    // Execute action
  });
  $scope.edit = {};
  $scope.showEdits = function() {
    //showedits
    $scope.edit = {};
    $scope.edit = $rootScope.$storage.user.json_metadata || {};
    $scope.modalEdit.show();
  }
  $scope.saveEdit = function(){
    console.log($scope.edit);
    var confirmPopup = $ionicPopup.confirm({
      title: $filter('translate')('ARE_YOU_SURE'),
      template: ""
    });
    confirmPopup.then(function(res) {
      if(res) {
        if (!$rootScope.$storage.user.password && !$rootScope.$storage.user.privateActiveKey) {
          $rootScope.showMessage($filter('translate')('ERROR'), $filter('translate')('LOGIN_FAIL_A'));
        } else {
          var update = $rootScope.$storage.user.json_metadata;
          angular.merge(update, $scope.edit);
          if (update.profilePicUrl) {delete update.profilePicUrl;}
          $rootScope.log('You are sure');
          if ($rootScope.$storage.user) {
            $scope.mylogin = new window.ejs.Login();
            $scope.mylogin.setRoles(["active"]);
            var loginSuccess = $scope.mylogin.checkKeys({
                accountName: $rootScope.$storage.user.username,
                password: $rootScope.$storage.user.password || null,
                auths: {
                  active: $rootScope.$storage.user.active.key_auths
                },
                privateKey: $rootScope.$storage.user.privateActiveKey || null
              }
            );
            //todo: if json_metadata already exist make sure to keep it.
            if (loginSuccess) {
              var tr = new window.ejs.TransactionBuilder();
              tr.add_type_operation("account_update", {
                account: $rootScope.$storage.user.username,
                memo_key: $rootScope.$storage.user.memo_key,
                json_metadata: JSON.stringify(update)
              });
              localStorage.error = 0;
              tr.process_transaction($scope.mylogin, null, true);
              setTimeout(function() {
                $scope.modalEdit.hide();
                if (localStorage.error == 1) {
                  $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('BROADCAST_ERROR')+" "+localStorage.errormessage)
                } else {
                  $rootScope.$broadcast('refreshLocalUserData');
                }
              }, 3000);
            } else {
              $rootScope.showMessage($filter('translate')('ERROR'), $filter('translate')('LOGIN_FAIL_A'));
            }
            $rootScope.$broadcast('hide:loading');
          } else {
            $rootScope.$broadcast('hide:loading');
            $rootScope.showAlert($filter('translate')('WARNING'), $filter('translate')('LOGIN_TO_X'));
          }
        }
      }
    });
  }
  $scope.showProfile = function() {
   var hideSheet = $ionicActionSheet.show({
     buttons: [
       { text: $filter('translate')('CAPTURE_PICTURE') },
       { text: $filter('translate')('SELECT_PICTURE') },
       { text: $filter('translate')('SET_CUSTOM_URL') },
     ],
     destructiveText: $filter('translate')('RESET'),
     titleText: $filter('translate')('MODIFY_PICTURE'),
     cancelText: $filter('translate')('CANCEL'),
     cancel: function() {
        // add cancel code..
      },
     buttonClicked: function(index) {
      if (!$rootScope.$storage.user.password && !$rootScope.$storage.user.privateActiveKey) {
        $rootScope.showMessage($filter('translate')('ERROR'), $filter('translate')('LOGIN_FAIL_A'));
      } else {
        $scope.changeProfileInfo(index, 'profile');
      }
      return true;
     },
     destructiveButtonClicked: function(index){
      var confirmPopup = $ionicPopup.confirm({
        title: $filter('translate')('ARE_YOU_SURE'),
        template: $filter('translate')('RESET_PICTURE_TEXT')
      });
      confirmPopup.then(function(res) {
        if(res) {
          if (!$rootScope.$storage.user.password && !$rootScope.$storage.user.privateActiveKey) {
            $rootScope.showMessage($filter('translate')('ERROR'), $filter('translate')('LOGIN_FAIL_A'));
          } else {
            var update = {profile: {profile_image:""} };
            angular.merge(update, $rootScope.$storage.user.json_metadata);
            if (update.profilePicUrl) {delete update.profilePicUrl;}

            update.profile.profile_image = "";

            $rootScope.log('You are sure');
            if ($rootScope.$storage.user) {
              $scope.mylogin = new window.ejs.Login();
              $scope.mylogin.setRoles(["active"]);
              var loginSuccess = $scope.mylogin.checkKeys({
                  accountName: $rootScope.$storage.user.username,
                  password: $rootScope.$storage.user.password || null,
                  auths: {
                    active: $rootScope.$storage.user.active.key_auths
                  },
                  privateKey: $rootScope.$storage.user.privateActiveKey || null
                }
              );
              //todo: if json_metadata already exist make sure to keep it.
              if (loginSuccess) {
                var tr = new window.ejs.TransactionBuilder();
                tr.add_type_operation("account_update", {
                  account: $rootScope.$storage.user.username,
                  memo_key: $rootScope.$storage.user.memo_key,
                  json_metadata: JSON.stringify(update)
                });
                localStorage.error = 0;
                tr.process_transaction($scope.mylogin, null, true);
                setTimeout(function() {
                  if (localStorage.error == 1) {
                    $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('BROADCAST_ERROR')+" "+localStorage.errormessage)
                  } else {
                    $rootScope.$broadcast('refreshLocalUserData');
                  }
                }, 3000);
              } else {
                $rootScope.showMessage($filter('translate')('ERROR'), $filter('translate')('LOGIN_FAIL_A'));
              }
              $rootScope.$broadcast('hide:loading');
            } else {
              $rootScope.$broadcast('hide:loading');
              $rootScope.showAlert($filter('translate')('WARNING'), $filter('translate')('LOGIN_TO_X'));
            }
          }
        } else {
          $rootScope.log('You are not sure');
        }
      });
      return true;
     }
   });
  };


  $scope.changeProfileInfo = function(type, which) {
    if (!$rootScope.$storage.user.password && !$rootScope.$storage.user.privateActiveKey) {
      $rootScope.showMessage($filter('translate')('ERROR'), $filter('translate')('LOGIN_FAIL_A'));
    } else {
      var options = {};
      if (type == 0 || type == 1) {
        options = {
          quality: 50,
          destinationType: Camera.DestinationType.FILE_URI,
          sourceType: (type===0)?Camera.PictureSourceType.CAMERA:Camera.PictureSourceType.PHOTOLIBRARY,
          allowEdit: (type===0)?true:false,
          encodingType: Camera.EncodingType.JPEG,
          targetWidth: which==='profile'?500:1000,
          targetHeight: 500,
          popoverOptions: CameraPopoverOptions,
          saveToPhotoAlbum: false
          //correctOrientation:true
        };
        $cordovaCamera.getPicture(options).then(function(imageData) {
          ImageUploadService.uploadImage(imageData).then(function(result) {
            //var url = result.secure_url || '';
            var url = result.imageUrl || '';
            var update = { profile: { cover_image: "", profile_image: ""} };
            if (which === 'profile') {
              angular.merge(update, $rootScope.$storage.user.json_metadata);
              if (update.profilePicUrl) {delete update.profilePicUrl;}
              update.profile.profile_image = url;
            } else {
              angular.merge(update, $rootScope.$storage.user.json_metadata);
              update.profile.cover_image = url;
            }

            setTimeout(function() {
              $rootScope.$broadcast('show:loading');
              if ($rootScope.$storage.user) {
                $scope.mylogin = new window.ejs.Login();
                $scope.mylogin.setRoles(["active"]);
                var loginSuccess = $scope.mylogin.checkKeys({
                    accountName: $rootScope.$storage.user.username,
                    password: $rootScope.$storage.user.password || null,
                    auths: {
                      active: $rootScope.$storage.user.active.key_auths
                    },
                    privateKey: $rootScope.$storage.user.privateActiveKey || null,
                  }
                );
                if (loginSuccess) {
                  var tr = new window.ejs.TransactionBuilder();
                  tr.add_type_operation("account_update", {
                    account: $rootScope.$storage.user.username,
                    memo_key: $rootScope.$storage.user.memo_key,
                    json_metadata: JSON.stringify(update)
                  });

                  localStorage.error = 0;

                  tr.process_transaction($scope.mylogin, null, true);

                  setTimeout(function() {
                    if (localStorage.error == 1) {
                      $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('BROADCAST_ERROR')+" "+localStorage.errormessage);
                    } else {
                      $rootScope.$broadcast('refreshLocalUserData');
                    }
                  }, 3000);
                } else {
                  $rootScope.showMessage($filter('translate')('ERROR'), $filter('translate')('LOGIN_FAIL_A'));
                }
              $rootScope.$broadcast('hide:loading');
              } else {
                $rootScope.$broadcast('hide:loading');
                $rootScope.showAlert($filter('translate')('WARNING'), $filter('translate')('LOGIN_TO_X'));
              }
            }, 5);
            if (!ionic.Platform.isAndroid() || !ionic.Platform.isWindowsPhone()) {
              $cordovaCamera.cleanup();
            }
          },
          function(err) {
            $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('UPLOAD_ERROR'));
            if (!ionic.Platform.isAndroid() || !ionic.Platform.isWindowsPhone()) {
              $cordovaCamera.cleanup();
            }
          });
        }, function(err) {
          $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('CAMERA_CANCELLED'));
        });
      } else {
        $ionicPopup.prompt({
          title: $filter('translate')('SET_URL'),
          template: $filter('translate')('DIRECT_LINK_PICTURE'),
          inputType: 'text',
          inputPlaceholder: 'http://example.com/image.jpg'
        }).then(function(res) {
          $rootScope.log('Your url is'+ res);
          if (res) {
            var update = { profile: { profile_image: "", cover_image:"" } };
            if (which==="profile") {
              angular.merge(update, $rootScope.$storage.user.json_metadata);
              if (update.profilePicUrl) {delete update.profilePicUrl;}
              update.profile.profile_image = res;
            } else {
              angular.merge(update, $rootScope.$storage.user.json_metadata);
              update.profile.cover_image = res;
            }

            setTimeout(function() {
              if ($rootScope.$storage.user) {
                $scope.mylogin = new window.ejs.Login();
                $scope.mylogin.setRoles(["active"]);
                var loginSuccess = $scope.mylogin.checkKeys({
                    accountName: $rootScope.$storage.user.username,
                    password: $rootScope.$storage.user.password || null,
                    auths: {
                      active: $rootScope.$storage.user.active.key_auths
                    },
                    privateKey: $rootScope.$storage.user.privateActiveKey || null,
                  }
                );
                if (loginSuccess) {
                  var tr = new window.ejs.TransactionBuilder();
                  tr.add_type_operation("account_update", {
                    account: $rootScope.$storage.user.username,
                    memo_key: $rootScope.$storage.user.memo_key,
                    json_metadata: JSON.stringify(update)
                  });
                  localStorage.error = 0;
                  tr.process_transaction($scope.mylogin, null, true);
                  setTimeout(function() {
                    if (localStorage.error == 1) {
                      $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('BROADCAST_ERROR')+" "+localStorage.errormessage)
                    } else {
                      //$scope.refreshLocalUserData();
                      $rootScope.$broadcast('refreshLocalUserData');
                    }
                  }, 3000);
                } else {
                  $rootScope.showMessage($filter('translate')('ERROR'), $filter('translate')('LOGIN_FAIL_A'));
                }
                $rootScope.$broadcast('hide:loading');
              } else {
                $rootScope.$broadcast('hide:loading');
                $rootScope.showAlert($filter('translate')('WARNING'), $filter('translate')('LOGIN_TO_X'));
              }
            }, 5);
          }
        });
      }
    }
  };

  $scope.showCover = function() {
   var hideSheet = $ionicActionSheet.show({
     buttons: [
       { text: $filter('translate')('CAPTURE_PICTURE') },
       { text: $filter('translate')('SELECT_PICTURE') },
       { text: $filter('translate')('SET_CUSTOM_URL') },
     ],
     destructiveText: $filter('translate')('RESET'),
     titleText: $filter('translate')('MODIFY_COVER_PICTURE'),
     cancelText: $filter('translate')('CANCEL'),
     cancel: function() {
        // add cancel code..
      },
     buttonClicked: function(index) {
      if (!$rootScope.$storage.user.password && !$rootScope.$storage.user.privateActiveKey) {
        $rootScope.showMessage($filter('translate')('ERROR'), $filter('translate')('LOGIN_FAIL_A'));
      } else {
        $scope.changeProfileInfo(index, 'cover');
      }
      return true;
     },
     destructiveButtonClicked: function(index){
      var confirmPopup = $ionicPopup.confirm({
        title: $filter('translate')('ARE_YOU_SURE'),
        template: $filter('translate')('RESET_COVER_PICTURE_TEXT')
      });
      confirmPopup.then(function(res) {
        if(res) {
          if (!$rootScope.$storage.user.password && !$rootScope.$storage.user.privateActiveKey) {
            $rootScope.showMessage($filter('translate')('ERROR'), $filter('translate')('LOGIN_FAIL_A'));
          } else {
            var update = {profile: {cover_image:""} };
            angular.merge(update, $rootScope.$storage.user.json_metadata);
            update.profile.cover_image = "";

            $rootScope.log('You are sure');
            if ($rootScope.$storage.user) {
              $scope.mylogin = new window.ejs.Login();
              $scope.mylogin.setRoles(["active"]);
              var loginSuccess = $scope.mylogin.checkKeys({
                  accountName: $rootScope.$storage.user.username,
                  password: $rootScope.$storage.user.password || null,
                  auths: {
                    active: $rootScope.$storage.user.active.key_auths
                  },
                  privateKey: $rootScope.$storage.user.privateActiveKey || null
                }
              );
              //todo: if json_metadata already exist make sure to keep it.
              if (loginSuccess) {
                var tr = new window.ejs.TransactionBuilder();
                tr.add_type_operation("account_update", {
                  account: $rootScope.$storage.user.username,
                  memo_key: $rootScope.$storage.user.memo_key,
                  json_metadata: JSON.stringify(update)
                });
                localStorage.error = 0;
                tr.process_transaction($scope.mylogin, null, true);
                setTimeout(function() {
                  if (localStorage.error == 1) {
                    $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('BROADCAST_ERROR')+" "+localStorage.errormessage)
                  } else {
                    $rootScope.$broadcast('refreshLocalUserData');
                  }
                }, 3000);
              } else {
                $rootScope.showMessage($filter('translate')('ERROR'), $filter('translate')('LOGIN_FAIL_A'));
              }
              $rootScope.$broadcast('hide:loading');
            } else {
              $rootScope.$broadcast('hide:loading');
              $rootScope.showAlert($filter('translate')('WARNING'), $filter('translate')('LOGIN_TO_X'));
            }
          }
        } else {
          $rootScope.log('You are not sure');
        }
      });
      return true;
     }
   });
  };


  $rootScope.$on('profileRefresh', function(){
    $scope.refresh();
  });
  $scope.upvotePost = function(post) {
    $rootScope.votePost(post, 'upvote', 'profileRefresh');
  };
  $scope.downvotePost = function(post) {
    var confirmPopup = $ionicPopup.confirm({
      title: $filter('translate')('ARE_YOU_SURE'),
      template: $filter('translate')('FLAGGING_TEXT')
    });
    confirmPopup.then(function(res) {
      if(res) {
        $rootScope.log('You are sure');
        $rootScope.votePost(post, 'downvote', 'profileRefresh');
      } else {
        $rootScope.log('You are not sure');
      }
    });
  };
  $scope.unvotePost = function(post) {
    $rootScope.votePost(post, 'unvote', 'profileRefresh');
  };

  $scope.isFollowing = function(xx) {
    if ($scope.following && $scope.following.indexOf(xx)!==-1) {
      return true;
    } else {
      return false;
    }
  };
  $scope.ifExists = function(xx){
    for (var i = 0; i < $scope.data.profile.length; i++) {
      if ($scope.data.profile[i].permlink === xx){
        return true;
      }
    }
    return false;
  }
  $scope.end = false;
  $scope.clen = 20;
  $scope.moreDataCanBeLoaded = function(){
    return ($scope.data.profile && $scope.data.profile.length>0) && !$scope.end;
  }

  $scope.loadmore = function() {
    //console.log('loadmore');
    var params = {tag: $stateParams.username, limit: 20};
    var len = $scope.data.profile?$scope.data.profile.length:0;

    //console.log($scope.data.profile);

    if (len>0) {
      params.start_author = $scope.data.profile[len-1].author;
      params.start_permlink = $scope.data.profile[len-1].permlink;

      if ($scope.end) {
        //$rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('REQUEST_LIMIT_TEXT'));
        $scope.$broadcast('scroll.infiniteScrollComplete');
        $rootScope.$broadcast('hide:loading');
      } else {
        //console.log(params);
        //$rootScope.log("fetching profile...blog 20 ");
        window.Api.initPromise.then(function(response) {
          if (typeof window.Api.database_api === "function") {
            if ($scope.active == 'blog') {
              window.Api.database_api().exec("get_discussions_by_blog", [params]).then(function(response){

                if (response) {
                  for (var j = 0; j < response.length; j++) {
                    var v = response[j];
                    v.json_metadata = v.json_metadata?angular.fromJson(v.json_metadata):v.json_metadata;
                    !$scope.$$phase?$scope.$apply():console.log('phased');
                    var found = false;
                    for (var i = $scope.data.profile.length-1; i >= 0; i--) {
                      if ($scope.data.profile[i].id === v.id){
                        found = true;
                        //console.log($scope.data.profile[i].id, v.id);
                      }
                    }
                    if (!found){
                      //console.log(v.id);
                      $scope.data.profile.push(v);
                    }
                    if (response.length <= 1) {
                      $scope.end = true;
                    } else {
                      $scope.end = false;
                    }
                  }
                }
              });
              $scope.$broadcast('scroll.infiniteScrollComplete');
            }
            if ($scope.active == 'posts') {
              window.Api.database_api().exec("get_discussions_by_comments", [params]).then(function(response){

                if (response) {
                  for (var j = 0; j < response.length; j++) {
                    var v = response[j];
                    v.json_metadata = v.json_metadata?angular.fromJson(v.json_metadata):v.json_metadata;
                    !$scope.$$phase?$scope.$apply():console.log('phased');
                    var found = false;
                    for (var i = $scope.data.profile.length-1; i >= 0; i--) {
                      if ($scope.data.profile[i].id === v.id){
                        found = true;
                        //console.log($scope.data.profile[i].id, v.id);
                      }
                    }
                    if (!found){
                      //console.log(v.id);
                      $scope.data.profile.push(v);
                    }
                    if (response.length <= 1) {
                      $scope.end = true;
                    } else {
                      $scope.end = false;
                    }
                  }
                }
              });
              $scope.$broadcast('scroll.infiniteScrollComplete');
            }
            if ($scope.active == 'recent-replies') {
              var pp = [$scope.data.profile[$scope.data.profile.length-1].author, $scope.data.profile[$scope.data.profile.length-1].permlink, 20];
              window.Api.database_api().exec("get_replies_by_last_update", [pp]).then(function(response){
                //console.log(response);
                if (response) {
                  for (var j = 0; j < response.length; j++) {
                    var v = response[j];
                    v.json_metadata = v.json_metadata?angular.fromJson(v.json_metadata):v.json_metadata;
                    !$scope.$$phase?$scope.$apply():console.log('phased');
                    var found = false;
                    for (var i = $scope.data.profile.length-1; i >= 0; i--) {
                      if ($scope.data.profile[i].id === v.id){
                        found = true;
                        //console.log($scope.data.profile[i].id, v.id);
                      }
                    }
                    if (!found){
                      //console.log(v.id);
                      $scope.data.profile.push(v);
                    }
                    if (response.length <= 1) {
                      $scope.end = true;
                    } else {
                      $scope.end = false;
                    }
                  }
                }
              });
              $scope.$broadcast('scroll.infiniteScrollComplete');
            }
            //console.log($scope.profile);
          }
        });
      }
    }

  }
  $scope.$on('$ionicView.beforeEnter', function(){
    $scope.user = {username: $stateParams.username};
    $scope.follower = [];
    $scope.following = [];
    $scope.limit = 100;
    $scope.tt = {duser: "", ruser: ""};

    $scope.refresh = function() {
      if (!$scope.active) {
        $scope.active = "blog";
      }
      if ($scope.active != "blog") {
        $scope.rest = "/"+$scope.active;
      } else {
        $scope.rest = "";
      }

      $scope.nonexist = false;
      window.Api.initPromise.then(function(response) {
        window.Api.database_api().exec("get_state", ["/@"+$stateParams.username+$scope.rest]).then(function(res){
          $scope.data = {profile: []};
          //console.log(res);
          if (Object.keys(res.content).length>0) {
            angular.forEach(res.content, function(v,k){
              v.json_metadata = v.json_metadata?angular.fromJson(v.json_metadata):v.json_metadata;
              if ($rootScope.$storage.user){
                if ($rootScope.$storage.user.username !== v.author) {
                  v.reblogged = true;
                }
                var len = v.active_votes.length;
                for (var j = len - 1; j >= 0; j--) {
                  if (v.active_votes[j].voter === $rootScope.$storage.user.username) {
                    if (v.active_votes[j].percent > 0) {
                      v.upvoted = true;
                    } else if (v.active_votes[j].percent < 0) {
                      v.downvoted = true;
                    } else {
                      v.upvoted = false;
                      v.downvoted = false;
                    }
                  }
                }
              }
              $scope.data.profile.push(v);
            });
            $scope.nonexist = false;
            if(!$scope.$$phase){
              $scope.$apply();
            }
          } else {
            $scope.nonexist = true;
          }
        });
      });
    };
    $scope.dfetching = function(){
      window.Api.initPromise.then(function(response) {
        window.Api.follow_api().exec("get_following", [$stateParams.username, $scope.tt.duser, "blog", $scope.limit]).then(function(res){
          if (res && res.length===$scope.limit) {
            $scope.tt.duser = res[res.length-1].following;
          }
          var len = res.length;
          for (var i = 0; i < len; i++) {
            $scope.following.push(res[i].following);
          }
          if (res.length<$scope.limit) {
            if (!$scope.$$phase) {
              $scope.$apply();
            }
          } else {
            setTimeout($scope.dfetching, 5);
          }
        });
      });
    };
    $scope.rfetching = function(){
      window.Api.initPromise.then(function(response) {
        window.Api.follow_api().exec("get_followers", [$stateParams.username, $scope.tt.ruser, "blog", $scope.limit]).then(function(res){
          if (res && res.length===$scope.limit) {
            $scope.tt.ruser = res[res.length-1].follower;
          }
          var len = res.length;
          for (var i = 0; i < len; i++) {
            $scope.follower.push(res[i].follower);
          }
          if (res.length<$scope.limit) {
            if (!$scope.$$phase) {
              $scope.$apply();
            }
          } else {
            setTimeout($scope.rfetching, 10);
          }
        });
      });
    };
    $scope.getFollows = function(r,d) {      
      if (r) {
        $rootScope.log("rfetching");
        $scope.rfetching();
      }
      if (d) {
        $rootScope.log("dfetching");
        $scope.dfetching();
      }
    };
    $scope.getOtherUsersData = function() {
      console.log("getOtherUsersData");
      window.Api.initPromise.then(function(response) {
        window.Api.database_api().exec("get_accounts", [[$stateParams.username]]).then(function(dd){
          dd = dd[0];
          if (dd && dd.json_metadata) {
            dd.json_metadata = angular.fromJson(dd.json_metadata);
          }
          angular.merge($scope.user, dd);
          //console.log(angular.toJson($scope.user));
          //console.log($scope.user.json_metadata.profile.cover_image);

          if ($rootScope.$storage.user) {
            $scope.css = ($rootScope.$storage.user.username === $scope.user.username && $rootScope.$storage.user.json_metadata.profile.cover_image) ? {'background': 'url('+$rootScope.$storage.user.json_metadata.profile.cover_image+')', 'background-size': 'cover', 'background-position':'fixed'} : ($rootScope.$storage.user.username !== $scope.user.username && ($scope.user.json_metadata && $scope.user.json_metadata.profile.cover_image)) ? {'background': 'url('+$scope.user.json_metadata.profile.cover_image+')', 'background-size': 'cover', 'background-position':'fixed'} : null;
          } else {
            $scope.css = null;
          }
          if (!$scope.$$phase){
            $scope.$apply();
          }
        });
        window.Api.follow_api().exec("get_follow_count", [$stateParams.username]).then(function(res){
          //console.log(res);
          $scope.followdetails = res;
        });
      });
      $scope.getFollows(null, "d");
      if(!$scope.$$phase){
        $scope.$apply();
      }
    };

    $scope.refresh();
    if ($rootScope.$storage.user) {
      if ($rootScope.$storage.user.username !== $stateParams.username) {
        $scope.getOtherUsersData();
      } else {
          $rootScope.log("get follows counts");
          if ($rootScope.$storage.chain == "steem") {
            window.Api.initPromise.then(function(response) {
              window.Api.follow_api().exec("get_follow_count", [$stateParams.username]).then(function(res){
                //console.log(res);
                $scope.followdetails = res;
              });
            });
          } else {
            $scope.getFollows("r","d");
            setTimeout(function() {
              $scope.followdetails = {follower_count: $scope.follower.length, following_count: $scope.following.length}; 
              if (!$scope.$$phase) {
                $scope.$apply();
              } 
            }, 2000);            
          }
      }
    } else {
      if ($stateParams.username) {
        $scope.getOtherUsersData();
      }
    }

    //setTimeout(function() {
      $scope.css = ($rootScope.$storage.user&& $rootScope.$storage.user.username === $scope.user.username && $rootScope.$storage.user.json_metadata && $rootScope.$storage.user.json_metadata.profile && $rootScope.$storage.user.json_metadata.profile.cover_image) ? {'background': 'url('+$rootScope.$storage.user.json_metadata.profile.cover_image+')', 'background-size': 'cover', 'background-position':'fixed'} : ($rootScope.$storage.user && $rootScope.$storage.user.username !== $scope.user.username && ($scope.user.json_metadata && $scope.user.json_metadata.profile && $scope.user.json_metadata.profile.cover_image)) ? {'background': 'url('+$scope.user.json_metadata.profile.cover_image+')', 'background-size': 'cover', 'background-position':'fixed'} : null;
      //console.log($scope.css);
    //}, 1);

  });
  $scope.openMenu = function() {
    $ionicSideMenuDelegate.toggleLeft();
  }
  $scope.change = function(type){
    $scope.data = undefined;
    $scope.data = {profile: []};
    $scope.accounts = [];
    $scope.active = type;
    $scope.end = false;
    if (type != "blog") {
      $scope.rest = "/"+type;
    } else {
      $scope.rest = "";
    }
    window.Api.initPromise.then(function(response) {
      window.Api.database_api().exec("get_state", ["/@"+$stateParams.username+$scope.rest]).then(function(res){
        //console.log(res);
        if (res.content) {
          if (Object.keys(res.content).length>0) {
            angular.forEach(res.content, function(v,k){
              v.json_metadata = v.json_metadata?angular.fromJson(v.json_metadata):v.json_metadata;
              if ($rootScope.$storage.user){
                if ($rootScope.$storage.user.username !== v.author) {
                  v.reblogged = true;
                }
                var len = v.active_votes.length;
                for (var j = len - 1; j >= 0; j--) {
                  if (v.active_votes[j].voter === $rootScope.$storage.user.username) {
                    if (v.active_votes[j].percent > 0) {
                      v.upvoted = true;
                    } else if (v.active_votes[j].percent < 0) {
                      v.downvoted = true;
                    } else {
                      v.upvoted = false;
                      v.downvoted = false;
                    }
                  }
                }
              }
              $scope.data.profile.push(v);
            });
            $scope.nonexist = false;
          } else {
            $scope.nonexist = true;
          }
          if(!$scope.$$phase){
            $scope.$apply();
          }
        }
        if (type==="transfers" || type==="permissions") {
          for (var property in res.accounts) {
            if (res.accounts.hasOwnProperty(property)) {
              $scope.accounts = res.accounts[property];
              //$rootScope.log(angular.toJson(res.accounts[property].transfer_history));

              $scope.transfers = res.accounts[property].transfer_history;
              //console.log($scope.transfers);
              $scope.nonexist = false;
            }
          }
          if(!$scope.$$phase){
            $scope.$apply();
          }
        }
      });
    });
    if(!$scope.$$phase){
      $scope.$apply();
    }
  }

})

app.controller('ExchangeCtrl', function($scope, $stateParams, $rootScope) {
  $scope.username = $stateParams.username;

  $scope.$on('$ionicView.beforeEnter', function(){
    $scope.active = 'buy';
    $scope.orders = [];
    window.Api.initPromise.then(function(response) {
      window.Api.database_api().exec("get_order_book", [15]).then(function(res){
        $scope.orders = res;
        if (!$scope.$$phase) {
          $scope.$apply();
        }
      });
    });
    $scope.change = function(type){
      $scope.active = type;
      if (type == "open"){
        window.Api.initPromise.then(function(response) {
          window.Api.database_api().exec("get_open_orders", [$stateParams.username]).then(function(res){
            $scope.openorders = res;
            if (!$scope.$$phase) {
              $scope.$apply();
            }
          });
        });
      }
      if (type == "history"){
        $scope.history = [];
        window.Api.initPromise.then(function(response) {
          window.Api.market_history_api().exec("get_recent_trades", [15]).then(function(r){
            $scope.recent_trades = r;
            if (!$scope.$$phase) {
              $scope.$apply();
            }
          });
        });
      }
    };
  });

});
app.controller('MarketCtrl', function($scope, $rootScope, $state, $ionicPopover, $ionicPopup, $filter, $translate, $ionicPlatform, $window) {

  $scope.requestApp = function(name) {
    $ionicPlatform.ready(function() {
      if (name == 'New') {
        window.open("mailto:info@esteem.ws?subject=Suggesting%20New%20App%20for%20Market%20Place&body=Hello!%0D%0A%0D%0AAppName:%0D%0AAppAuthor:%0D%0AAppLink:%0D%0A%0D%0A", "_system");
      }
      if (ionic.Platform.isIOS() || ionic.Platform.isIPad()) {
        if (name == 'SteemMonitor') {
          //cordova.plugins.market.open('id1158918690');
          window.open("itms-apps://itunes.apple.com/app/id1158918690", "_system");
        }
        if (name == 'SteemFest') {
          //cordova.plugins.market.open('id1171371708');
          window.open("itms-apps://itunes.apple.com/app/id1171371708", "_system");
        }
      } else {
        if (name == 'SteemMonitor') {
          //cordova.plugins.market.open('com.netsolutions.esteemwitness');
          window.open("market://details?id=com.netsolutions.esteemwitness", "_system");
        }
        if (name == 'SteemFest') {
          //cordova.plugins.market.open('com.netsolutions.steemfest');
          window.open("market://details?id=com.netsolutions.steemfest", "_system");
        }
      }
    });
  }

});

app.controller('SettingsCtrl', function($scope, $stateParams, $rootScope, $ionicHistory, $state, $ionicPopover, $ionicPopup, APIs, $filter, $translate, $window, $ionicSideMenuDelegate) {

   $ionicPopover.fromTemplateUrl('popover.html', {
      scope: $scope
   }).then(function(popover) {
      $scope.tooltip = popover;
   });

   $scope.openTooltip = function($event, d) {
      var texth = d;
      $scope.tooltipText = texth;
      $scope.tooltip.show($event);
   };

  function getDate(xx) {
    angular.forEach($rootScope.$storage.currencies, function(v,k){
      if (v.id == xx) {
        return true;
      }
    });
  }

  function searchObj(nameKey, myArray) {
    for (var i=0; i < myArray.length; i++) {
        if (myArray[i].id === nameKey) {
            return myArray[i];
        }
    }
  }

  $scope.changeCurrency = function(xx, ignore) {
    $rootScope.$broadcast('changedCurrency', {currency: xx, enforce: ignore});
  }
  $scope.changeChain = function() {
    $scope.restart = true;
    if ($rootScope.$storage.chain == 'steem'){
      $rootScope.$storage.platformname = "Steem";
      $rootScope.$storage.platformpower = "Steem Power";
      $rootScope.$storage.platformsunit = "Steem";
      $rootScope.$storage.platformdollar = "Steem Dollar";
      $rootScope.$storage.platformdunit = "SBD";
      $rootScope.$storage.platformpunit = "SP";
      $rootScope.$storage.platformlunit = "STEEM";
      $rootScope.$storage.socketsteem = "wss://steemd.steemit.com";
      $scope.socket = "wss://steemd.steemit.com";
    } else {
      $rootScope.$storage.platformname = "ГОЛОС";
      $rootScope.$storage.platformpower = "СИЛА ГОЛОСА";
      $rootScope.$storage.platformsunit = "Голос";
      $rootScope.$storage.platformdollar = "ЗОЛОТОЙ";
      $rootScope.$storage.platformdunit = "GBG";
      $rootScope.$storage.platformpunit = "GOLOSP";
      $rootScope.$storage.platformlunit = "GOLOS";
      $rootScope.$storage.socketgolos = "wss://ws.golos.io/";
      //$scope.socket = "wss://golos.steem.ws";
      $scope.socket = "wss://ws.golos.io/";
    }
    window.ejs.ChainConfig.setChainId(localStorage[$rootScope.$storage.chain+"Id"]);

    $scope.changeCurrency($rootScope.$storage.currency, true);
  }
  $scope.restart = false;
  $scope.closeTooltip = function() {
    $scope.tooltip.hide();
  };

  //Cleanup the popover when we're done with it!
  $scope.$on('$destroy', function() {
    $scope.tooltip.remove();
  });

  $scope.changeLanguage = function(locale){
    setTimeout(function() {
      $translate.use(locale);
      if (!$scope.$$phase) {
        $scope.$apply();
      }
    }, 1);
  }
  $scope.drag = function(v) {
    $rootScope.$storage.voteWeight = v*100;
  }
  $scope.$on('$ionicView.beforeEnter', function(){
    $rootScope.$storage["socket"+$rootScope.$storage.chain] = localStorage.socketUrl;
    $scope.data = {};
    if (!$rootScope.$storage.voteWeight){
      $rootScope.$storage.voteWeight = 10000;
      $scope.vvalue = 100;
    } else {
      $scope.vvalue = $rootScope.$storage.voteWeight/100;
    }
    if(!$scope.$$phase){
      $scope.$apply();
    }
    
    if ($rootScope.$storage.pincode) {
      $scope.data = {pin: true};
    } else {
      $scope.data = {pin: false};
    }

    if ($rootScope.$storage.user && $rootScope.$storage.deviceid) {
      APIs.getSubscriptions($rootScope.$storage.deviceid).then(function(res){
        $rootScope.log(angular.toJson(res.data));
        var d = res.data;
        angular.forEach(d, function(v,k){
          if (v.username == $rootScope.$storage.user.username) {
            angular.merge($scope.data, {vote: v.subscription.vote, follow: v.subscription.follow, comment: v.subscription.comment, mention: v.subscription.mention, resteem: v.subscription.resteem});    
          }          
        })
        
        if (!$scope.$$phase){
          $scope.$apply();
        }
      });
    }

    if (!$scope.$$phase){
      $scope.$apply();
    }
  });

  $scope.notificationChange = function() {
    $rootScope.$storage.subscription = {
      vote: $scope.data.vote,
      comment: $scope.data.comment,
      follow: $scope.data.follow,
      mention: $scope.data.mention,
      resteem: $scope.data.resteem,
      device: ionic.Platform.platform(),
      timestamp: $filter('date')(new Date(), 'medium'),
      appversion: '1.3.9'
    }
    APIs.updateSubscription($rootScope.$storage.deviceid, $rootScope.$storage.user.username, $rootScope.$storage.subscription).then(function(res){
      console.log(angular.toJson(res));
    });

  }

  $scope.pinChange = function() {
    $rootScope.log("pinChange");
    if ($rootScope.$storage.pincode) {
      $rootScope.$broadcast("pin:check");
    } else {
      $rootScope.$broadcast("pin:new");
    }
  }

  $rootScope.$on("pin:correct", function(){
    $rootScope.log("pin:correct " + $scope.data.pin);
    if (!$scope.data.pin) {
        $rootScope.$storage.pincode = undefined;
    }
    if ($rootScope.$storage.pincode) {
      $scope.data.pin = true;
    } else {
      $scope.data.pin = false;
    }
    if (!$scope.$$phase){
      $scope.$apply();
    }
  });

  $rootScope.$on("pin:failed", function(){
    $rootScope.log("pin:failed");
    setTimeout(function() {
      if ($rootScope.$storage.pincode) {
        $scope.data.pin = true;
      } else {
        $scope.data.pin = false;
      }
      if (!$scope.$$phase){
        $scope.$apply();
      }
    }, 10);

  });
  $scope.logouts = function() {
    $rootScope.$storage.user = undefined;
    $rootScope.$storage.user = null;
    $rootScope.$storage.mylogin = undefined;
    $rootScope.$storage.mylogin = null;
    //make sure user credentials cleared.
    if ($rootScope.$storage.deviceid) {
      APIs.deleteSubscription($rootScope.$storage.deviceid).then(function(res){
        $ionicSideMenuDelegate.toggleLeft();
        //$window.location.reload(true);
        $state.go('app.posts',{renew:true},{reload: true});
      });
    } else {
      $ionicSideMenuDelegate.toggleLeft();
      //$window.location.reload(true);
      $state.go('app.posts',{renew:true},{reload: true});
    }
    $rootScope.$storage.filter = undefined;
    $rootScope.$storage.tag = undefined;

    $ionicHistory.clearCache();
    $ionicHistory.clearHistory();
    setTimeout(function() {
      ionic.Platform.exitApp(); // stops the app
    }, 100);
  };
  $scope.socket = $rootScope.$storage["socket"+$rootScope.$storage.chain];
  $scope.socketChange = function(xx){
    console.log(xx);
    $rootScope.$storage["socket"+$rootScope.$storage.chain] = xx;
    localStorage.socketUrl = xx;
    $scope.restart = true;
  }
  $scope.save = function(){
    if ($scope.restart) {
      var confirmPopup = $ionicPopup.confirm({
        title: $filter('translate')('ARE_YOU_SURE'),
        template: $filter('translate')('UPDATE_REQUIRES_RESTART')
      });
      confirmPopup.then(function(res) {
        if(res) {
          $rootScope.log('You are sure');
          localStorage.socketUrl = $rootScope.$storage["socket"+$rootScope.$storage.chain];
          //$scope.logouts();
          setTimeout(function() {
            window.Api.close();
            window.Api = null;
            window.steemRPC.Client.close();
            var socketUrl = $rootScope.$storage["socket"+$rootScope.$storage.chain];
            window.Api = window.steemRPC.Client.get({url:socketUrl}, true);
            if ($rootScope.$storage.user.chain != $rootScope.$storage.chain) {
              angular.forEach($rootScope.$storage.users, function(v,k){
                if (v.chain == $rootScope.$storage.chain){
                  $rootScope.$storage.user = v;
                }
              });
            }
            window.Api.initPromise.then(function(response) {
              $state.go('app.posts',{renew:true},{reload: true});
            });
          }, 500);
        } else {
          $rootScope.log('You are not sure');
        }
      });
    } else {
      $rootScope.showMessage($filter('translate')('SUCCESS'), $filter('translate')('SETTINGS_UPDATED'));
      $ionicHistory.nextViewOptions({
        disableBack: true
      });
      //$window.location.reload(true);  
      $state.go('app.posts',{renew:true},{reload: true});
    }
  };

});
}

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/posts/controllers.js","/posts")
},{"buffer":11,"pBGvAp":74}],103:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){


var app = angular.module('steem', [
	'ionic',
	'ngStorage',
	'ngCordova',
  'ion-floating-menu',
  'pascalprecht.translate',
  'ja.qr',
  'ion-datetime-picker'
]);

if (localStorage.getItem("socketUrl") === null) {
  localStorage.setItem("socketUrl", "wss://steemd.steemit.com");
} else if (localStorage.getItem("socketUrl") == "wss://steemit.com/wspa") {
  localStorage.socketUrl="wss://steemd.steemit.com";
}

localStorage.golosId = "782a3039b478c839e4cb0c941ff4eaeb7df40bdd68bd441afd444b9da763de12";
localStorage.steemId = "0000000000000000000000000000000000000000000000000000000000000000";

window.steemRPC = require("steem-rpc");
window.Api = window.steemRPC.Client.get({url:localStorage.socketUrl}, true);
//window.steemJS = require("steemjs-lib");

window.ejs = require("esteem-lib");

//window.golosJS = require("golosjs-lib");
window.diff_match_patch = require('diff-match-patch');
window.getSymbol = require('currency-symbol-map');

require('./config')(app);
require('./services')(app);
require('./controllers')(app);


app.config(function($stateProvider, $urlRouterProvider, $ionicConfigProvider, $sceDelegateProvider, $logProvider, $compileProvider, $animateProvider, $translateProvider) {
  $stateProvider

  .state('app', {
    url: '/app',
    abstract: true,
    template: "<ion-side-menus enable-menu-with-back-views=\"true\" view-cache=\"false\">\n  <ion-side-menu-content drag-content=\"false\">\n    <ion-nav-bar class=\"bar-positive\">\n      <ion-nav-back-button>\n      </ion-nav-back-button>\n      <ion-nav-buttons side=\"left\">\n        <button class=\"button button-icon button-clear ion-navicon\" menu-toggle=\"left\">\n        </button>\n      </ion-nav-buttons>\n    </ion-nav-bar>\n    <ion-nav-view name=\"menuContent\"></ion-nav-view>\n  </ion-side-menu-content>\n  <ion-side-menu side=\"left\">\n    <!--<ion-header-bar class=\"bar-positive\" ng-if=\"!$root.$storage.user\">\n      <h1 class=\"title center\">eSteem</h1>\n    </ion-header-bar>-->\n    <ion-content>\n      <div ng-if=\"!$root.$storage.user\">\n        <center>\n          <p>\n            <img ng-src=\"img/esteem.png\" width=\"150\" />\n          </p>\n        </center>\n      </div>\n      <div ng-if=\"$root.$storage.user\" ng-style=\"$root.$storage.user.json_metadata.profile.cover_image ? mcss : null\">\n      <br>\n        <center>\n          <a menu-close href=\"#/app/profile/{{$root.$storage.user.username}}\" class=\"item-myavatar\" ng-if=\"$root.$storage.user\">\n            <span class=\"item-myavatar\" ng-if=\"!$root.$storage.user.json_metadata.user_image && !$root.$storage.user.json_metadata.profile.profile_image\"><img src=\"img/user_profile.png\"></span>\n            <img ng-src=\"{{$root.$storage.user.json_metadata.profile.profile_image || $root.$storage.user.json_metadata.user_image}}\" ng-if=\"$root.$storage.user.json_metadata.user_image || $root.$storage.user.json_metadata.profile.profile_image\" />\n          </a>\n          <div>\n            <div class=\"h4\">@{{$root.$storage.user.username}}&nbsp;<div class=\"reputation\">{{$root.$storage.user.reputation|reputation:true|number:1}}</div></div>\n            <div ng-click=\"showMeExtra()\" class=\"padding\"><i class=\"icon ion-android-list\"></i>&nbsp;{{$root.$storage.user.post_count}}&nbsp;&nbsp;<i class=\"icon ion-arrow-graph-up-right\"></i>&nbsp;{{$root.$storage.user.voting_power/100|number:2}} <i class=\"icon pull-right\" ng-class=\"{'ion-arrow-down-b':!showExtra, 'ion-arrow-up-b':showExtra}\"></i></div>\n          </div>\n        </center>\n      </div>\n      <div ng-if=\"showExtra\">\n        <ion-list>\n          <ion-item menu-close class=\"item-icon-left\" ng-if=\"$root.$storage.users\" ng-repeat=\"user in $root.$storage.users\" ng-click=\"selectAccount(user)\" ng-class=\"{'active': (user.username==$root.$storage.user.username&&user.chain==$root.$storage.user.chain) }\">\n            <img class=\"icon logos\" ng-src=\"{{'img/'+user.chain+'_icon.png'}}\" />\n            {{user.username}}\n            <!--<span class=\"badge badge-assertive\">{{user.chain}}</span>-->\n          </ion-item>\n          <ion-item menu-close ng-click=\"openLogin()\" class=\"item-icon-left\" ng-if=\"$root.$storage.user\">\n            <i class=\"icon ion-plus-round\"></i>\n            {{'ADD_ACCOUNT'|translate}}\n          </ion-item>\n          <ion-item menu-close ng-click=\"openPostModal()\" class=\"item-icon-left\" ng-if=\"$root.$storage.user\">\n            <i class=\"icon ion-android-create\"></i>\n            {{'SUBMIT_A_STORY'|translate}}\n          </ion-item>\n          <ion-item menu-close href=\"#/app/profile/{{$root.$storage.user.username}}\" class=\"item-icon-left\" ng-if=\"$root.$storage.user\">\n            <i class=\"icon ion-person\"></i>\n            {{'PROFILE'|translate}}\n          </ion-item>\n          <ion-item menu-close href=\"#/app/follow\" class=\"item-icon-left\" ng-if=\"$root.$storage.user\">\n            <i class=\"icon ion-person-stalker\"></i>\n            {{'FOLLOW'|translate}}\n          </ion-item>\n          <ion-item menu-close ng-click=\"logout()\" class=\"item-icon-left\" ng-if=\"$root.$storage.user\">\n            <i class=\"icon ion-log-out\"></i>\n            {{'LOGOUT'|translate}}\n          </ion-item>\n        </ion-list>\n      </div>\n      <ion-list>\n        <ion-item menu-close ng-click=\"openLogin()\" class=\"item-icon-left\" ng-if=\"!$root.$storage.user\">\n          <i class=\"icon ion-log-in\"></i>\n          {{'LOGIN'|translate}}\n        </ion-item>\n        <ion-item menu-close href=\"#/app/posts/\" class=\"item-icon-left\">\n          <i class=\"icon ion-home\"></i>\n          {{'HOME'|translate}}\n        </ion-item>\n        <ion-item menu-close href=\"#/app/bookmark\" class=\"item-icon-left\" ng-if=\"$root.$storage.user\">\n          <i class=\"icon ion-bookmark\"></i>\n          {{'BOOKMARKS'|translate}}\n        </ion-item>\n        <ion-item menu-close href=\"#/app/drafts\" ng-if=\"$root.$storage.user\" class=\"item-icon-left\">\n          <i class=\"icon ion-compose\"></i>\n          {{'DRAFTS'|translate}}\n        </ion-item>\n        <!--<ion-item menu-close href=\"#/app/notifications\" class=\"item-icon-left\" ng-if=\"$root.$storage.notifications && $root.$storage.notifications.length>0\">\n          <i class=\"icon ion-bookmark\"></i>\n          {{'NOTIFICATIONS'|translate}}\n        </ion-item>-->\n        <ion-item menu-close href=\"#/app/send\" class=\"item-icon-left\" ng-if=\"$root.$storage.user\">\n          <i class=\"icon ion-android-send\"></i>\n          {{'TRANSFER'|translate}}\n        </ion-item>\n        <ion-item menu-close href=\"#/app/exchange/{{$root.$storage.user.username}}\" class=\"item-icon-left\" ng-if=\"$root.$storage.user\">\n          <i class=\"icon ion-arrow-swap\"></i>\n          {{'EXCHANGE'|translate}}\n        </ion-item>\n        <ion-item menu-close href=\"#/app/market\" class=\"item-icon-left\">\n          <i class=\"icon ion-cube\"></i>\n          {{'MARKETPLACE'|translate}}\n        </ion-item>\n        <ion-item menu-close href=\"#/app/settings\" class=\"item-icon-left\">\n          <i class=\"icon ion-android-settings\"></i>\n          {{'SETTINGS'|translate}}\n        </ion-item>\n        <ion-item menu-close href=\"#/app/about\" class=\"item-icon-left\">\n          <i class=\"icon ion-information\"></i>\n          {{'ABOUT'|translate}}\n        </ion-item>\n      </ion-list>\n    </ion-content>\n    <!-- align to the bottom of the page -->\n    <div style=\"position: absolute; bottom: 0px; width: 100%\" ng-if=\"$root.$storage.appversion\">\n        <div style=\"text-align: center; color:#ccc;\">\n          <p>{{$root.$storage.appversion}}</p>\n        </div>\n    </div>\n  </ion-side-menu>\n</ion-side-menus>\n",
    //templateUrl: 'templates/menu.html',
    controller: 'AppCtrl'
  })

  .state('app.settings', {
    url: '/settings',
    views: {
      'menuContent': {
        //templateUrl: 'templates/settings.html'
        template: "<ion-view view-cache=\"false\" view-title=\"{{'SETTINGS'|translate}}\">\n  <ion-content class=\"padding has-header settings\">\n    <br/>\n    <div class=\"item item-divider\">\n      {{'SECURITY'|translate}}\n    </div>\n    <div class=\"row\">\n      <div class=\"col col-33\">\n      <span class=\"slabel\" ng-click='openTooltip($event,\"{{\"PIN_TEXT\"|translate}}\")'><i class=\"icon ion-ios-information-outline gray\"></i> {{'PIN_CODE'|translate}}</span>\n      </div>\n      <div class=\"col pull-right tright\">\n        <label class=\"toggle toggle-positive\">\n         <input type=\"checkbox\" ng-model=\"data.pin\" ng-change=\"pinChange()\">\n         <div class=\"track\">\n           <div class=\"handle\"></div>\n         </div>\n        </label>\n      </div>\n    </div>\n    <div ng-if=\"$root.$storage.user\">\n    <div class=\"item item-divider\">\n      {{'NOTIFICATIONS'|translate}}\n    </div>\n    <div class=\"row\">\n      <div class=\"col col-33\">\n      <span class=\"slabel\" ng-click='openTooltip($event,\"{{\"VOTE_TEXT\"|translate}}\")'><i class=\"icon ion-ios-information-outline gray\"></i> {{'VOTE'|translate}}</span>\n      </div>\n      <div class=\"col pull-right tright\">\n        <label class=\"toggle toggle-positive\">\n         <input type=\"checkbox\" ng-model=\"data.vote\" ng-change=\"notificationChange()\">\n         <div class=\"track\">\n           <div class=\"handle\"></div>\n         </div>\n        </label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col col-33\">\n      <span class=\"slabel\" ng-click='openTooltip($event,\"{{\"COMMENT_TEXT\"|translate}}\")'><i class=\"icon ion-ios-information-outline gray\"></i> {{'COMMENT'|translate}}</span>\n      </div>\n      <div class=\"col pull-right tright\">\n        <label class=\"toggle toggle-positive\">\n         <input type=\"checkbox\" ng-model=\"data.comment\" ng-change=\"notificationChange()\">\n         <div class=\"track\">\n           <div class=\"handle\"></div>\n         </div>\n        </label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col col-33\">\n      <span class=\"slabel\" ng-click='openTooltip($event,\"{{\"FOLLOW_TEXT\"|translate}}\")'><i class=\"icon ion-ios-information-outline gray\"></i> {{'FOLLOW'|translate}}</span>\n      </div>\n      <div class=\"col pull-right tright\">\n        <label class=\"toggle toggle-positive\">\n         <input type=\"checkbox\" ng-model=\"data.follow\" ng-change=\"notificationChange()\">\n         <div class=\"track\">\n           <div class=\"handle\"></div>\n         </div>\n        </label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col col-33\">\n      <span class=\"slabel\" ng-click='openTooltip($event,\"{{\"MENTIONS_TEXT\"|translate}}\")'><i class=\"icon ion-ios-information-outline gray\"></i> {{'MENTIONS'|translate}}</span>\n      </div>\n      <div class=\"col pull-right tright\">\n        <label class=\"toggle toggle-positive\">\n         <input type=\"checkbox\" ng-model=\"data.mention\" ng-change=\"notificationChange()\">\n         <div class=\"track\">\n           <div class=\"handle\"></div>\n         </div>\n        </label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col col-33\">\n      <span class=\"slabel\" ng-click='openTooltip($event,\"{{\"RESTEEM_TEXT\"|translate}}\")'><i class=\"icon ion-ios-information-outline gray\"></i> {{'RESTEEM'|translate}}</span>\n      </div>\n      <div class=\"col pull-right tright\">\n        <label class=\"toggle toggle-positive\">\n         <input type=\"checkbox\" ng-model=\"data.resteem\" ng-change=\"notificationChange()\">\n         <div class=\"track\">\n           <div class=\"handle\"></div>\n         </div>\n        </label>\n      </div>\n    </div>\n    </div>\n    <div class=\"item item-divider\">\n      {{'CONFIGURATIONS'|translate}}\n    </div>\n\n    <div class=\"row\" ng-if=\"$root.$storage.user\">\n      <div class=\"col col-33\">\n      <span class=\"slabel\" ng-click='openTooltip($event,\"{{\"VOTING_TEXT\"|translate}}\")'><i class=\"icon ion-ios-information-outline gray\"></i> {{'VOTING'|translate}} (%)</span>\n      </div>\n      <div class=\"col\">\n        <div class = \"item range range-positive\">\n           {{vvalue}} <input type=\"range\" name=\"range1\" min=\"1\" max=\"100\" ng-model=\"vvalue\" ng-change=\"drag(vvalue)\">\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col col-33\">\n        <span class=\"slabel\" ng-click='openTooltip($event,\"{{\"LANGUAGES_TEXT\"|translate}}\")'><i class=\"icon ion-ios-information-outline gray\"></i> {{'LANGUAGES'|translate}}</span>\n      </div>\n      <div class=\"col\">\n        <select ng-model=\"$root.$storage.language\" ng-change='changeLanguage($root.$storage.language)'>\n          <option ng-repeat=\"option in $root.$storage.languages\" value=\"{{option.id}}\">{{option.name}}</option>\n        </select>\n        <!--<div class=\"capital\">{{$root.$storage.language}} <div class=\"pull-right\"><i class=\"icon ion-chevron-right\"></i></div></div>-->\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col col-33\">\n        <span class=\"slabel\" ng-click='openTooltip($event,\"{{\"CURRENCY_TEXT\"|translate}}\")'><i class=\"icon ion-ios-information-outline gray\"></i> {{'CURRENCY'|translate}}</span>\n      </div>\n      <div class=\"col\">\n        <select ng-model=\"$root.$storage.currency\" ng-change='changeCurrency($root.$storage.currency)'>\n          <option ng-repeat=\"option in $root.$storage.currencies\" value=\"{{option.id}}\">{{option.name}}</option>\n        </select>\n        <!--<div class=\"capital\">{{$root.$storage.language}} <div class=\"pull-right\"><i class=\"icon ion-chevron-right\"></i></div></div>-->\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col col-33\">\n        <span class=\"slabel\" ng-click='openTooltip($event,\"{{\"CHAIN_TEXT\"|translate}}\")'><i class=\"icon ion-ios-information-outline gray\"></i> {{'CHAIN'|translate}}</span>\n      </div>\n      <div class=\"col\">\n        <select ng-model=\"$root.$storage.chain\" ng-change='changeChain($root.$storage.chain)'>\n          <option ng-repeat=\"option in $root.$storage.chains\" value=\"{{option.id}}\">{{option.name}}</option>\n        </select>\n        <!--<div class=\"capital\">{{$root.$storage.language}} <div class=\"pull-right\"><i class=\"icon ion-chevron-right\"></i></div></div>-->\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col col-33\">\n        <span class=\"slabel\" ng-click='openTooltip($event,\"<span class=\\\"bold\\\">{{\"SERVER_TEXT\"|translate}}:</span><br><span class=\\\"wrap\\\">[steemit] wss://steemd.steemit.com</span><br/><br/><span class=\\\"wrap\\\">[steem.ws] wss://node.steem.ws</span><br/><br/><span class=\\\"wrap\\\">[piston] wss://this.piston.rocks</span><br/><br/><span class=\\\"wrap\\\">[golos] wss://ws.golos.io</span><br/><br/><span class=\\\"wrap\\\">[golos.ws] wss://node.golos.ws</span>\n        \")'><i class=\"icon ion-ios-information-outline gray\"></i> {{'SERVER'|translate}}</span>\n      </div>\n      <div class=\"col\">\n        <input type=\"text\" placeholder=\"Server\" ng-model=\"socket\" style=\"width:100%;\" ng-change=\"socketChange(socket)\">\n      </div>\n    </div>\n\n    <!--<div class=\"row\">\n      <div class=\"col\">\n      </div>\n      <div class=\"col\">\n      </div>\n    </div>\n    <button class=\"button button-positive\" ng-click=\"changeLanguage('ru')\">Change RU</button>-->\n    <br/>\n    <script id = \"popover.html\" type=\"text/ng-template\">\n      <ion-popover-view>\n        <ion-content>\n          <div class=\"padding\" ng-bind-html=\"tooltipText\"></div>\n        </ion-content>\n      \n      </ion-popover-view>\n    </script>\n    <div class=\"tcenter\">\n      <button class=\"button button-positive\" ng-click=\"save()\">{{'SAVE_CHANGES'|translate}}</button>\n    </div>\n  </ion-content>\n</ion-view>\n",
        controller: 'SettingsCtrl'
      }
    }
  })

  .state('app.about', {
    url: '/about',
    views: {
      'menuContent': {
        //templateUrl: 'templates/settings.html'
        template: "<ion-view view-cache=\"false\" view-title=\"{{'ABOUT' | translate}} - v{{$root.$storage.appversion}}\">\n  <ion-content class=\"padding\">\n    <center><img src=\"img/about.png\"></center>\n    <p><b>eSteem</b> {{'ABOUT_2'|translate}} <div ng-bind-html=\"'ABOUT_11'|translate\"></div>\n    </p>\n    <p ng-if=\"$root.$storage.user\">{{\"FOUNDER\"|translate}} <a href=\"#app/profile/good-karma\">good-karma</a></p>\n    <div class=\"tcenter\" ng-if=\"$root.$storage.user\"><span ng-if=\"!$root.isWitnessVoted()\"><button class=\"button button-positive\" ng-click=\"$root.voteWitness()\">{{'ABOUT_8'|translate}}</button></span></div>\n    <p>\n    <b><u>{{'ABOUT_9'|translate}}</u></b>\n    <br><a href=\"mailto:info@esteem.ws?Subject=Feedback\">info@esteem.ws</a>\n    <br><a href=\"http://esteem.ws\">http://esteem.ws</a>\n    </p>\n    <p>\n        <b><u>{{'TRANSLATIONS'|translate}}</u></b><br>\n        Русский - <a href=\"#app/profile/testz\">testz</a>, <a href=\"#app/profile/on0tole\">on0tole</a><br>\n        Deutsch - <a href=\"#app/profile/dez1337\">dez1337</a>, <a href=\"#app/profile/homosapiens\">homosapiens</a>, <a href=\"#app/profile/uwelang\">uwelang</a><br>\n        Français - <a href=\"#app/profile/pickoum\">pickoum</a><br>\n        Español - <a href=\"#app/profile/dresden\">dresden</a>, <a href=\"#app/profile/pgarcgo\">pgarcgo</a><br>\n        Ελληνικά - <a href=\"#app/profile/liondani\">liondani</a>, <a href=\"#app/profile/steemychicken1\">steemychicken1</a><br>\n        Български - <a href=\"#app/profile/rossenpavlov\">rossenpavlov</a><br>\n        Nederlands - <a href=\"#app/profile/maxse\">maxse</a><br>\n        Magyar - <a href=\"#app/profile/tibonova\">tibonova</a><br>\n        Čeština - <a href=\"#app/profile/valtr\">valtr</a><br>\n        עברית‎ - <a href=\"#app/profile/bosrad\">bosrad</a><br>\n        Polski - <a href=\"#app/profile/knittybynature\">knittybynature</a>, <a href=\"#app/profile/gtg\">gtg</a><br>\n        Português - <a href=\"#app/profile/alamyrjunior\">alamyrjunior</a>, <a href=\"#app/profile/charlie777pt\">charlie777pt</a><br>\n        Português BR - <a href=\"#app/profile/charlie777pt\">charlie777pt</a><br>\n        Bahasa Indonesia - <a href=\"#app/profile/levycore\">levycore</a>, <a href=\"#app/profile/happyphoenix\">happyphoenix</a><br>\n        繁體中文 - <a href=\"#app/profile/deanliu\">deanliu</a><br>\n        简体中文 - <a href=\"#app/profile/huangdashuang\">huangdashuang</a>, <a href=\"#app/profile/oflyhigh\">oflyhigh</a>, <a href=\"#app/profile/lucid\">lucid</a><br>\n        Dolan - <a href=\"#app/profile/maxse\">maxse</a><br>\n        Svensk - <a href=\"#app/profile/acidyo\">acidyo</a>, <a href=\"#app/profile/the-ego-you\">the-ego-is-you</a><br>\n        Українська - <a href=\"#app/profile/erikaflynn\">erikaflynn</a><br>\n        Bahasa Melayu - <a href=\"#app/profile/kevinwong\">kevinwong</a>, <a href=\"#app/profile/killuminatic\">killuminatic</a><br>\n        Hrvatski - <a href=\"#app/profile/fibra59\">fibra59</a><br>\n        Fārsi - <a href=\"#app/profile/meysam\">meysam</a><br>\n        Italiano - <a href=\"#app/profile/bhuz\">bhuz</a>, <a href=\"#app/profile/duranzo89\">duranzo89</a>, <a href=\"#app/profile/silviabeneforti\">silviabeneforti</a><br>\n        <!--\n        malay-killuminatic\n        -->\n    </p>\n    <p>\n    <b><u>{{'ABOUT_10'|translate}}</u></b>\n    <br><a href=\"https://steem.io\">https://steem.io</a>\n    <br><a href=\"https://golos.io\">https://golos.io</a>\n    </p>\n  </ion-content>\n</ion-view>\n"
      }
    }
  })

	.state('app.market', {
		url: '/market',
		views: {
			'menuContent': {
				//templateUrl: 'templates/settings.html'
				template: "<ion-view view-cache=\"false\" view-title=\"{{'MARKETPLACE' | translate}}\">\n  <ion-content class=\"padding\">\n    <h4>{{'EXTERNAL_APPS'|translate}}</h4>\n    <div class=\"row\">\n      <div class=\"col\" ng-click=\"requestApp('SteemMonitor')\">\n        <center>\n          <img src=\"img/logo_steemmonitor.png\" alt=\"Steem Monitor\" style=\"width: 100%;\">\n          <b>Steem Monitor</b>\n          <p class=\"gray\">{{'BY'|translate}} <a href=\"#app/profile/good-karma\">Feruz</a></p>\n        </center>\n      </div>\n      <div class=\"col\" ng-click=\"requestApp('SteemFest')\">\n        <center>\n          <img src=\"img/logo_steemfest.png\" alt=\"Steem Fest\" style=\"width: 100%;\">\n          <b>Steem Fest</b>\n          <p class=\"gray\">{{'BY'|translate}} <a href=\"#app/profile/good-karma\">Feruz</a>, <a href=\"#app/profile/roelandp\">Roeland</a> &amp; <a href=\"#app/profile/cass\">Cass</a></p>\n        </center>\n      </div>\n    </div><br/>\n    <h4>{{'PLUGINS'|translate}}</h4>\n    <div class=\"row\">\n      <div class=\"col italic\">\n        <center>\n          {{'COMING_SOON'|translate}}...\n        </center>\n      </div>\n    </div>\n    <br/>\n    <h4>{{'SUGGEST'|translate}}</h4><br/>\n    <div class=\"row\">\n      <div class=\"col\" ng-click=\"requestApp('New')\">\n        <center>\n          <img src=\"img/plus.png\" alt=\"Suggest New\" style=\"width: 100%;\">\n          <b>{{'NEW'|translate}}</b>\n        </center>\n      </div>\n      <div class=\"col\">\n      </div>\n    </div>\n  </ion-content>\n</ion-view>\n",
				controller: 'MarketCtrl'
			}
		}
	})

  .state('app.send', {
    url: '/send',
    views: {
      'menuContent': {
        //templateUrl: 'templates/settings.html'
        template: "<ion-view view-cache=\"false\" view-title=\"{{'TRANSFER'|translate}}\">\n  <div class=\"tabs-striped tabs-top tabs-background-positive tabs-color-light\">\n    <div class=\"tabs\">\n      <a class=\"tab-item\" href ng-click=\"changeTransfer('transfer')\" ng-class=\"{'active': ttype=='transfer'}\">\n        {{\"TRANSFER\"|translate}}\n      </a>\n      <a class=\"tab-item\" href ng-click=\"changeTransfer('escrow')\" ng-class=\"{'active': ttype=='escrow'}\">\n        {{\"ESCROW\"|translate}}\n      </a>\n    </div>\n  </div>\n\n  <ion-content class=\"padding has-tabs-top\">\n\n    <div class=\"list\">\n      <div class=\"item item-input item-icon-right\" ng-if=\"!data.advanced\">\n        <span class=\"input-label\">{{'TO'|translate}}</span>\n        <input type=\"text\" ng-model=\"data.username\" placeholder=\"{{'TO_DESC'|translate}}\" ng-change=\"changeUsername()\">\n        <i class=\"icon ion-ios-camera-outline\" ng-click=\"qrScan()\" ng-if=\"ttype=='transfer'\"></i>\n      </div>\n      <label class=\"item item-input\" ng-if=\"ttype=='escrow'&&!data.advanced\">\n          <span class=\"input-label\">{{\"ESCROW_AGENT\"|translate}}</span>\n          <input type=\"text\" readonly=\"readonly\" placeholder=\"{{'USERNAME'|translate}}\" ng-model=\"data.agent.name\" ng-click=\"openUModal(data.agent)\"/>\n      </label>\n      <div class=\"item item-input item-icon-right\" ng-if=\"ttype=='escrow'&&data.advanced\">\n        <span class=\"input-label\">{{'ESCROW'|translate}} {{'ID'|translate}}</span>\n        <input type=\"text\" ng-model=\"data.escrow_id\" placeholder=\"{{'SEARCH'|translate}}\" ng-change=\"searchEscrowID(data.escrow_id)\">\n      </div>\n      <label class=\"item item-input item-select\" ng-if=\"data.advanced\">\n        <span class=\"input-label\">{{'OPTIONS'|translate}}</span>\n        <select ng-model=\"data.etype\" ng-if=\"ttype=='escrow'\" ng-options=\"item.type as item.name for item in data.etypes track by item.id\" ng-change=\"actionEChange()\"></select>\n      </label>\n      <label class=\"item item-input item-select\" ng-if=\"data.advanced&&data.etype=='release'\">\n        <span class=\"input-label\">{{'RECEIVER'|translate}}</span>\n        <select ng-model=\"escrow.receiver\">\n          <option value=\"{{escrow.to}}\" ng-if=\"escrow.to!=$root.$storage.user.username\">{{escrow.to}}</option>\n          <option value=\"{{escrow.from}}\" ng-if=\"escrow.from!=$root.$storage.user.username\">{{escrow.from}}</option>\n        </select>\n      </label>\n      <label class=\"item item-input item-select\" ng-if=\"!data.advanced\">\n        <span class=\"input-label\">{{'ASSET'|translate}}</span>\n        <select ng-model=\"data.type\" ng-if=\"ttype=='escrow'\" ng-options=\"item.type as item.name for item in data.types | filter:showLiquid track by item.id\"></select>\n        <select ng-model=\"data.type\" ng-if=\"ttype=='transfer'\" ng-options=\"item.type as item.name for item in data.types track by item.id\"></select>\n      </label>\n      <label class=\"item item-input\" ng-if=\"!data.advanced\">\n        <span class=\"input-label\">{{'AMOUNT'|translate}}</span>\n        <input type=\"number\" placeholder=\"{{'AMOUNT'|translate}}\" step=\"0.001\" ng-model=\"data.amount\">\n      </label>\n      <label class=\"item item-input\" ng-if=\"data.type != 'sp'&&data.type != 'golosp' && !data.advanced\">\n        <span class=\"input-label\">{{'MEMO'|translate}}</span>\n        <textarea ng-model=\"data.memo\" rows=\"3\" placeholder=\"{{'PUBLIC_MEMO'|translate}}\"></textarea>\n      </label>\n      <div class=\"item\" ion-datetime-picker ng-model=\"data.ratification\" only-valid=\"{'after': 'today', 'inclusive': true}\" ng-if=\"ttype=='escrow'&&!data.advanced\">{{'RATIFICATION_DEADLINE'|translate}}: {{data.ratification| date: \"yyyy-MM-dd H:mm:ss\"}}</div>\n      <div class=\"item\" ion-datetime-picker ng-model=\"data.expiration\" only-valid=\"{'after': 'today', 'inclusive': false}\" ng-if=\"ttype=='escrow'&&!data.advanced\">{{'ESCROW_EXPIRATION'|translate}}: {{data.expiration| date: \"yyyy-MM-dd H:mm:ss\"}}</div>\n      <ion-toggle ng-if=\"ttype=='escrow'\" ng-model=\"data.advanced\" toggle-class=\"toggle-calm\" ng-change=\"advancedEChange()\">{{'ADVANCED'|translate}}</ion-toggle>\n      <p class=\"item\" ng-if=\"balance && !data.advanced\">{{'AVAILABLE'|translate}}: {{balance.balance}}, {{balance.sbd_balance}} <i class=\"icon ion-refresh pull-right\" ng-click=\"refresh()\"></i></p>\n      <br>\n      <div ng-if=\"ttype=='escrow' && data.advanced && escrow.escrow_id\">\n        <div class=\"row\"><div class=\"col\">{{\"FROM\"|translate}}:</div><div class=\"col\">{{escrow.from}}</div></div>\n        <div class=\"row\"><div class=\"col\">{{\"TO\"|translate}}:</div><div class=\"col\">{{escrow.to}}</div></div>\n        <div class=\"row\"><div class=\"col\">{{\"ESCROW_AGENT\"|translate}}:</div><div class=\"col\">{{escrow.agent}}</div></div>\n        <div class=\"row\"><div class=\"col\">{{\"ESCROW_FEE\"|translate}}:</div><div class=\"col\">{{escrow.fee}} {{escrow.fee_symbol}}</div></div>\n        <div class=\"row\"><div class=\"col\">{{'RATIFICATION_DEADLINE'|translate}}:</div><div class=\"col\">{{escrow.ratification_deadline|date:'short'}}</div></div>\n        <div class=\"row\"><div class=\"col\">{{'ESCROW_EXPIRATION'|translate}}:</div><div class=\"col\">{{escrow.escrow_expiration|date:'short'}}</div></div>\n        <div class=\"row\"><div class=\"col\">{{\"ESCROW_TERMS\"|translate}}:</div><div class=\"col\">{{escrow.json_meta.terms}}</div></div>\n        <div class=\"row\"><div class=\"col\">{{'MEMO'|translate}}:</div><div class=\"col\">{{escrow.json_meta.memo}}</div></div>\n      </div>\n      <center ng-if=\"ttype=='transfer'\"><button class=\"button button-positive\" ng-click=\"transfer('transfer')\">\n        {{'SEND'|translate}}\n      </button></center>\n      <center ng-if=\"ttype=='escrow'&&!data.advanced\"><button class=\"button button-positive\" ng-click=\"transfer('escrow')\">\n        {{'SEND'|translate}}\n      </button></center>\n      <center ng-if=\"ttype=='escrow'&&data.advanced\"><button class=\"button button-positive\" ng-click=\"escrowAction()\">\n        {{'SUBMIT'|translate}}\n      </button></center>\n      <br>\n      <center ng-if=\"ttype=='transfer'\"><qr text=\"$root.$storage.user.username\"></qr></center>\n      <center ng-if=\"ttype=='transfer'\"><i class=\"italic\">{{$root.$storage.user.username}}</i></center>\n    </div>\n  </ion-content>\n  <script id=\"my-modal.html\" type=\"text/ng-template\">\n    <ion-modal-view>\n      <div class=\"bar bar-header bar-positive item-input-inset\">\n        <label class=\"item-input-wrapper\">\n          <i class=\"icon ion-ios-search placeholder-icon\"></i>\n          <input type=\"search\" placeholder=\"{{'SEARCH'|translate}}\" ng-change=\"getUserAgent(data.query)\" ng-model=\"data.query\">\n        </label>\n        <button class=\"button button-clear button-outline\" ng-click=\"closeUModal()\">\n          {{\"CANCEL\"|translate}}\n        </button>\n      </div>\n      <ion-content class=\"has-header\">\n        <div class=\"list\" ng-if=\"data.searchResult.length>0\">\n          <a class=\"item\" ng-repeat=\"x in data.searchResult\" ng-click=\"selectAgent(x)\">\n            <h2>{{'ESCROW_AGENT'|translate}}: {{x.name}}</h2>\n            <div ng-if=\"x.escrow\" class=\"wrap\">{{'ESCROW_TERMS'|translate}}: {{x.escrow.terms}}</div>\n            <p class=\"wrap\">{{'ESCROW_FEE'|translate}}: {{x.escrow.fees[$root.$storage.platformlunit]}} {{$root.$storage.platformlunit}} / {{x.escrow.fees[$root.$storage.platformdunit]}} {{$root.$storage.platformdunit}}\n            </p>\n          </a>\n        </div>\n        <center class=\"padding\" ng-if=\"data.searchResult.length==0\">\n          {{\"USER_NOTFOUND\"|translate}}\n        </center>\n      </ion-content>\n    </ion-modal-view>\n\n  </script>\n</ion-view>\n",
        controller: 'SendCtrl'
      }
    }
  })

  .state('app.follow', {
    url: '/follow',
    views: {
      'menuContent': {
        //templateUrl: 'templates/follow.html',
        template: "<ion-view view-cache=\"false\" view-title=\"{{'FOLLOW' | translate}}\">\n  <ion-content class=\"padding has-footer\" delegate-handle=\"listScroll\">\n    <div class=\"list list-inset\" ng-if=\"active=='followers'\">\n      <label class=\"item item-input\">\n        <i class=\"icon ion-search placeholder-icon\"></i>\n        <input type=\"text\" ng-model=\"searchu.follower\" placeholder=\"{{'SEARCH_FOLLOWERS' | translate}}\">\n      </label>\n    </div>\n    <div class=\"list list-inset\" ng-if=\"active=='following'\">\n      <label class=\"item item-input\">\n        <i class=\"icon ion-search placeholder-icon\"></i>\n        <input type=\"text\" ng-model=\"searchu.following\" placeholder=\"{{'SEARCH_FOLLOWING' | translate}}\">\n      </label>\n    </div>\n    <div class=\"list\" ng-if=\"active=='followers' && followers.length>0\">\n      <div class=\"item item-button-right\" ng-repeat=\"f in followers | filter:searchu  track by $index\">\n        <span ng-click=\"profileView(f.follower)\">{{f.follower}}</span>\n        <button class=\"button button-positive button-outline\" ng-if=\"!isFollowed(f.follower)\" ng-click=\"followUser(f.follower)\">\n        {{'FOLLOW_BACK' | translate}}\n        </button>\n        <button class=\"button button-positive\" ng-if=\"isFollowed(f.follower)\" ng-click=\"unfollowUser(f.follower)\">\n        {{'FOLLOWED' | translate}}\n        </button>\n      </div>\n    </div>\n    <div class=\"list\" ng-if=\"active=='following' && following.length>0\">\n      <div class=\"item item-button-right\" ng-repeat=\"f in following | filter:searchu  track by $index\">\n        <span ng-click=\"profileView(f.following)\">{{f.following}}</span>\n        <button class=\"button button-positive button-outline\" ng-if=\"!isFollowing(f.following)\" ng-click=\"unfollowUser(f.following)\">\n        {{'UNFOLLOW' | translate}}\n        </button>\n        <button class=\"button button-positive\" ng-if=\"isFollowing(f.following)\">\n        {{'FOLLOWING' | translate}}\n        </button>\n      </div>\n    </div>\n    <!--<ion-infinite-scroll on-infinite=\"loadMore()\" ng-if=\"lastd\" distance=\"2%\"></ion-infinite-scroll>-->\n  </ion-content>\n  <div class=\"bar profile bar-footer\">\n    <div class=\"button-bar\">\n      <a class=\"button button-large button-royal icon ion-ios-people\" ng-class=\"{'active':active=='followers'}\" ng-click=\"change('followers')\"> {{'FOLLOWERS' | translate}} <span ng-if=\"followers.length>0\">({{followers.length}})</span></a>\n      <a class=\"button button-royal icon ion-person-add\" ng-class=\"{'active':active=='following'}\" ng-click=\"change('following')\"> {{'FOLLOWED' | translate}} <span ng-if=\"following.length>0\">({{following.length}})</span></a>\n    </div>\n  </div>\n</ion-view>\n",
        controller: 'FollowCtrl'
      }
    }
  })


  .state('app.exchange', {
    url: '/exchange/:username',
    views: {
      'menuContent': {
      	template: "<ion-view view-cache=\"false\" view-title=\"{{'MARKET_VIEW' | translate}}\">\n  <ion-content class=\"padding has-footer exchange\">\n    <div class=\"\" ng-if=\"active=='buy'\">\n      <div class=\"row header\">\n        <div class=\"col\">{{'PRICE' | translate}}</div>\n        <div class=\"col\">{{'AMOUNT' | translate}}</div>\n        <div class=\"col\">{{'TOTAL' | translate}}</div>\n      </div>\n      <div class=\"row\" ng-repeat=\"(key, f) in orders.bids\">\n        <div class=\"col\">{{f.real_price|number:4}}</div>\n        <div class=\"col\">{{f.order_price.quote}}</div>\n        <div class=\"col\">{{f.order_price.base}}</div>\n      </div>\n    </div>\n    <div class=\"\" ng-if=\"active=='sell'\">\n      <div class=\"row header\">\n        <div class=\"col\">{{'PRICE' | translate}}</div>\n        <div class=\"col\">{{'AMOUNT' | translate}}</div>\n        <div class=\"col\">{{'TOTAL' | translate}}</div>\n      </div>\n      <div class=\"row\" ng-repeat=\"(key, f) in orders.asks\">\n        <div class=\"col\">{{f.real_price|number:4}}</div>\n        <div class=\"col\">{{f.order_price.quote}}</div>\n        <div class=\"col\">{{f.order_price.base}}</div>\n      </div>\n    </div>\n    <div class=\"\" ng-if=\"active=='open'\">\n      <p class=\"padding\" ng-if=\"openorders.length<1\">\n        {{'NOORDERS' | translate}} @{{username}}\n      </p>\n      <div ng-if=\"openorders.length>0\">\n        <div class=\"row header\">\n          <div class=\"col\">{{'PRICE' | translate}}</div>\n          <div class=\"col\">{{'AMOUNT' | translate}}</div>\n          <div class=\"col\">{{'TOTAL' | translate}}</div>\n        </div>\n        <div class=\"row\" ng-repeat=\"(key, f) in openorders\">\n          <div class=\"col\">{{f.real_price|number:4}}</div>\n          <div class=\"col\" ng-if=\"f.seller==$root.$storage.user.username\">{{f.sell_price.quote}}</div>\n          <div class=\"col\" ng-if=\"f.seller==$root.$storage.user.username\">{{f.sell_price.base}}</div>\n          <div class=\"col\" ng-if=\"f.buyer==$root.$storage.user.username\">{{f.buy_price.quote}}</div>\n          <div class=\"col\" ng-if=\"f.buyer==$root.$storage.user.username\">{{f.buy_price.base}}</div>\n        </div>\n      </div>\n    </div>\n    <div class=\"\" ng-if=\"active=='history'\">\n      <!--<p class=\"padding\">Nothing here, yet...</p>-->\n      <div ng-if=\"recent_trades.length>0\">\n        <div class=\"row header\">\n          <div class=\"col\">{{'DATE' | translate}}</div>\n          <div class=\"col\">{{'PRICE' | translate}}</div>\n          <div class=\"col\">{{$root.$storage.platformsunit}}</div>\n          <div class=\"col\">{{$root.$storage.platformdollar}}</div>\n        </div>\n        <div class=\"row\" ng-repeat=\"(key, f) in recent_trades\">\n          <div class=\"col\">{{f.date|timeago}}</div>\n          <div class=\"col\">{{f.current_pays.split(\" \")[0]/f.open_pays.split(\" \")[0]|number:6}}</div>\n          <div class=\"col\">{{f.current_pays.split(\" \")[0]|number:3}}</div>\n          <div class=\"col\">{{f.open_pays.split(\" \")[0]|number:3}}</div>\n        </div>\n      </div>\n    </div>\n  </ion-content>\n  <div class=\"profile bar bar-footer\">\n    <div class=\"button-bar\">\n      <a class=\"button button-large button-royal icon ion-arrow-down-a\" ng-class=\"{'active':active=='buy'}\" ng-click=\"change('buy')\"> {{'BUY' | translate}}</a>\n      <a class=\"button button-royal icon ion-arrow-up-a\" ng-class=\"{'active':active=='sell'}\" ng-click=\"change('sell')\"> {{'SELL' | translate}}</a>\n      <a class=\"button button-royal icon ion-flag\" ng-class=\"{'active':active=='open'}\" ng-click=\"change('open')\">{{'OPEN' | translate}}</a>\n      <a class=\"button button-royal icon ion-ios-clock\" ng-class=\"{'active':active=='history'}\"  ng-click=\"change('history')\">{{'HISTORY' | translate}}</a>\n    </div>\n  </div>\n</ion-view>\n",
        //templateUrl: 'templates/exchange.html',
        controller: 'ExchangeCtrl'
      }
    }
  })

  .state('app.profile', {
    url: '/profile/:username',
    views: {
      'menuContent': {
        //templateUrl: 'templates/profile.html',
        template: "<ion-view view-title=\"\" hide-nav-bar=\"true\" view-cache=\"false\"><!--ng-class=\"{'mpb':$root.$storage.user.json_metadata.profile.cover_image}\"-->\n  <ion-content class=\"has-footer\" overflow-scroll=\"true\">\n    <div class=\"bar bar-subheader mysubheader bar-positive\" ng-style=\"$root.$storage.user.username != user.username?css:mcss\">\n      <button class=\"button button-icon button-clear ion-ios-arrow-back profilebtn\" on-tap=\"goBack()\"></button>\n      <button class=\"button button-outline button-light profilebtn_follow\" on-tap=\"followUser(user.username)\" ng-if=\"$root.$storage.user && $root.$storage.user.username != user.username && !isFollowing(user.username)\"><!--<i class=\"fa fa-user-plus fa-lg\"></i>-->{{'FOLLOW'|translate}}</button>\n      <button class=\"button button-clear profilebtn_edit button-icon ion-ios-compose-outline\" on-tap=\"showEdits()\" ng-if=\"$root.$storage.user && $root.$storage.user.username === user.username\"></button>\n      <button class=\"button button-clear profilebtn_follow button-icon ion-camera\" on-tap=\"showCover()\" ng-if=\"$root.$storage.user && $root.$storage.user.username === user.username\"></button>\n      <button class=\"button button-outline button-light profilebtn_follow\" on-tap=\"unfollowUser(user.username)\" ng-if=\"$root.$storage.user && $root.$storage.user.username != user.username && isFollowing(user.username)\"><!--button-icon button-clear<i class=\"fa fa-user-times fa-lg\"></i>-->{{'UNFOLLOW'|translate}}</button>&nbsp;\n      <div class=\"center\">\n          <div class=\"item-myavatar\" ng-if=\"$root.$storage.user && $root.$storage.user.username == user.username\">\n            <span class=\"item-myavatar\" ng-if=\"!($root.$storage.user.json_metadata.profile.profile_image||$root.$storage.user.json_metadata.user_image)\"><img src=\"img/user_profile.png\" on-tap=\"showProfile()\"></span>\n            <img ng-src=\"{{$root.$storage.user.json_metadata.profile.profile_image || $root.$storage.user.json_metadata.user_image}}\" ng-if=\"$root.$storage.user.json_metadata.user_image || $root.$storage.user.json_metadata.profile.profile_image\" on-tap=\"showProfile()\" />\n            <div class=\"footprofileinfo\">\n              <h4 class=\"center\">\n                <span class=\"light\">@{{$root.$storage.user.username}}</span>\n                &nbsp;\n                <div class=\"reputation\">{{$root.$storage.user.reputation|reputation}}\n                </div>\n              </h4>\n              <div class=\"about\">{{$root.$storage.user.json_metadata.profile.about}}</div>\n              <div class=\"padding\">\n                <i class=\"icon ion-android-list\"></i>&nbsp;\n                {{$root.$storage.user.post_count}}&nbsp;\n                |&nbsp;\n                <i class=\"icon ion-arrow-graph-up-right\"></i>&nbsp;\n                {{$root.$storage.user.voting_power/100|number:2}}&nbsp;\n                |&nbsp;<i class=\"icon ion-ios-people\"></i>&nbsp;\n                {{followdetails.follower_count}}&nbsp;\n                |&nbsp;<i class=\"ion-person-add\"></i>&nbsp;\n                {{followdetails.following_count}}\n              </div>\n              <p><span ng-if=\"$root.$storage.user.json_metadata.profile && $root.$storage.user.json_metadata.profile.location\">\n                <i class=\"icon ion-location\"></i>&nbsp;\n                {{$root.$storage.user.json_metadata.profile.location}}\n                &nbsp;\n              </span>&nbsp;\n              <span ng-if=\"$root.$storage.user.json_metadata.profile && $root.$storage.user.json_metadata.profile.website\">\n                <i class=\"icon ion-link\"></i>&nbsp;\n                <a on-tap=\"window.open('{{$root.$storage.user.json_metadata.profile.website}}', '_system');\" style=\"color:white!important;text-decoration: underline;\">WebSite</a>\n                &nbsp;\n              </span>\n              <span ng-if=\"$root.$storage.user.created\">\n                <i class=\"icon ion-calendar\"></i>&nbsp;\n                {{$root.$storage.user.created|date}}\n                &nbsp;\n              </span></p>\n            </div>\n          </div>\n          <div class=\"item-myavatar\" ng-if=\"$root.$storage.user.username !== user.username\">\n            <span class=\"item-myavatar\" ng-if=\"!(user.json_metadata.profile.profile_image||user.json_metadata.user_image)\"><img src=\"img/user_profile.png\" /></span>\n            <img ng-src=\"{{user.json_metadata.profile.profile_image || user.json_metadata.user_image}}\" ng-if=\"user.json_metadata.profile.profile_image || user.json_metadata.user_image\" />\n            <div class=\"footprofileinfo\">\n              <h4 class=\"center\"><span class=\"light\">@{{user.username}}</span>&nbsp;<div class=\"reputation\">{{user.reputation|reputation}}</div></h4>\n              <p>{{user.json_metadata.profile.about}}</p>\n              <div class=\"padding\"><i class=\"icon ion-android-list\"></i>&nbsp;{{user.post_count}}&nbsp;|&nbsp;<i class=\"icon ion-arrow-graph-up-right\"></i>&nbsp;{{user.voting_power/100|number:2}}&nbsp;|&nbsp;<i class=\"icon ion-ios-people\"></i>&nbsp;\n              {{followdetails.follower_count}}&nbsp;\n              |&nbsp;<i class=\"ion-person-add\"></i>&nbsp;\n              {{followdetails.following_count}}</div>\n              <p><span ng-if=\"user.json_metadata.profile && user.json_metadata.profile.location\">\n                <i class=\"icon ion-location\"></i>&nbsp;\n                {{user.json_metadata.profile.location}}\n                &nbsp;\n              </span>&nbsp;\n              <span ng-if=\"user.json_metadata.profile && user.json_metadata.profile.website\">\n                <i class=\"icon ion-link\"></i>&nbsp;\n                <a on-tap=\"window.open('{{user.json_metadata.profile.website}}', '_system');\" style=\"color:white!important;text-decoration: underline;\">WebSite</a>\n                &nbsp;\n              </span>\n              <span ng-if=\"user.created\">\n                <i class=\"icon ion-calendar\"></i>&nbsp;\n                {{user.created|date}}\n                &nbsp;\n              </span></p>\n            </div>\n          </div>\n      </div>\n    </div>\n    <div class=\"has-mysubheader\">\n        <div class=\"box blue\" ng-if=\"active!='wallet'||active!='permissions'\">\n          <p class=\"padding\" ng-if=\"nonexist\">{{'NOTHING_HERE'|translate}}</p>\n          <ion-list>\n            <!--<div ng-repeat=\"(key, playlist) in profile\" class=\"item wrap\" on-tap=\"open(playlist)\">\n            <h3 class=\"bold\">{{playlist.root_title}}</h3>\n            <span ng-bind-html=\"playlist.body.substring(0,100)|parseUrl\"></span>\n            </div>-->\n            <div class=\"item\" ng-repeat=\"playlist in data.profile | orderBy:'-created' | limitTo:25 track by $index\" ng-class=\"{'item-thumbnail-left': playlist.json_metadata.image}\">\n              <img ng-src=\"{{playlist.json_metadata.image[0]}}\" on-tap=\"open(playlist)\" ng-if=\"playlist.json_metadata.image\" onerror=\"this.src='img/noimage.png'\"/>\n                <div on-tap=\"open(playlist)\">\n                <div class=\"wrap\">\n                  <h2><i class=\"fa fa-money positive\" ng-if=\"playlist.promoted.split(' ')[0] !== '0.000'\"></i> <i class=\"fa fa-fire positive\" ng-if=\"playlist.percent_steem_dollars === 0\"></i>{{playlist.root_title}}</h2>\n                </div>\n                <p ng-bind-html=\"playlist.body|limitTo:50|ldots|parseUrl\" ng-if=\"active!='blog'\"></p>\n                <div class=\"postdetails\"><i class=\"icon ion-android-time\"></i>&nbsp;{{playlist.created|timeago}}&nbsp;{{'BY'|translate}}&nbsp;<i class=\"icon ion-android-person\"></i>&nbsp;{{playlist.author}}&nbsp;<div class=\"reputation\">{{playlist.author_reputation|reputation|number:0}}</div></div>\n                </div>\n                <div class=\"row gray profile\">\n                  <div class=\"col\"><ion-spinner ng-if=\"playlist.invoting\"></ion-spinner>\n                  <i class=\"fa fa-chevron-circle-up fa-lg\" on-tap=\"upvotePost(playlist)\" ng-if=\"!playlist.upvoted\" on-hold=\"openSlider($event, playlist)\"></i><i class=\"fa fa-chevron-circle-up fa-lg positive\" on-tap=\"unvotePost(playlist)\" ng-if=\"playlist.upvoted\"></i>&nbsp;&nbsp;<span on-tap=\"$root.openInfo(playlist)\">{{playlist.net_votes}}</span>&nbsp;&nbsp;\n                   <!--<i class=\"fa fa-chevron-circle-down fa-lg\" on-tap=\"downvotePost(playlist)\" ng-if=\"!playlist.downvoted\"></i><i class=\"fa fa-chevron-circle-down fa-lg positive\" on-tap=\"unvotePost(playlist)\" ng-if=\"playlist.downvoted\"></i>--></div>\n                  <div class=\"col\" on-tap=\"openTooltip($event,playlist)\">&nbsp; <b>{{$root.$storage.currency|getCurrencySymbol}}</b> <span ng-if=\"playlist.max_accepted_payout.split(' ')[0] === '0.000'\"><del>{{playlist | sumPostTotal:$root.$storage.currencyRate | number}}</del></span><span ng-if=\"playlist.max_accepted_payout.split(' ')[0] !== '0.000'\">{{playlist | sumPostTotal:$root.$storage.currencyRate | number}}</span></div>\n                  <div class=\"col\">&nbsp; <i class=\"icon ion-chatbubbles\"></i>&nbsp;{{playlist.children}}</div>\n                  <div class=\"col\" ng-if=\"playlist.author!==user.username && active!=='recent-replies'\">&nbsp; <i class=\"icon ion-arrow-return-right\"></i></div>\n                </div>\n            </div>\n          </ion-list>\n          <ion-infinite-scroll on-infinite=\"loadmore()\" ng-if=\"moreDataCanBeLoaded()\" distance=\"15%\"></ion-infinite-scroll>\n        </div>\n\n        <div class=\"padding\" ng-if=\"active=='transfers'\">\n          <p class=\"bold uppercase\">\n            {{'BALANCES'|translate}}\n          </p>\n          <div class=\"row\">\n            <div class=\"col col-67\">\n            {{$root.$storage.platformname}} <br><span class=\"gray wrap\">{{'PROFILE_1'|translate:translationData }}</span>\n            </div>\n            <div class=\"col col-33\">\n            {{accounts.balance | st | number}} {{$root.$storage.platformlunit}}\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col col-67\">\n            {{$root.$storage.platformpower}} <br><span class=\"gray wrap\">{{'PROFILE_2'|translate:translationData}}</span>\n            </div>\n            <div class=\"col col-33\">\n            {{accounts.vesting_shares | sp | number}} {{$root.$storage.platformpunit}}\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col col-67\">\n            {{$root.$storage.platformdollar}} <br><span class=\"gray wrap\">{{'PROFILE_3'|translate:translationData}}</span>\n            </div>\n            <div class=\"col col-33\">\n            {{accounts.sbd_balance | sbd | number}} {{$root.$storage.platformdunit}}\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col col-67\">\n            {{'ESTIMATED_VALUE'|translate}} <br><span class=\"gray wrap\">{{'PROFILE_4'|translate:translationData}}</span>\n            </div>\n            <div class=\"col col-33\">\n            {{$root.$storage.currency|getCurrencySymbol}} {{accounts.vesting_shares | sd:accounts.balance:accounts.sbd_balance | number}}\n            </div>\n          </div>\n          <p class=\"bold\">{{'TRANSACTION_HISTORY'|translate}}</p>\n          <div class=\"list list-inset\">\n            <div class=\"item\" ng-repeat=\"tr in transfers | orderBy:'-[0]' | limitTo:15 track by $index\">\n              <span>{{tr[1].timestamp | timeago}} - {{tr[1].op[0]}}</span>\n              <div ng-if=\"tr[1].op[0]=='comment_reward'\">{{tr[1].op[1].sbd_payout}} | {{tr[1].op[1].vesting_payout}}</div>\n              <div ng-if=\"tr[1].op[0]=='author_reward'\" class=\"wrap\">{{tr[1].op[1].sbd_payout}} | {{tr[1].op[1].steem_payout}} | {{tr[1].op[1].vesting_payout}}</div>\n              <div ng-if=\"tr[1].op[0]=='curation_reward'\">{{tr[1].op[1].reward}} | {{tr[1].op[1].vesting_payout}}</div>\n              <div ng-if=\"tr[1].op[0]=='transfer'\">{{tr[1].op[1].amount}} | {{tr[1].op[1].memo}}</div>\n              <div ng-if=\"tr[1].op[0]=='interest'\">{{tr[1].op[1].interest}}</div>\n              <div ng-if=\"tr[1].op[0]=='transfer_to_vesting'\">{{tr[1].op[1].amount}} | {{tr[1].op[1].memo}}</div>\n              <div ng-if=\"tr[1].op[0]=='withdraw_vesting'\">{{tr[1].op[1].vesting_shares}} | {{tr[1].op[1].memo}}</div>\n              <p ng-if=\"tr[1].op[0]=='comment_reward'\">@{{tr[1].op[1].author}}/{{tr[1].op[1].permlink}}</p>\n              <p ng-if=\"tr[1].op[0]=='author_reward'\" class=\"wrap\">@{{tr[1].op[1].author}}/{{tr[1].op[1].permlink}}</p>\n              <p ng-if=\"tr[1].op[0]=='curation_reward'\" class=\"wrap\">@{{tr[1].op[1].comment_author}}/{{tr[1].op[1].comment_permlink}}</p>\n              <p ng-if=\"tr[1].op[0]=='transfer'\">{{tr[1].op[1].from}} {{'TO'|translate}}  {{tr[1].op[1].to}}</p>\n              <p ng-if=\"tr[1].op[0]=='transfer_to_vesting'\"> {{tr[1].op[1].from}} {{'TO'|translate}}  {{tr[1].op[1].to}}</p>\n              <p ng-if=\"tr[1].op[0]=='withdraw_vesting'\">{{tr[1].op[1].account}}</p>\n\n            </div>\n          </div>\n        </div>\n\n        <div class=\"box pink\" ng-if=\"active=='permissions'\">\n          <div class=\"list card\">\n            <div class=\"item\">\n              <h2><div class=\"bold\">{{'POSTING'|translate}}</div></h2>\n              <p class=\"wrap\">{{$root.$storage.user.posting.key_auths[0][0]}}</p>\n            </div>\n            <div class=\"item item-body\">\n              <center><qrcode class=\"full-image\" text=\"{{$root.$storage.user.posting.key_auths[0][0]}}\"></qrcode></center>\n              <p>\n                {{'PROFILE_5'|translate}}\n              </p>\n            </div>\n            <div class=\"item\">\n              <h2><div class=\"bold\">{{'OWNER'|translate}}</div></h2>\n              <p class=\"wrap\">{{$root.$storage.user.owner.key_auths[0][0]}}</p>\n            </div>\n            <div class=\"item item-body\">\n              <center><qrcode class=\"full-image\" text=\"{{$root.$storage.user.owner.key_auths[0][0]}}\"></qrcode></center>\n              <p>\n                {{'PROFILE_6'|translate}}\n              </p>\n            </div>\n            <div class=\"item\">\n              <h2><div class=\"bold\">{{'ACTIVE'|translate}}</div></h2>\n              <p class=\"wrap\">{{$root.$storage.user.active.key_auths[0][0]}}</p>\n            </div>\n            <div class=\"item item-body\">\n              <center><qrcode class=\"full-image\" text=\"{{$root.$storage.user.active.key_auths[0][0]}}\"></qrcode></center>\n              <p>\n                {{'PROFILE_7'|translate}}\n              </p>\n            </div>\n            <div class=\"item\">\n              <h2><div class=\"bold\">{{'MEMO'|translate}}</div></h2>\n              <p class=\"wrap\">{{$root.$storage.user.memo_key}}</p>\n            </div>\n            <div class=\"item item-body\">\n              <center><qrcode class=\"full-image\" text=\"{{$root.$storage.user.memo_key}}\"></qrcode></center>\n              <p>\n                {{'PROFILE_8'|translate}}\n              </p>\n            </div>\n          </div>\n        </div>\n    </div>\n    <script id = \"popoverPTr.html\" type=\"text/ng-template\">\n      <ion-popover-view class=\"detailedPost\">\n        <ion-content>\n          <div class=\"padding\" ng-bind-html=\"tooltipText\"></div>\n        </ion-content>\n      </ion-popover-view>\n    </script>\n    <script id = \"popoverSliderrp.html\" type=\"text/ng-template\">\n      <ion-popover-view class=\"detailedSlide\">\n        <ion-content>\n          <div class=\"row\">\n              <div class=\"col col-10\"><button class=\"button button-icon fa fa-chevron-circle-up fa-lg\" on-tap=\"votePostS()\"></button></div>\n              <div class=\"col\">\n                <div class = \"item range range-positive\">\n             {{rangeValue}} <input type=\"range\" name=\"range2\" min=\"1\" max=\"100\" ng-model=\"rangeValue\" ng-change=\"drag(rangeValue)\">\n                </div>\n              </div>\n              <div class=\"col col-10\"><button class=\"button button-icon ion-close-round\" ng-click=\"closeSlider()\"></button></div>\n          </div>\n        </ion-content>\n      </ion-popover-view>\n    </script>\n  </ion-content>\n  <div class=\"profile bar bar-footer\">\n    <div class=\"button-bar\">\n      <!--<a class=\"button button-large button-positive icon ion-ios-heart\" ng-class=\"{'active':active=='feed'}\" on-tap=\"change('feed')\">&nbsp;Feeds</a>-->\n      <a class=\"button button-large button-positive icon ion-compose\" ng-class=\"{'active':active=='blog'}\" on-tap=\"change('blog')\">&nbsp;{{'BLOG'|translate}}</a>\n      <a class=\"button button-positive icon ion-document-text\" ng-class=\"{'active':active=='posts'}\" on-tap=\"change('posts')\">&nbsp;{{'POSTS'|translate}}</a>\n      <a class=\"button button-positive icon ion-chatbubbles\" ng-class=\"{'active':active=='recent-replies'}\" on-tap=\"change('recent-replies')\">&nbsp;{{'REPLIES'|translate}}</a>\n      <a class=\"button button-positive icon ion-card\" ng-class=\"{'active':active=='transfers'}\"  on-tap=\"change('transfers')\">&nbsp;{{'WALLET'|translate}}</a>\n      <!--<a class=\"button button-royal icon ion-lock-combination\" ng-class=\"{'active':active=='permissions'}\" on-tap=\"change('permissions')\">Keys</a>-->\n    </div>\n  </div>\n  <script id=\"my-edit.html\" type=\"text/ng-template\">\n    <ion-modal-view>\n      <ion-header-bar class='bar-positive'>\n         <h1 class=\"title\">{{\"EDIT\"|translate}}</h1>\n         <button class=\"button button-clear button-outline\" ng-click=\"closeEdits()\">\n          {{\"CANCEL\"|translate}}\n        </button>\n      </ion-header-bar>\n      <ion-content class=\"has-header\">\n        <div class=\"list\">\n          <div class=\"item item-divider\">\n            {{\"PROFILE\"|translate}}\n          </div>\n          <label class=\"item item-input\">\n            <span class=\"input-label\">{{'ABOUT'|translate}}</span>\n            <textarea placeholder=\"{{'ABOUT'|translate}}\" ng-model=\"edit.profile.about\"></textarea>\n          </label>\n          <label class=\"item item-input\">\n            <span class=\"input-label\">{{'LOCATION'|translate}}</span>\n            <input type=\"text\" placeholder=\"{{'LOCATION'|translate}}\" ng-model=\"edit.profile.location\">\n          </label>\n          <label class=\"item item-input\">\n            <span class=\"input-label\">{{'DISPLAY_NAME'|translate}}</span>\n            <input type=\"text\" placeholder=\"{{'DISPLAY_NAME'|translate}}\" ng-model=\"edit.profile.name\">\n          </label>\n          <label class=\"item item-input\">\n            <span class=\"input-label\">{{'WEBSITE'|translate}}</span>\n            <input type=\"text\" placeholder=\"{{'WEBSITE'|translate}}\" ng-model=\"edit.profile.website\">\n          </label>\n          <div class=\"item item-divider\">\n            {{\"ESCROW\"|translate}}\n          </div>\n          <label class=\"item item-input\">\n            <span class=\"input-label\">{{'ESCROW_TERMS'|translate}}</span>\n            <input type=\"text\" placeholder=\"{{'ESCROW_TERMS'|translate}}\" ng-model=\"edit.escrow.terms\">\n          </label>\n          <label class=\"item item-input\">\n            <span class=\"input-label\">{{'ESCROW_FEE'|translate}} </span>\n            <input type=\"text\" placeholder=\"{{$root.$storage.platformlunit}}\" ng-model=\"edit.escrow.fees[$root.$storage.platformlunit]\">\n          </label>\n          <label class=\"item item-input\">\n            <span class=\"input-label\">{{'ESCROW_FEE'|translate}} </span>\n            <input type=\"text\" placeholder=\"{{$root.$storage.platformdunit}}\" ng-model=\"edit.escrow.fees[$root.$storage.platformdunit]\">\n          </label><br>\n          <center>\n            <button class=\"button button-positive\" ng-click=\"saveEdit()\">\n            {{'SAVE_CHANGES'|translate}}\n            </button>\n          </center>\n      </div>\n      </ion-content>\n    </ion-modal-view>\n\n  </script>\n</ion-view>\n",
        controller: "ProfileCtrl"
      }
    }
  })

  .state('app.posts', {
    url: '/posts/:tags/:renew',
    views: {
      'menuContent': {
        //templateUrl: 'templates/posts.html',
        template: "<ion-view view-cache=\"false\">\n\t<ion-nav-bar class=\"bar-positive\">\n\t\t<ion-nav-back-button>\n  \t\t</ion-nav-back-button>\n\t    <ion-nav-buttons side=\"left\">\n\t      <button class=\"button button-icon button-clear ion-navicon\" ng-if=\"!$root.voiceOver\" menu-toggle=\"left\"></button>\n\t      <a href class=\"button button-icon button-clear ion-navicon\" ng-if=\"$root.voiceOver\" menu-toggle=\"left\">{{'MENU'|translate}}</a>\n\t    </ion-nav-buttons>\n\t    <ion-nav-title on-tap=\"showFilter()\">\n          <div class=\"page-title\">{{$root.$storage.filterName}} {{$root.$storage.tag}} &emsp; <i class=\"icon ion-arrow-down-b\"></i></div>\n        </ion-nav-title>\n\t    <ion-nav-buttons side=\"right\">\n\t      <!--<button class=\"button\" on-tap=\"testfunction()\">Test</button>-->\n\t      <button class=\"button button-icon ion-more\" ng-if=\"!$root.voiceOver\" on-tap=\"openMenuPopover($event)\"></button>\n\t      <a href class=\"button button-icon ion-more\" on-tap=\"openMenuPopover($event)\" ng-if=\"$root.voiceOver\">{{'OPTIONS'|translate}}</a>\n\t    </ion-nav-buttons>\n\t</ion-nav-bar>\n  <ion-content class=\"has-header\" scroll=\"true\" delegate-handle=\"mainScroll\" overflow-scroll=\"true\" ng-class=\"{'theme-dark':$root.$storage.theme == 'night'}\">\n\t\t<ion-refresher pulling-text=\"{{'PULL_DOWN_TO_REFRESH'|translate}}\" on-refresh=\"refresh()\">\n  \t</ion-refresher>\n  \t\t<div ng-if=\"$root.$storage.view=='compact' && data.length>0\" class=\"masonry-layout\">\n\t    \t<div ng-repeat=\"d in data track by $index\" class=\"masonry-layout__panel\">\n\t    \t   <div class=\"list masonry-layout__panel-content\" ng-class=\"{'theme-dark':$root.$storage.theme == 'night'}\">\n\t\t    \t<div class=\"item\">\n\t\t\t\t    <div on-tap=\"open(d)\">\n\t\t\t\t    <span ng-if=\"d.reblogged_by.length>0\"><i class=\"icon ion-arrow-return-right\"></i> {{'RESTEEMED_BY'|translate}} {{d.reblogged_by}}</span>\n\t\t\t\t    <p><h2 class=\"wrapword\"><i class=\"fa fa-money positive\" ng-if=\"d.promoted.split(' ')[0] !== '0.000'\"></i>\n\t\t\t\t\t\t\t<i class=\"fa fa-fire positive\" ng-if=\"d.percent_steem_dollars === 0\"></i> {{d.title}}</h2></p>\n\t\t\t\t    <div class=\"row postdetails wrap\"><div class=\"col\"><i class=\"icon ion-android-time\"></i> {{d.created|timeago}}&nbsp;{{'BY'|translate}}&nbsp;<b>{{d.author}}</b>&nbsp;<div class=\"reputation\">{{d.author_reputation|reputation|number:0}}</div> {{'IN'|translate}} {{d.category|detransliterate:false}} &middot; {{d.body|readingtime}} {{'MIN_READ'|translate}}</div></div>\n\t\t\t\t    </div>\n\t\t\t\t    <div class=\"row\">\n\t\t\t\t    <div class=\"col\">\n\t\t\t\t      <span ng-if=\"!$root.voiceOver\">\n\t\t\t\t      <a href=\"#\" class=\"subdued\" ng-if=\"!d.upvoted\" on-tap=\"votePost(d)\" on-hold=\"openSlider($event, d)\"><ion-spinner ng-if=\"d.invoting\"></ion-spinner><i class=\"fa fa-chevron-circle-up fa-lg\" ng-if=\"!d.invoting\"></i></a><a href=\"#\" class=\"subdued\" ng-if=\"d.upvoted\" on-tap=\"unvotePost(d)\"><ion-spinner ng-if=\"d.invoting\"></ion-spinner>\n\t\t\t\t\t\t\t\t<i class=\"fa fa-chevron-circle-up fa-lg positive\" ng-if=\"!d.invoting\"></i></a>&nbsp;<span class=\"gray\" on-tap=\"openTooltip($event,d)\"><b>{{$root.$storage.currency|getCurrencySymbol}}</b> <span ng-if=\"d.max_accepted_payout.split(' ')[0] === '0.000'\"><del>0.000</del></span><span ng-if=\"d.max_accepted_payout.split(' ')[0] !== '0.000'\">{{d | sumPostTotal:$root.$storage.currencyRate | number}}</span></span></span>\n\t\t\t\t      <span ng-if=\"$root.voiceOver\">\n\t\t\t\t      <a href=\"#\" class=\"subdued\" ng-if=\"!d.upvoted\" on-tap=\"votePost(d)\" on-hold=\"openSlider($event, d)\"><ion-spinner ng-if=\"d.invoting\"></ion-spinner><i class=\"fa fa-chevron-circle-up fa-lg\" ng-if=\"!d.invoting\"></i>{{'UPVOTE'|translate}}</a><a href=\"#\" class=\"subdued\" ng-if=\"d.upvoted\" on-tap=\"unvotePost(d)\"><ion-spinner ng-if=\"d.invoting\"></ion-spinner>\n\t\t\t\t\t\t\t\t<i class=\"fa fa-chevron-circle-up fa-lg positive\" ng-if=\"!d.invoting\"></i>{{'UNVOTE'|translate}}</a>&nbsp;<span class=\"gray\" on-tap=\"openTooltip($event,d)\"><b>{{$root.$storage.currency|getCurrencySymbol}}</b> <span ng-if=\"d.max_accepted_payout.split(' ')[0] === '0.000'\"><del>{{d | sumPostTotal:$root.$storage.currencyRate | number}}</del></span><span ng-if=\"d.max_accepted_payout.split(' ')[0] !== '0.000'\">{{d | sumPostTotal:$root.$storage.currencyRate | number}}</span></span></span>\n\t\t\t\t      </div>\n\t\t\t\t      <div class=\"col col-25 tright\">\n\t\t\t\t      <a href=\"#\" class=\"subdued\" on-tap=\"$root.openInfo(d)\"><i class=\"icon ion-person-stalker\"></i>&nbsp;{{d.net_votes}}</a>\n\t\t\t\t      </div>\n\t\t\t\t      <div class=\"col col-25 tright\">\n\t\t\t\t      <a href=\"#\" class=\"subdued\"><i class=\"icon ion-chatbubbles\"></i>&nbsp;{{d.children}}</a>\n\t\t\t\t      </div>\n\t\t\t\t      <div class=\"col col-10 tright\">\n\t\t\t\t      <a href=\"#\" class=\"subdued\" on-tap=\"$root.reBlog(s.author, s.permlink)\"><i class=\"icon ion-arrow-return-right\"></i>&nbsp;</a>\n\t\t\t\t      </div>\n\t\t\t\t    </div>\n\t\t\t  \t</div>\n\t\t\t  </div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div ng-if=\"$root.$storage.view=='card' && data.length>0\" class=\"masonry-layout\">\n\t\t\t<div ng-repeat=\"ds in data track by $index\" class=\"masonry-layout__panel\">\n\t    \t   <div class=\"list card masonry-layout__panel-content\" ng-if=\"ds\" ng-class=\"{'theme-dark':$root.$storage.theme == 'night'}\">\n\n\t\t\t\t<div class=\"item\" on-tap=\"open(ds)\" ng-class=\"{'theme-dark':$root.$storage.theme == 'night'}\">\n\t\t\t\t\t<span ng-if=\"ds.reblogged_by.length>0\"><i class=\"icon ion-arrow-return-right\"></i> {{'RESTEEMED_BY'|translate}} {{ds.reblogged_by}}</span>\n\t\t\t\t    <h2 class=\"wrapword\"><i class=\"fa fa-money positive\" ng-if=\"ds.promoted.split(' ')[0] !== '0.000'\"></i> <i class=\"fa fa-fire positive\" ng-if=\"ds.percent_steem_dollars === 0\"></i>{{ds.title}}</h2>\n\t\t\t\t    <div class=\"row postdetails wrap\"><div class=\"col\"><i class=\"icon ion-android-time\"></i> {{ds.created|timeago}}&nbsp;{{'BY'|translate}}&nbsp;<b>{{ds.author}}</b>&nbsp;<div class=\"reputation\">{{ds.author_reputation|reputation|number:0}}</div> {{'IN'|translate}} {{ds.category|detransliterate:false}} &middot; {{ds.body|readingtime}} {{'MIN_READ'|translate}}</div></div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"item-body\">\n\t\t\t\t    <img class=\"full-image\" ng-src=\"{{ds.json_metadata.image[0]}}\" on-tap=\"open(ds)\" ng-if=\"ds.json_metadata.image[0]\" onerror=\"this.src='img/noimage.png'\"/>\n\t\t\t\t    <div class=\"row\">\n\t\t\t\t\t    <div class=\"col\">\n\t\t\t\t\t      <span ng-if=\"!$root.voiceOver\">\n\t\t\t\t\t      <a href=\"#\" class=\"subdued\" ng-if=\"!ds.upvoted\" on-tap=\"votePost(ds)\" on-hold=\"openSlider($event, ds)\"><ion-spinner ng-if=\"ds.invoting\"></ion-spinner><i class=\"fa fa-chevron-circle-up fa-lg\" ng-if=\"!ds.invoting\"></i></a><a href=\"#\" class=\"subdued\" ng-if=\"ds.upvoted\" on-tap=\"unvotePost(ds)\"><ion-spinner ng-if=\"ds.invoting\"></ion-spinner>\n\t\t\t\t\t\t\t\t\t<i class=\"fa fa-chevron-circle-up fa-lg positive\" ng-if=\"!ds.invoting\"></i></a>&nbsp;<span class=\"gray\" on-tap=\"openTooltip($event,ds)\"><b>{{$root.$storage.currency|getCurrencySymbol}}</b> <span ng-if=\"ds.max_accepted_payout.split(' ')[0] === '0.000'\"><del>{{ds | sumPostTotal:$root.$storage.currencyRate | number}}</del></span><span ng-if=\"ds.max_accepted_payout.split(' ')[0] !== '0.000'\">{{ds | sumPostTotal:$root.$storage.currencyRate | number}}</span></span>\n\t\t\t\t\t      </span>\n\t\t\t\t\t      <span ng-if=\"$root.voiceOver\">\n\t\t\t\t\t      <a href=\"#\" class=\"subdued\" ng-if=\"!ds.upvoted\" on-tap=\"votePost(ds)\" on-hold=\"openSlider($event, ds)\"><ion-spinner ng-if=\"ds.invoting\"></ion-spinner><i class=\"fa fa-chevron-circle-up fa-lg\" ng-if=\"!ds.invoting\"></i>{{'UPVOTE'|translate}}</a>\n\t\t\t\t\t      <a href=\"#\" class=\"subdued\" ng-if=\"ds.upvoted\" on-tap=\"unvotePost(ds)\"><ion-spinner ng-if=\"ds.invoting\"></ion-spinner><i class=\"fa fa-chevron-circle-up fa-lg positive\" ng-if=\"!ds.invoting\"></i>{{'UNVOTE'|translate}}</a>&nbsp;<span class=\"gray\" on-tap=\"openTooltip($event,ds)\">\n\t\t\t\t\t\t\t\t\t<b>{{$root.$storage.currency|getCurrencySymbol}}</b> <span ng-if=\"ds.max_accepted_payout.split(' ')[0] === '0.000'\"><del>0.000</del></span><span ng-if=\"ds.max_accepted_payout.split(' ')[0] !== '0.000'\">{{ds | sumPostTotal:$root.$storage.currencyRate | number}}</span></span>\n\t\t\t\t\t      </span>\n\t\t\t\t\t      </div>\n\t\t\t\t\t      <div class=\"col col-25 tright\">\n\t\t\t\t\t      <a href=\"#\" class=\"subdued\" on-tap=\"$root.openInfo(ds)\"><i class=\"icon ion-person-stalker\"></i>&nbsp;{{ds.net_votes}}</a>\n\t\t\t\t\t      </div>\n\t\t\t\t\t      <div class=\"col col-25 tright\">\n\t\t\t\t\t      <a href=\"#\" class=\"subdued\"><i class=\"icon ion-chatbubbles\"></i>&nbsp;{{ds.children}}</a>\n\t\t\t\t\t      </div>\n\t\t\t\t\t      <div class=\"col col-10 tright\">\n\t\t\t\t\t      <a href=\"#\" class=\"subdued\" on-tap=\"$root.reBlog(ds.author, ds.permlink)\"><i class=\"icon ion-arrow-return-right\"></i>&nbsp;</a>\n\t\t\t\t\t      </div>\n\t\t\t\t      </div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n    <ion-infinite-scroll ng-if=\"moreDataCanBeLoaded()\" on-infinite=\"loadMore()\" distance=\"15%\"></ion-infinite-scroll>\n    <br>\n    <script id = \"popoverT.html\" type=\"text/ng-template\">\n      <ion-popover-view class=\"detailedPost\">\n        <ion-content>\n          <div class=\"padding\" ng-bind-html=\"tooltipText\"></div>\n        </ion-content>\n      </ion-popover-view>\n    </script>\n    <script id = \"popoverSlider.html\" type=\"text/ng-template\">\n      <ion-popover-view class=\"detailedSlide\">\n        <ion-content>\n          \t<div class=\"row\">\n          \t\t<div class=\"col col-10\"><button class=\"button button-icon fa fa-chevron-circle-up fa-lg\" on-tap=\"votePostS()\"></button></div>\n          \t\t<div class=\"col\">\n          \t\t\t<div class = \"item range range-positive\">\n\t\t\t\t\t   {{rangeValue}} <input type=\"range\" name=\"range1\" min=\"1\" max=\"100\" ng-model=\"rangeValue\" ng-change=\"drag(rangeValue)\">\n\t\t\t\t\t</div>\n          \t\t</div>\n          \t\t<div class=\"col col-10\"><button class=\"button button-icon ion-close-round\" ng-click=\"closeSlider()\"></button></div>\n          \t</div>\n        </ion-content>\n      </ion-popover-view>\n    </script>\n  </ion-content>\n</ion-view>\n",
        controller: 'PostsCtrl'
      }
    }
  })

  .state('app.bookmark', {
    url: '/bookmark',
    views: {
      'menuContent': {
        //templateUrl: 'templates/post.html',
        template: "<ion-view view-title=\"{{'BOOKMARKS' | translate}}\">\n  <ion-content class=\"has-header\">\n\t<ion-list ng-if=\"$root.$storage.bookmark\" can-swipe=\"true\">\n  \t\t<ion-item ng-repeat=\"item in $root.$storage.bookmark\" ng-click=\"$root.getContentAndOpen(item)\">\n\t\t    <p><h2>{{item.author}}</h2></p>\n        <p>{{item.permlink}}</p>\n\t\t    <div class=\"row postdetails twrap\"><div class=\"col\"><i class=\"icon ion-android-time\"></i> {{item.created|timeago}}</div></div>\n\t\t    <ion-option-button class=\"button-assertive\" ng-click=\"removeBookmark($index)\">{{'REMOVE' | translate}}\n\t\t    </ion-option-button>\n    \t</ion-item>\n    </ion-list>\n    <p class=\"tcenter gray padding\" ng-if=\"$root.$storage.bookmark.length>0\">{{'SWIPE_LEFT'|translate}}</p>\n    <p class=\"tcenter gray padding\" ng-if=\"$root.$storage.bookmark.length==0\">{{'NOTHING_HERE'|translate}}</p>\n\n  </ion-content>\n</ion-view>\n",
        controller: 'BookmarkCtrl'
      }
    }
  })

	.state('app.drafts', {
    url: '/drafts',
    views: {
      'menuContent': {
        //templateUrl: 'templates/post.html',
        template: "<ion-view view-title=\"{{'DRAFTS' | translate}}\">\n  <ion-content class=\"has-header\">\n\t<ion-list ng-if=\"drafts\" can-swipe=\"true\">\n  \t\t<ion-item ng-repeat=\"item in drafts\" ng-click=\"$root.openDraft(item)\">\n\t\t    <p><h2>{{item.title}}</h2></p>\n\t\t\t    <div class=\"row postdetails twrap\"><div class=\"col\"><i class=\"icon ion-android-time\"></i> {{item.created|timeago}}&nbsp;{{'TAGS' | translate}}:&nbsp;<b>{{item.tags}}</b></div></div>\n\t\t    <ion-option-button class=\"button-assertive\" ng-click=\"removeDraft(item._id)\">{{'REMOVE' | translate}}\n\t\t    </ion-option-button>\n    \t</ion-item>\n    </ion-list>\n    <p class=\"tcenter gray\" ng-if=\"drafts.length>0\">{{'SWIPE_LEFT'|translate}}</p>\n    <p class=\"tcenter gray\" ng-if=\"drafts.length==0\">{{'NOTHING_HERE'|translate}}</p>\n\n  </ion-content>\n</ion-view>\n",
        controller: 'DraftsCtrl'
      }
    }
  })

	.state('app.images', {
    url: '/images',
    views: {
      'menuContent': {
        //templateUrl: 'templates/post.html',
        template: "<ion-view view-title=\"{{'MANAGE' | translate}} {{'GALLERY' | translate}}\">\n  <ion-content class=\"has-header\">\n\t<ion-list ng-if=\"images\" can-swipe=\"true\">\n  \t\t<ion-item ng-repeat=\"item in images\" class=\"item-thumbnail-left\">\n        <img ng-src=\"{{item.url}}\"/>\n        <p><h2>{{item.url}}</h2></p>\n\t\t\t  <div class=\"row postdetails twrap\"><div class=\"col\"><i class=\"icon ion-android-time\"></i> {{item.created|timeago}}&nbsp;</div></div>\n        <ion-option-button class=\"button-assertive\" ng-click=\"removeImage(item._id)\">{{'REMOVE' | translate}}\n\t\t    </ion-option-button>\n\t\t    <ion-option-button class=\"button-calm\" ng-click=\"copyImage(item.url)\">{{'COPY' | translate}}\n\t\t    </ion-option-button>\n    \t</ion-item>\n    </ion-list>\n    <p class=\"tcenter gray\" ng-if=\"images.length>0\">{{'SWIPE_LEFT'|translate}}</p>\n    <p class=\"tcenter gray\" ng-if=\"images.length==0\">{{'NOTHING_HERE'|translate}}</p>\n  </ion-content>\n</ion-view>\n",
        controller: 'ImagesCtrl'
      }
    }
  })

  .state('app.notifications', {
    url: '/notifications',
    views: {
      'menuContent': {
        //templateUrl: 'templates/post.html',
        template: "<ion-view view-title=\"{{'NOTIFICATIONS' | translate}}\">\n  <ion-content class=\"has-header\">\n\t<ion-list ng-if=\"$root.$storage.notifications\" can-swipe=\"true\">\n  \t\t<ion-item ng-repeat=\"item in $root.$storage.notifications | orderBy: '-created' \" ng-click=\"$root.getContentAndOpen(item)\">\n\t\t    <p><h2>{{item.title}}</h2></p>\n\t\t    <span>{{item.message}}</span>\n\t\t    <div class=\"row postdetails twrap\"><div class=\"col\"><i class=\"icon ion-android-time\"></i> {{item.created|timeago}}&nbsp;{{'BY' | translate}}&nbsp;<b>{{item.author}}&nbsp;</b></div></div>\n\t\t    <ion-option-button class=\"button-assertive\" ng-click=\"removeNotification($index)\">{{'REMOVE' | translate}}\n\t\t    </ion-option-button>\n    \t</ion-item>\n    </ion-list>\n  </ion-content>\n</ion-view>\n",
        controller: 'NotificationsCtrl'
      }
    }
  })


  .state('app.post', {
    url: '/post/:category/:author/:permlink',
    views: {
      'menuContent': {
        //templateUrl: 'templates/post.html',
        template: "<ion-view view-title=\"\">\n\t<ion-nav-bar class=\"bar-positive\">\n\t\t<ion-nav-back-button>\n    \t</ion-nav-back-button>\n\t    <ion-nav-buttons side=\"left\">\n\t      <button class=\"button button-icon button-clear ion-navicon\" ng-if=\"!$root.voiceOver\" menu-toggle=\"left\"></button>\n        <a href class=\"button button-icon ion-more\" ng-if=\"$root.voiceOver\" menu-toggle=\"left\">{{'MENU'|translate}}</a>\n\t    </ion-nav-buttons>\n\t    <ion-nav-buttons side=\"right\">\n      <span ng-if=\"!$root.voiceOver\">\n        <button class=\"button button-icon button-clear\" on-tap=\"bookmark()\"><i class=\"icon\" ng-class=\"{'ion-ios-bookmarks':isBookmarked(), 'ion-ios-bookmarks-outline':!isBookmarked()}\"></i></button> &nbsp; \n\t      <button class=\"button button-icon button-clear ion-android-share-alt\" on-tap=\"share()\"></button>\n      </span>\n      <span ng-if=\"$root.voiceOver\">\n        <a href class=\"button button-icon button-clear\" on-tap=\"bookmark()\"><i class=\"icon\" ng-class=\"{'ion-ios-bookmarks':isBookmarked(), 'ion-ios-bookmarks-outline':!isBookmarked()}\"></i>{{'BOOKMARK'|translate}}</a> &nbsp; \n        <a href class=\"button button-icon button-clear ion-android-share-alt\" on-tap=\"share()\">{{'SHARE'|translate}}</a>\n      </span>\n\t    </ion-nav-buttons>\n\t</ion-nav-bar>\n  <ion-floating-menu menu-color=\"#387ef5\" menu-open-color=\"#387ef5\" has-footer=\"true\">\n    <ion-floating-item icon=\"ion-chatbubbles\" click=\"isreplying($root.$storage.sitem, true)\" ng-if=\"$root.$storage.user.username\" button-color=\"#387ef5\" icon-color=\"#fff\" text=\"{{'REPLY'|translate}}\" text-class=\"text-class\"></ion-floating-item>\n    <ion-floating-item icon=\"ion-android-arrow-dropup-circle\" click=\"upvotePost($root.$storage.sitem)\" button-color=\"#387ef5\" icon-color=\"#fff\" text=\"{{'UPVOTE'|translate}}\" text-class=\"text-class\"></ion-floating-item>\n    <ion-floating-item icon=\"ion-edit\" click=\"editPost($root.$storage.sitem)\" ng-if=\"$root.$storage.sitem.mode!=='archived' && $root.$storage.sitem.author==$root.$storage.user.username\" button-color=\"#387ef5\" icon-color=\"#fff\" text=\"{{'EDIT'|translate}}\" text-class=\"text-class\"></ion-floating-item>\n    <ion-floating-item icon=\"ion-image\" click=\"showImages(0)\" ng-if=\"isImages()\" button-color=\"#387ef5\" icon-color=\"#fff\" text=\"{{'GALLERY'|translate}}\" text-class=\"text-class\"></ion-floating-item>\n    <ion-floating-item icon=\"ion-arrow-return-right\" ng-if=\"$root.$storage.user.username !== $root.$storage.sitem.author\" click=\"$root.reBlog($root.$storage.sitem.author, $root.$storage.sitem.permlink)\" button-color=\"#387ef5\" icon-color=\"#fff\" text=\"{{'REBLOG'|translate}}\" text-class=\"text-class\"></ion-floating-item>\n  </ion-floating-menu>\n  <ion-content class=\"padding has-header\" delegate-handle=\"mainScroll\" overflow-scroll=\"true\" ng-class=\"{'theme-dark':$root.$storage.theme == 'night'}\"><!---->\n    <div ng-if='$root.$storage.sitem'>\n      <p class=\"title h3\" ng-if=\"$root.$storage.sitem.root_title && $root.$storage.sitem.title==''\"><a href=\"#/app/post{{$root.$storage.sitem.url.split('#')[0]}}\">{{\"VIEW_CONTEXT\"|translate}}</a></p>\n    \t<p class=\"title h3\">{{$root.$storage.sitem.title}}</p>\n    \t<div class=\"stitle row gray\"><div class=\"col\">\n        <img class=\"round-avatar\" src=\"img/user_profile.png\" ng-src=\"{{$root.$storage.paccounts[$root.$storage.sitem.author].json_metadata.user_image||$root.$storage.paccounts[$root.$storage.sitem.author].json_metadata.profile.profile_image}}\" onerror=\"this.src=\\'img/user_profile.png\\'\" onabort=\"this.src=\\'img/user_profile.png\\'\" /> <b><a href=\"#/app/profile/{{$root.$storage.sitem.author}}\">{{$root.$storage.sitem.author}}</a></b>&nbsp;<div class=\"reputation\">{{$root.$storage.sitem.author_reputation|reputation|number:0}}</div>&middot;{{$root.$storage.sitem.created|timeago}} {{'IN'|translate}}&nbsp;{{$root.$storage.sitem.category|detransliterate:false}}</div><div class=\"pull-right\"><span ng-if=\"$root.voiceOver\"><i class=\"fa fa-flag\" on-tap=\"downvotePost($root.$storage.sitem)\" ng-if=\"!$root.$storage.sitem.downvoted\">{{'DOWNVOTE'|translate}}</i><i class=\"fa fa-flag positive\" on-tap=\"unvotePost($root.$storage.sitem)\" ng-if=\"$root.$storage.sitem.downvoted\">{{'UNVOTE_DOWNVOTED'|translate}}</i></span><span ng-if=\"!$root.voiceOver\"><i class=\"fa fa-flag\" on-tap=\"downvotePost($root.$storage.sitem)\" ng-if=\"!$root.$storage.sitem.downvoted\"></i><i class=\"fa fa-flag positive\" on-tap=\"unvotePost($root.$storage.sitem)\" ng-if=\"$root.$storage.sitem.downvoted\"></i></span></div></div>\n    \t<br><!---->\n      <div class=\"bodytext selectable\" ng-bind-html=\"$root.$storage.sitem.body | parseUrl \">\n      </div>\n\n      <div ng-if='$root.$storage.sitem.json_metadata.tags' class=\"tags\">\n        <div ng-repeat='tag in $root.$storage.sitem.json_metadata.tags'>\n          <span><div class=\"tag\" on-tap=\"openTag(tag, 5)\">{{tag|detransliterate:false}}</div></li>\n        </div>\n      </div>\n\n      <div class=\"row gray\">\n        <div class=\"col col-33\" ng-if=\"!$root.voiceOver\"><ion-spinner ng-if=\"$root.$storage.sitem.invoting\"></ion-spinner>\n        <i class=\"fa fa-chevron-circle-up fa-lg\" on-tap=\"upvotePost($root.$storage.sitem)\" ng-if=\"!$root.$storage.sitem.upvoted && !$root.$storage.sitem.invoting\" on-hold=\"openSliderr($event, $root.$storage.sitem)\"></i><i class=\"fa fa-chevron-circle-up fa-lg positive\" on-tap=\"unvotePost($root.$storage.sitem)\" ng-if=\"$root.$storage.sitem.upvoted && !$root.$storage.sitem.invoting\"></i>&nbsp;&nbsp;&nbsp;<span on-tap=\"$root.openInfo($root.$storage.sitem)\">{{$root.$storage.sitem.net_votes}}</span></div>\n\n        <div class=\"col col-33\" ng-if=\"$root.voiceOver\"><ion-spinner ng-if=\"$root.$storage.sitem.invoting\"></ion-spinner>\n        <i class=\"icon ion-android-arrow-dropup-circle\" on-tap=\"upvotePost($root.$storage.sitem)\" ng-if=\"!$root.$storage.sitem.upvoted\" on-hold=\"openSliderr($event, $root.$storage.sitem)\">{{'UPVOTE'|translate}}</i><i class=\"icon ion-android-arrow-dropup-circle positive\" on-tap=\"unvotePost($root.$storage.sitem)\" ng-if=\"$root.$storage.sitem.upvoted\">{{'UNVOTE_UPVOTED'|translate}}</i>&nbsp;&nbsp;&nbsp;<span on-tap=\"$root.openInfo($root.$storage.sitem)\">{{$root.$storage.sitem.net_votes}}</span></div>\n        <div class=\"col col-33\" on-tap=\"openTooltip($event,$root.$storage.sitem)\"><b>{{$root.$storage.currency|getCurrencySymbol}}</b> {{$root.$storage.sitem | sumPostTotal:$root.$storage.currencyRate | number}}</div>\n        <div class=\"col\" on-tap=\"isreplying($root.$storage.sitem, true)\"><i class=\"fa fa-reply\"></i> {{$root.$storage.sitem.children}}</div>\n        <div class=\"col\" on-tap=\"editPost($root.$storage.sitem)\" ng-if=\"$root.$storage.sitem.mode=='first_payout' && $root.$storage.sitem.author==$root.$storage.user.username\"><i class=\"fa  fa-pencil-square-o\"></i></div>\n        <div class=\"col\" on-tap=\"deletePost($root.$storage.sitem)\" ng-if=\"$root.$storage.sitem.net_votes==0 && $root.$storage.sitem.author==$root.$storage.user.username\"><i class=\"fa fa-trash-o\"></i></div>\n      </div>\n      <ion-thread comments=\"post.comments\"></ion-thread>\n    </div>\n    <script id = \"popoverTr.html\" type=\"text/ng-template\">\n      <ion-popover-view class=\"detailedPost\">\n        <ion-content>\n          <div class=\"padding\" ng-bind-html=\"tooltipText\"></div>\n        </ion-content>\n      \n      </ion-popover-view>\n    </script>\n    <script id = \"popoverSliderr.html\" type=\"text/ng-template\">\n      <ion-popover-view class=\"detailedSlide\">\n        <ion-content class=\"padding\">\n          <div class=\"row\">\n              <div class=\"col col-10\"><button class=\"button button-icon fa fa-chevron-circle-up fa-lg\" on-tap=\"votePostS()\"></button></div>\n              <div class=\"col\">\n                <div class = \"item range range-positive\">\n             {{rangeValue}} <input type=\"range\" name=\"range2\" min=\"1\" max=\"100\" ng-model=\"rangeValue\" ng-change=\"drag(rangeValue)\">\n                </div>\n              </div>\n              <div class=\"col col-10\"><button class=\"button button-icon ion-close-round\" ng-click=\"closeSliderr()\"></button></div>\n          </div>\n        </ion-content>\n      </ion-popover-view>\n    </script>\n  </ion-content>\n</ion-view>\n",
        controller: 'PostCtrl'
      }
    }
  });
  // if none of the above states are matched, use this as the fallback
  $urlRouterProvider.otherwise('/app/posts//');
  $ionicConfigProvider.navBar.alignTitle('left')
  $ionicConfigProvider.backButton.text('').icon('ion-chevron-left');
  $ionicConfigProvider.views.swipeBackEnabled(false);
  $ionicConfigProvider.views.maxCache(2);

  $animateProvider.classNameFilter( /\banimated\b/ );
  $ionicConfigProvider.scrolling.jsScrolling(false);

  if (window.cordova) {
      $logProvider.debugEnabled(false);
      $compileProvider.debugInfoEnabled(false);
  }

  $translateProvider.translations('en-US', require('./locales/ready/en')); //English
  $translateProvider.translations('ru-RU', require('./locales/ready/ru-RU')); //Russian
  $translateProvider.translations('de-DE', require('./locales/ready/de-DE')); //German
  $translateProvider.translations('fr-FR', require('./locales/ready/fr-FR')); //French
  $translateProvider.translations('es-ES', require('./locales/ready/es-ES')); //Spanish
  $translateProvider.translations('el-GR', require('./locales/ready/el-GR')); //Greek
  $translateProvider.translations('bg-BG', require('./locales/ready/bg-BG')); //Bulgarian
  $translateProvider.translations('nl-NL', require('./locales/ready/nl-NL')); //Dutch
  $translateProvider.translations('hu-HU', require('./locales/ready/hu-HU')); //Hungarian
  $translateProvider.translations('cs-CZ', require('./locales/ready/cs-CZ')); //Czech
  $translateProvider.translations('he-IL', require('./locales/ready/he-IL')); //Hebrew
  $translateProvider.translations('pl-PL', require('./locales/ready/pl-PL')); //Polish
  $translateProvider.translations('pt-PT', require('./locales/ready/pt-PT')); //Portuguese
  $translateProvider.translations('pt-BR', require('./locales/ready/pt-BR')); //Portuguese Brazil
  $translateProvider.translations('id-ID', require('./locales/ready/id-ID')); //Indonesian
  $translateProvider.translations('zh-TW', require('./locales/ready/zh-TW')); //Chinese traditional
  $translateProvider.translations('zh-CN', require('./locales/ready/zh-CN')); //Chinese simplified
  $translateProvider.translations('dolan', require('./locales/ready/dolan')); //Dolan
  $translateProvider.translations('sv-SE', require('./locales/ready/sv-SE')); //Chinese simplified
  $translateProvider.translations('uk-UA', require('./locales/ready/uk-UA')); //Ukrainian
  $translateProvider.translations('ms-MY', require('./locales/ready/ms-MY')); //Malay
  $translateProvider.translations('hr-HR', require('./locales/ready/hr-HR')); //Croatian
  $translateProvider.translations('fa-IR', require('./locales/ready/fa-IR')); //Persian
  $translateProvider.translations('it-IT', require('./locales/ready/it-IT')); //Persian

  $translateProvider.useSanitizeValueStrategy(null);

  $translateProvider.preferredLanguage('en-US');
  $translateProvider.fallbackLanguage('en-US');

});

app.run(function($ionicPlatform, $rootScope, $localStorage, $interval, $ionicPopup, $ionicLoading, $cordovaSplashscreen, $ionicModal, $timeout, $cordovaToast, APIs, $state, $log, $ionicScrollDelegate, $filter, $translate) {
  $rootScope.$storage = $localStorage;
  $rootScope.log = function(message) {
    $log.info(message);
  };
  $ionicPlatform.ready(function() {
    // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
    // for form inputs)
    if (window.cordova && window.cordova.plugins.Keyboard) {
      cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
      cordova.plugins.Keyboard.disableScroll(true);
    }
    if (window.StatusBar) {
      // org.apache.cordova.statusbar required
      StatusBar.styleDefault();
    }
    if (!$rootScope.$storage.users) {
      $rootScope.$storage.users = [];
    }
    
    if (!$rootScope.$storage.theme) {
      $rootScope.$storage.theme = 'day';
    }

    if (!$rootScope.$storage.socketgolos)
      $rootScope.$storage.socketgolos = "wss://ws.golos.io/";
    if (!$rootScope.$storage.socketsteem)
      $rootScope.$storage.socketsteem = "wss://steemd.steemit.com";

    window.ejs.ChainConfig.setChainId(localStorage[$rootScope.$storage.chain+"Id"]);

    if (!angular.isDefined($rootScope.$storage.language)) {
      if(typeof navigator.globalization !== "undefined") {
          navigator.globalization.getPreferredLanguage(function(language) {
              $translate.use(language.value).then(function(data) {
                  console.log("SUCCESS -> " + data);
                  if (language.value.indexOf("en") == 0) {
                    $rootScope.$storage.language = 'en';            
                  }
                  $rootScope.$storage.language = language.value;
              }, function(error) {
                  console.log("ERROR -> " + error);
              });
          }, null);
      } else {
        $rootScope.$storage.language = 'en';
      }
    } else {
      $translate.use($rootScope.$storage.language);
    }
    if (!$rootScope.$storage.chain){
      $rootScope.$storage.platformname = "Steem";
      $rootScope.$storage.platformpower = "Steem Power";
      $rootScope.$storage.platformsunit = "Steem";
      $rootScope.$storage.platformdollar = "Steem Dollar";
      $rootScope.$storage.platformdunit = "SBD";
      $rootScope.$storage.platformpunit = "SP";
      $rootScope.$storage.platformlunit = "STEEM";
      $rootScope.$storage.chain = "steem";
      $rootScope.$storage.currency = "usd";
      $rootScope.$storage.currencyRate = 1;
    }
    $rootScope.$storage.languages = [
      {id:'en', name: 'English'}, 
      {id:'es-ES', name: 'Español'}, 
      {id:'el-GR', name: 'Ελληνικά'}, 
      {id:'fr-FR', name: 'Français'}, 
      {id:'de-DE', name: 'Deutsch'}, 
      {id:'ru-RU', name: 'Русский'}, 
      {id:'bg-BG', name: 'Български'}, 
      {id:'nl-NL', name: 'Nederlands'}, 
      {id:'hu-HU', name: 'Magyar'}, 
      {id:'cs-CZ', name: 'Čeština'}, 
      {id:'he-IL', name: 'עברית‎'}, 
      {id:'pl-PL', name: 'Polski‎'}, 
      {id:'pt-PT', name: 'Português'}, 
      {id:'pt-BR', name: 'Português BR'},
      {id:'sv-SE', name: 'Svensk'},
      {id:'id-ID', name: 'Bahasa Indonesia'}, 
      {id:'zh-CN', name: '繁體中文'}, 
      {id:'zh-TW', name: '简体中文'},
      {id:'dolan', name: 'Dolan'},
      {id:'uk-UA', name: 'Українська'},
      {id:'ms-MY', name: 'Bahasa Melayu'},
      {id:'hr-HR', name: 'Hrvatski'},
      {id:'fa-IR', name: 'Fārsi'},
      {id:'it-IT', name: 'Italiano'}
      
    ];

    $rootScope.$storage.chains = [{id:'steem', name: 'Steem'}, {id:'golos', name: 'Golos'}];

    if (!$rootScope.$storage.currencies) {
      $rootScope.$storage.currencies = [
        {id:'btc', name: 'BTC', rate: 0, date: "1/1/2016"}, 
        {id:'usd', name: 'USD', rate: 0, date: "1/1/2016"}, 
        {id:'eur', name: 'EUR', rate: 0, date: "1/1/2016"}, 
        {id:'rub', name: 'RUB', rate: 0, date: "1/1/2016"}, 
        {id:'gbp', name: 'GBP', rate: 0, date: "1/1/2016"}, 
        {id:'jpy', name: 'JPY', rate: 0, date: "1/1/2016"}, 
        {id:'krw', name: 'KRW', rate: 0, date: "1/1/2016"}, 
        {id:'inr', name: 'INR', rate: 0, date: "1/1/2016"}, 
        {id:'cny', name: 'CNY', rate: 0, date: "1/1/2016"}, 
        {id:'uah', name: 'UAH', rate: 0, date: "1/1/2016"}, 
        {id:'sek', name: 'SEK', rate: 0, date: "1/1/2016"}, 
        {id:'try', name: 'TRY', rate: 0, date: "1/1/2016"}
      ];
    }

    if (window.cordova) {
      if (ionic.Platform.isIPad() || ionic.Platform.isIOS()) {
        MobileAccessibility.isVoiceOverRunning(function(bool) {
          if (bool) {
              $rootScope.log("Screen reader: ON");
              $rootScope.voiceOver = bool;
              //$ionicConfigProvider.navBar.alignTitle('center');
          } else {
              $rootScope.log("Screen reader: OFF");
              $rootScope.voiceOver = bool;
              //$ionicConfigProvider.navBar.alignTitle('left');
          }
        });

      } else {
        $rootScope.voiceOver = false;
      }
    } else {
      $rootScope.voiceOver = false;
    }

    if (!$rootScope.$storage.view) {
      $rootScope.$storage.view = 'compact';
    }
    if (!$rootScope.$storage.filter) {
      $rootScope.$storage.filter = "trending";
    }
    if (navigator.splashscreen) {
      setTimeout(function() {
        navigator.splashscreen.hide();
      }, 1000);
    }
    $rootScope.log("app start ready");
    setTimeout(function() {
      if ($rootScope.$storage.pincode) {
        $rootScope.pincheck = true;
        $rootScope.$broadcast("pin:check");
      }
    }, 1000);
    $rootScope.showAlert = function(title, msg) {
      var alertPopup = $ionicPopup.alert({
        title: title,
        template: msg
      });
      if (msg.indexOf("error")>-1) {
        //window.Api.initPromise.then(function(response) {
        $rootScope.log("broadcast error");
        //});
      }
      return alertPopup/*.then(function(res) {
        $rootScope.log('Thank you ...');
      });*/
    };
    $rootScope.showMessage = function(title, msg) {
      if (title) {
        if (window.cordova) {
          $cordovaToast.showLongBottom(title+": "+msg).then(function(success) {
            // success
            $rootScope.log("toast"+success);
          }, function (error) {
            // error
            $rootScope.log("toast"+error);
          });
        } else {
          $rootScope.showAlert(title, msg);
        }
      }
    };
    $rootScope.$on('show:loading', function(event, args){
      $rootScope.log('show:loading');
      $ionicLoading.show({
        noBackdrop : true,
        template: '<ion-spinner icon="ripple" class="spinner-energized"></ion-spinner>'
      });
    });
    $rootScope.$on('hide:loading', function(event, args){
      $rootScope.log('hide:loading');
      setTimeout(function() {
        $ionicLoading.hide();
      }, 1000);
    });

    $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams){
      $rootScope.log("from "+fromState.name+" to "+toState.name);
    });

    $ionicPlatform.on('resume', function(){
      $rootScope.log("app resume");
      var steemRPC = require("steem-rpc");
      if (localStorage.getItem("socketUrl") === null) {
        localStorage.setItem("socketUrl", "wss://steemd.steemit.com");
      }
      window.Api = steemRPC.Client.get({url:localStorage.socketUrl}, true);
      //window.steemJS = require("steemjs-lib");
      //window.golosJS = require("golosjs-lib");

      //if (!angular.isDefined($rootScope.timeint)) {
      window.Api.initPromise.then(function(response) {
        $rootScope.log("Api ready state change: "+angular.toJson(response));
        $rootScope.timeint = $interval(function(){
          window.Api.database_api().exec("get_dynamic_global_properties", []).then(function(response){
            $rootScope.log("get_dynamic_global_properties " + response.head_block_number);
          });
        }, 15000);
      });
      //}
      window.FirebasePlugin.onNotificationOpen(function(data) {
        $rootScope.log(angular.toJson(data));
        if(data.tap){
          //Notification was received on device tray and tapped by the user.
          //console.log(JSON.stringify(data));
          if (data.author && data.permlink) {
            if (!$rootScope.$storage.pincode) {

              var alertPopup = $ionicPopup.confirm({
                title: data.title,
                template: data.body + $filter('translate')('OPENING_POST')
              });

              alertPopup.then(function(res) {
                $rootScope.log('Thank you for seeing alert from tray');
                if (res) {
                  setTimeout(function() {
                    $rootScope.getContentAndOpen({author:data.author, permlink:data.permlink});
                  }, 10);
                } else {
                  $rootScope.log("not sure to open alert");
                }
              });

            } else {
              $rootScope.$storage.notifData = {title:data.title, body: data.body, author: data.author, permlink: data.permlink};
              $rootScope.pinenabled = true;
            }
          }
        } else{
          //Notification was received in foreground. Maybe the user needs to be notified.
          //alert( JSON.stringify(data) );
          if (data.author && data.permlink) {
            $rootScope.showMessage(data.title, data.body+" "+data.permlink);
          } else {
            $rootScope.showMessage(data.title, data.body);
          }
        }
      }, function(error) {
          console.error(error);
      });

      if ($rootScope.$storage.pincode) {
        $rootScope.pincheck = true;
        $rootScope.$broadcast("pin:check");
      }

      if (window.cordova) {
        if (ionic.Platform.isIPad() || ionic.Platform.isIOS()) {

          MobileAccessibility.isVoiceOverRunning(function(bool) {
            if (bool) {
                $rootScope.log("Screen reader: ON");
                $rootScope.voiceOver = bool;
                //$ionicConfigProvider.navBar.alignTitle('center');
            } else {
                $rootScope.log("Screen reader: OFF");
                $rootScope.voiceOver = bool;
                //$ionicConfigProvider.navBar.alignTitle('left');
            }
          });
        } else {
          $rootScope.voiceOver = false;
        }
      } else {
        $rootScope.voiceOver = false;
      }

    });
    $ionicPlatform.on('pause', function(){
      $rootScope.log("app pause");
      if (angular.isDefined($rootScope.timeint)) {
        $rootScope.log("cancel interval");
        $interval.cancel($rootScope.timeint);
        $rootScope.timeint = undefined;
        window.Api.close();
      }
    });

    $ionicPlatform.on('offline', function(){
      $rootScope.log("app offline");
    });

    $rootScope.init = function() {
      $rootScope.passcode = "";
      if (!$rootScope.$$phase) {
        $rootScope.$apply();
      }
    };

    $rootScope.add = function(value) {
      $rootScope.pinerror = "";
      if($rootScope.passcode.length < 4) {
        $rootScope.passcode = $rootScope.passcode + value;
        if($rootScope.passcode.length == 4) {
          $timeout(function() {
            $rootScope.log("PIN "+$rootScope.passcode);
            if ($rootScope.pintype == 3) {
              if ($rootScope.$storage.pincode == $rootScope.passcode) {
                $rootScope.passcode = "";
                $rootScope.closePin();
              } else {
                $rootScope.pintry += 1;
                $rootScope.pinerror = $filter('translate')('NOT_MATCH')+"("+$rootScope.pintry+")";
                if ($rootScope.pintry>3) {
                  $rootScope.$storage.pincode = undefined;
                  $rootScope.pintry = 0;
                  $rootScope.$broadcast("pin:failed");
                  $rootScope.closePin();
                }
              }
            }
            if ($rootScope.pintype == 0) {
              $rootScope.log("type 0: set pin");
              if ($rootScope.$storage.pincode) {
                $rootScope.pincheck = true;
                $rootScope.$broadcast("pin:check");
                $rootScope.closePin();
              } else {
                $rootScope.$storage.pincode = $rootScope.passcode;
                $rootScope.pinsubtitle = $filter('translate')('CONFIRM_PIN');
                $rootScope.passcode = "";
                $rootScope.pintype = 3;
                $rootScope.pintry = 0;
              }
            }
            if ($rootScope.pintype == 1) {
              $rootScope.log("type 1: check pin");
              if ($rootScope.$storage.pincode == $rootScope.passcode){
                $rootScope.$broadcast('pin:correct');
                $rootScope.passcode = "";
                $rootScope.closePin();
              } else {
                $rootScope.pintry += 1;
                $rootScope.pinerror = $filter('translate')('INCORRECT')+"("+$rootScope.pintry+")";
                if ($rootScope.pintry>3) {
                  $rootScope.$storage.$reset();
                  $rootScope.closePin();
                }
              }
            }

          }, 50);
        }
      }
    };

    $rootScope.delete = function() {
      $rootScope.pinerror = "";
      if($rootScope.passcode.length > 0) {
        $rootScope.passcode = $rootScope.passcode.substring(0, $rootScope.passcode.length - 1);
      }
    }

    $ionicModal.fromTemplateUrl('templates/pincode.html', {
      scope: $rootScope
    }).then(function(modal) {
      $rootScope.pinmodal = modal;
    });
    $rootScope.closePin = function() {
      $rootScope.pinmodal.hide();
      if ($rootScope.pinenabled) {
        if ($rootScope.$storage.notifData) {
          var alertPopup = $ionicPopup.confirm({
            title: $rootScope.$storage.notifData.title,
            template: $rootScope.$storage.notifData.body + $filter('translate')('OPENING_POST')
          });
          alertPopup.then(function(res) {
            $rootScope.log('Thank you for seeing alert from tray');
            if (res) {
              $rootScope.getContentAndOpen({author:$rootScope.$storage.notifData.author, permlink:$rootScope.$storage.notifData.permlink});
              $rootScope.$storage.notifData = undefined;
            } else {
              $rootScope.log("not sure to open alert");
              $rootScope.$storage.notifData = undefined;
            }
            $rootScope.pinenabled = false;
          });
        }
      }
    };
    $rootScope.openPin = function(type) {
      $rootScope.passcode = "";
      if (type == 0) {
        $rootScope.pintype = 0;
        $rootScope.pintitle = $filter('translate')('SET_PIN');
        $rootScope.pinsubtitle = $filter('translate')('SET_PIN');
      }
      if (type == 1) {
        $rootScope.pintype = 1;
        $rootScope.pintry = 0;
        $rootScope.pintitle = $filter('translate')('ENTER_PIN');
        $rootScope.pinsubtitle = $filter('translate')('ENTER_PIN');
      }
      $rootScope.pinmodal.show();
    };
    $rootScope.$on("pin:new", function(){
      $rootScope.pincheck = false;
      $rootScope.openPin(0);
    });
    $rootScope.$on("pin:check", function(){
      $rootScope.pincheck = true;
      $rootScope.openPin(1);
    });


    $ionicModal.fromTemplateUrl('templates/info.html', {
      scope: $rootScope
      //animation: "null"
    }).then(function(modal) {
      $rootScope.infomodal = modal;
    });
    $rootScope.openInfo = function(xx) {
      $rootScope.voters = xx;
      $rootScope.infomodal.show();
    };

    $rootScope.closeInfo = function() {
      $rootScope.infomodal.hide();
      //$rootScope.infomodal.remove();
    };

    String.prototype.replaceAt=function(index, character) {
        return this.substr(0, index) + character + this.substr(index+character.length);
    }
		$rootScope.openDraft = function(item){
			item.operation_type = item.post_type;
			$rootScope.$storage.spost = item;
			$state.go('app.posts');
			$rootScope.$broadcast('openPostModal');
		}
    $rootScope.getContentAndOpen = function(item) {

      window.Api.initPromise.then(function(response) {
        window.Api.database_api().exec("get_content", [item.author, item.permlink]).then(function(result){
          var _len = result.active_votes.length;
          for (var j = _len - 1; j >= 0; j--) {
            if (result.active_votes[j].voter === $rootScope.$storage.user.username) {
              if (result.active_votes[j].percent > 0) {
                result.upvoted = true;
              } else if (result.active_votes[j].percent < 0) {
                result.downvoted = true;
              } else {
                result.downvoted = false;
                result.upvoted = false;
              }
            }
          }
          result.json_metadata = angular.fromJson(result.json_metadata);
          var item = result;
          $rootScope.$storage.sitem = item;
          setTimeout(function() {
            //$state.go('app.post');
            $state.go('app.post', {category: item.category, author: item.author, permlink: item.permlink});

          }, 5);

          if (!$rootScope.$$phase) {
            $rootScope.$apply();
          }
        });
      });
      $rootScope.$broadcast('hide:loading');
    };

    $rootScope.reBlog = function(author, permlink) {
      var confirmPopup = $ionicPopup.confirm({
        title: $filter('translate')('ARE_YOU_SURE'),
        template: $filter('translate')('REBLOG_TEXT')
      });
      confirmPopup.then(function(res) {
        if(res) {
          $rootScope.log('You are sure');
          $rootScope.$broadcast('show:loading');
          if ($rootScope.$storage.user) {
              $rootScope.mylogin = new window.ejs.Login();
              $rootScope.mylogin.setRoles(["posting"]);
              var loginSuccess = $rootScope.mylogin.checkKeys({
                  accountName: $rootScope.$storage.user.username,
                  password: $rootScope.$storage.user.password || null,
                  auths: {
                      posting: $rootScope.$storage.user.posting.key_auths
                  },
                  privateKey: $rootScope.$storage.user.privatePostingKey || null
                }
              );
              if (loginSuccess) {
                var tr = new window.ejs.TransactionBuilder();
                var json;

                json = ["reblog",{account:$rootScope.$storage.user.username, author:author, permlink:permlink}];

                tr.add_type_operation("custom_json", {
                  id: 'follow',
                  required_posting_auths: [$rootScope.$storage.user.username],
                  json: JSON.stringify(json)
                });
                localStorage.error = 0;
                tr.process_transaction($rootScope.mylogin, null, true);

                setTimeout(function() {
                  if (localStorage.error == 1) {
                    $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('REBLOG_TEXT')+" "+localStorage.errormessage)
                  } else {
                    //$scope.refreshFollowers();
                    $rootScope.showMessage($filter('translate')('SUCCESS'), $filter('translate')('REBLOGGED_POST'));
                  }
                  $rootScope.$broadcast('hide:loading');
                }, 3000);
              } else {
                $rootScope.showMessage($filter('translate')('ERROR'), $filter('translate')('LOGIN_FAIL'));
              }
            $rootScope.$broadcast('hide:loading');
          } else {
            $rootScope.$broadcast('hide:loading');
            $rootScope.showAlert($filter('translate')('WARNING'), $filter('translate')('LOGIN_TO_X'));
          }
        } else {
          $rootScope.log('You are not sure');
        }
      });
    };

    $rootScope.votePost = function(post, type, afterward) {
      post.invoting = true;
      var tt = 1;
      if (type === "upvote") {
        tt = 1;
      }
      if (type === "downvote") {
        tt = -1;
      }
      if (type === "unvote") {
        tt = 0;
      }
      $rootScope.log('voting '+tt);
      if (!$rootScope.$$phase) {
        $rootScope.$apply();
      }
      if ($rootScope.$storage.user) {
        window.Api.initPromise.then(function(response) {
          $rootScope.log("Api ready:" + angular.toJson(response));
          var mylogin = new window.ejs.Login();
          mylogin.setRoles(["posting"]);
          //console.log($rootScope.$storage.user);
          var loginSuccess = mylogin.checkKeys({
              accountName: $rootScope.$storage.user.username,
              password: $rootScope.$storage.user.password || null,
              auths: {
                  posting: $rootScope.$storage.user.posting.key_auths
              },
              privateKey: $rootScope.$storage.user.privatePostingKey || null
            }
          );
          if (loginSuccess) {
            var tr = new window.ejs.TransactionBuilder();
            tr.add_type_operation("vote", {
                voter: $rootScope.$storage.user.username,
                author: post.author,
                permlink: post.permlink,
                weight: $rootScope.$storage.voteWeight*tt || 10000*tt
            });
            localStorage.error = 0;
            tr.process_transaction(mylogin, null, true);  

            setTimeout(function() {
              post.invoting = false;
              if (localStorage.error == 1) {
                $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('BROADCAST_ERROR')+" "+localStorage.errormessage)
              } else {
								if (tt>0){
									post.upvoted = true;
								} else if (tt<0) {
									post.downvoted = true;
								} else {
									post.upvoted = false;
									post.downvoted = false;
								}
                if (afterward === 'fetchContent') {
                  $rootScope.$broadcast(afterward, { any: {author: post.author, permlink: post.permlink} });
                } else {
                  $rootScope.$broadcast(afterward);
                }
              }
              $rootScope.$broadcast('hide:loading');

            }, 3000);
          } else {
            $rootScope.showMessage($filter('translate')('ERROR'), $filter('translate')('LOGIN_FAIL'));
            $rootScope.$broadcast('hide:loading');
            post.invoting = false;
          }
          $rootScope.$broadcast('hide:loading');
          if (!$rootScope.$$phase) {
            $rootScope.$apply();
          }
        });
      } else {
        $rootScope.$broadcast('hide:loading');
        post.invoting = false;
        $rootScope.showAlert($filter('translate')('WARNING'), $filter('translate')('LOGIN_TO_X'));
      }
    };

    $rootScope.isWitnessVoted = function() {
      if ($rootScope.$storage.user && $rootScope.$storage.user.witness_votes.indexOf("good-karma")>-1) {
        return true;
      } else {
        return false;
      }
    };
    $rootScope.voteWitness = function() {
        var confirmPopup = $ionicPopup.confirm({
          title: $filter('translate')('ARE_YOU_SURE'),
          template: $filter('translate')('VOTE_FOR_WITNESS')+" @good-karma"
        });
        confirmPopup.then(function(res) {
          if(res) {
            $rootScope.log('You are sure');
            $rootScope.$broadcast('show:loading');
            if ($rootScope.$storage.user) {
              if ($rootScope.$storage.user.password || $rootScope.$storage.user.privateActiveKey) {
                $rootScope.mylogin = new window.ejs.Login();
                $rootScope.mylogin.setRoles(["active"]);
                var loginSuccess = $rootScope.mylogin.checkKeys({
                    accountName: $rootScope.$storage.user.username,
                    password: $rootScope.$storage.user.password || null,
                    auths: {
                        active: $rootScope.$storage.user.active.key_auths
                    },
                    privateKey: $rootScope.$storage.user.privateActiveKey || null
                  }
                );
                if (loginSuccess) {
                  var tr = new window.ejs.TransactionBuilder();
                  tr.add_type_operation("account_witness_vote", {
                      account: $rootScope.$storage.user.username,
                      approve: true,
                      witness: "good-karma"
                  });
                  localStorage.error = 0;

                  tr.process_transaction($rootScope.mylogin, null, true);

                  setTimeout(function() {
                    if (localStorage.error === 1) {
                      $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('BROADCAST_ERROR')+" "+localStorage.errormessage)
                    } else {
                      //$scope.refreshFollowers();
                      $rootScope.showMessage($filter('translate')('SUCCESS'),$filter('translate')('VOTED_FOR_WITNESS')+' @good-karma');
                      $rootScope.$broadcast('refreshLocalUserData');
                    }
                  }, 3000);
                } else {
                  $rootScope.showMessage($filter('translate')('ERROR'), $filter('translate')('LOGIN_FAIL'));
                }
              } else {
                $rootScope.showMessage($filter('translate')('ERROR'), $filter('translate')('LOGIN_FAIL'));
              }
              $rootScope.$broadcast('hide:loading');
            } else {
              $rootScope.$broadcast('hide:loading');
              $rootScope.showAlert($filter('translate')('WARNING'), $filter('translate')('LOGIN_TO_X'));
            }
          } else {
            $rootScope.log('You are not sure');
          }
        });
    };

    $rootScope.following = function(xx, mtype) {
      $rootScope.$broadcast('show:loading');
      $rootScope.log(xx);
      if ($rootScope.$storage.user) {
          $rootScope.mylogin = new window.ejs.Login();
          $rootScope.mylogin.setRoles(["posting"]);
          var loginSuccess = $rootScope.mylogin.checkKeys({
              accountName: $rootScope.$storage.user.username,
              password: $rootScope.$storage.user.password || null,
              auths: {
                  posting: $rootScope.$storage.user.posting.key_auths
              },
              privateKey: $rootScope.$storage.user.privatePostingKey || null
            }
          );
          if (loginSuccess) {
            var tr = new window.ejs.TransactionBuilder();
            var json;
            if (mtype === "follow") {
              json = ['follow',{follower:$rootScope.$storage.user.username, following:xx, what: ["blog"]}];
            } else {
              json = ['follow',{follower:$rootScope.$storage.user.username, following:xx, what: []}];
            }

            tr.add_type_operation("custom_json", {
              id: 'follow',
              required_posting_auths: [$rootScope.$storage.user.username],
              json: angular.toJson(json)
            });
            localStorage.error = 0;
            tr.process_transaction($rootScope.mylogin, null, true);

            setTimeout(function() {
              if (localStorage.error == 1) {
                $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('BROADCAST_ERROR')+" "+localStorage.errormessage)
              } else {
                //$scope.refreshFollowers();
                $rootScope.$broadcast('current:reload');
              }
            }, 3000);
          } else {
            $rootScope.showMessage($filter('translate')('ERROR'), $filter('translate')('LOGIN_FAIL'));
          }
        $rootScope.$broadcast('hide:loading');
      } else {
        $rootScope.$broadcast('hide:loading');
        $rootScope.showAlert($filter('translate')('WARNING'), $filter('translate')('LOGIN_TO_X'));
      }
    };

    setTimeout(function() {
      window.Api.initPromise.then(function(response) {
        window.Api.database_api().exec("get_feed_history", []).then(function(r){
        //$rootScope.log(r);
          $rootScope.$storage.base = r.current_median_history.base.split(" ")[0];
          window.Api.database_api().exec("get_dynamic_global_properties", []).then(function(r){
            $rootScope.log(r);
            $rootScope.$storage.steem_per_mvests = (Number(r.total_vesting_fund_steem.substring(0, r.total_vesting_fund_steem.length - 6)) / Number(r.total_vesting_shares.substring(0, r.total_vesting_shares.length - 6))) * 1e6;
          });
        });
      });
    }, 10);
    if (!angular.isDefined($rootScope.$storage.notifications)) {
      $rootScope.$storage.notifications = [];
    }
    $rootScope.$on('changedChain', function(){
      console.log('chain differs');
      localStorage.socketUrl = $rootScope.$storage["socket"+$rootScope.$storage.chain];
      window.ejs.ChainConfig.setChainId(localStorage[$rootScope.$storage.chain+"Id"]);
      window.Api.close();
      window.Api = window.steemRPC.Client.get({url: localStorage.socketUrl}, true);
      
      window.Api.initPromise.then(function(response) {  
        angular.forEach($rootScope.$storage.users, function(v,k){
          if (v.chain == $rootScope.$storage.chain){
            $rootScope.$storage.user = v;
          }
        });
        if (!$rootScope.$$phase) {
          $rootScope.$apply();
        }
      });
    
      if ($rootScope.$storage.chain == 'steem'){
        $rootScope.$storage.platformname = "Steem";
        $rootScope.$storage.platformpower = "Steem Power";
        $rootScope.$storage.platformsunit = "Steem";
        $rootScope.$storage.platformdollar = "Steem Dollar";
        $rootScope.$storage.platformdunit = "SBD";
        $rootScope.$storage.platformpunit = "SP";
        $rootScope.$storage.platformlunit = "STEEM";
        $rootScope.$storage.socketsteem = "wss://steemd.steemit.com";
      } else {
        $rootScope.$storage.platformname = "ГОЛОС";
        $rootScope.$storage.platformpower = "СИЛА ГОЛОСА";
        $rootScope.$storage.platformsunit = "Голос";
        $rootScope.$storage.platformdollar = "ЗОЛОТОЙ";
        $rootScope.$storage.platformdunit = "GBG";
        $rootScope.$storage.platformpunit = "СИЛА ГОЛОСА";
        $rootScope.$storage.platformlunit = "ГОЛОС";
        $rootScope.$storage.socketgolos = "wss://ws.golos.io/";
        //$scope.socket = "wss://golos.steem.ws";
      }
      
      if (!$rootScope.$$phase) {
        $rootScope.$apply();
      }
    });
    function checkDate(date, ignore) {
      var eold = 86400000; //1 * 24 * 60 * 60 * 1000; //1 day old
      var now = new Date().getTime();
      var old = new Date(date).getTime();
      return ignore||now-old>=eold;
    }
    $rootScope.$on('changedCurrency', function(event, args){
      var xx = args.currency;
      var ignore = args.enforce;
      console.log(xx);
      var resultObject = $rootScope.$storage.currencies.filter(function ( obj ) {
          return obj.id === xx;
      })[0];
      //searchObj(xx, $rootScope.$storage.currencies);
      if (checkDate(resultObject.date, ignore)) {
        if ($rootScope.$storage.chain == 'steem'){
          APIs.getCurrencyRate("USD", xx ).then(function(res){
            $rootScope.$storage.currencyRate = Number(res.data.query.results.rate.Rate);
            $rootScope.$storage.currencies.filter(function(obj){
              if (obj.id == xx) {
                obj.rate = $rootScope.$storage.currencyRate;
                obj.date = res.data.query.results.rate.Date==="N/A"?new Date() : res.data.query.results.rate.Date;
              }
            });
          });
        } else {
          APIs.getCurrencyRate("XAU", xx ).then(function(res){
            //XAU - 31.1034768g
            //GBG rate in mg. so exchangeRate/31103.4768
            $rootScope.$storage.currencyRate = Number(res.data.query.results.rate.Rate)/31103.4768;
            $rootScope.$storage.currencies.filter(function(obj){
              if (obj.id == xx) {
                obj.rate = $rootScope.$storage.currencyRate;
                obj.date = res.data.query.results.rate.Date==="N/A"?new Date() : res.data.query.results.rate.Date;
              }
            });
            //console.log($rootScope.$storage.currencyRate);
          });
        }
      } else {
        $rootScope.$storage.currencyRate = resultObject.rate;
      }
      if (!$rootScope.$$phase) {
        $rootScope.$apply();
      }
    });

    if (window.cordova) {
      if (!ionic.Platform.isWindowsPhone()) {
        if (ionic.Platform.isIOS() || ionic.Platform.isIPad()) {
          //window.FirebasePlugin.grantPermission();
        }

        /*window.FirebasePlugin.getToken(function(token) {
            // save this server-side and use it to push notifications to this device
            $rootScope.log("device "+token);
            $rootScope.$storage.deviceid = token;
            if ($rootScope.$storage.user) {
              APIs.saveSubscription(token, $rootScope.$storage.user.username, { device: ionic.Platform.platform() }).then(function(res){
                $rootScope.log(angular.toJson(res));
              });
            } else {
              APIs.saveSubscription(token, "", { device: ionic.Platform.platform() }).then(function(res){
                $rootScope.log(angular.toJson(res));
              });
            }
        }, function(error) {
            console.error(error);
        });*/

        FCMPlugin.getToken(function(token){
          // save this server-side and use it to push notifications to this device
          $rootScope.log("device "+token);
          $rootScope.$storage.deviceid = token;
          if ($rootScope.$storage.user) {
            APIs.saveSubscription(token, $rootScope.$storage.user.username, { device: ionic.Platform.platform() }).then(function(res){
              $rootScope.log(angular.toJson(res));
            });
          } else {
            APIs.saveSubscription(token, "", { device: ionic.Platform.platform() }).then(function(res){
              $rootScope.log(angular.toJson(res));
            });
          }
        });

        /*window.FirebasePlugin.onTokenRefresh(function(token) {
          APIs.updateToken($rootScope.$storage.deviceid, token).then(function(res){
            console.log(angular.toJson(res));
            if (res.status) {
              $rootScope.$storage.deviceid = token  
            }
          });
          if (!$rootScope.$$phase){
            $rootScope.$apply();
          }
        }, function(error) {
          console.error(error);
        });*/
        FCMPlugin.onTokenRefresh(function(token){
          APIs.updateToken($rootScope.$storage.deviceid, token).then(function(res){
            console.log(angular.toJson(res));
            if (res.status) {
              $rootScope.$storage.deviceid = token  
            }
          });
          if (!$rootScope.$$phase){
            $rootScope.$apply();
          }
        });

        /*window.FirebasePlugin.onNotificationOpen(function(data) {
            $rootScope.log(angular.toJson(data));

            //console.log(angular.toJson(data));

            //$rootScope.$storage.notifications.push({title:data.title, message: data.body, author: data.author, permlink: data.permlink, created: new Date()});

            if(data.tap){
              //Notification was received on device tray and tapped by the user.
              if (data.author && data.permlink) {
                if (!$rootScope.$storage.pincode) {

                  var alertPopup = $ionicPopup.confirm({
                    title: data.title,
                    template: data.body + $filter('translate')('OPENING_POST')
                  });

                  alertPopup.then(function(res) {
                    $rootScope.log('Thank you for seeing alert from tray');
                    if (res) {
                      setTimeout(function() {
                        $rootScope.getContentAndOpen({author:data.author, permlink:data.permlink});
                      }, 10);
                    } else {
                      $rootScope.log("not sure to open alert");
                    }
                  });

                } else {
                  $rootScope.$storage.notifData = {title:data.title, body: data.body, author: data.author, permlink: data.permlink};
                  $rootScope.pinenabled = true;
                }
              }
            } else{
              //Notification was received in foreground. Maybe the user needs to be notified.
              //alert( JSON.stringify(data) );
              if (data.author && data.permlink) {
                $rootScope.showMessage(data.title, data.body+" "+data.permlink);
              } else {
                $rootScope.showMessage(data.title, data.body);
              }
            }
        }, function(error) {
            console.error(error);
        });
        */

        //FCMPlugin.onNotification( onNotificationCallback(data), successCallback(msg), errorCallback(err) )
        //Here you define your application behaviour based on the notification data.
        FCMPlugin.onNotification(function(data){
          $rootScope.log(angular.toJson(data));

            //console.log(angular.toJson(data));

            //$rootScope.$storage.notifications.push({title:data.title, message: data.body, author: data.author, permlink: data.permlink, created: new Date()});

            if(data.wasTapped){
              //Notification was received on device tray and tapped by the user.
              if (data.author && data.permlink) {
                if (!$rootScope.$storage.pincode) {

                  var alertPopup = $ionicPopup.confirm({
                    title: data.title,
                    template: data.body + $filter('translate')('OPENING_POST')
                  });

                  alertPopup.then(function(res) {
                    $rootScope.log('Thank you for seeing alert from tray');
                    if (res) {
                      setTimeout(function() {
                        $rootScope.getContentAndOpen({author:data.author, permlink:data.permlink});
                      }, 10);
                    } else {
                      $rootScope.log("not sure to open alert");
                    }
                  });

                } else {
                  $rootScope.$storage.notifData = {title:data.title, body: data.body, author: data.author, permlink: data.permlink};
                  $rootScope.pinenabled = true;
                }
              }
            } else{
              //Notification was received in foreground. Maybe the user needs to be notified.
              //alert( JSON.stringify(data) );
              if (data.author && data.permlink) {
                $rootScope.showMessage(data.title, data.body+" "+data.permlink);
              } else {
                $rootScope.showMessage(data.title, data.body);
              }
            }
        });
      }

    }

  });
});

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/posts/index.js","/posts")
},{"./config":101,"./controllers":102,"./locales/ready/bg-BG":104,"./locales/ready/cs-CZ":105,"./locales/ready/de-DE":106,"./locales/ready/dolan":107,"./locales/ready/el-GR":108,"./locales/ready/en":109,"./locales/ready/es-ES":110,"./locales/ready/fa-IR":111,"./locales/ready/fr-FR":112,"./locales/ready/he-IL":113,"./locales/ready/hr-HR":114,"./locales/ready/hu-HU":115,"./locales/ready/id-ID":116,"./locales/ready/it-IT":117,"./locales/ready/ms-MY":118,"./locales/ready/nl-NL":119,"./locales/ready/pl-PL":120,"./locales/ready/pt-BR":121,"./locales/ready/pt-PT":122,"./locales/ready/ru-RU":123,"./locales/ready/sv-SE":124,"./locales/ready/uk-UA":125,"./locales/ready/zh-CN":126,"./locales/ready/zh-TW":127,"./services":128,"buffer":11,"currency-symbol-map":27,"diff-match-patch":29,"esteem-lib":56,"pBGvAp":74,"steem-rpc":88}],104:[function(require,module,exports){
module.exports={
	"HOME": "Начало",
	"LOGIN": "Вход",
	"LOGOUT": "Отписване",
	"PROFILE": "Профил",
	"FOLLOW": "Следване",
	"BOOKMARKS": "Любими",
	"TRANSFER": "Трансфер",
	"MARKET": "Пазар",
	"SETTINGS": "Настройки",
	"ABOUT": "За приложението",
	"ABOUT_1": "Всеки може да печели от публикуване на статии!",
	"ABOUT_2": "е социална мрежа, която ви въжмаграждава за публикации, коментари и кураторство.",
	"ABOUT_3": "и е мобилно приложение с отворен код. Имате свободен достъп до съдържание за четене, коментари, гласуване, публикуване, управление на приходи за трансфер и т.н. функции, предлагани от {{platformname}} блокчейна на {{sitename}}.",
	"ABOUT_4": "1. Апликацията няма директен достъп до средствата на потребителя.",
	"ABOUT_5": "2. Апликацията предлага модел на сигурност за страна на клиента, с частни ключове, съхранени само във вашето устройство и никога не се изпращат до сървъри.",
	"ABOUT_6": "3. Апликацията предлага прост и атрактивен потребителски интерфейс.",
	"ABOUT_7": "4. Апликацията никога не изисква от потребителят да въвежда лични данни.",
	"ABOUT_8": "Гласувайте за good-karma.",
	"ABOUT_9": "Контакт и обратна връзка:",
	"ABOUT_10": "Още информация",
	"REMOVE": "Премахни",
	"MARKET_VIEW": "Изглед на пазара",
	"PRICE": "Цена",
	"AMOUNT": "Сума",
	"TOTAL": "Общо",
	"NOORDERS": "Няма отворени заявки",
	"DATE": "Дата",
	"BUY": "Купи",
	"SELL": "Продай",
	"OPEN": "Отвори",
	"HISTORY": "История",
	"FOLLOW_BACK": "Следване обратно",
	"FOLLOWED": "Следван",
	"UNFOLLOW": "Спрете следенето",
	"FOLLOWING": "Следване",
	"FOLLOWERS": "Последователи",
	"SEARCH_FOLLOWERS": "Търси последователи",
	"SEARCH_FOLLOWING": "Търси следвани",
	"BY": "от",
	"IN": "в",
	"MENU": "Меню",
	"BOOKMARK": "Любими",
	"REBLOG": "Реблог",
	"UPVOTE": "Глас",
	"DOWNVOTE": "Негативен глас",
	"UNVOTE_DOWNVOTED": "Откажи негативния глас",
	"UNVOTE_UPVOTED": "Откажи гласа",
	"REPLY": "Отговор",
	"EDIT": "Редактиране",
	"POST_1": "Плъзнете на ляво, за да видите опциите",
	"POST_2": "Изберете някой коментар, за да видите под-коментари към тях.",
	"OPTIONS": "Настройки",
	"RESTEEMED_BY": "Препратено от",
	"NOTHING_HERE": "Все още нищо...",
	"BALANCES": "Баланси по сметка",
	"PROFILE_1": "{{platformname}} е разменяема криптовалута, която може да бъде трансферирана във всеки един момент. {{platformname}} може да бъде обърната в {{platformpower}} чрез процес нарчен Захранване.",
	"PROFILE_2": "{{platformpower}} влияе върху печалбите. Колкото повече има потребителя, системата го награждава повече когато гласува и публикува.",
	"PROFILE_3": "Около {{platformsunit}} на {{platformname}}.",
	"ESTIMATED_VALUE": "Приблизителна стойност",
	"PROFILE_4": "Приблизителната стойност се оценява на 7 дни от средна стойност на {{platformname}}.",
	"TRANSACTION_HISTORY": "История на транзакцийте",
	"POSTING": "Публикуване",
	"PROFILE_5": "Ключът за публикуване се използва за публикуване и гласуване. Трябва да бъде различен от Активния и Собствения ключ.",
	"OWNER": "Собственик",
	"PROFILE_6": "Собственият ключ е основният ключ на прфила и е необходим за промяна на другите ключове. Личният ключ или парола за ключа на собственика трябва се съхранява на сигурно място.",
	"ACTIVE": "Активни",
	"PROFILE_7": "Активният ключ се използва, за трансфери и даване поръчки в рамките на вътрешния пазар.",
	"MEMO": "Бележка",
	"PROFILE_8": "Ключът за бележка се използва за създаване и четене на бележки.",
	"BLOG": "Блог",
	"POSTS": "Статии",
	"REPLIES": "Отговори",
	"WALLET": "Портфейл",
	"TAG": "Таг",
	"USER": "Потребител",
	"CLOSE": "Затваряне",
	"TO": "За",
	"ASSET": "Актив",
	"SEND": "Прати",
	"SECURITY": "Сигурност",
	"AVAILABLE": "Наличност",
	"PUBLIC_MEMO": "Публична бележка",
	"TO_DESC": "Потребител, например good-karma",
	"PIN_CODE": "Пин-код",
	"PIN_TEXT": "Пин-кодът обезопасява данните ви в приложението. <br/><br/>Веднъж активиран, имате само 4 опита за да го отключите, ако сте забравили свотя пин-код или не сте го въвели правилно, апликацията ще премахне данните на потребителя при влизане. Можете повторно да влезнете и продължите да използвате приложението.",
	"NOTIFICATIONS": "Известия",
	"VOTE_TEXT": "Ще получите известие, когато някой гласува за ваша статия. <br/>Уведомленията включват Сила на глас както и предупредителни съобщения.",
	"VOTE": "Глас",
	"COMMENT_TEXT": "Ще получите известие, когато някой коментира вашите публикации или коментари!<br/> Известията също включват когато някой редактира своите коментари.",
	"COMMENT": "Коментар",
	"FOLLOW_TEXT": "Ще получите известие, когато някой ви следи или ще спре да ви следи!",
	"MENTIONS": "Споменавания",
	"MENTIONS_TEXT": "Ще получите известие, когато някой ви спомене в своя публикация или коментар!",
	"RESTEEM": "Споделяне",
	"RESTEEM_TEXT": "Ще получите известие, когато някой сподели ваш пост!",
	"CONFIGURATIONS": "Настройки",
	"VOTING": "Гласуване",
	"VOTING_TEXT": "Изберете в проценти силата на гласа ви.\n <br/><br/>Това ще определи размера въжнаграждения , които получават статиите, за които гласувате.",
	"SERVER": "Сървър",
	"SERVER_TEXT": "Препоръчително",
	"SAVE_CHANGES": "Запази",
	"VOTERS_INFO": "Информация за гласувалите",
	"WELCOME_BACK": "Здравей, отново!",
	"LOGIN_1": "Влезте с потребителско име и парола за да продължите.",
	"LOGIN_2": "Ключът за публикуване се използва за публикуване, коментиране, гласуване и следене.",
	"LOGIN_3": "Активният ключ се използва за трансфери и обновление на профилна снимка.",
	"LOGIN_4": "Потребителски идентификационни данни се съхраняват локално на устройствата ви. При изход пълномощията се отстраняват!",
	"DONT_HAVE": "Нямате профил?",
	"SIGN_UP_NOW": "Регистрирайте се сега!",
	"CANCEL": "Отказ",
	"ADVANCED": "Разширен режим",
	"ACTIVE_PRIKEY": "Активен личен ключ",
	"POSTING_PRIKEY": "Личен ключ за публикуване",
	"MASTER_PASS": "Основна парола",
	"USERNAME": "Потребителско име",
	"CARD_VIEW": "Картички",
	"COMPACT_VIEW": "Списъци",
	"SEARCH": "Търси",
	"SUBMIT_A_STORY": "Публикувайте нещо",
	"REPLYTO": "Отговор на",
	"POST": "Публикуване",
	"PREVIEW": "Преглед",
	"DEFAULT": "50% / 50%",
	"POWERUP": "Захранване 100%",
	"DECLINE_PAYOUT": "Отказ на възнаграждение",
	"SAVE_FOR_LATER": "Запазване за по-късно",
	"CLEAR": "Изчистване",
	"POST_CONTENT": "Коментар",
	"COMMENT_CONTENT": "Съдържание на коментара",
	"TITLE": "Заглавие",
	"TAGS": "Тагове",
	"NOT_MATCH": "Не съвпада",
	"CONFIRM_PIN": "Потвърдете пин-кода",
	"INCORRECT": "Грешно",
	"OPENING_POST": "Отваране на статия.",
	"SET_PIN": "Задайте пин-код.",
	"ENTER_PIN": "Въведете пин-код.",
	"ARE_YOU_SURE": "Сигурни ли сте?",
	"REBLOG_TEXT": "Споделянето е необратимо, искате ли да продължите?",
	"BROADCAST_ERROR": "Грешка при свързване, опитайте отново!",
	"SUCCESS": "Успех!",
	"REBLOGGED_POST": "Споделена публикация!",
	"LOGIN_FAIL": "Неуспешно влизане! Моля, уверете се, че сте влезли в системата с главната парола или с частен ключ за публикуване при влизане, ако сте избрали Разширен режим.",
	"LOGIN_FAIL_A": "Неуспешно влизане! Моля, уверете се, че сте влезли в системата с главната парола или с Активния частен ключ при влизане, ако сте избрали Разширен режим.",
	"WARNING": "Внимание",
	"VOTE_FOR_WITNESS": "Гласуване за witness",
	"VOTED_FOR_WITNESS": "Гласувано за witness",
	"AGO": "-",
	"FROM_NOW": "отпреди",
	"SECS": "сек",
	"A_MIN": "мин",
	"MINS": "мин",
	"AN_HOUR": "час",
	"HOURS": "часа",
	"A_DAY": "ден",
	"DAYS": "дни",
	"A_MONTH": "месец",
	"MONTHS": "месеца",
	"A_YEAR": "година",
	"YEARS": "години",
	"MIN_READ": "-минутно четене.",
	"DOWNVOTE_FLAG": "Отрицателен глас или слагане на флаг.",
	"CAPTURE_PICTURE": "Снимка",
	"SELECT_PICTURE": "Изберете снимка",
	"SET_CUSTOM_URL": "Задайте URL",
	"INSERT_PICTURE": "Добавете снимка",
	"ERROR": "Грешка",
	"UPLOAD_ERROR": "Грешка при качване",
	"CAMERA_CANCELLED": "Няма достъп до камерата.",
	"SET_URL": "Сложете URL",
	"DIRECT_LINK_PICTURE": "Директна връзка към снимката",
	"COMMENT_SUBMITTED": "Коментарът е публикуван!",
	"DELETE_COMMENT": "Изтриването на коментари е необратимо",
	"DELETED_COMMENT": "Изтрит коментар",
	"UPLOADING_PICTURE": "Качване на снимка",
	"UPLOAD_COMPLETED": "Качването приключи",
	"UPLOAD_FAILED": "Грешка при качване",
	"PASSWORD_INCORRECT": "Паролата или потребителското име са грешни",
	"INFO": "Информация",
	"QR_TEXT": "Поставете на QR код в полето за сканиране",
	"BALANCE_TEXT": "Уверете се, че имате достатъчна сума за трансфер!",
	"NONEXIST_USER": "Потребителят към, когото се опитвате да прехвърлите сумата не съществува!",
	"TRANSFER_TEXT": "Сигурни ли сте, че искате да преведете сумата?",
	"CONFIRMATION": "Потвърждаване",
	"TX_BROADCASTED": "Транзакцията се излъчва...",
	"FEED": "Поток",
	"TRENDING": "Тенденции",
	"HOT": "Горещи",
	"NEW": "Нови",
	"PROMOTED": "Промотирани",
	"VOTES": "Гласове",
	"PAYOUT": "Изплащане",
	"COMMENTS": "Коментари",
	"TRENDING_30": "Тенденции за последните 30 дни",
	"SORT_POST_BY": "Сортиране по:",
	"PAYOUT_CYCLE": "Цикъл на изплащане",
	"POTENTIAL_PAYOUT": "Потенциално изплащане",
	"PAST_PAYOUT": "Последно изплащане",
	"AUTHOR_PAYOUT": "Авторско възнаграждение",
	"CURATION_PAYOUT": "Възнаграждения от кураторство",
	"POST_SUBMITTED": "Статията е публикувана",
	"POST_LATER": "Публикувайте по-късно!",
	"SAVED": "Запазено",
	"CLEARED": "Изчистено",
	"FLAGGING_TEXT": "Слагането на флаг може да намали наградите и да свали статията от предните редици.<br><br>Флагът бива да се ползва при измами или плагятство, омразна реч, интернет троли, умишлено неправилно категоризирано съдържание и спам.",
	"REQUEST_LIMIT_TEXT": "Лимит за заявка е достигнат. Разгледайте други тенденции/тагове!",
	"POST_IS_UNBOOKMARK": "Статията е премахната от любими!",
	"POST_IS_BOOKMARK": "Статията е добавена в Любими!",
	"RESET": "Изчистване",
	"MODIFY_PICTURE": "Промяна на профилна снимка",
	"MODIFY_COVER_PICTURE": "Промяна на шаблонната снимка",
	"ACTIVE_KEY_REQUIRED_TEXT": "Моля, представете Активен частен ключ, ако сте избрали Разширен режим за вход!",
	"RESET_PICTURE_TEXT": "Това ще премахне профилната сникмка",
	"RESET_COVER_PICTURE_TEXT": "Това ще премахне шаблонната сникмка",
	"UPDATE_REQUIRES_RESTART": "Нужен е рестарт на сървъра!",
	"SETTINGS_UPDATED": "Настройките са обновени!",
	"LANGUAGES": "Език",
	"LANGUAGES_TEXT": "От тук се сменят езиците на апликацията.",
	"LOGIN_TO_X": "Тази операция изисква потребителя да влезете в профила с основна парола, с активен/публикуване ключ. Моля, влезте и опитайте отново.",
	"GALLERY": "Галерия",
	"TRANSLATIONS": "Преводачи",
	"SHARE": "Сподели",
	"MARKETPLACE": "Борса",
	"EXCHANGE": "Обмяна",
	"DRAFTS": "Чернови",
	"POST_IS_UNDRAFT": "Статията е премахната от черновите!",
	"POST_IS_DRAFT": "Статията е добавена в черновите!",
	"SWIPE_LEFT": "Пълзнете наляво за опции",
	"MANAGE": "Управление",
	"IMAGE_REMOVED": "Снимката е премахната",
	"COPY": "Копиране",
	"NO_IMAGE": "Все още не сте качили снимка!",
	"PULL_DOWN_TO_REFRESH": "Плъзнете надолу за опресняване",
	"EXTERNAL_APPS": "Външни апликации",
	"PLUGINS": "Добавки",
	"SUGGEST": "Предложете\n",
	"COMING_SOON": "Очаквайте скоро",
	"CHAIN": "Блокчейн",
	"CHAIN_TEXT": "От тук се избира блокчейн или базовата платформа.",
	"CURRENCY": "Валутa",
	"CURRENCY_TEXT": "Тук можете да промените валутата в която искате да виждате възнагражденията.",
	"ABOUT_11": "<br><b>Функции в eSteem</b><br>-Достъп до уникални статии на всякакви теми, които ви интересуват. <br>-Автотите получават възнагражения благодарение на гласовете от кураторите, които също получават дял от печалбите.<br>-Печелите от гласовете, които получават вашите статии, както и от кураторство. Давайки своя глас на други автори също печелите възнаграждение.<br>-Публикувайте вашите статии и ги съхранявайте безплатнo. Печелете възнаграждения от вашия блог.<br>-Пишете статий в движение. Имате опция за запазване на няколко чернови за по-късно публикуване.<br>-Запазете статии в \"Любими\", за да ги прочетете по-късно.<br>-Борса и теглене на приходи.<br>-Изпращане на средства към когото и да е автор, потребител, приятел, послефовател и тн.<br>-Следвайте интересни блогъри.<br>-Намерете вашите последователи и хора, които следите.<br>-Получаване на извастия. Подържайте връзка със своите последователи, следете дискустии, в които участвате.<br>-Търсене на интересни тагове/категории и автори. <br> -Персонализиране на вашия профил. <br>Много функции ще бъдат добавени. <br><br><b>Сигурност</b> <br>1. Апликацията няма директен достъп към вашите средства. <br>2. Апликацията предлага модел за сигурност от страна на потребителя. Частните ключове се съхраняват локално и никога не се изпращат към сървъри. Вие сте отговорни за запазването и съхрананието на вашите пароли. <br>3. Апликацията предлага опростен и привлекателен потребителски интерфейс. <br>4. Апликацията предлага допълнително ниво на сигурност с пин-код <br><br>eSteem подържа платформите Steem и Golos.<br>",
	"FOUNDER": "Основател и главен програмист",
	"ADD_ACCOUNT": "Добавяне на допълнителен профил",
	"PLATFORM": "Платформа",
	"ESCROW_AGENT": "Escrow агент",
	"RATIFICATION_DEADLINE": "Краен срок за ратифициране",
	"ESCROW_EXPIRATION": "Изтичане на Escrow",
	"ESCROW_FEE": "Escrow такса",
	"ESCROW_TERMS": "Escrow правила"
}
},{}],105:[function(require,module,exports){
module.exports={
	"HOME": "Domů",
	"LOGIN": "Přihlášení",
	"LOGOUT": "Odhlášení",
	"PROFILE": "Profil",
	"FOLLOW": "Následuj",
	"BOOKMARKS": "Záložky",
	"TRANSFER": "Převod",
	"MARKET": "Trh",
	"SETTINGS": "Nastavení",
	"ABOUT": "O nás",
	"ABOUT_1": "kde kdokoliv může získat odměnu za svůj obsah!",
	"ABOUT_2": "je postaven na {{platformname}} platformě. Aplikaci vytvořil",
	"ABOUT_3": "a je to komunitní, open-source mobilní projekt. Nabízí přístup k obsahu pro čtení, komentování, hlasování, vystavování příspěvků, převod výdělků atd. poskytované {{platformname}} blockchainem a {{sitename}}.",
	"ABOUT_4": "1. Aplikace nemá přístup k uživatelovým fondům ani je nikdy nevlastní.",
	"ABOUT_5": "2. Aplikace nabízí bezpečnostní model na straně klienta. Privátní klíče jsou drženy lokálně a nikdy nejsou posílány žádným serverům.",
	"ABOUT_6": "3. Aplikace nabízí jednoduchá, atraktivní uživatelská rozhraní a zážitky.",
	"ABOUT_7": "4. Aplikace po uživatelích nikdy nepožaduje žádné osobní informace.",
	"ABOUT_8": "Hlasujte pro svědka good-karma",
	"ABOUT_9": "Kontakt/Zpětná vazba:",
	"ABOUT_10": "Více informací:",
	"REMOVE": "Odstranit",
	"MARKET_VIEW": "Zobrazení trhu",
	"PRICE": "Cena",
	"AMOUNT": "Suma",
	"TOTAL": "Celkem",
	"NOORDERS": "Žádné otevřené objednávky pro",
	"DATE": "Datum",
	"BUY": "Nákup",
	"SELL": "Prodej",
	"OPEN": "Otevřeno",
	"HISTORY": "Historie",
	"FOLLOW_BACK": "Sledovat",
	"FOLLOWED": "Sledován",
	"UNFOLLOW": "Přestat sledovat",
	"FOLLOWING": "Sledovaní",
	"FOLLOWERS": "Sledující",
	"SEARCH_FOLLOWERS": "Hledej sledující",
	"SEARCH_FOLLOWING": "Hledej sledované",
	"BY": "kým",
	"IN": "v",
	"BOOKMARK": "Záložka",
	"UPVOTE": "Hlasujte pro",
	"DOWNVOTE": "Hlasujte proti",
	"UNVOTE_DOWNVOTED": "Vraťte hlas proti",
	"UNVOTE_UPVOTED": "Vraťte hlas pro",
	"REPLY": "Odpovězte",
	"EDIT": "Upravte",
	"POST_1": "Pro zobrazení voleb přejeď vlevo na komentáře",
	"POST_2": "Pro zobrazení subkomentářů klepněte na komentáře",
	"OPTIONS": "Volby",
	"RESTEEMED_BY": "Resteemováno kým",
	"NOTHING_HERE": "Připravuje se",
	"BALANCES": "Zůstatky",
	"PROFILE_1": "{{platformname}}, obchodovatelné tokeny, které mohou být kdykoliv převedeny. {{platformname}} mohou být převedeny na {{platformpower}} v procesu zvaném powering up.",
	"PROFILE_2": "{{platformpower}}, vlivové tokeny, které posilují při dlouhodobém držení a hlasování o příspěvcích. Čím více jich někdo drží, tím více může ovlivnit odměny druhých a sám získat odměnu za správné hlasování.",
	"PROFILE_3": "Tokeny v ceně okolo {{platformsunit}} v {{platformname}}.",
	"ESTIMATED_VALUE": "Očekávaná cena",
	"PROFILE_4": "Očekávaná cena je založena na 7 denní průměrné ceně {{platformname}}.",
	"TRANSACTION_HISTORY": "Historie transakcí",
	"POSTING": "Odesílání",
	"PROFILE_5": "Odesílací klíč je používán pro odesílání příspěvků a hlasování. Měl by být rozdílný od aktivního a vlastnického klíče.",
	"OWNER": "Vlastník",
	"PROFILE_6": "Vlastnický klíč je hlavní klíč účtu a je požadován pro změnu ostatních účtů. Privátní klíč nebo heslo pro vlastnický klíč by měly být drženy pokud možno co nejvíce offline.",
	"ACTIVE": "Aktivní",
	"PROFILE_7": "Aktivní klíč se používá pro převody a zadání objednávek na vnitřním trhu.",
	"MEMO": "Poznámka",
	"PROFILE_8": "Poznámkový klíč se používá pro tvorbu a čtení poznámek.",
	"POSTS": "Příspěvky",
	"REPLIES": "Odpovědi",
	"WALLET": "Peněženka",
	"TAG": "Štítek",
	"USER": "Uživatel",
	"CLOSE": "Zavřít",
	"TO": "do",
	"ASSET": "Aktivum",
	"SEND": "Poslat",
	"SECURITY": "Zabezpečení",
	"AVAILABLE": "Dostupný",
	"PUBLIC_MEMO": "Veřejná poznámka",
	"TO_DESC": "Uživatel např. good-karma",
	"PIN_CODE": "Pin kód",
	"PIN_TEXT": "PIN kód pomáhá zabezpečit aplikaci a data. <br/><br/><b>Poznámka:</b> Jakmile je aktivní, máte maximálně 4 pokusy na odemčení. Pokud pin zapomenete nebo neuspějete, aplikace odstraní uživatelská data tohoto přihlášení. Můžete se opět přihlásit a pokračovat v práci.",
	"NOTIFICATIONS": "Oznámení",
	"VOTE_TEXT": "Pokud někdo hlasuje pro Váš příspěvek, obdržíte upozornění! <br/> <b>Poznámka:</b> Tato oznámení obsahují váhu hlasu (ať už je to hlas pro, proti, nebo odvolání hlasování).",
	"VOTE": "Hlasujte",
	"COMMENT_TEXT": "Pokud někdo komentuje Váš příspěvek nebo komentář, obdržíte oznámení! <br/> <b>Poznámka:</b> Upozornění je zasláno též pokud někdo <b>edituje</b> svůj komentář.",
	"COMMENT": "Poznámka",
	"FOLLOW_TEXT": "Obdržíte upozornění když vás někdo začne sledovat, nebo sledování zruší!",
	"MENTIONS": "Zmínky",
	"MENTIONS_TEXT": "Pokud vás někdo zmíní v příspěvku/komentáři, obdržíte upozornění!",
	"RESTEEM_TEXT": "Pokud někdo resteemuje váš příspěvek, dostanete oznámení!",
	"CONFIGURATIONS": "Konfigurace",
	"VOTING": "Hlasování",
	"VOTING_TEXT": "Váha hlasu nebo procento ovlivňuje hlasovací sílu aplikace, takže můžete regulovat výši odměny vašeho hlasování. <br/><br/><b>Poznámka:</b> To ovlivní váhu hlasu/procento i při hlasování proti a je to platné v celé aplikaci.",
	"SERVER_TEXT": "Doporučené",
	"SAVE_CHANGES": "Uložit změny",
	"VOTERS_INFO": "Informace o voliči",
	"WELCOME_BACK": "Vítejte zpět!",
	"LOGIN_1": "Pro pokračování se přihlašte svým uživatelským jménem a heslem.",
	"LOGIN_2": "Odesílací klíč je určen pro vystavovaní příspěvků, komentáře, hlasování, sledování.",
	"LOGIN_3": "Aktivní klíč je určen pro převody a aktualizaci profilového obrázku.",
	"LOGIN_4": "Uživatelovy přihlašovací údaje jsou drženy lokálně v přístroji. Po odhlášení jsou odstraněny!",
	"DONT_HAVE": "Nemáte účet?",
	"SIGN_UP_NOW": "Zřiďte si účet",
	"CANCEL": "Zrušit",
	"ADVANCED": "Pokročilý",
	"ACTIVE_PRIKEY": "Aktivní soukromý klíč",
	"POSTING_PRIKEY": "Odesílací soukromý klíč",
	"MASTER_PASS": "Hlavní heslo",
	"USERNAME": "Uživatelské jméno",
	"CARD_VIEW": "Zobrazení karta",
	"COMPACT_VIEW": "Zobrazení kompakt",
	"SEARCH": "Hledat",
	"SUBMIT_A_STORY": "Vlož článek",
	"REPLYTO": "Odpovězte",
	"POST": "Odeslat",
	"PREVIEW": "Náhled",
	"DEFAULT": "Nastavení 50% / 50%",
	"POWERUP": "100% Steem Power",
	"DECLINE_PAYOUT": "Odmítnou výplatu",
	"SAVE_FOR_LATER": "Uschovat na později",
	"CLEAR": "Vyčistit",
	"POST_CONTENT": "Odeslat obsah",
	"COMMENT_CONTENT": "Komentovat obsah",
	"TITLE": "Nadpis",
	"TAGS": "Štítky",
	"NOT_MATCH": "Neshoduje se",
	"CONFIRM_PIN": "Potvrďte PIN",
	"INCORRECT": "Nesprávný",
	"OPENING_POST": "úvodní příspěvek",
	"SET_PIN": "Nastavte PIN",
	"ENTER_PIN": "Vložte PIN",
	"ARE_YOU_SURE": "Určitě?",
	"BROADCAST_ERROR": "Chyba odeslání, zkuste znovu!",
	"SUCCESS": "Úspěch",
	"REBLOGGED_POST": "Reblogovaný příspěvek!",
	"LOGIN_FAIL": "Přihlášení selhalo! Ujistěte se, že jste se přihlásili hlavním heslem, nebo že jste při přihlášení zadali Odesílací klíč, pokud jste zvolili Pokročilý režim.",
	"LOGIN_FAIL_A": "Přihlášení selhalo! Ujistěte se, že jste se přihlásili hlavním heslem, nebo že jste při přihlášení zadali Aktivní klíč, pokud jste zvolili Pokročilý režim.",
	"WARNING": "Výstraha",
	"VOTE_FOR_WITNESS": "Hlasování o svědcích",
	"VOTED_FOR_WITNESS": "Hlasoval pro svědka",
	"AGO": "před",
	"FROM_NOW": "od teď",
	"SECS": "vteřiny",
	"A_MIN": "minuta",
	"MINS": "minuty",
	"AN_HOUR": "hodina",
	"HOURS": "hodiny",
	"A_DAY": "den",
	"DAYS": "dny",
	"A_MONTH": "měsíc",
	"MONTHS": "měsíce",
	"A_YEAR": "rok",
	"YEARS": "roky",
	"DOWNVOTE_FLAG": "Hlasujte proti nebo označte jako závadné",
	"CAPTURE_PICTURE": "Zachyťte obrázek",
	"SELECT_PICTURE": "Vyberte obrázek",
	"SET_CUSTOM_URL": "Nastavte zákaznické URL",
	"INSERT_PICTURE": "Vložte obrázek",
	"ERROR": "Chyba",
	"UPLOAD_ERROR": "Nahrajte chybu",
	"CAMERA_CANCELLED": "Fotoaparát zrušen",
	"SET_URL": "Nastavte URL",
	"DIRECT_LINK_PICTURE": "Přímý odkaz na obrázek",
	"COMMENT_SUBMITTED": "Komentář vložen!",
	"DELETE_COMMENT": "Mazání komentáře je nevratné...",
	"DELETED_COMMENT": "Odstraněný komentář",
	"UPLOADING_PICTURE": "Nahrávání obrázku",
	"UPLOAD_COMPLETED": "Nahrávání hotovo",
	"UPLOAD_FAILED": "Nahrávání selhalo",
	"PASSWORD_INCORRECT": "Heslo nebo jméno účtu bylo nesprávné",
	"QR_TEXT": "QR kód umístěte do oblasti pro sken",
	"BALANCE_TEXT": "Ujistěte se, že máte dostatečný zůstatek pro transakci!",
	"NONEXIST_USER": "Uživatel, kterému se snažíte převést fondy neexistuje!",
	"TRANSFER_TEXT": "Jste si jisti, že si přejete provést převod?",
	"CONFIRMATION": "Potvrzení",
	"TX_BROADCASTED": "Transakce je odesílána",
	"FEED": "Zdroj",
	"TRENDING": "V trendu",
	"HOT": "Žhavé",
	"NEW": "Nové",
	"PROMOTED": "Propagované",
	"VOTES": "Hlasy",
	"PAYOUT": "Výplata",
	"COMMENTS": "Komentáře",
	"TRENDING_30": "V trendu po 30 dní",
	"SORT_POST_BY": "Roztřídit příspěvky dle",
	"PAYOUT_CYCLE": "Cyklus výplaty",
	"POTENTIAL_PAYOUT": "Potenciální výplata",
	"PAST_PAYOUT": "Minulá výplata",
	"AUTHOR_PAYOUT": "Autorská odměna",
	"CURATION_PAYOUT": "Kurátorská odměna",
	"POST_SUBMITTED": "Článek je odeslán!",
	"POST_LATER": "Uschovat pro pozdější odeslání!",
	"SAVED": "Uložený",
	"CLEARED": "Vyčištěno",
	"FLAGGING_TEXT": "Označení příspěvku za závadný může odebrat odměny a učinit tento materiál méně viditelným.<br><br>Toto označení by mělo být použito na následující: <ul><li>podvod nebo plagiátorství</li><li>projevy nenávisti nebo internetové trolování</li><li>záměrně chybná kategorizace obsahu nebo spam</li></ul>",
	"REQUEST_LIMIT_TEXT": "Limit požadavků dosažen. Zkontrolujte ostatní trendy/štítky!",
	"POST_IS_UNBOOKMARK": "Příspěvek je odstraněn ze záložek!",
	"POST_IS_BOOKMARK": "Příspěvek je přidán do záložek!",
	"RESET": "Resetovat",
	"MODIFY_PICTURE": "Upravit profilový obrázek",
	"MODIFY_COVER_PICTURE": "Upravit titulní obrázek",
	"ACTIVE_KEY_REQUIRED_TEXT": "Zadejte Aktivní soukromý klíč, pokud jste vybrali pokročilý mód přístupu!",
	"RESET_PICTURE_TEXT": "Tímto resetujete profilový obrázek uživatele!",
	"RESET_COVER_PICTURE_TEXT": "Tímto resetujete titulní obrázek uživatele!",
	"UPDATE_REQUIRES_RESTART": "Aktualizace serveru vyžaduje restart!",
	"SETTINGS_UPDATED": "Nastavení jsou aktualizována.",
	"LANGUAGES": "Jazyky",
	"LANGUAGES_TEXT": "Zde můžete změnit jazyk aplikace.",
	"LOGIN_TO_X": "Tato operace vyžaduje přihlášení uživatele hlavním heslem, Aktivním/Odesílacím klíčem. Prosím přihlašte se a opakujte pokus.",
	"GALLERY": "Galerie",
	"TRANSLATIONS": "Přeložili",
	"SHARE": "Akcie",
	"MARKETPLACE": "Trh",
	"EXCHANGE": "Burza",
	"DRAFTS": "Koncepty",
	"POST_IS_UNDRAFT": "Příspěvek je z konceptů odstraněn !",
	"POST_IS_DRAFT": "Příspěvek je přidán do konceptů!",
	"SWIPE_LEFT": "Pro zobrazení možností přejeď vlevo",
	"MANAGE": "Spravovat",
	"IMAGE_REMOVED": "Obraz je odstraněn",
	"COPY": "Kopírovat",
	"NO_IMAGE": "Dosud jste nenahrál žádný obraz.",
	"PULL_DOWN_TO_REFRESH": "Pro obnovení zatáhni dolů",
	"EXTERNAL_APPS": "Externí aplikace",
	"PLUGINS": "Přídavné moduly",
	"SUGGEST": "Návrh",
	"COMING_SOON": "Již brzy chystáme"
}
},{}],106:[function(require,module,exports){
module.exports={
	"HOME": "Startseite",
	"LOGIN": "Anmelden",
	"LOGOUT": "Abmelden",
	"PROFILE": "Profil",
	"FOLLOW": "Folgen",
	"BOOKMARKS": "Lesezeichen",
	"TRANSFER": "Übertragen",
	"MARKET": "Markt",
	"SETTINGS": "Einstellungen",
	"ABOUT": "Info",
	"ABOUT_1": "die Plattform, bei der jeder für seine Inhalte vergütet wird!",
	"ABOUT_2": "wird unterstützt durch die {{platformname}} Plattform. Anwendung erstellt von",
	"ABOUT_3": "und ist eine mobile Open Source Anwendung, die durch die Community unterstützt wird. Die Anwendung erlaubt den Zugriff auf die Inhalte für das Lesen, Kommentieren, Abstimmen, Posten, Übertragen von Einkünften etc. Die Funktionen werden durch die {{platformname}} Blockchain und {{sitename}} bereitgestellt.",
	"ABOUT_4": "1. Die Anwendung greift niemals auf Ihre Mittel zu.",
	"ABOUT_5": "2. Die Anwendung nutzt ein Client-basiertes Sicherheitskonzept, dass auf Schlüsseln basiert, die lokal vorhanden sind und niemals an einen Server übertragen werden.",
	"ABOUT_6": "3. Die Anwendung bietet ein simples, attraktives Interface.",
	"ABOUT_7": "4. Die Anwendung fragt niemals nach persönlichen Daten.",
	"ABOUT_8": "Good-Karma als Zeuge abstimmen",
	"ABOUT_9": "Kontakt/Feedback:",
	"ABOUT_10": "Weitere Informationen:",
	"REMOVE": "Entfernen",
	"MARKET_VIEW": "Marktansicht",
	"PRICE": "Preis",
	"AMOUNT": "Menge",
	"TOTAL": "Gesamt",
	"NOORDERS": "Keine offenen Order",
	"DATE": "Datum",
	"BUY": "Kaufen",
	"SELL": "Verkaufen",
	"OPEN": "Offen",
	"HISTORY": "Historie",
	"FOLLOW_BACK": "Ebenfalls folgen",
	"FOLLOWED": "Sie folgen nun diesem Nutzer",
	"UNFOLLOW": "Nicht mehr folgen",
	"FOLLOWING": "Sie folgen diesem Nutzer",
	"FOLLOWERS": "Personen, die Ihnen folgen",
	"SEARCH_FOLLOWERS": "Durchsuchen der Nutzer, die Ihnen folgen",
	"SEARCH_FOLLOWING": "Durchsuchen der Nutzer, denen Sie folgen",
	"BY": "von",
	"IN": "in",
	"MENU": "Menü",
	"BOOKMARK": "Lesezeichen",
	"REBLOG": "Reblog",
	"UPVOTE": "Upvote",
	"DOWNVOTE": "Downvote",
	"UNVOTE_DOWNVOTED": "Downvote entfernen",
	"UNVOTE_UPVOTED": "Upvote entfernen",
	"REPLY": "Antworten",
	"EDIT": "Editieren",
	"POST_1": "Nach links wischen um Kommentare zu sehen",
	"POST_2": "Auf Kommentare tippen um dessen Antworten zu sehen",
	"OPTIONS": "Optionen",
	"RESTEEMED_BY": "Resteemed von",
	"NOTHING_HERE": "Hier gibt es noch nichts zu sehen...",
	"BALANCES": "Kontostand",
	"PROFILE_1": "{{platformname}}, handelbare Tokens die zu jeder Zeit übertragen werden können. {{platformname}} kann in {{platformpower}} konvertiert werden. Dieser Prozess heißt \"powering up\".",
	"PROFILE_2": "{{platformpower}}, tokens die sich automatisch vermehren, wenn Sie besessen werden und beeinflussen, wie viel Ihre Stimme wert ist. Desto mehr Sie besitzen, desto mehr Einfluss hat Ihre Stimme.",
	"PROFILE_3": "Tokens mit einem Wert von etwa {{platformsunit}} in {{platformname}}.",
	"ESTIMATED_VALUE": "Geschätzter Wert",
	"PROFILE_4": "Der geschätzte Wert basiert auf einem 7-Tage-Durchschnittswert von {{platformname}}.",
	"TRANSACTION_HISTORY": "Transaktions Historie",
	"POSTING": "Beitrag",
	"PROFILE_5": "Der \"posting key\" wird für das Veröffentlichen und Abstimmen benötigt. Er sollte sich vom \"active key\" und vom \"owner key\" unterscheiden.",
	"OWNER": "Besitzer",
	"PROFILE_6": "Der \"owner key\" ist der Hauptschlüssel für den Account und wird benötigt, um andere Schlüssel zu ändern. Der \"private key\" oder das Passwort sollten nur offline verfügbar sein.",
	"ACTIVE": "Aktiv",
	"PROFILE_7": "Der \"active key\" wird benutzt, um Übertragungen durchzuführen oder Gebote auf dem Markt zu platzieren.",
	"MEMO": "Notiz",
	"PROFILE_8": "Der \"memo key\" wird benötigt, um Memos zu lesen und zu speichern.",
	"BLOG": "Blog",
	"POSTS": "Beiträge",
	"REPLIES": "Antworten",
	"WALLET": "Brieftasche",
	"TAG": "Tag",
	"USER": "Benutzer",
	"CLOSE": "Schließen",
	"TO": "Empfänger",
	"ASSET": "Zusatz",
	"SEND": "Senden",
	"SECURITY": "Sicherheit",
	"AVAILABLE": "Verfügbar",
	"PUBLIC_MEMO": "Öffentliche Notiz",
	"TO_DESC": "Benutzer z.B. good-karma",
	"PIN_CODE": "Pin",
	"PIN_TEXT": "Der PIN dient der Sicherheit der Anwendung, sowie deren Daten. <br/><br/><b>Hinweis:</b> Nach Aktivierung stehen maximal 4 Anmeldeversuche zur Verfügung. Danach werden die Daten des aktuell angemeldeten Nutzers gelöscht und die Anwendung kann wieder normal genutzt werden.",
	"NOTIFICATIONS": "Benachrichtigungen",
	"VOTE_TEXT": "Sie werden informiert, sobald jemand für Ihre Beiträge abgestimmt hat! <br/> <b>Hinweis:</b> Die Notifikation gibt aufschluss über die Art der Abstimmung (Positiv, Negativ, wieder entfernt) und die Gewichtung der Stimme.",
	"VOTE": "Abstimmen",
	"COMMENT_TEXT": "Sie werden informiert, sobald jemand auf Ihre Beiträge oder Kommentare antwortet!<br/> <b>Hinweis:</b> Sie werden auch beim Ändern eines Beitrags/Kommentars erneut informiert.",
	"COMMENT": "Kommentar",
	"FOLLOW_TEXT": "Sie werden benachrichtigt, sobald Ihnen jemand folgt oder nicht mehr folgt!",
	"MENTIONS": "Erwähnungen",
	"MENTIONS_TEXT": "Sie werden benachrichtigt, sobald Sie von jemanden in Kommentaren oder Beitragen erwähnt werden!",
	"RESTEEM": "Reblog",
	"RESTEEM_TEXT": "Sie werden benachrichtigt sobald jemand Ihren Post erneut veröffentlicht hat!",
	"CONFIGURATIONS": "Einstellungen",
	"VOTING": "Abstimmung",
	"VOTING_TEXT": "Das Gewicht / der prozentuale Anteil der Stimme beeinflusst die Menge der Vergütung für den Autor. <br/><br/><b>Hinweis:</b> Diese Einstellung ändert auch die Gewichtung/ den prozentualen Anteil für negative Stimmen. Diese Einstellung wird in der gesamten Anwendung verwendet.",
	"SERVER": "Server",
	"SERVER_TEXT": "Empfohlen",
	"SAVE_CHANGES": "Änderungen speichern",
	"VOTERS_INFO": "Abstimmungsinformationen",
	"WELCOME_BACK": "Willkommen zurück!",
	"LOGIN_1": "Melden Sie sich mit Ihrem Benutzernamen und Passwort an, um fortzufahren.",
	"LOGIN_2": "Der \"Posting key\" wird für das Veröffentlichen von Beitragen, Kommentaren und Abstimmungen, sowie dem Folgen von Nutzern benötigt.",
	"LOGIN_3": "Der \"Active key\" wird für die Übertragung und das aktualisieren des Profilbilds benötigt.",
	"LOGIN_4": "Zugangsdaten werden local im Gerät gespeichert und nach dem Logout gelöscht!",
	"DONT_HAVE": "Noch keinen Account?",
	"SIGN_UP_NOW": "Jetzt registrieren",
	"CANCEL": "Abbrechen",
	"ADVANCED": "Erweitert",
	"ACTIVE_PRIKEY": "Aktiver privater Zugangsschlüssel",
	"POSTING_PRIKEY": "Privater Zugangsschlüssel für das Veröffentlichen von Inhalten",
	"MASTER_PASS": "Master- /Haupt-Passwort",
	"USERNAME": "Benutzername",
	"CARD_VIEW": "Karten-Ansicht",
	"COMPACT_VIEW": "Kompaktansicht",
	"SEARCH": "Suchen",
	"SUBMIT_A_STORY": "Beitrag erstellen",
	"REPLYTO": "Antworten",
	"POST": "Veröffentlichen",
	"PREVIEW": "Vorschau",
	"DEFAULT": "Standard 50% / 50%",
	"POWERUP": "Power erhöhen mit 100%",
	"DECLINE_PAYOUT": "Auf die Auszahlung verzichten",
	"SAVE_FOR_LATER": "Für einen späteren Zeitpunkt speichern",
	"CLEAR": "LÖSCHEN",
	"POST_CONTENT": "Inhalt veröffentlichen",
	"COMMENT_CONTENT": "Inhalt kommentieren",
	"TITLE": "Titel",
	"TAGS": "Tags",
	"NOT_MATCH": "KEINE ÜBEREINSTIMMUNG",
	"CONFIRM_PIN": "PIN bestätigen",
	"INCORRECT": "FALSCH",
	"OPENING_POST": "öffne Beitrag",
	"SET_PIN": "Setzen Sie Ihren PIN",
	"ENTER_PIN": "Bitte geben Sie Ihren PIN ein",
	"ARE_YOU_SURE": "Sind Sie sicher?",
	"REBLOG_TEXT": "Das neu veröffentlichen kann nicht rückgängig gemacht werden, wollen Sie weiter machen?",
	"BROADCAST_ERROR": "Fehler beim veröffentlichen, bitte versuchen Sie es erneut!",
	"SUCCESS": "Erfolgreich",
	"REBLOGGED_POST": "Neu veröffentlicht!",
	"LOGIN_FAIL": "Anmeldung fehlgeschlagen! Bitte stellen Sie sich sicher, dass Sie das Master-Passwort oder, für den erweiterten Anmelde-Modus, den bereitgestellten \"Active private key\" verwenden.",
	"LOGIN_FAIL_A": "Anmeldung fehlgeschlagen! Bitte stellen Sie sich sicher, dass Sie das Master-Passwort oder, für den erweiterten Anmelde-Modus, den bereitgestellten \"Active private key\" verwenden.",
	"WARNING": "Warnung",
	"VOTE_FOR_WITNESS": "Für einen Witness abstimmen",
	"VOTED_FOR_WITNESS": "Erfolgreich für einen Witness abgestimmt",
	"AGO": "seit",
	"FROM_NOW": "ab jetzt",
	"SECS": "Sekunden",
	"A_MIN": "eine Minute",
	"MINS": "Minuten",
	"AN_HOUR": "eine Stunde",
	"HOURS": "Stunden",
	"A_DAY": "einen Tag",
	"DAYS": "Tage",
	"A_MONTH": "einen Monat",
	"MONTHS": "Monate",
	"A_YEAR": "ein Jahr",
	"YEARS": "Jahre",
	"MIN_READ": "min. lesen",
	"DOWNVOTE_FLAG": "Negativ bewerten oder markieren",
	"CAPTURE_PICTURE": "Bild aufnehmen",
	"SELECT_PICTURE": "Bild auswählen",
	"SET_CUSTOM_URL": "Eigene URL",
	"INSERT_PICTURE": "Bild einfügen",
	"ERROR": "Fehler",
	"UPLOAD_ERROR": "Upload fehlgeschlagen",
	"CAMERA_CANCELLED": "Kamera geschlossen",
	"SET_URL": "URL setzen",
	"DIRECT_LINK_PICTURE": "Direkter Link zum Bild",
	"COMMENT_SUBMITTED": "Kommentar abgegeben!",
	"DELETE_COMMENT": "Gelöschte Kommentare können nicht widerhergestellt werden...",
	"DELETED_COMMENT": "Kommentar gelöscht",
	"UPLOADING_PICTURE": "Bild wird hochgeladen",
	"UPLOAD_COMPLETED": "Hochladen abgeschlossen",
	"UPLOAD_FAILED": "Hochladen fehlgeschlagen",
	"PASSWORD_INCORRECT": "Passwort oder Benutzername nicht korrekt",
	"INFO": "Information",
	"QR_TEXT": "Platzieren Sie einen QR code innerhalb des Bereichs",
	"BALANCE_TEXT": "Stellen Sie sicher, dass Sie über ausreichende Mittel verfügen!",
	"NONEXIST_USER": "Sie verfügen nicht über ausreichende Mittel für diese Aktion!",
	"TRANSFER_TEXT": "Wollen Sie wirklich übertragen?",
	"CONFIRMATION": "Bestätigungen",
	"TX_BROADCASTED": "Die Transaktion wurde übertragen",
	"FEED": "Feed",
	"TRENDING": "Im Trend",
	"HOT": "Beliebt",
	"NEW": "Neu",
	"PROMOTED": "Beworben",
	"VOTES": "Stimmen",
	"PAYOUT": "Auszahlung",
	"COMMENTS": "Kommentare",
	"TRENDING_30": "Seit 30 Tagen im Trend",
	"SORT_POST_BY": "Sortieren der Posts nach:",
	"PAYOUT_CYCLE": "Auszahlungskreislauf",
	"POTENTIAL_PAYOUT": "Voraussichtliche Auszahlungen",
	"PAST_PAYOUT": "Vergangene Auszahlungen",
	"AUTHOR_PAYOUT": "Auszahlung an den Autor",
	"CURATION_PAYOUT": "Kurationsauszahlungen",
	"POST_SUBMITTED": "Post wurde veröffentlicht!",
	"POST_LATER": "Posts zur späteren Veröffentlichung!",
	"SAVED": "Gespeichert",
	"CLEARED": "Geleert",
	"FLAGGING_TEXT": "Das markieren eines Posts kann zum Verlust der Vergütung führen und verringert die Sichtbarkeit des Posts.<br><br>Sie sollten Posts nur unter markieren, wenn einer der folgenden Punkte zutrifft: <ul><li>Betrug oder Plagiat</li><li>Vulgäre Ausdrucke oder \"Trolling\"</li><li>Mutwillig falsch kategorisiert oder Spam</li></ul>",
	"REQUEST_LIMIT_TEXT": "Maximale Anzahl von Anfragen erreicht. Bitte schauen Sie sich andere trend/tags an!",
	"POST_IS_UNBOOKMARK": "Post von den Lesezeichen entfernt!",
	"POST_IS_BOOKMARK": "Post zu den Lesezeichen hinzugefügt!",
	"RESET": "Zurücksetzen",
	"MODIFY_PICTURE": "Profilbild ändern",
	"MODIFY_COVER_PICTURE": "Titelbild ändern",
	"ACTIVE_KEY_REQUIRED_TEXT": "Bitte tragen Sie den \"Active private key\" ein, wenn Sie den erweiterten Login Modus gewählt haben!",
	"RESET_PICTURE_TEXT": "Zurücksetzen des Profilbilds",
	"RESET_COVER_PICTURE_TEXT": "Zurücksetzen des Titelbilds.",
	"UPDATE_REQUIRES_RESTART": "Aufgrund eines Serverupdates muss ein die Anwendung neugestartet werden!",
	"SETTINGS_UPDATED": "Einstellungen aktualisiert!",
	"LANGUAGES": "Sprachen",
	"LANGUAGES_TEXT": "Hier kann die Sprache der Anwendung geändert werden.",
	"LOGIN_TO_X": "Für die gewünschte Operation müssen Sie angemeldet sein. Bitte melden Sie sich mit Ihrem Passwort oder dem \"active/posting\"-Schlüssel sein",
	"GALLERY": "Gallerie",
	"TRANSLATIONS": "Mitwirkende an der Übersetzung",
	"SHARE": "Teilen",
	"MARKETPLACE": "Marktplatz",
	"EXCHANGE": "Börse",
	"DRAFTS": "Entwürfe",
	"POST_IS_UNDRAFT": "Beitrag aus Entwürfen entfernt!",
	"POST_IS_DRAFT": "Beitrag zu Entwürfen hinzugefügt!",
	"SWIPE_LEFT": "Links wischen für Optionen",
	"MANAGE": "Verwalten",
	"IMAGE_REMOVED": "Bild entfernt",
	"COPY": "Kopieren",
	"NO_IMAGE": "Sie haben noch kein Foto hochgeladen!",
	"PULL_DOWN_TO_REFRESH": "Nach unten ziehen zum aktualisieren",
	"EXTERNAL_APPS": "Externe Apps",
	"PLUGINS": "Plug-Ins",
	"SUGGEST": "Vorschlagen",
	"COMING_SOON": "Kommt bald",
	"CHAIN": "Chain",
	"CHAIN_TEXT": "Hier kannst du die Blockchain oder die Standardplattform wechseln.",
	"CURRENCY": "Währung",
	"CURRENCY_TEXT": "Hier können Sie Ihre Standardwährung ändern. Sie sehen all Ihre Verdienste für Beiträge / Kommentare in dieser Standardwährung.",
	"ABOUT_11": "<br><b>Feature Liste</b><br>- Zugang erhalten zu einzigartigen Artikeln all der Themengebiete, die Sie gerne lesen möchten.<br>- Interagieren Sie mit den Autoren, in dem Sie die Beiträge kommentieren und mit anderen diskutieren.<br>- Stimmen Sie für Artikel um Autoren zu belohnen und selbst Curation Rewards zu verdienen.<br>- Veröffentlichen Sie Ihre Artikel, Blog Posts, die kostenlos gehosted werden und erhalten Sie Entgelt für Interagieren und gewinnen Sie zusätzlich Anhänger für Ihre Inhalte.<br>- Schreiben Sie Artikel von unterwegs. Speichern Sie eine Vielzahl von Entwürfen um diese später zu veröffentlichen.<br>- Bookmarken Sie Ihre Lieblingsartikel, um diese später zu lesen.<br>- Einnahmen tauschen oder auszahlen.<br>- Überweisen Sie Guthaben an Autoren, Nutzer, Freunde, Anhänger, etc.<br>- Folgen Sie interessanten Autoren, Bloggern.<br>- Durchsuchen Sie Inhalte Ihrer Follower und Autoren.<br>- Erhalten Sie Benachrichtigungen von Ihren Follower und Diskussionen, an denen Sie teilgenommen haben.<br>- Suchen Sie interessante Tags / Kategorien aller Artikel und Autoren.<br>- Personalisieren Sie Ihre Profil.<br>- Viele neue Features werden demnächst vorgestellt.<br><br><b>Sicherheit</b><br>1. App hat keinen Zugriff auf Ihre Einnahmen.<br>2. App bieten einfließt-side Sicherheits-Modell mit privaten Schlüsseln, die lokal gehostet und niemals an andere Server geschickt werden. Sie sind lediglich dafür verantwortlich Ihre Passwort zu sichern.<br>3. Die App bietet simples Nutzer Interface und attraktive User Erfahrungen<br>4. Die App beinhaltet eine zusätzliche Sicherheitsebene durch einen Pin-Code<br><br>eSteem unterstütz die Plattformen Steem sowie Golos.<br>",
	"FOUNDER": "Gründer und leitender Entwickler",
	"ADD_ACCOUNT": "Account hinzufügen",
	"PLATFORM": "Plattform",
	"ESCROW_AGENT": "Escrow Agent",
	"RATIFICATION_DEADLINE": "Ratifizierungsfrist",
	"ESCROW_EXPIRATION": "Escrow Ablaufdatum",
	"ESCROW_FEE": "Escrow Gebühr",
	"ESCROW_TERMS": "Escrow Bedingungen"
}
},{}],107:[function(require,module,exports){
module.exports={
	"HOME": "hom",
	"LOGIN": "lgin",
	"LOGOUT": "lgootu",
	"PROFILE": "porfli",
	"FOLLOW": "fluw",
	"BOOKMARKS": "bkumakrz",
	"TRANSFER": "tarnsefr",
	"MARKET": "mrakte",
	"SETTINGS": "stetignz",
	"ABOUT": "abut",
	"ABOUT_1": "wer anyon cna eran rwardz fer thir cntnt!",
	"ABOUT_2": "iz pwered bi {{platformname}} paltfrom. app iz crated bi",
	"ABOUT_3": "and it iz opn-src, cmounti dirvne mbil prjct. it offezr cntnt accezs fer rdng, coemntng, vtoign, pstng, tarnsefr eranignz, etc. ftrz offered bi {{platformname}} blckchin and {{sitename}}.",
	"ABOUT_4": "1. app nver accezs or hlod otno uesr fndz.",
	"ABOUT_5": "2. app offezr a clnt-sid sceurti mdel, wtih pirvta kyez hsotde lcoail and nver snet tu ani srvrz.",
	"ABOUT_6": "3. app offezr smpl, atrtaciv uesr inetrfcz and exprncz.",
	"ABOUT_7": "4. app nver rqeuri usrz tu inpt ani presoanl infrmatn.",
	"ABOUT_8": "vot good-karma az witnsez",
	"ABOUT_9": "kontakt/fedbak:",
	"ABOUT_10": "mur inf:",
	"REMOVE": "rmov",
	"MARKET_VIEW": "mrakte veiw",
	"PRICE": "pirc",
	"AMOUNT": "aomutn",
	"TOTAL": "ttal",
	"NOORDERS": "no oepn odrezr fer",
	"DATE": "dat",
	"BUY": "bui",
	"SELL": "sel",
	"OPEN": "oepn",
	"HISTORY": "hstr",
	"FOLLOW_BACK": "fluw bak",
	"FOLLOWED": "flowed",
	"UNFOLLOW": "unfolow",
	"FOLLOWING": "floownig",
	"FOLLOWERS": "floowrez",
	"SEARCH_FOLLOWERS": "saerhc floowrez",
	"SEARCH_FOLLOWING": "saerhc floownig",
	"BY": "bi",
	"MENU": "mneu",
	"BOOKMARK": "bkmrk",
	"REBLOG": "rbelgo",
	"UPVOTE": "upvt",
	"DOWNVOTE": "dwnvot",
	"UNVOTE_DOWNVOTED": "unvt donwvoed",
	"UNVOTE_UPVOTED": "unvt upvoed",
	"REPLY": "rpli",
	"EDIT": "eidt",
	"POST_1": "siwp lfet on cmentz tu c optinz",
	"POST_2": "tap on cmentz tu c sub-cmntz",
	"OPTIONS": "optinz",
	"RESTEEMED_BY": "rseteemd bi",
	"NOTHING_HERE": "nthng hir, yet...",
	"BALANCES": "blancz",
	"PROFILE_1": "{{platformname}}, traedbal $$ dat cn b trnsfred anytiem. {{platformname}} cn b covnered 2 {{platformpower}} in a prcsz cled pwoernig up.",
	"PROFILE_2": "{{platformpower}}, ifnlunec $$ dat ern mur pwer fer hldng lnog tiem and votign on postz. teh mur u holdz teh mur u cna ifnlunec otherz rwardz and ern rwardz fer accurat votign.",
	"PROFILE_3": "$$ wrth abut {{platformsunit}} of {{platformname}}.",
	"ESTIMATED_VALUE": "esitmaed vlau",
	"PROFILE_4": "teh esitmaed vlau iz bsed on a 7 dai aevrga vlau of {{platformname}}.",
	"TRANSACTION_HISTORY": "transactn hstr",
	"POSTING": "pstng",
	"PROFILE_5": "teh pstng kei iz uesd fer pstng and vtoign. it sohudl b differnt frum teh actv and ownr kyez.",
	"OWNER": "ownr",
	"PROFILE_6": "teh ownr kei iz teh msatre kei fer teh accont and iz rqeuierd tu chng teh othr kyez. teh pirvta kei or psaswrod fer teh ownr kei sohudl b kpet offlni az mcuh az pssbl.",
	"ACTIVE": "actv",
	"PROFILE_7": "teh actv kei iz uesd tu maek trnasfrz and palc odrezr in teh itneranl mrakte.",
	"MEMO": "mmeo",
	"PROFILE_8": "teh mmeo kei iz uesd tu crat and raed mmoz.",
	"BLOG": "bolg",
	"POSTS": "pstz",
	"REPLIES": "rplies",
	"WALLET": "wlet",
	"TAG": "tagg",
	"USER": "uesr",
	"CLOSE": "cols",
	"TO": "to",
	"ASSET": "asst",
	"SEND": "snd",
	"SECURITY": "sceurti",
	"AVAILABLE": "aavilbal",
	"PUBLIC_MEMO": "pbulci mmeo",
	"TO_DESC": "uesr e.g. good-karma",
	"PIN_CODE": "pin cod",
	"PIN_TEXT": "pin cod hlpz yu tu scur app and ur dtaa. <br/><br/><b>note:</b> onc enbled, yu hev max 4 tirz tu unlk, if yu frgt pin or fial, app wil rmov lgogde in uesr dtaa. yu cna r-eloign and cntn usng app.",
	"NOTIFICATIONS": "notifikationz",
	"VOTE_TEXT": "yu wil get notfikatin wehn smoeno vtoz ur cntnt! <br/> <b>nt:</b> notifikationz icnldu vtoign wiegth az wel in alrt messig. (b it upvt, dwnvot, unvt).",
	"VOTE": "vot",
	"COMMENT_TEXT": "yu wil get notfikatin wehn smoeno cmentz on ur pstz or koments!<br/> <b>nt:</b> notifikationz icnldu wehn smoeno <b>dts</b> thir cmentz az wel.",
	"COMMENT": "cmoetn",
	"FOLLOW_TEXT": "yu wil get notfikatin wehn smoeno fluw or unfolow yu!",
	"MENTIONS": "mnetinoz",
	"MENTIONS_TEXT": "yu wil get notfikatin wehn smoeno mnetinoz yu in thir pst/cmnt!",
	"CONFIGURATIONS": "konfguratonz",
	"VOTING": "vtoign",
	"VOTING_TEXT": "vot wiegth or pecrenag affectz vtoign pwer on app, so yu cna rgulat ur vtoign rweadr. <br/><br/><b>note:</b> diz wil chng vtoign weight/percentag fer dwnvting az wel and it iz evreywer on app",
	"SERVER": "srevre",
	"SERVER_TEXT": "rcmnded",
	"SAVE_CHANGES": "sav cahnzg",
	"VOTERS_INFO": "vtoezr ifno",
	"WELCOME_BACK": "wlcum bak!",
	"LOGIN_1": "sgin in wtih ur usrnam and psaswrod tu cntn.",
	"LOGIN_2": "pstng kei iz uesd fer psot, cmoetn, vot, fluw.",
	"LOGIN_3": "actv kei iz uesd fer trnasfrz and porfli pcitru updt.",
	"LOGIN_4": "uesr crdntalz ar kpet lcoail on teh dvic. uopn lgootu crdntalz ar rmoved!",
	"DONT_HAVE": "dnt hev an accont?",
	"SIGN_UP_NOW": "sgin up now",
	"CANCEL": "cnacle",
	"ADVANCED": "avdanecd",
	"ACTIVE_PRIKEY": "actv pirvta kei",
	"POSTING_PRIKEY": "pstng pirvta kei",
	"MASTER_PASS": "mastr/man psaswrod",
	"USERNAME": "usrnam",
	"CARD_VIEW": "crad veiw",
	"COMPACT_VIEW": "cmpct veiw",
	"SEARCH": "saerhc",
	"SUBMIT_A_STORY": "sbumti a stri",
	"REPLYTO": "rpli tu",
	"POST": "psot",
	"PREVIEW": "prvew",
	"DEFAULT": "dfalt 50% / 50%",
	"POWERUP": "pwer up 100%",
	"DECLINE_PAYOUT": "dcelni pyaotu",
	"SAVE_FOR_LATER": "sav fer lter",
	"POST_CONTENT": "psot cntnt",
	"COMMENT_CONTENT": "cmoetn cntnt",
	"TITLE": "ttil",
	"TAGS": "tegz",
	"NOT_MATCH": "not mtch",
	"CONFIRM_PIN": "cnfrm pin",
	"OPENING_POST": "opnng psot",
	"SET_PIN": "set pin",
	"ENTER_PIN": "entr pin",
	"ARE_YOU_SURE": "ar yu sur?",
	"BROADCAST_ERROR": "braodcst eorr, tri agn!",
	"SUCCESS": "sccsz",
	"REBLOGGED_POST": "relboged psot!",
	"LOGIN_FAIL": "lgin fialde! plz maek sur yu hev lgogde in wtih msatre psaswrod or porviedd pstng pirvta kei on lgin if yu hev cuhsde avdanecd mod.",
	"LOGIN_FAIL_A": "lgin fialde! plz maek sur yu hev lgogde in wtih msatre psaswrod or porviedd actv pirvta kei on lgin if yu hev cohsne avdanecd mod.",
	"WARNING": "wrnng",
	"VOTE_FOR_WITNESS": "vtoign fer wtnsz",
	"VOTED_FOR_WITNESS": "vted fer wtnsz",
	"FROM_NOW": "frum now",
	"SECS": "secz",
	"MINS": "minz",
	"AN_HOUR": "an hrz",
	"HOURS": "hrz",
	"A_DAY": "a dai",
	"DAYS": "dyaz",
	"A_MONTH": "a mnth",
	"MONTHS": "mnotzh",
	"A_YEAR": "a yaer",
	"YEARS": "yarz",
	"MIN_READ": "min raed",
	"DOWNVOTE_FLAG": "dwnvot or falg",
	"CAPTURE_PICTURE": "cpatru pcitur",
	"SELECT_PICTURE": "silect pcitur",
	"SET_CUSTOM_URL": "set csutmo url",
	"INSERT_PICTURE": "isnetr pcitru",
	"ERROR": "eorr",
	"UPLOAD_ERROR": "ulpoda eorr",
	"CAMERA_CANCELLED": "cmaear cnaceeld",
	"SET_URL": "set url",
	"DIRECT_LINK_PICTURE": "drietc web lnik fer teh pcitru",
	"COMMENT_SUBMITTED": "cmoetn iz sumbited!",
	"DELETE_COMMENT": "dleetnig cmentz ar irvrsbl...",
	"DELETED_COMMENT": "dleted cmoetn",
	"UPLOADING_PICTURE": "upoladng pcitru",
	"UPLOAD_COMPLETED": "ulpoda copmleed",
	"UPLOAD_FAILED": "ulpoda fialde",
	"PASSWORD_INCORRECT": "teh psaswrod or accont nam waz icnorcet",
	"INFO": "ifno",
	"QR_TEXT": "palc a qr cod insd teh sacn aera",
	"BALANCE_TEXT": "maek sur yu hev eonuhg $$ fer transactn!",
	"NONEXIST_USER": "uesr yu ar tyrign tu tarnsefr $$, dsn't exst!",
	"TRANSFER_TEXT": "ar yu sur yu wanan tu tarnsefr?",
	"CONFIRMATION": "konfrmatin",
	"TX_BROADCASTED": "transactn iz bradcastd",
	"FEED": "fed",
	"TRENDING": "terndnig",
	"HOT": "hot",
	"NEW": "new",
	"PROMOTED": "pormoetd",
	"VOTES": "vtoz",
	"PAYOUT": "pyaotu",
	"COMMENTS": "cmentz",
	"TRENDING_30": "terndnig fer 30 dyaz",
	"SORT_POST_BY": "srot pstz by:",
	"PAYOUT_CYCLE": "pyaotu ccyl",
	"POTENTIAL_PAYOUT": "poetntal pyaotu",
	"PAST_PAYOUT": "psat pyaotu",
	"AUTHOR_PAYOUT": "atuhro pyaotu",
	"CURATION_PAYOUT": "cruatoin pyaotu",
	"POST_SUBMITTED": "psot iz sumbited!",
	"POST_LATER": "psot fer lter sbmsson!",
	"SAVED": "sved",
	"CLEARED": "clared",
	"FLAGGING_TEXT": "falggnig a psot cna rmov rwardz and maek diz mtaerail lsez visible.<br><br>th falg sohudl b uesd fer teh foolwig: <ul><li>fraut or plagiarism</li><li>hat spch or itnerent troling</li><li>intentional mskategorzed cntnt or spam</l></ul>",
	"REQUEST_LIMIT_TEXT": "rqust lmit rched. cehk out othr trnd/tegz!",
	"POST_IS_UNBOOKMARK": "psot iz rmoved frum bkumakrz!",
	"POST_IS_BOOKMARK": "psot iz addd tu bkumakrz!",
	"RESET": "rset",
	"MODIFY_PICTURE": "chng porfli pcitru",
	"MODIFY_COVER_PICTURE": "chng cver pcitru",
	"ACTIVE_KEY_REQUIRED_TEXT": "plz porvdi actv pirvta kei if yu hev cohsne avdanecd lgin mod!",
	"RESET_PICTURE_TEXT": "diz wil rset uesr porfli pcitru",
	"RESET_COVER_PICTURE_TEXT": "diz wil rset uesr cver pcitru",
	"UPDATE_REQUIRES_RESTART": "srevre updt rqurz rstrt!",
	"SETTINGS_UPDATED": "stetignz ar updated!",
	"LANGUAGES": "lnagugaz",
	"LANGUAGES_TEXT": "hir yu cna chng lngag of teh app.",
	"LOGIN_TO_X": "diz opreaton rqurz uesr tu b lgogde in wtih mian psaswrod, aktve/postng kei. plz lgin and tri agn.",
	"GALLERY": "glaeir",
	"TRANSLATIONS": "translatn kontrbutrz",
	"SHARE": "shre",
	"MARKETPLACE": "mrakte palc",
	"EXCHANGE": "exchng",
	"DRAFTS": "darfzt",
	"POST_IS_UNDRAFT": "psot iz rmoved frum darfzt!",
	"POST_IS_DRAFT": "psot iz addd tu darfzt!",
	"SWIPE_LEFT": "siwp lfet tu c optinz",
	"MANAGE": "mnag",
	"IMAGE_REMOVED": "iamg iz rmoved",
	"COPY": "cpoi",
	"NO_IMAGE": "yu hev not ulpoaedd ani iamg, yet!",
	"PULL_DOWN_TO_REFRESH": "pul dwon tu rfrsh",
	"EXTERNAL_APPS": "etxeranl appz",
	"PLUGINS": "plgnz",
	"SUGGEST": "sggst",
	"COMING_SOON": "cmoign sun",
	"CHAIN": "chin",
	"CHAIN_TEXT": "hir yu cna chng blckchin or dfalt paltfrom."
}
},{}],108:[function(require,module,exports){
module.exports={
	"HOME": "Αρχική",
	"LOGIN": "Είσοδος",
	"LOGOUT": "Αποσύνδεση",
	"PROFILE": "Προφίλ",
	"FOLLOW": "Ακολούθησε",
	"BOOKMARKS": "Σελιδοδείκτες",
	"TRANSFER": "Μεταφορά",
	"MARKET": "Ανταλακτήριο",
	"SETTINGS": "Ρυθμίσεις",
	"ABOUT": "Σχετικά",
	"ABOUT_1": "όπου ο καθένας μπορεί να κερδίσει απολαβές από το περιεχόμενό του!",
	"ABOUT_2": "είναι βασισμένο στην πλατφόρμα {{platformname}}. Δημιουργία εφαρμογής από",
	"ABOUT_3": "και είναι ανοιχτός κώδικας, κατευθυνόμενος από την κοινότητα.Προσφέρει, πρόσβαση σε περιεχόμενο για ανάγνωση, σχολιασμό, ψήφιση, ανάρτηση, μεταφορά απολαβών, κτλ. δυνατότητες τις οποίες προσφέρει το {{platformname}} blockchain και το {{sitename}}.",
	"ABOUT_4": "1. Η εφαρμογή δεν έχει ποτέ πρόσβαση ούτε κρατάει τα κεφάλαια των χρηστών.",
	"ABOUT_5": "2. Η εφαρμογή προσφέρει ένα μοντέλο ασφαλείας από την πλευρά του τερματικού του χρήστη, με τα ιδιωτικά κλειδιά να \"φιλοξενούνται\" τοπικά χωρίς ποτέ να αποστέλλονται σε οποιοδήποτε διακομιστή.",
	"ABOUT_6": "3. Η εφαρμογή προσφέρει απλό και ελκυστικό περιβάλλον χρήσης και εμπειρίας.",
	"ABOUT_7": "4, Η εφαρμογή δεν θα ζητήσει ποτέ προσωπικές πληροφορίες.",
	"ABOUT_8": "Ψήφισε good-karma για witness",
	"ABOUT_9": "Επικοινωνία/Παρατηρήσεις",
	"ABOUT_10": "Περισσότερες πληροφορίες:",
	"REMOVE": "Απομάκρυνση",
	"MARKET_VIEW": "Εποπτεία Αγοράς",
	"PRICE": "Τιμή",
	"AMOUNT": "Ποσό",
	"TOTAL": "Σύνολο",
	"NOORDERS": "Δεν υπάρχουν ανοιχτές εντολές για",
	"DATE": "Ημερομηνία",
	"BUY": "Αγορά",
	"SELL": "Πώληση",
	"OPEN": "Άνοιγμα",
	"HISTORY": "Ιστορικό",
	"FOLLOW_BACK": "Ανασκόπηση",
	"FOLLOWED": "Ακολουθείς",
	"UNFOLLOW": "Μη ακολουθείς",
	"FOLLOWING": "Ακολουθείς",
	"FOLLOWERS": "Σε ακολουθούν",
	"SEARCH_FOLLOWERS": "Ψάξε ποιοι σε ακολουθούν",
	"SEARCH_FOLLOWING": "Ψάξε ποιους ακολουθείς",
	"BY": "από",
	"IN": "σε",
	"MENU": "Κατάλογος επιλογών",
	"BOOKMARK": "Σελιδοδείκτης",
	"REBLOG": "Αναδημοσίευση",
	"UPVOTE": "Θετική ψήφος",
	"DOWNVOTE": "Αρνητική ψήφος",
	"UNVOTE_DOWNVOTED": "Επανέφερε Αρνητικά-ψηφισμένο",
	"UNVOTE_UPVOTED": "Επανέφερε Θετικά-ψηφισμένο",
	"REPLY": "Απάντηση",
	"EDIT": "Επεξεργασία",
	"POST_1": "Σύρε αριστερά τα σχόλια για να δεις επιλογές",
	"POST_2": "Ακούμπα τα σχόλια για να δεις υπό-σχόλια",
	"OPTIONS": "Επιλογές",
	"RESTEEMED_BY": "Αναδημοσίευση από",
	"NOTHING_HERE": "Τίποτα εδώ, ακόμα...",
	"BALANCES": "Διαθέσιμα",
	"PROFILE_1": "{{platformname}}, διαπραγματεύσιμες μάρκες, που μπορούν να μεταφερθούν οποιαδήποτε στιγμή. {{platformname}} μπορούν να μετατραπούν σε {{platformpower}} μέσω μίας διαδικασίας που ονομάζεται powering up. ",
	"PROFILE_2": "{{platformpower}}, μάρκες επιρροής που μπορούν να αποκτήσουν περισσότερη δύναμη, κρατώντας τις μακροπρόθεσμα και ψηφίζοντας αναρτήσεις. Όσες περισσότερες έχει στην κατοχή του κάποιος, τόσο περισσότερο μπορεί να επηρεάσει τις αμοιβές άλλων άλλα και τις δικές του.",
	"PROFILE_3": "Μάρκες αξίας περίπου {{platformsunit}} του {{platformname}}.",
	"ESTIMATED_VALUE": "Αξία κατά εκτίμηση ",
	"PROFILE_4": "Η αξία κατά εκτίμηση είναι βασισμένη στον εβδομαδιαίο μέσο όρο του{{platformname}}.",
	"TRANSACTION_HISTORY": "Ιστορικό Συναλλαγών",
	"POSTING": "Ανάρτηση",
	"PROFILE_5": "Ο κωδικός δημοσίευσης χρησιμοποιείται για δημοσιεύσεις και την δυνατότητα απόδοσης ψήφου. Θα πρέπει να είναι διαφορετικός από τον \"ενεργό\" κωδικό και το κωδικό \"ιδιοκτησίας\".",
	"OWNER": "Ιδιοκτήτης",
	"PROFILE_6": "Το κλειδί ιδιοκτησίας είναι το κεντρικό κλειδί του λογαριασμού και απαιτείται για να αλλάξει όλα τα υπόλοιπα κλειδιά. Θα πρέπει να κρατάτε εκτός σύνδεσης το ιδιωτικό κλειδί ή κωδικό του κλειδιού ιδιοκτησίας όσο αυτό είναι δυνατόν.",
	"ACTIVE": "Ενεργό",
	"PROFILE_7": "Το ενεργό κλειδί χρησιμοποιείται για εμβάσματα και εντολές αγοραπωλησιών στο εσωτερικό ανταλλακτήριο.",
	"MEMO": "Κλειδι - Μηνυμάτων",
	"PROFILE_8": "Το Κλειδί Μηνυμάτων χρησιμοποιείται για δημιουργία και ανάγνωση μηνυμάτων.",
	"BLOG": "Ιστολόγιο",
	"POSTS": "Αναρτήσεις",
	"REPLIES": "Απαντήσεις",
	"WALLET": "Πορτοφόλι",
	"TAG": "Ετικέτα",
	"USER": "Χρήστης",
	"CLOSE": "Κλείσιμο",
	"TO": "Σε",
	"ASSET": "Κεφάλαιο",
	"SEND": "Αποστολή",
	"SECURITY": "Ασφάλεια",
	"AVAILABLE": "Διαθέσιμο",
	"PUBLIC_MEMO": "Δημόσιο μήνυμα",
	"TO_DESC": "Χρήστης π.χ good-karma",
	"PIN_CODE": "Κωδικός PIN",
	"PIN_TEXT": "Κωδικός PIN σε βοηθάει να ασφαλίσεις την εφαρμογή και τα δεδομένα σου. <br/><br/><b>Σημείωση:</b> Άπαξ και ενεργοποιηθεί, έχεις max 4 προσπάθειες για ξεκλείδωμα. Αν ξεχάσεις τον κωδικό PIN ή αποτύχεις, η εφαρμογή θα καταργήσει τα στοιχεία εισόδου του χρήστη.Μπορείς να ξανά συνδεθείς και να συνεχίσεις να χρησιμοποιείς την εφαρμογή.",
	"NOTIFICATIONS": "Ειδοποιήσεις",
	"VOTE_TEXT": "Θα λάβεις ειδοποίηση όταν κάποιος ψηφίσει την ανάρτηση σου. <br/> <b>Σημείωση:</b> Οι ειδοποιήσεις συμπεριλαμβάνουν την βαρύτητα της ψήφου καθώς επίσης σε έκτακτα μηνύματα. (θετική ψήφο, αρνητική ψήφο, από-ψήφιση).",
	"VOTE": "Ψήφων",
	"COMMENT_TEXT": "Θα λάβεις ειδοποίηση όταν κάποιος σχολιάσει αναρτήσεις η σχόλια σου!<br/> <b>Σημείωση:</b> Οι ειδοποιήσεις συμπεριλαμβάνονται ακόμα και όταν κάποιος <b>επεξεργαστεί</b> τα σχόλια του.",
	"COMMENT": "Σχολίων",
	"FOLLOW_TEXT": "Θα λάβεις ειδοποίηση όταν κάποιος σε ακολουθήσει ή πάψει να σε ακολουθεί.",
	"MENTIONS": "Επισημάνσεων",
	"MENTIONS_TEXT": "Θα λάβεις ειδοποίηση όταν κάποιος σε αναφέρει σε ανάρτηση/σχόλιό του.",
	"RESTEEM": "Αναδημοσιεύσεων",
	"RESTEEM_TEXT": "Θα λάβεις ειδοποίηση όταν κάποιος αναδημοσιεύσει ανάρτησή σου.",
	"CONFIGURATIONS": "Ρυθμίσεις",
	"VOTING": "Ψηφοφορία",
	"VOTING_TEXT": "\"Βάρος\" ψήφου ή ποσοστό επηρεάζει την ισχύς ψήφου στην εφαρμογή, ώστε να ρυθμίζεις τις απολαβές ψήφων <br/><br/><b>Σημείωση:</b> Αυτό θα αλλάξει το \"βάρος\"/ποσοστό ψήφου για να ψηφίσεις επίσης αρνητικά και θα ισχύει παντού στην εφαρμογή",
	"SERVER": "Διακομιστής",
	"SERVER_TEXT": "Προτεινόμενα",
	"SAVE_CHANGES": "Αποθήκευση Αλλαγών",
	"VOTERS_INFO": "Πληροφορίες ψηφοφόρου",
	"WELCOME_BACK": "Καλώς ήρθες ξανά!",
	"LOGIN_1": "Συνδέσου με το όνομα χρήστη και κωδικό για να συνεχίσεις.",
	"LOGIN_2": "Το κλειδί δημοσίευσης χρησιμοποιείται για ανάρτηση, σχολιασμό, ψήφο και την δυνατότητα να ακολουθήσεις κάποιον.",
	"LOGIN_3": "Το ενεργό κλειδί χρησιμοποιείται για μεταφορές και αλλαγή φωτογραφίας του προφίλ.",
	"LOGIN_4": "Τα στοιχεία χρήστη αποθηκεύονται στη συσκευή τοπικά. Κατά την διάρκεια αποσύνδεσης τα στοιχεία διαγράφονται.",
	"DONT_HAVE": "Δεν έχεις λογαριασμό?",
	"SIGN_UP_NOW": "Κάνε εγγραφή τώρα",
	"CANCEL": "Ακύρωση",
	"ADVANCED": "Για προχωρημένους",
	"ACTIVE_PRIKEY": "Ενεργό ιδιωτικό κλειδί",
	"POSTING_PRIKEY": "Ιδιωτικό κλειδί δημοσίευσης",
	"MASTER_PASS": "Κυρίως/Πρωτεύων κωδικός",
	"USERNAME": "Όνομα Χρηστη",
	"CARD_VIEW": "Προβολή σε Καρτέλες",
	"COMPACT_VIEW": "Συνεπτυγμένη Προβολή",
	"SEARCH": "Αναζήτηση",
	"SUBMIT_A_STORY": "Ξεκίνα ανάρτηση",
	"REPLYTO": "Απάντησε σε",
	"POST": "Ανάρτησε",
	"PREVIEW": "Προεπισκόπηση",
	"DEFAULT": "Προεπιλογή 50% / 50%",
	"POWERUP": "Αύξηση Ισχύος 100%",
	"DECLINE_PAYOUT": "Απόρριψη Απολαβών",
	"SAVE_FOR_LATER": "ΑΠΟΘΉΚΕΥΣΕ ΓΙΑ ΑΡΓΟΤΕΡΑ",
	"CLEAR": "ΚΑΘΑΡΙΣΜΑ",
	"POST_CONTENT": "Ανάρτηση περιεχομένου",
	"COMMENT_CONTENT": "Σχολίασε περιεχόμενο",
	"TITLE": "Τίτλος",
	"TAGS": "Ετικέτες",
	"NOT_MATCH": "ΔΕ ΣΥΜΠΊΠΤΕΙ",
	"CONFIRM_PIN": "Επιβεβαίωσε PIN",
	"INCORRECT": "ΛΑΝΘΑΣΜΕΝΟ",
	"OPENING_POST": "Άνοιξε Ανάρτηση",
	"SET_PIN": "Όρισε PIN",
	"ENTER_PIN": "Εισαγωγή PIN",
	"ARE_YOU_SURE": "Είσαι σίγουρος?",
	"REBLOG_TEXT": "Η αναδημοσίευση είναι μη αναστρέψιμη, θέλεις να συνεχίσεις?",
	"BROADCAST_ERROR": "Λάθος μετάδοσης, προσπάθησε ξανά!",
	"SUCCESS": "Επιτυχές",
	"REBLOGGED_POST": "Αναδημοσιευμένη ανάρτηση!",
	"LOGIN_FAIL": "Η σύνδεση απέτυχε! Παρακαλώ εξακριβώστε αν συνδεθήκατε με τον κυρίως κωδικό ή δώσατε το ιδιωτικό κλειδί δημοσίευσης όταν επιλέξατε σύνδεση για προχωρημένους.",
	"LOGIN_FAIL_A": "Η σύνδεση απέτυχε! Παρακαλώ εξακριβώστε αν συνδεθήκατε με τον κυρίως κωδικό ή δώσατε το ενεργό κλειδί δημοσίευσης όταν επιλέξατε σύνδεση για προχωρημένους.",
	"WARNING": "Προειδοποίηση",
	"VOTE_FOR_WITNESS": "Ψήφισε για witness",
	"VOTED_FOR_WITNESS": "Ψηφίστηκε για witness",
	"AGO": "πριν",
	"FROM_NOW": "από τώρα",
	"SECS": "δευτ.",
	"A_MIN": "το λεπτό",
	"MINS": "λεπτά",
	"AN_HOUR": "μία ώρα",
	"HOURS": "ώρες",
	"A_DAY": "μία ημέρα",
	"DAYS": "μέρες",
	"A_MONTH": "ένα μήνα",
	"MONTHS": "μήνες",
	"A_YEAR": "ένα χρόνο",
	"YEARS": "χρόνια",
	"MIN_READ": "λεπτά ανάγνωσης",
	"DOWNVOTE_FLAG": "Ψήφισε αρνητικά ή κάνε Flag",
	"CAPTURE_PICTURE": "Αποθανάτισε Φωτογραφία",
	"SELECT_PICTURE": "Επέλεξε Φωτογραφία",
	"SET_CUSTOM_URL": "Καθόρισε προσαρμοσμένο URL",
	"INSERT_PICTURE": "Εισήγαγε Φωτογραφία",
	"ERROR": "Λάθος",
	"UPLOAD_ERROR": "Λάθος αποστολής",
	"CAMERA_CANCELLED": "Κάμερα Ακυρώθηκε",
	"SET_URL": "Καθόρισε URL",
	"DIRECT_LINK_PICTURE": "Άμεσος σύνδεσμος για την φωτογραφία",
	"COMMENT_SUBMITTED": "Το σχόλιο υποβλήθηκε!",
	"DELETE_COMMENT": "Η διαγραφή σχολίων είναι μη αναστρέψιμη...",
	"DELETED_COMMENT": "Διαγραμμένο σχόλιο",
	"UPLOADING_PICTURE": "Αποστολή Φωτογραφίας",
	"UPLOAD_COMPLETED": "Αποστολή Ολοκληρώθηκε",
	"UPLOAD_FAILED": "Αποστολή Απέτυχε",
	"PASSWORD_INCORRECT": "Ο κωδικός ή το όνομα λογαριασμού ήταν λανθασμένο",
	"INFO": "Πληροφορίες",
	"QR_TEXT": "Τοποθέτησε ένα QR κωδικό στην τοποθεσία σάρωσης",
	"BALANCE_TEXT": "Εξακρίβωσε ότι έχεις διαθέσιμα κεφάλαια για συναλλαγή!",
	"NONEXIST_USER": "Ο χρήστης που προσπαθείς να μεταφέρεις κεφάλαια, δεν υπάρχει!",
	"TRANSFER_TEXT": "Είστε σίγουρος ότι θέλετε να κάνετε μεταφορά?",
	"CONFIRMATION": "Επιβεβαίωση",
	"TX_BROADCASTED": "Η συναλλαγή μεταδόθηκε",
	"FEED": "Αναρτήσεις από χρήστες που ακολουθείς",
	"TRENDING": "Δημοφιλέστερες αναρτήσεις",
	"HOT": "Αναρτήσεις με υψηλή δραστηριότητα",
	"NEW": "Πρόσφατες αναρτήσεις",
	"PROMOTED": "Προωθούμενα",
	"VOTES": "Βάση ψήφων",
	"PAYOUT": "Βάση αποδοχών",
	"COMMENTS": "Βάση σχολίων",
	"TRENDING_30": "Δημοφιλέστερες αναρτήσεις 30 ημερών",
	"SORT_POST_BY": "Ταξινόμηση βάση:",
	"PAYOUT_CYCLE": "Κύκλος πληρωμής",
	"POTENTIAL_PAYOUT": "Πιθανές Αποδοχές",
	"PAST_PAYOUT": "Παλαιότερες Αποδοχές",
	"AUTHOR_PAYOUT": "Αποδοχές Συγγραφέα",
	"CURATION_PAYOUT": "Αποδοχές από Curation",
	"POST_SUBMITTED": "Η ανάρτηση υποβλήθηκε!",
	"POST_LATER": "Ανάρτηση για μελλοντική κοινοποίηση!",
	"SAVED": "Αποθηκεύτηκε",
	"CLEARED": "Σβήστηκε",
	"FLAGGING_TEXT": "Καταψηφίζοντας μια ανάρτηση μπορεί να της αφαιρέσει αμοιβές και να την κάνει λιγότερο ορατή.<br><br> Η καταψήφιση θα έπρεπε να χρησιμοποιείται για: <ul><li>Απάτη ή κλοπή πνευματικών δικαιώματων</li><li>Υβριστική γλώσσα και Trolling</li><li>Εσκεμμένη τοποθέτηση σε λάθος κατηγορία περιεχομένου ή Spam</li></ul>",
	"REQUEST_LIMIT_TEXT": "Το αίτημα έφτασε στο όριο του. Ελέγξτε άλλες ετικέτες/κατηγορίες",
	"POST_IS_UNBOOKMARK": "Η ανάρτηση απομακρύνθηκε από τους σελιδοδείκτες!",
	"POST_IS_BOOKMARK": "Η ανάρτηση προστέθηκε στους σελιδοδείκτες!",
	"RESET": "Επαναφορά αρχικών ρυθμίσεων",
	"MODIFY_PICTURE": "Επεξεργασία Φωτογραφίας Προφίλ",
	"MODIFY_COVER_PICTURE": "Επεξεργασία φωτογραφίας προφίλ",
	"ACTIVE_KEY_REQUIRED_TEXT": "Παρακαλώ δώσε Ενεργό/Active ιδιωτικό κλειδί εάν επέλεξες σύνδεση για προχωρημένους!",
	"RESET_PICTURE_TEXT": "Αυτό θα κάνει επαναφορά της φωτογραφίας του προφίλ",
	"RESET_COVER_PICTURE_TEXT": "Αυτό θα επαναφέρει την εικόνα χρήστη",
	"UPDATE_REQUIRES_RESTART": "Η αναβάθμιση του διακομιστή απαιτεί επανεκκίνηση!",
	"SETTINGS_UPDATED": "Οι ρυθμίσεις ενεργοποιήθηκαν!",
	"LANGUAGES": "Γλώσσες",
	"LANGUAGES_TEXT": "Εδώ μπορείς να αλλάξεις την γλώσσα της εφαρμογής.",
	"LOGIN_TO_X": "Αυτή η λειτουργία απαιτεί ο χρήστης να είναι συνδεδεμένος με τον κυριώς κωδικό active/posting key.Παρακαλώ συνδέσου και προσπάθησε ξανά.",
	"GALLERY": "Έκθεση",
	"TRANSLATIONS": "Συντελεστές μετάφρασης",
	"SHARE": "Μοιράσου\n",
	"MARKETPLACE": "Αγορά",
	"EXCHANGE": "Ανταλλακτήριο",
	"DRAFTS": "Πρόχειρα",
	"POST_IS_UNDRAFT": "Η δημοσίευση αφαιρέθηκε από το πρόχειρο",
	"POST_IS_DRAFT": "Η δημοσίευση προστέθηκε στο πρόχειρο",
	"SWIPE_LEFT": "Σύρε αριστέρα για να δεις τις επιλογές",
	"MANAGE": "Διαχείρηση",
	"IMAGE_REMOVED": "Η εικόνα αφαιρέθηκε",
	"COPY": "Αντιγραφή",
	"NO_IMAGE": "Δεν έχεις ανεβάσει εικόνα ακόμα",
	"PULL_DOWN_TO_REFRESH": "Σύρτε προς τα κάτω για ανανέωση",
	"EXTERNAL_APPS": "Εξωτερικές εφαρμογές",
	"PLUGINS": "Πρόσθετα",
	"SUGGEST": "Πρότεινε",
	"COMING_SOON": "Έρχεται σύντομα",
	"CHAIN": "Αλυσίδα",
	"CHAIN_TEXT": "Εδώ μπορείς να αλλάξεις την αλυσίδα των μπλοκ ή την προεπιλεγμένη πλατφόρμα.",
	"CURRENCY": "Νόμισμα",
	"CURRENCY_TEXT": "Εδώ μπορείτε να αλλάξετε το προεπιλεγμένο σας νόμισμα. Θα δείτε την ανταμοιβή της ανάρτησης/σχολίου σας σε αυτό το νόμισμα.",
	"ABOUT_11": "<br><b>Λίστα με τα χαρακτηριστικά</b> <br>-Πρόσβαση σε μοναδικά άρθρα σε οποιοδήποτε θέμα σας ενδιαφέρει. <br> -\"Πλησίασε\" συγγραφείς σχολιάζοντας και συζητώντας θέματα. <br>-Ψήφισε αναρτήσεις ώστε να ανταμειφθούν συγγραφείς και κέρδισε ανταμοιβές επιμέλειας. <br>-Δημοσίευσε τα άρθρα σου, ανάρτησε ποστ και φιλοξένησε τα δωρεάν καθώς επίσης λάβε ανταμοιβές συμμετέχοντας και αποκτώντας οπαδούς. <br>-Γράψε άρθρα προχωρώντας και αποθήκευσε πολλαπλά πρόχειρα ποστ, έτοιμα για μελλοντική δημοσίευση. <br>-Βάλε σελιδοδείκτες σε αγαπημένα άρθρα για να τα διαβάσεις αργότερα. <br>-Αντάλλαξε ή εξαργύρωσε τα κέρδη σου. <br>-Στείλε χρήματα σε οποιοδήποτε συγγραφέα, χρήστη, φίλο, αναγνώστη κλπ <br>-Ακολούθησε ενδιαφέροντες συγγραφείς, bloggers. <br> -Βρες τους αναγνώστες και συγγραφείς που σε ακολουθούν. <br>-Λάβετε ειδοποιήσεις για να μείνετε σε επαφή με τους αναγνώστες σας και τις συζητήσεις που συμμετέχετε. <br>-Ψάξε ενδιαφέρουσες ετικέτες/κατηγορίες άρθρων, συντακτών. <br> -Εξατομίκευσε το προφίλ σου. <br>-Πολλά περισσότερα χαρακτηριστικά πρόκειται να ακολουθήσουν. <br><br><b>Ασφάλεια</b> <br>1. Η εφαρμογή δεν έχει ποτέ πρόσβαση ή οποιαδήποτε ανάμιξη στα κεφάλαια του χρήστη. <br>2. Η εφαρμογή προσφέρει ένα μοντέλο ασφαλείας από την πλευρά του προγράμματος-πελάτη, με τα ιδιωτικά κλειδιά να φιλοξενούνται τοπικά χωρίς να αποστέλλονται ποτέ σε οποιοδήποτε διακομιστή, εσύ είσαι υπεύθυνος για τη δημιουργία αντιγράφων ασφαλείας των κωδικών πρόσβασης σου. <br>3. Η εφαρμογή προσφέρει απλό και ελκυστικό περιβάλλον χρήσης και εμπειρίας <br>4. Η εφαρμογή προσφέρει επιπλέον στρώμα της ασφάλειας με κωδικό pin <br><br>εκτίμηση υποστηρίζει πλατφόρμες Steem και Golos. <br>",
	"FOUNDER": "Ιδρυτής και επικεφαλής προγραμματιστής",
	"ADD_ACCOUNT": "Προσθήκη λογαριασμού",
	"PLATFORM": "Πλατφόρμα"
}
},{}],109:[function(require,module,exports){
module.exports={
	"HOME": "Home",
	"LOGIN": "Login",
	"LOGOUT": "Logout",
	"PROFILE": "Profile",
	"FOLLOW": "Follow",
	"BOOKMARKS": "Bookmarks",
	"TRANSFER": "Transfer",
	"MARKET": "Market",
	"SETTINGS": "Settings",
	"ABOUT": "About",
	"ABOUT_1": "where anyone can earn rewards for their content!",
	"ABOUT_2": "is social application where you get paid for blogging, commenting and curating.",
	"ABOUT_3": "and it is open-source, community driven mobile project. It offers content access for reading, commenting, voting, posting, transfer earnings, etc. features offered by {{platformname}} blockchain and {{sitename}}.",
	"ABOUT_4": "1. App never access or hold onto user funds.",
	"ABOUT_5": "2. App offers a client-side security model, with private keys hosted locally and never sent to any servers.",
	"ABOUT_6": "3. App offers simple, attractive user interfaces and experiences.",
	"ABOUT_7": "4. App never require users to input any personal information.",
	"ABOUT_8": "Vote good-karma as witness",
	"ABOUT_9": "Contact/Feedback:",
	"ABOUT_10": "More info:",
	"REMOVE": "Remove",
	"MARKET_VIEW": "Market View",
	"PRICE": "Price",
	"AMOUNT": "Amount",
	"TOTAL": "Total",
	"NOORDERS": "No open orders for",
	"DATE": "Date",
	"BUY": "Buy",
	"SELL": "Sell",
	"OPEN": "Open",
	"HISTORY": "History",
	"FOLLOW_BACK": "Follow back",
	"FOLLOWED": "Followed",
	"UNFOLLOW": "Unfollow",
	"FOLLOWING": "Following",
	"FOLLOWERS": "Followers",
	"SEARCH_FOLLOWERS": "Search followers",
	"SEARCH_FOLLOWING": "Search following",
	"BY": "by",
	"IN": "in",
	"MENU": "Menu",
	"BOOKMARK": "Bookmark",
	"REBLOG": "Reblog",
	"UPVOTE": "Upvote",
	"DOWNVOTE": "Downvote",
	"UNVOTE_DOWNVOTED": "Unvote Downvoted",
	"UNVOTE_UPVOTED": "Unvote upvoted",
	"REPLY": "Reply",
	"EDIT": "Edit",
	"POST_1": "Swipe left on comments to see options",
	"POST_2": "Tap on comments to see sub-comments",
	"OPTIONS": "Options",
	"RESTEEMED_BY": "Reblogged by",
	"NOTHING_HERE": "Nothing here, yet...",
	"BALANCES": "Balances",
	"PROFILE_1": "{{platformname}}, tradeable tokens that may be transferred at anytime. {{platformname}} can be converted to {{platformpower}} in a process called powering up.",
	"PROFILE_2": "{{platformpower}}, influence tokens that earn more power for holding long term and voting on posts. The more one holds the more one can influence other’s rewards and earn rewards for accurate voting.",
	"PROFILE_3": "Tokens worth about {{platformsunit}} of {{platformname}}.",
	"ESTIMATED_VALUE": "Estimated Value",
	"PROFILE_4": "The estimated value is based on a 7 day average value of {{platformname}}.",
	"TRANSACTION_HISTORY": "Transaction History",
	"POSTING": "Posting",
	"PROFILE_5": "The posting key is used for posting and voting. It should be different from the active and owner keys.",
	"OWNER": "Owner",
	"PROFILE_6": "The owner key is the master key for the account and is required to change the other keys. The private key or password for the owner key should be kept offline as much as possible.",
	"ACTIVE": "Active",
	"PROFILE_7": "The active key is used to make transfers and place orders in the internal market.",
	"MEMO": "Memo",
	"PROFILE_8": "The memo key is used to create and read memos.",
	"BLOG": "Blog",
	"POSTS": "Posts",
	"REPLIES": "Replies",
	"WALLET": "Wallet",
	"TAG": "Tag",
	"USER": "User",
	"CLOSE": "Close",
	"TO": "To",
	"ASSET": "Asset",
	"SEND": "Send",
	"SECURITY": "Security",
	"AVAILABLE": "Available",
	"PUBLIC_MEMO": "Public Memo",
	"TO_DESC": "User e.g. good-karma",
	"PIN_CODE": "Pin Code",
	"PIN_TEXT": "PIN code helps you to secure app and your data. <br/><br/><b>Note:</b> Once enabled, you have max 4 tries to unlock, if you forgot pin or fail, app will remove logged in user data. You can re-login and continue using app.",
	"NOTIFICATIONS": "Notifications",
	"VOTE_TEXT": "You will get notification when someone votes your content! <br/> <b>Note:</b> Notifications include voting weight as well in alert message. (be it up-vote, down-vote, un-vote).",
	"VOTE": "Vote",
	"COMMENT_TEXT": "You will get notification when someone comments on your posts or comments!<br/> <b>Note:</b> Notifications include when someone <b>edits</b> their comments as well.",
	"COMMENT": "Comment",
	"FOLLOW_TEXT": "You will get notification when someone Follow or Unfollow you!",
	"MENTIONS": "Mentions",
	"MENTIONS_TEXT": "You will get notification when someone mentions you in their post/comment!",
	"RESTEEM": "Reblog",
	"RESTEEM_TEXT": "You will get notification when someone reblogs your post!",
	"CONFIGURATIONS": "Configurations",
	"VOTING": "Voting",
	"VOTING_TEXT": "Vote weight or percentage affects voting power on app, so you can regulate your voting reward. <br/><br/><b>Note:</b> This will change voting weight/percentage for downvoting as well and it is everywhere on app",
	"SERVER": "Server",
	"SERVER_TEXT": "Recommended",
	"SAVE_CHANGES": "Save Changes",
	"VOTERS_INFO": "Voters info",
	"WELCOME_BACK": "Welcome back!",
	"LOGIN_1": "Sign in with your username and password to continue.",
	"LOGIN_2": "Posting key is used for post, comment, vote, follow.",
	"LOGIN_3": "Active key is used for transfers and profile picture update.",
	"LOGIN_4": "User credentials are kept locally on the device. Upon Logout credentials are removed!",
	"DONT_HAVE": "Don't have an account?",
	"SIGN_UP_NOW": "Sign up now",
	"CANCEL": "Cancel",
	"ADVANCED": "Advanced",
	"ACTIVE_PRIKEY": "Active private key",
	"POSTING_PRIKEY": "Posting private key",
	"MASTER_PASS": "Master/main password",
	"USERNAME": "Username",
	"CARD_VIEW": "Card view",
	"COMPACT_VIEW": "Compact view",
	"SEARCH": "Search",
	"SUBMIT_A_STORY": "Submit a story",
	"REPLYTO": "Reply to",
	"POST": "Post",
	"PREVIEW": "Preview",
	"DEFAULT": "Default 50% / 50%",
	"POWERUP": "Power Up 100%",
	"DECLINE_PAYOUT": "Decline Payout",
	"SAVE_FOR_LATER": "SAVE FOR LATER",
	"CLEAR": "CLEAR",
	"POST_CONTENT": "Post content",
	"COMMENT_CONTENT": "Comment content",
	"TITLE": "Title",
	"TAGS": "Tags",
	"NOT_MATCH": "NOT MATCH",
	"CONFIRM_PIN": "Confirm PIN",
	"INCORRECT": "INCORRECT",
	"OPENING_POST": "opening post",
	"SET_PIN": "Set PIN",
	"ENTER_PIN": "Enter PIN",
	"ARE_YOU_SURE": "Are you sure?",
	"REBLOG_TEXT": "Reblog is irreversible, do you want to continue?",
	"BROADCAST_ERROR": "Broadcast error, try again!",
	"SUCCESS": "Success",
	"REBLOGGED_POST": "Reblogged post!",
	"LOGIN_FAIL": "Login failed! Please make sure you have logged in with master password or provided Posting private key on Login if you have choosed Advanced mode.",
	"LOGIN_FAIL_A": "Login failed! Please make sure you have logged in with master password or provided Active private key on Login if you have chosen Advanced mode.",
	"WARNING": "Warning",
	"VOTE_FOR_WITNESS": "Voting for witness",
	"VOTED_FOR_WITNESS": "Voted for witness",
	"AGO": "ago",
	"FROM_NOW": "from now",
	"SECS": "secs",
	"A_MIN": "a min",
	"MINS": "mins",
	"AN_HOUR": "an hr",
	"HOURS": "hrs",
	"A_DAY": "a day",
	"DAYS": "days",
	"A_MONTH": "a month",
	"MONTHS": "months",
	"A_YEAR": "a year",
	"YEARS": "years",
	"MIN_READ": "min read",
	"DOWNVOTE_FLAG": "Downvote or Flag",
	"CAPTURE_PICTURE": "Capture Picture",
	"SELECT_PICTURE": "Select Picture",
	"SET_CUSTOM_URL": "Set Custom URL",
	"INSERT_PICTURE": "Insert Picture",
	"ERROR": "Error",
	"UPLOAD_ERROR": "Upload Error",
	"CAMERA_CANCELLED": "Camera Cancelled",
	"SET_URL": "Set URL",
	"DIRECT_LINK_PICTURE": "Direct web link for the picture",
	"COMMENT_SUBMITTED": "Comment is submitted!",
	"DELETE_COMMENT": "Deleting comments are irreversible...",
	"DELETED_COMMENT": "Deleted comment",
	"UPLOADING_PICTURE": "Uploading Picture",
	"UPLOAD_COMPLETED": "Upload Completed",
	"UPLOAD_FAILED": "Upload Failed",
	"PASSWORD_INCORRECT": "The password or account name was incorrect",
	"INFO": "Info",
	"QR_TEXT": "Place a QR code inside the scan area",
	"BALANCE_TEXT": "Make sure you have enough balance for transaction!",
	"NONEXIST_USER": "User you are trying to transfer fund, doesn't exist!",
	"TRANSFER_TEXT": "Are you sure you want to transfer?",
	"CONFIRMATION": "Confirmation",
	"TX_BROADCASTED": "Transaction is broadcasted",
	"FEED": "Feed",
	"TRENDING": "Trending",
	"HOT": "Hot",
	"NEW": "New",
	"PROMOTED": "Promoted",
	"VOTES": "Votes",
	"PAYOUT": "Payout",
	"COMMENTS": "Comments",
	"TRENDING_30": "Trending for 30 days",
	"SORT_POST_BY": "Sort Posts By:",
	"PAYOUT_CYCLE": "Payout Cycle",
	"POTENTIAL_PAYOUT": "Potential Payout",
	"PAST_PAYOUT": "Past Payout",
	"AUTHOR_PAYOUT": "Author Payout",
	"CURATION_PAYOUT": "Curation Payout",
	"POST_SUBMITTED": "Post is submitted!",
	"POST_LATER": "Post for later submission!",
	"SAVED": "Saved",
	"CLEARED": "Cleared",
	"FLAGGING_TEXT": "Flagging a post can remove rewards and make this material less visible.<br><br>The flag should be used for the following: <ul><li>Fraud or Plagiarism</li><li>Hate Speech or Internet Trolling</li><li>Intentional miscategorized content or Spam</li></ul>",
	"REQUEST_LIMIT_TEXT": "Request limit reached. Check out other trend/tags!",
	"POST_IS_UNBOOKMARK": "Post is removed from bookmarks!",
	"POST_IS_BOOKMARK": "Post is added to bookmarks!",
	"RESET": "Reset",
	"MODIFY_PICTURE": "Modify Profile Picture",
	"MODIFY_COVER_PICTURE": "Modify Cover Picture",
	"ACTIVE_KEY_REQUIRED_TEXT": "Please provide Active private key if you have chosen Advanced login mode!",
	"RESET_PICTURE_TEXT": "This will reset user profile picture",
	"RESET_COVER_PICTURE_TEXT": "This will reset user cover picture",
	"UPDATE_REQUIRES_RESTART": "Server update requires Restart!",
	"SETTINGS_UPDATED": "Settings are updated!",
	"LANGUAGES": "Languages",
	"LANGUAGES_TEXT": "Here you can change language of the app.",
	"LOGIN_TO_X": "This operation requires user to be logged in with main password, active/posting key. Please login and try again.",
	"GALLERY": "Gallery",
	"TRANSLATIONS": "Translation contributors",
	"SHARE": "Share",
	"MARKETPLACE": "Market Place",
	"EXCHANGE": "Exchange",
	"DRAFTS": "Drafts",
	"POST_IS_UNDRAFT": "Post is removed from drafts!",
	"POST_IS_DRAFT": "Post is added to drafts!",
	"SWIPE_LEFT": "Swipe left to see options",
	"MANAGE": "Manage",
	"IMAGE_REMOVED": "Image is removed",
	"COPY": "Copy",
	"NO_IMAGE": "You have not uploaded any image, yet!",
	"PULL_DOWN_TO_REFRESH": "Pull down to refresh",
	"EXTERNAL_APPS": "External Apps",
	"PLUGINS": "Plugins",
	"SUGGEST": "Suggest",
	"COMING_SOON": "Coming soon",
	"CHAIN": "Chain",
	"CHAIN_TEXT": "Here you can change blockchain or default platform.",
	"CURRENCY": "Currency",
	"CURRENCY_TEXT": "Here you can change your default currency. You will see post/comment reward value in this currency.",
	"ABOUT_11": "<br><b>Feature list</b><br>- Access unique articles in any subject you are interested reading.<br>- Engage with authors by commenting, discussing topics.<br>- Voting for posts to reward author as well as earn curation reward.<br>- Publish your articles, blog posts and host them for free and earn rewards by engaging and gain followers.<br>- Write articles on go, save multiple drafts of the post for later publication.<br>- Bookmark favorite articles to read later.<br>- Exchange or cash out your earnings.<br>- Send your funds to any authors or users, friends, followers, etc.<br>- Follow interesting authors, bloggers.<br>- Search your followers and authors you are following.<br>- Get notifications to stay in touch with your followers and discussions you are involved in.<br>- Search for interesting tags/categories of articles, authors.<br>- Personalize your profile.<br>- Many more features to come.<br><br><b>Security</b><br>1. App never access or hold onto user funds.<br>2. App offer a client-side security model, with private keys hosted locally and never sent to any servers, you are responsible to backing up your passwords.<br>3. App offers simple, attractive user interfaces and experiences<br>4. App offers extra layer of security with pin-code<br><br>eSteem supports Steem and Golos platforms.<br>",
	"FOUNDER": "Founder and Lead developer",
	"ADD_ACCOUNT": "Add account",
	"PLATFORM": "Platform",
	"ESCROW": "Escrow",
	"ESCROW_AGENT": "Escrow agent",
	"RATIFICATION_DEADLINE": "Ratification deadline",
	"ESCROW_EXPIRATION": "Escrow expiration",
	"ESCROW_FEE": "Escrow fee",
	"ESCROW_TERMS": "Escrow terms",
	"NIGHT_MODE": "Night mode",
	"DAY_MODE": "Day mode",
	"VIEW_CONTEXT": "View the full context",
	"USER_NOTFOUND": "User Not Found",
	"APPROVE": "Approve",
	"DISPUTE": "Dispute",
	"RELEASE": "Release",
	"FROM": "From",
	"ID": "id",
	"SUBMIT": "Submit",
	"RECEIVER": "Receiver",
	"LOCATION": "Location",
	"WEBSITE": "Website",
	"DISPLAY_NAME": "Display name"
}
},{}],110:[function(require,module,exports){
module.exports={
	"HOME": "Hogar",
	"LOGIN": "Iniciar Sesión",
	"LOGOUT": "Cerrar Sesión",
	"PROFILE": "Perfil",
	"FOLLOW": "Seguir",
	"BOOKMARKS": "Marcadores",
	"TRANSFER": "Transferir",
	"MARKET": "Mercado",
	"SETTINGS": "Ajustes",
	"ABOUT": "Acerca de",
	"ABOUT_1": "donde todo el mundo puede obtener ganancias por su contenido",
	"ABOUT_2": "provisto por la plataforma {{platformname}}. App creada por",
	"ABOUT_3": "es un proyecto de móvil impulsado por la comunidad, de código abierto. Ofrece acceso al contenido para su lectura, comentarios, votos, publicaciones, transferencia de ganancias, etc; características ofrecidas por la cadena de bloques {{platformname}} y {{sitename}}.",
	"ABOUT_4": "1. La App nunca accede o retiene fondos de los usuarios.",
	"ABOUT_5": "2. La App ofrece un modelo de seguridad del cliente con contraseñas privadas almacenadas localmente y que no son nunca enviadas a ningún servidor.",
	"ABOUT_6": "3. La App ofrece una experiencia y una interfaz simple y atractica.",
	"ABOUT_7": "4. La App nunca pide que los usuarios introduzcan ninguna información personal.",
	"ABOUT_8": "Vota a good-karma como testigo",
	"ABOUT_9": "Contacto/Sugerencias",
	"ABOUT_10": "Más información",
	"REMOVE": "Eliminar",
	"MARKET_VIEW": "Vista de Mercado",
	"PRICE": "Precio",
	"AMOUNT": "Cantidad",
	"TOTAL": "Total",
	"NOORDERS": "Sin órdenes abiertas para",
	"DATE": "Fecha",
	"BUY": "Comprar",
	"SELL": "Vender",
	"OPEN": "Abrir",
	"HISTORY": "Historial",
	"FOLLOW_BACK": "Devolver Seguimiento",
	"FOLLOWED": "Seguido",
	"UNFOLLOW": "Dejar de Seguir",
	"FOLLOWING": "Siguiendo",
	"FOLLOWERS": "Seguidores",
	"SEARCH_FOLLOWERS": "Buscar seguidores",
	"SEARCH_FOLLOWING": "Buscar seguidos",
	"BY": "por",
	"IN": "en",
	"MENU": "Menú",
	"BOOKMARK": "Marcador",
	"REBLOG": "Rebloguear",
	"UPVOTE": "Voto Positivo",
	"DOWNVOTE": "Voto Negativo",
	"UNVOTE_DOWNVOTED": "Deshacer Voto Negativo",
	"UNVOTE_UPVOTED": "Deshacer Voto Positivo",
	"REPLY": "Responder",
	"EDIT": "Editar",
	"POST_1": "Desliza a la izquierda en los comentarios para ver las opciones",
	"POST_2": "Pulsa en los comentarios para ver los subcomentarios",
	"OPTIONS": "Opciones",
	"RESTEEMED_BY": "Resteemed por",
	"NOTHING_HERE": "Nada por aquí aún...",
	"BALANCES": "Saldos",
	"PROFILE_1": "{{platformname}}, fichas comerciables que pueden ser transferidas en cualquier momento. {{platformname}} pueden ser convertidas a {{platformpower}} en un proceso llamado power up.",
	"PROFILE_2": "{{platformpower}}, fichas de influencia que consiguen más poder por mantenerlas a largo plazo y votar en los posts. Cuantas más tengas más influencia tendrás en las recompensas que le das al resto de usuarios y más recompensas obtendrás por tus votos.",
	"PROFILE_3": "Valor de las fichas {{platformsunit}} de {{platformname}}.",
	"ESTIMATED_VALUE": "Valor Estimado",
	"PROFILE_4": "El valor estimado se basa en un valor promedio de 7 días de {{platformname}}.",
	"TRANSACTION_HISTORY": "Historial de Transacciones",
	"POSTING": "Publicación",
	"PROFILE_5": "La clave de publicación es utilizada para publicar y votar. Tiene que ser diferente a la clave activa y a la clave de propietario.",
	"OWNER": "Propietario",
	"PROFILE_6": "La clave de propietario es la clave maestra de la cuenta y se requiere para cambiar las otras claves. La clave o contraseña privada de la clave de propietario debería ser mantenida \"offline\" tanto como sea posible.",
	"ACTIVE": "Activa",
	"PROFILE_7": "La clave activa se utiliza para hacer transferencias y hacer pedidos en el mercado interno.",
	"MEMO": "Memorándum",
	"PROFILE_8": "La clave de memorándums se utiliza para crear y leer memorándums.",
	"BLOG": "Escribe",
	"POSTS": "Publicaciones",
	"REPLIES": "Respuestas",
	"WALLET": "Monedero",
	"TAG": "Etiqueta",
	"USER": "Usuario",
	"CLOSE": "Cerrar",
	"TO": "A",
	"ASSET": "Posesión de Capital",
	"SEND": "Enviar",
	"SECURITY": "Seguridad",
	"AVAILABLE": "Disponible",
	"PUBLIC_MEMO": "Memorándum Público",
	"TO_DESC": "Usuario ej. good-karma",
	"PIN_CODE": "Código Pin",
	"PIN_TEXT": "El código PIN te ayuda a dar seguridad a la app y a tus datos.\n<br/><br/><b>Nota:</b> Una vez activado, tienes un máximo de 4 intentos para desbloquearlo; si te olvidas de tu pin o fallas, la app eliminará los registros en los datos de usuario. Puedes volver a iniciar sesión y continuar usando la app.",
	"NOTIFICATIONS": "Notificaciones",
	"VOTE_TEXT": "Recibirás una notificación cuando alguien vote tu contenido! <br/> <b>Nota:</b> Las notificaciones incluyen también el peso de la votación en el mensaje de alerta. (ya sea por votación positiva, votación negativa, deshacer votación).",
	"VOTE": "Votar",
	"COMMENT_TEXT": "Recibirás una notificación cuando alguien comente en tus publicaciones o comentarios!<br/> <b>Note:</b> Las notificaciones incluyen cuando alguien <b>edita</b> sus comentarios también.",
	"COMMENT": "Comentar",
	"FOLLOW_TEXT": "Recibirás una notificación cuando alguien te siga o te deje de seguir!",
	"MENTIONS": "Menciones",
	"MENTIONS_TEXT": "Recibirás una notificación cuando alguien te mencione en su publicación/comentario!",
	"RESTEEM": "Rebloguear",
	"RESTEEM_TEXT": "Recibirás una notificación cuando alguien haga reblog a tu publicación!",
	"CONFIGURATIONS": "Configuraciones",
	"VOTING": "Voto",
	"VOTING_TEXT": "El peso o porcentaje del voto afecta al poder de votación en la app, de tal manera que puedes regular tu recompensa de votación. <br/><br/><b>Nota:</b> Esto cambiará también el peso/porcentaje del voto a la hora de hacer un voto negativo",
	"SERVER": "Servidor",
	"SERVER_TEXT": "Recomendado",
	"SAVE_CHANGES": "Guardar Cambios",
	"VOTERS_INFO": "Info de votantes",
	"WELCOME_BACK": "Bienvenido!",
	"LOGIN_1": "Regístrate con tu nombre de usuario y contraseña para continuar.",
	"LOGIN_2": "La clave de publicación se usa para publicar, comentar, votar, seguir.",
	"LOGIN_3": "La clave activa se usa para las transferencias y la actualización de la foto de perfil.",
	"LOGIN_4": "Las credenciales del usuario se guardan localmente en el dispositivo. Al cerrar la sesión las credenciales son eliminadas!",
	"DONT_HAVE": "No tienes una cuenta?",
	"SIGN_UP_NOW": "Regístrate ahora",
	"CANCEL": "Cancelar",
	"ADVANCED": "Avanzado",
	"ACTIVE_PRIKEY": "Clave activa privada",
	"POSTING_PRIKEY": "Clave de publicación privada",
	"MASTER_PASS": "Contraseña maestra/principal",
	"USERNAME": "Nombre de Usuario",
	"CARD_VIEW": "Vista de casillas",
	"COMPACT_VIEW": "Vista compacta",
	"SEARCH": "Buscar",
	"SUBMIT_A_STORY": "Publicar un artículo",
	"REPLYTO": "Responder a",
	"POST": "Publicar",
	"PREVIEW": "Previsualización",
	"DEFAULT": "Por defecto 50% / 50%",
	"POWERUP": "Potenciación 100%",
	"DECLINE_PAYOUT": "Rechazar Pago",
	"SAVE_FOR_LATER": "GUARDAR PARA MÁS TARDE",
	"CLEAR": "BORRAR",
	"POST_CONTENT": "Publicar contenido",
	"COMMENT_CONTENT": "Comentar contenido",
	"TITLE": "Título",
	"TAGS": "Etiquetas",
	"NOT_MATCH": "NO COINCIDE",
	"CONFIRM_PIN": "Confirmar PIN",
	"INCORRECT": "INCORRECTO",
	"OPENING_POST": "Post inicial",
	"SET_PIN": "Establecer PIN",
	"ENTER_PIN": "Introducir PIN",
	"ARE_YOU_SURE": "Estás seguro?",
	"REBLOG_TEXT": "Reblogear es irreversible ¿deseas continuar?",
	"BROADCAST_ERROR": "Error de transmisión, inténtalo de nuevo!",
	"SUCCESS": "Conseguido",
	"REBLOGGED_POST": "Publicación Reblogueada",
	"LOGIN_FAIL": "Inicio de sesión fallido! Por favor asegúrate de que has iniciado sesión con tu contraseña maestra o con la clave de Publicación privada proporcionada en el apartado Iniciar Sesión si elegiste el Modo Avanzado.",
	"LOGIN_FAIL_A": "Inicio de sesión fallido! Por favor asegúrate de que has iniciado sesión con tu contraseña maestra o con la clave Activa privada en el apartado Iniciar Sesión si elegiste el Modo Avanzado.",
	"WARNING": "Advertencia",
	"VOTE_FOR_WITNESS": "Votar a testigo",
	"VOTED_FOR_WITNESS": "Votado a testigo",
	"AGO": "hace",
	"FROM_NOW": "desde ahora",
	"SECS": "segundos",
	"A_MIN": "un minuto",
	"MINS": "minutos",
	"AN_HOUR": "una hora",
	"HOURS": "horas",
	"A_DAY": "un día",
	"DAYS": "días",
	"A_MONTH": "un mes",
	"MONTHS": "meses",
	"A_YEAR": "un año",
	"YEARS": "años",
	"MIN_READ": "minutos de lectura",
	"DOWNVOTE_FLAG": "Votar Negativamente o Marcar Como Inapropiado",
	"CAPTURE_PICTURE": "Tomar foto",
	"SELECT_PICTURE": "Seleccionar Imagen",
	"SET_CUSTOM_URL": "Establecer URL personalizada",
	"INSERT_PICTURE": "Insertar Imagen",
	"ERROR": "Error",
	"UPLOAD_ERROR": "Error al Cargar",
	"CAMERA_CANCELLED": "Cámara Cancelada",
	"SET_URL": "Establecer URL",
	"DIRECT_LINK_PICTURE": "Enlace web directo a la imagen",
	"COMMENT_SUBMITTED": "El comentario se ha entregado!",
	"DELETE_COMMENT": "Eliminar comentarios es irreversible...",
	"DELETED_COMMENT": "Eliminar comentario",
	"UPLOADING_PICTURE": "Subiendo Imagen",
	"UPLOAD_COMPLETED": "Subida Completada",
	"UPLOAD_FAILED": "La subida ha fallado",
	"PASSWORD_INCORRECT": "La contraseña o el nombre de cuenta son incorrectos",
	"INFO": "Información",
	"QR_TEXT": "Coloca el código QR dentro de la zona de escaneo",
	"BALANCE_TEXT": "Asegúrate de que tienes suficiente saldo para la transacción!",
	"NONEXIST_USER": "El usuario al que estás intentando transferir fondos no existe!",
	"TRANSFER_TEXT": "Estás seguro de que quieres hacer la transferencia?",
	"CONFIRMATION": "Confirmación",
	"TX_BROADCASTED": "Transacción transmitida",
	"FEED": "Inicio",
	"TRENDING": "Tendencias",
	"HOT": "Caliente",
	"NEW": "Nuevo",
	"PROMOTED": "Promocionado",
	"VOTES": "Votos",
	"PAYOUT": "Pago",
	"COMMENTS": "Comentarios",
	"TRENDING_30": "Siendo Tendencia durante 30 días",
	"SORT_POST_BY": "Ordenar Publicaciones Por",
	"PAYOUT_CYCLE": "Ciclo de Pago",
	"POTENTIAL_PAYOUT": "Pago Potencial",
	"PAST_PAYOUT": "Pago Pasado",
	"AUTHOR_PAYOUT": "Pago de Autor",
	"CURATION_PAYOUT": "Pago de Curación",
	"POST_SUBMITTED": "La publicación fue enviada!",
	"POST_LATER": "Publicación para posterior presentación!",
	"SAVED": "Guardado",
	"CLEARED": "Borrado",
	"FLAGGING_TEXT": "Marcar como inapropiada una publicación puede eliminar las recompensas y hacer que el material marcado sea menos visible.<br><br> Marcar como inapropiado debe utilizarse en los siguientes casos: <ul><li>Fraude o Plagio</li><li>Discursos de Odio o Actitudes de Provocación y Molestia Constantes</li><li>Contenido categrizado mal intencionadamente o Spam</li></ul>",
	"REQUEST_LIMIT_TEXT": "Límite de solicitud alcanzado. Revisa otras etiquetas/tendencias!",
	"POST_IS_UNBOOKMARK": "Publicación eliminada de los marcadores!",
	"POST_IS_BOOKMARK": "Publicación añadida a marcadores!",
	"RESET": "Reiniciar",
	"MODIFY_PICTURE": "Modificar Foto de Perfil",
	"MODIFY_COVER_PICTURE": "Modificar Foto de Portada",
	"ACTIVE_KEY_REQUIRED_TEXT": "Por favor proporciona la clave Activa privada si has elegido el modo de Inicio de Sesión Avanzado!",
	"RESET_PICTURE_TEXT": "Esto reiniciará la foto de perfil del usuario",
	"RESET_COVER_PICTURE_TEXT": "Esto reiniciará la foto de portada del usuario",
	"UPDATE_REQUIRES_RESTART": "La actualización del servidor requiere un reinicio!",
	"SETTINGS_UPDATED": "Ajustes actualizados!",
	"LANGUAGES": "Idiomas",
	"LANGUAGES_TEXT": "Aquí puedes cambiar el idioma de la app",
	"LOGIN_TO_X": "Esta operación requiere que el usuario inicie sesión con la contraseña maestra/principal, clave activa/publicar. Por favor inicia sesión y vuelve a intentarlo.",
	"GALLERY": "Galería",
	"TRANSLATIONS": "Colaboradores de traducciones",
	"SHARE": "Compartir",
	"MARKETPLACE": "Mercado",
	"EXCHANGE": "Cambio",
	"DRAFTS": "Borradores",
	"POST_IS_UNDRAFT": "¡La publicación se ha eliminado de borradores!",
	"POST_IS_DRAFT": "¡La publicación se ha añadido a borradores!",
	"SWIPE_LEFT": "Deslice hacia la izquierda para ver las opciones",
	"MANAGE": "Gestionar",
	"IMAGE_REMOVED": "La foto se ha eliminado",
	"COPY": "Copiar",
	"NO_IMAGE": "¡Aún no has subido ninguna foto!",
	"PULL_DOWN_TO_REFRESH": "Tire hacia abajo para actualizar",
	"EXTERNAL_APPS": "Apps externas",
	"PLUGINS": "Extensiones",
	"SUGGEST": "Sugerir",
	"COMING_SOON": "Muy pronto",
	"CHAIN": "Chain",
	"CHAIN_TEXT": "Aquí puedes cambiar la blockchain o la plataforma por defecto.",
	"CURRENCY": "Divisa",
	"CURRENCY_TEXT": "Aquí puede cambiar su moneda por defecto. Verá el valor de recompensa post/comentario en esta moneda.",
	"ABOUT_11": "<br><b>Lista de Características</b><br> Accede a artículos únicos de cualquier tema en los que estés interesado <br> Comparte con los autores comentando, discutiendo temas.<br> Votar los artículos recompensa al autor tanto como gana recompensas por curación de contenidos. <br> Publica tus artículos, notas de blog, hospeda gratuitamente y gana recompensas al atraer y ganar seguidores.<br> Escribe artículos en vivo, así como también guardar múltiples borradores del articulo para futura publicación.<br> Marca tus artículos favoritos para leerlos mas tarde.<br> Intercambia o saca dinero de tus ganancias<br> Envia fondos a cualquier autor o usuario, amigos, seguidores, etc.<br> Sigue autores interesantes, bloggers.<br> Busca tus seguidores y autores que sigues.<br> Recibe notificaciones para mantenerte en contacto con tus seguidores y discusiones en las que estes involucrado. <br> Busca categorías/etiquetas de artículos y autores.<br>Personaliza tu perfil.<br> Muchas mas funcionalidades por venir.<br><br><b>Seguridad</b><br>1. La aplicación nunca accederá o mantendrá fondos de usuarios. <br>2. La aplicación ofrece un modelo de seguridad lado-cliente, con claves privadas hospedadas localmente y nunca enviadas a ningún servidor, usted es responsable de respaldar sus contraseñas.<br>3. La aplicación ofrece una experiencia del usuario simple y atractiva, a través de su interfaz. <br>4. La aplicación ofrece una capa extra de seguridad con un código-pin<br><br>Soporte de eSteem soporta Steem y Plataformas Golos.<br>",
	"FOUNDER": "Fundador y desarrollador Principal",
	"ADD_ACCOUNT": "Añadir cuenta",
	"PLATFORM": "Plataforma",
	"ESCROW_AGENT": "Agente Escrow",
	"RATIFICATION_DEADLINE": "Fecha límite de ratificación",
	"ESCROW_EXPIRATION": "Vencimiento Escrow",
	"ESCROW_FEE": "Tarifa de Escrow",
	"ESCROW_TERMS": "Términos de Escrow"
}
},{}],111:[function(require,module,exports){
module.exports={
	"HOME": "خانه",
	"LOGIN": "ورود",
	"LOGOUT": "خروج",
	"PROFILE": "پروفایل",
	"FOLLOW": "دنبال کردن",
	"BOOKMARKS": "نشانک‌ها",
	"TRANSFER": "انتقال",
	"MARKET": "بازار",
	"SETTINGS": "تنظیمات",
	"ABOUT": "درباره",
	"ABOUT_1": "جایی که هر کسی میتواند برای محتوای تولیدی خود درامد کسب کند!",
	"ABOUT_2": "با استفاده از زیرساخت{{نام زیرساخت}} تولید شده است. این اپلیکیشن ساخته شده توسط",
	"ABOUT_3": "این یک پروژه موبایلی است که به صورت متن باز و تحت اداره یک کمیته مردمی می باشد. این برنامه امکان دسترسی به محتوا را برای خواندن، درج نظرات، رأی دادن، تولید محتوا، انتقال، درامد زایی و غیره را می دهد. ویژگی‌های که توسط بلاک‌چین {{نام پلتفورم}} و {{نام سایت}} ارائه شده است.",
	"ABOUT_4": "۱. اپلیکیشن هرگز به پول‌های کاربر دسترسی پیدا نمی‌کند و اختیاری در مورد آن ندارد.",
	"ABOUT_5": "۲. اپلیکیشن مدل امنیتی سمت مشتری دارد، به طوری که کلیدهای خصوصی به صورت محلی ذخیره می‌شوند و هرگز به هیچ سروری فرستاده نمی‌شوند.",
	"ABOUT_6": "۳. اپلیکیشن رابط و تجربه‌ی کاربری ساده و جذابی دارد.",
	"ABOUT_7": "۴. ترم افزارهیچگاه نیاز به دریافت اطلاعات شخصی کاربرتدارد.",
	"ABOUT_8": "به good-karma به عنوان شاهد رأی بدهید",
	"ABOUT_9": "تماس/بازخورد:",
	"ABOUT_10": "اطلاعات بیشتر:",
	"REMOVE": "حذف",
	"MARKET_VIEW": "وضعیت بازار",
	"PRICE": "قیمت",
	"AMOUNT": "مبلغ",
	"TOTAL": "جمع",
	"NOORDERS": "هیچگونه سفارش بازی برای",
	"DATE": "تاریخ",
	"BUY": "خرید",
	"SELL": "فروش",
	"OPEN": "باز",
	"HISTORY": "تاریخچه",
	"FOLLOW_BACK": "دنبال کردن متقابل",
	"FOLLOWED": "دنبال شده",
	"UNFOLLOW": "عدم دنبال کردن",
	"FOLLOWING": "دنبال میکنید",
	"FOLLOWERS": "دنبال کنندگان",
	"SEARCH_FOLLOWERS": "جستجوی دنبال کنندگان",
	"SEARCH_FOLLOWING": "جستجوی دنبال شوندگان",
	"BY": "توسط",
	"IN": "در",
	"MENU": "فهرست",
	"BOOKMARK": "نشانک",
	"REBLOG": "اشتراک مجدد",
	"UPVOTE": "رأی مثبت",
	"DOWNVOTE": "رأی منفی",
	"UNVOTE_DOWNVOTED": "حذف رأی منفی",
	"UNVOTE_UPVOTED": "حذف رأی مثبت",
	"REPLY": "پاسخ",
	"EDIT": "ویرایش",
	"POST_1": "برای دیدن گزینه‌ها، روی نظرات به چپ بکشید.",
	"POST_2": "برای دیدن نظرات فرعی، روی نظرات کلیک کیند.",
	"OPTIONS": "گزینه‌ها",
	"RESTEEMED_BY": "اشتراک مجدد توسط",
	"NOTHING_HERE": "اینجا هنوز چیزی نیست...",
	"BALANCES": "مانده‌ها",
	"PROFILE_1": "{{نام پلتفورم}}، نمادهای قابل داد و ستد که می‌توان آن را در هر زمان انتقال داد. {{نام پلتفورم}} را می‌توان از طریق فرآیندی به نام بالا بردن قدرت به {{توان تاثیر گذارپلتفورم}} تبدیل کرد.",
	"PROFILE_2": "{{توان تاثیر گذارپلتفورم}}، نمادهای تأثیرگذاری که قدرت بیشتری برای نگهداری بلندمدت و رأی دادن در پست‌ها کسب می‌کنند. هر چه این را بیشتر نگهداری کنید، بیشتر می‌توانید بر پاداش‌های دیگران تأثیر داشته باشید و در ازای رأی دادن دقیق، پاداش کسب نمایید.",
	"PROFILE_3": "نمادهایی با ارزش حدود {{platformsunit}} از {{نام پلتفورم}}.",
	"ESTIMATED_VALUE": "ارزش برآورد شده",
	"PROFILE_4": "ارزش برآورد شده مبتی بر ارزش متوسط ۷ روزه‌ی {{نام پلتفورم}} است.",
	"TRANSACTION_HISTORY": "تاریخچه‌ی تراکنش",
	"POSTING": "ارسال مطلب",
	"PROFILE_5": "کلید ارسال مطلب برای ارسال کردن مطلب و رأی دادن استفاده می‌شود. این باید با کلیدهای فعال و مالک متفاوت باشد.",
	"OWNER": "مالک",
	"PROFILE_6": "کلید مالک کلید اصلی حساب است و برای تغییر دادن کلیدهای دیگر مورد نیاز است. کلید خصوصی یا گذرواژه برای کلید مالک باید تا حد امکان آفلاین نگهداری شود.",
	"ACTIVE": "فعال",
	"PROFILE_7": "کلید فعال برای انتقال و سفارش دادن در بازار داخلی استفاده می‌شود.",
	"MEMO": "یادداشت",
	"PROFILE_8": "کلید یادداشت برای ایجاد و خواندن یادداشت‌ها استفاده می‌شود.",
	"BLOG": "بلاگ",
	"POSTS": "پست‌ها",
	"REPLIES": "پاسخ‌ها",
	"WALLET": "کیف پول",
	"TAG": "برچسب",
	"USER": "کاربر",
	"CLOSE": "بستن",
	"TO": "به",
	"ASSET": "دارایی",
	"SEND": "فرستادن",
	"SECURITY": "امنیت",
	"AVAILABLE": "موجود",
	"PUBLIC_MEMO": "یادداشت عمومی",
	"TO_DESC": "کاربر مثلاً good-karma",
	"PIN_CODE": "پین‌کد",
	"PIN_TEXT": "پین‌کد به امن کردن اپلیکیشن و داده‌های شما کمک می‌کند. <br/><br/><b>توجه:</b> پس از فعال‌سازی، شما فقط ۴ بار برای باز کردن فرصت دارید؛ اگر پین را فراموش کنید یا اشتباه وارد کنید، اپلیکیشن داده‌های ثبت شده‌ی کاربر را حذف خواهد کرد. می‌توانید دوباره وارد شوید و به استفاده از اپلیکیشن ادامه دهید.",
	"NOTIFICATIONS": "اطلاع رسانی‌ها",
	"VOTE_TEXT": "وقتی که کسی به محتوای شما رأی می‌دهد، به شما اطلاع رسانی می گردد! <br/> <b>توجه:</b> اطلاع رسانی‌ها شامل وزن رأی و نیز پیام هشدار است. (شامل رأی مثبت، رأی منفی، حذف رأی).",
	"VOTE": "رأی دادن",
	"COMMENT_TEXT": "وقتی که کسی در باره‌ی مطالب ارسالی شما نظر می‌دهد، به شما اطلاع رسانی میگردد!<br/> <b>توجه:</b>اطلاع رسانی شامل زمانی که کسی نظر خود را <b>ویرایش</b> می‌کند، نیز هست.",
	"COMMENT": "نظر دادن",
	"FOLLOW_TEXT": "وقتی که کسی شما را دنبال می‌کند یا دنبال کردن را حذف می‌کند،به شما اطلاع رسانی میگردد!ً",
	"MENTIONS": "ذکر نام",
	"MENTIONS_TEXT": "وقتی که کسی نام شما را در پست/نظر خود ذکر می‌کند، به شما اطلاع رسانی میگردد!",
	"RESTEEM": "اشتراک گذاری مجدد",
	"RESTEEM_TEXT": "وقتی که کسی پست شما را مجدد به اشتراک گذارد، به شما اطلاع رسانی میگردد!",
	"CONFIGURATIONS": "پیکربندی‌ها",
	"VOTING": "رأی‌دهی",
	"VOTING_TEXT": "وزن یا درصد رأی‌دهی بر قدرت رأی‌دهی در نرم افزارتأثیر می‌گذارد، بنا بر این، می‌توانید پاداش رأی‌دهی خود را تنظیم کنید. <br/><br/><b>توجه:</b> این وزن/درصد رأی‌دهی را برای رأی منفی هم تغییر خواهد داد و در تمام جاهای نرم افزاراعمال خواهد شد",
	"SERVER": "سرور",
	"SERVER_TEXT": "توصیه شده",
	"SAVE_CHANGES": "ذخیره کردن تغییرات",
	"VOTERS_INFO": "اطلاعات رأی دهندگان",
	"WELCOME_BACK": "خوش آمدید!",
	"LOGIN_1": "جهت ادامه با نام کاربری و گذرواژه‌ی خود وارد شوید.",
	"LOGIN_2": "کلید ارسال مطلب برای ارسال کردن مطلب، نظر دادن، رأی دادن، و دنبال کردن استفاده می‌شود.",
	"LOGIN_3": "کلید فعال برای انتقال و به‌ روز رسانی تصویر پروفایل استفاده می‌شود.",
	"LOGIN_4": "مدارک کاربر به طور محلی روی دستگاه نگهداری می‌شود. در هنگام خروج، مدارک حذف می‌شود!",
	"DONT_HAVE": "حساب ندارید؟",
	"SIGN_UP_NOW": "اکنون ثبت‌نام کنید",
	"CANCEL": "لغو کردن",
	"ADVANCED": "حالت پیشرفته",
	"ACTIVE_PRIKEY": "کلید خصوصی فعال",
	"POSTING_PRIKEY": "کلید خصوصی ارسال مطلب",
	"MASTER_PASS": "گذرواژه‌ی اصلی",
	"USERNAME": "نام کاربری",
	"CARD_VIEW": "نمای کارت",
	"COMPACT_VIEW": "نمای فشرده",
	"SEARCH": "جستجو",
	"SUBMIT_A_STORY": "ثبت یک داستان",
	"REPLYTO": "پاسخ دادن به",
	"POST": "ارسال مطلب",
	"PREVIEW": "پیش‌نمایش",
	"DEFAULT": "پیش‌فرض ۵۰٪ / ۵۰٪",
	"POWERUP": "۱۰۰٪ بالا بردن قدرت",
	"DECLINE_PAYOUT": "امتناع از پرداخت",
	"SAVE_FOR_LATER": "ذخیره کردن برای بعد",
	"CLEAR": "پاک کردن",
	"POST_CONTENT": "محتوای مطلب",
	"COMMENT_CONTENT": "محتوای نظر",
	"TITLE": "عنوان",
	"TAGS": "برچسب‌ها",
	"NOT_MATCH": "عدم انطباق",
	"CONFIRM_PIN": "تأیید پین",
	"INCORRECT": "نادرست",
	"OPENING_POST": "باز کردن مطلب",
	"SET_PIN": "تعیین پین",
	"ENTER_PIN": "وارد کردن پین",
	"ARE_YOU_SURE": "مطمئنید؟",
	"REBLOG_TEXT": "اشتراک گداری مجدد غیرقابل برگشت است، می‌خواهید ادامه دهید؟",
	"BROADCAST_ERROR": "خطای پخش، دوباره تلاش کنید!",
	"SUCCESS": "موفقیت",
	"REBLOGGED_POST": "مطلب ارسال مجدد شد!",
	"LOGIN_FAIL": "ورود با شکست مواجه شد! لطفاً اطمینان حاصل کنید که با گذرواژه‌ی اصلی وارد شده‌اید یا در صورتی که حالت پیشرفته را انتخاب کرده‌اید، کلید خصوصی ارسال مطلب را در ورود ارائه کرده‌اید.",
	"LOGIN_FAIL_A": "ورود با شکست مواجه شد! لطفاً اطمینان حاصل کنید که با گذرواژه‌ی اصلی وارد شده‌اید یا در صورتی که حالت پیشرفته را انتخاب کرده‌اید، کلید خصوصی فعال را در ورود ارائه کرده‌اید.",
	"WARNING": "هشدار",
	"VOTE_FOR_WITNESS": "رأی دادن برای شاهد",
	"VOTED_FOR_WITNESS": "رأی داده شده برای شاهد",
	"AGO": "قبل",
	"FROM_NOW": "از حالا",
	"SECS": "ثانیه",
	"A_MIN": "یک دقیقه",
	"MINS": "دقیقه",
	"AN_HOUR": "یک ساعت",
	"HOURS": "ساعت",
	"A_DAY": "یک روز",
	"DAYS": "روز",
	"A_MONTH": "یک ماه",
	"MONTHS": "ماه",
	"A_YEAR": "یک سال",
	"YEARS": "سال",
	"MIN_READ": "دقیقه خواندن",
	"DOWNVOTE_FLAG": "رأی منفی یا علامت گذاشتن",
	"CAPTURE_PICTURE": "گرفتن عکس",
	"SELECT_PICTURE": "انتخاب تصویر",
	"SET_CUSTOM_URL": "تعیین نشانی اینترنتی سفارشی",
	"INSERT_PICTURE": "درج کردن تصویر",
	"ERROR": "خطا",
	"UPLOAD_ERROR": "خطای آپلود",
	"CAMERA_CANCELLED": "دوربین لغو شد",
	"SET_URL": "تعیین نشانی اینترنتی",
	"DIRECT_LINK_PICTURE": "لینک وب مستقیم برای تصویر",
	"COMMENT_SUBMITTED": "نظر ثبت شد!",
	"DELETE_COMMENT": "حذف کردن نظرات برگشت‌ناپذیر است...",
	"DELETED_COMMENT": "نظر حذف شد",
	"UPLOADING_PICTURE": "در حال آپلود کردن تصویر",
	"UPLOAD_COMPLETED": "آپلود کامل شد",
	"UPLOAD_FAILED": "آپلود با شکست مواجه شد",
	"PASSWORD_INCORRECT": "گذرواژه یا نام حساب نادرست بود",
	"INFO": "اطلاعات",
	"QR_TEXT": "یک کیوآرکد را در داخل ناحیه‌ی اسکن قرار دهید",
	"BALANCE_TEXT": "دقت کنید که برای تراکنش مانده‌ی کافی داشته باشید!",
	"NONEXIST_USER": "کاربری که می‌خواهید برایش پول بفرستید، وجود ندارد!",
	"TRANSFER_TEXT": "مطمئنید می‌خواهید انتقال را انجام دهید؟",
	"CONFIRMATION": "تأیید",
	"TX_BROADCASTED": "تراکنش پخش شد",
	"FEED": "فید",
	"TRENDING": "پرطرفدار",
	"HOT": "داغ",
	"NEW": "جدید",
	"PROMOTED": "ارتقا داده شده",
	"VOTES": "رأی‌ها",
	"PAYOUT": "پرداخت",
	"COMMENTS": "نظرات",
	"TRENDING_30": "پرطرفدار در ۳۰ روز",
	"SORT_POST_BY": "مرتب‌سازی مطالب بر حسب:",
	"PAYOUT_CYCLE": "چرخه‌ی پرداخت",
	"POTENTIAL_PAYOUT": "پرداخت احتمالی",
	"PAST_PAYOUT": "پرداخت گذشته",
	"AUTHOR_PAYOUT": "پرداخت نویسندگی",
	"CURATION_PAYOUT": "پرداخت ویراستاری",
	"POST_SUBMITTED": "مطلب ثبت شد!",
	"POST_LATER": "مطلب برای ثبت در آینده!",
	"SAVED": "ذخیره شد",
	"CLEARED": "پاک شد",
	"FLAGGING_TEXT": "گذاشتن علامت پرچم برای یک مطلب می‌تواند موجب حذف پاداش‌ها شده و میزان نمایش آن مطلب را کاهش دهد.<br><br>پرچم گذاشتن باید برای موارد زیر استفاده شود: <ul><li>کلاهبرداری یا سرقت ادبی</li><li>نفرت‌پراکنی یا مزاحمت اینترنتی</li><li>دسته‌بندی غلط عمدی محتوا یا هرزنامه</li></ul>",
	"REQUEST_LIMIT_TEXT": "حد تقاضا پر شد. به روندها/برچسب‌های دیگر مراجعه کنید!",
	"POST_IS_UNBOOKMARK": "مطلب از نشانک‌ها حذف شد!",
	"POST_IS_BOOKMARK": "مطلب به نشانک‌ها اضافه شد!",
	"RESET": "شروع مجدد",
	"MODIFY_PICTURE": "تغییر تصویر پروفایل",
	"MODIFY_COVER_PICTURE": "تغییر تصویر زمینه",
	"ACTIVE_KEY_REQUIRED_TEXT": "لطفاً در صورتی که حالت ورود پیشرفته را انتخاب کرده‌اید، کلید خصوصی فعال را ارائه کنید!",
	"RESET_PICTURE_TEXT": "این موجب بازنشانی تصویر پروفایل کاربر خواهد شد",
	"RESET_COVER_PICTURE_TEXT": "این موجب بازنشانی تصویر زمینه‌ی کاربر خواهد شد",
	"UPDATE_REQUIRES_RESTART": "به‌روزرسانی سرور نیازمند شروع مجدد است!",
	"SETTINGS_UPDATED": "تنظیمات به‌روزآوری شد!",
	"LANGUAGES": "زبان‌ها",
	"LANGUAGES_TEXT": "در اینجا می‌توانید زبان نرم افزاررا تغییر دهید.",
	"LOGIN_TO_X": "برای این عمل، لازم است که کاربر با گذرواژه‌ی اصلی، کلید فعال/ارسال مطلب وارد شده باشد. لطفاً وارد شوید و دوباره تلاش کنید.",
	"GALLERY": "گالری",
	"TRANSLATIONS": "ترجمه کنندگان",
	"SHARE": "اشتراک گذاری",
	"MARKETPLACE": "بازار",
	"EXCHANGE": "تبادل ارز",
	"DRAFTS": "پیش نویس",
	"POST_IS_UNDRAFT": "مطلب از قسمت پیش نویس ها حذف گردید!",
	"POST_IS_DRAFT": "مطلب به قسمت پیش نویس ها اضافه گردید!",
	"SWIPE_LEFT": "برای مشاهده گزینه ها به چپ بکشید",
	"MANAGE": "مدیریت",
	"IMAGE_REMOVED": "عکس حذف گردید",
	"COPY": "کپی",
	"NO_IMAGE": "شما هنوز عکسی بارگذاری نکردید!",
	"PULL_DOWN_TO_REFRESH": "جهت بار گذاری مجدد به پایین بکشید",
	"EXTERNAL_APPS": "اپلیکیشن‌های بیرونی",
	"PLUGINS": "پلاگین‌ها",
	"SUGGEST": "پیشنهاد",
	"COMING_SOON": "به زودی",
	"CHAIN": "زنجیره",
	"CHAIN_TEXT": "در اینجا می‌توانید بلاک‌چین یا پلتفرم پیش‌فرض را تغییر دهید.",
	"CURRENCY": "واحد پول",
	"CURRENCY_TEXT": "در اینجا شما می توانید تنظیمات واحد پول خود را تغییر دهید،ارزش پاداش پستها/نظرات شما با واحد پول تنظیم شده نشان داده می شود.",
	"ABOUT_11": "<br><b>لیست قابلیت ها</b><br>- دسترسی به مقاله های خاص و منحصر به فرد در هر موردی که به آن علاقه مند هستید.<br>- ارتباط با نویسندگان به وسیله نظر دهی و بحث در مورد موضوع مورد نظر پست.<br>- رای دهی به پست ها جهت امتیاز دهی و جایزه دادن به نویسندگان، و همچنین کسب درامد برای خود.<br>- مقالات و پست های خود را به رایگان اشتراک بگذارید، و به وسیله افرادی که شما را دنبال می کنند و به پست های شما رای می دهند درامد کسب کنید.<br>- مقالات خود را در هر کجا که هستید بنویسید و پیش نویس های مختلفی را برای اشتراک گذاری در آینده ذخیره کنید.<br>- مقالات مورد علاقه خود را برای دسترسی آسان در آینده نشانه گذاری کنید.<br>- درامد خود را با تبدیل به پول نقد و یا دیگر ارز های دیجیتال نمایید.<br>- درامد خود را به نویسندگان، کاربران،دوستان و غیره ارسال نمایید.<br>- نویسندگان و بلاگ نویسان مورد علاقه خود را دنبال نمایید.<br>- در لیست نویسندگان و دنبال کنندگان خود دنبال اسم مورد نظر خود بگردید.<br>- جهت در ارتباط ماندن با دنبال کنندگان خود و همچنین مقالاتی در آنها نقشی داشته اید پیغام دریافت نمایید.<br>- گروه ها و تگ های مورد علاقه خود را بر اساس نام نویسندگان و موضوع مفالات پبدا نمایید.<br>- پروفایل خود را شخصی سازی نمایید.<br>- قابلیت های بیشتری در راه است.<br><br><b>امنیت</b><br>1. نرم افزار هرگز به حساب شما دسترسی نخواهد داشت.<br>2. نرم افزار یک روش امنیتی سمت کاربر را پباده سازی می نماید که کلید های خصوصی سمت کاربر نگهداری شده و به هیچ سروری ارسال نمی گردد، مسئولیت پشتیبان گیری از کلید های شخصی به عهده شماست.<br>3. نرم افزار یک رابط کاربری ساده و تجربه ای زیبا ارائه می نماید<br>4. نرم افزار به وسیله رمز پین یک لایه امنیتی اضافه ارائه می نماید.<br><br>esteem از پلتفورم های Steem و Golos پشتیبانی می نماید.<br>",
	"FOUNDER": "موسس و برنامه نویس ارشد",
	"ADD_ACCOUNT": "افزودن حساب کاربری",
	"PLATFORM": "پلتفرم",
	"ESCROW_AGENT": "مامور وکالت داده شده",
	"RATIFICATION_DEADLINE": "مهلت تصویب",
	"ESCROW_EXPIRATION": "پایان زمان وکالت",
	"ESCROW_FEE": "هزینه وکالت",
	"ESCROW_TERMS": "شرایط وکالت"
}
},{}],112:[function(require,module,exports){
module.exports={
	"HOME": "Accueil",
	"LOGIN": "Connexion",
	"LOGOUT": "Déconnexion",
	"PROFILE": "Profil",
	"FOLLOW": "Suivre",
	"BOOKMARKS": "Signets",
	"TRANSFER": "Transfert",
	"MARKET": "Marché",
	"SETTINGS": "Paramètres",
	"ABOUT": "A propos",
	"ABOUT_1": "où n'importe qui peut gagner des récompenses pour son contenu!",
	"ABOUT_2": "est supporté par la plate-forme {{platformname}}. Application créée par",
	"ABOUT_3": "Il s'agit d'un projet pour la communauté mobile et il est open-source. Il offre un accès pour lire, commenter, voter, poster, afficher le transfert de récompense, etc. Toutes les fonctionnalités offertes par {{sitename}} et la blockchain {{platformname}}.",
	"ABOUT_4": "1. L'application n'a jamais accès aux fonds de l'utilisateur.",
	"ABOUT_5": "2. L'application offre un modèle de sécurité à ses client, avec des clés privées hébergées localement et jamais envoyées à aucun serveurs.",
	"ABOUT_6": "3. L'application offre une interface simple et des expériences attrayantes aux utilisateurs.",
	"ABOUT_7": "4. L'application ne demande jamais à ce que les utilisateurs saisissent des informations personnelles.",
	"ABOUT_8": "Votez pour good-karma comme témoin",
	"ABOUT_9": "Contact/Réaction:",
	"ABOUT_10": "Plus d'infos:",
	"REMOVE": "Supprimer",
	"MARKET_VIEW": "Vue du marché",
	"PRICE": "Prix",
	"AMOUNT": "Montant",
	"NOORDERS": "Pas d'ordres ouverts pour",
	"BUY": "Achat",
	"SELL": "Vente",
	"OPEN": "Ouvert",
	"HISTORY": "Historique",
	"FOLLOW_BACK": "Suivre",
	"FOLLOWED": "Abonné",
	"UNFOLLOW": "Désabonner",
	"SEARCH_FOLLOWERS": "Chercher followers",
	"SEARCH_FOLLOWING": "Chercher following",
	"BY": "par",
	"IN": "dans",
	"BOOKMARK": "Signet",
	"UNVOTE_DOWNVOTED": "Retirer Downvote",
	"UNVOTE_UPVOTED": "Retirer Upvote",
	"REPLY": "Répondre",
	"EDIT": "Editer",
	"POST_1": "Glisser vers la gauche sur les commentaires pour voir les options",
	"POST_2": "Appuyez sur les commentaires pour voir les sous-commentaires",
	"RESTEEMED_BY": "Resteem par",
	"NOTHING_HERE": "Rien ici encore...",
	"BALANCES": "Soldes",
	"PROFILE_1": "Les {{platformname}}, jetons négociables qui peuvent être transférés à tout moment. Le {{platformname}} peut être converti en {{platformpower}} dans un processus appelé power-up.",
	"PROFILE_2": "{{platformpower}}, jetons d'influence, vous gagnez plus de Steem Power en le concervant à long terme et en votant sur les postes. Plus on le conserve, plus on a d'influence sur les récompenses des autres et dans l'obtention de récompense pour un vote en particulier.",
	"PROFILE_3": "Jetons d'une valeur d'environ {{platformsunit}} de {{platformname}}.",
	"ESTIMATED_VALUE": "Valeur estimée",
	"PROFILE_4": "La valeur estimée est calculée sur une moyenne de 3.5 jours de la valeur du {{platformname}}.",
	"TRANSACTION_HISTORY": "Historique des Transactions",
	"POSTING": "Poste",
	"PROFILE_5": "La clé de post est utilisée pour poster et voter. Elle doit être différente des clés actives et propriétaires.",
	"OWNER": "Propriétaire",
	"PROFILE_6": "La clé propriétaire est la clé principale du compte et est requise pour changer les autres clés. La clé privée ou le mot de passe de la clé propriétaire doivent être mis hors ligne autant que possible.",
	"PROFILE_7": "La clé active est utilisée pour effectuer des transferts et passer des ordres dans le marché intérieur.",
	"MEMO": "Mémo",
	"PROFILE_8": "La clé mémo permet de créer et de lire des mémos.",
	"REPLIES": "Réponses",
	"WALLET": "Portefeuille",
	"USER": "Utilisateur",
	"CLOSE": "Fermer",
	"TO": "à",
	"ASSET": "Type",
	"SEND": "Envoyer",
	"SECURITY": "Sécurité",
	"AVAILABLE": "Disponible",
	"PUBLIC_MEMO": "Mémo publique",
	"TO_DESC": "Utilisateur par ex. good-karma",
	"PIN_CODE": "Code PIN",
	"PIN_TEXT": "Le code PIN vous aide à sécuriser l'application et vos données. <br/><br/><b>Note:</b> Une fois activé, vous avez 4 tentatives maximum pour déverrouiller, si vous avez oublié le pin ou si vous échouez, l'application supprimera les données utilisateur enregistrées. Vous pouvez vous reconnecter et continuer à utiliser l'application.",
	"VOTE_TEXT": "Vous recevrez une notification quand quelqu'un votera pour un des vos contenus! <br/> <b>Note:</b> Les notifications incluent le poids du vote dans le message d'alerte. (Qu'il s'agisse d'un upvote, d' un downvote ou d'un vote retiré).",
	"COMMENT_TEXT": "Vous recevrez une notification quand quelqu'un commentera un des vos posts ou un de vos commentaires!<br/> <b>Note:</b> Les notifications incluent quand quelqu'un <b>édite</b> ses propres commentaires aussi.",
	"COMMENT": "Commentaire",
	"FOLLOW_TEXT": "Vous recevrez une notification quand quelqu'un s'abonnera ou se désabonnera de vous!",
	"MENTIONS_TEXT": "Vous recevrez une notification quand quelqu'un vous mentionnera dans un post/commentaire!",
	"VOTING": "Vote",
	"VOTING_TEXT": "Le poids ou le pourcentage du vote affecte le pouvoir de vote dans l'application, de telle manière vous pouvez régler votre récompense de vote. <br/><br/><b>Note:</b> Cela changera le poids/pourcentage du vote pour le downvote partout dans l'application",
	"SERVER": "Serveur",
	"SERVER_TEXT": "Recommandé",
	"SAVE_CHANGES": "Sauvegarder les changements",
	"VOTERS_INFO": "Info vote",
	"WELCOME_BACK": "Bienvenue à nouveau!",
	"LOGIN_1": "Connectez-vous avec votre nom d'utilisateur et votre mot de passe pour continuer.",
	"LOGIN_2": "La clé de posts est utilisée pour poster, commenter, voter, suivre.",
	"LOGIN_3": "La clé active est utilisée pour les transferts et la mise à jour de l'image de profil.",
	"LOGIN_4": "Les informations d'identification de l'utilisateur sont conservées localement sur votre appareil. Lors de la déconnexion elles sont supprimées!",
	"DONT_HAVE": "Pas encore de compte?",
	"SIGN_UP_NOW": "Enregistrez-vous maintenant",
	"CANCEL": "Supprimer",
	"ADVANCED": "Avancé",
	"ACTIVE_PRIKEY": "Clé privée active",
	"POSTING_PRIKEY": "Clé privée de posts",
	"MASTER_PASS": "Mot de passe principal",
	"USERNAME": "Nom d'utilisateur",
	"CARD_VIEW": "Vue thuile",
	"COMPACT_VIEW": "Vue compacte",
	"SEARCH": "Rechercher",
	"SUBMIT_A_STORY": "Proposer un post",
	"REPLYTO": "Répondre à",
	"PREVIEW": "Aperçu",
	"DEFAULT": "Par défaut 50% / 50%",
	"DECLINE_PAYOUT": "Refuser le payement",
	"SAVE_FOR_LATER": "Sauvegarder pour plus tard",
	"CLEAR": "Effacer",
	"POST_CONTENT": "Poster le contenu",
	"COMMENT_CONTENT": "Commenter",
	"TITLE": "Titre",
	"NOT_MATCH": "Pas de concordance",
	"CONFIRM_PIN": "Confirmer PIN",
	"OPENING_POST": "Ouverture du post",
	"SET_PIN": "Configurer PIN",
	"ENTER_PIN": "Entrer PIN",
	"ARE_YOU_SURE": "Vous êtes sur?",
	"BROADCAST_ERROR": "Erreur de diffusion, essayer à nouveau!",
	"SUCCESS": "Réussite",
	"REBLOGGED_POST": "Post reblogé!",
	"LOGIN_FAIL": "Echec de la connexion! Veuillez vous assurer d'avoir ouvert une session avec le mot de passe principal ou votre clé privée de post si vous avez choisi le mode avancé.",
	"LOGIN_FAIL_A": "Échec de la connexion! Veuillez vous assurer d'avoir ouvert une session avec le mot de passe principal ou avoir fourni une clé privée active lors de la connexion si vous avez choisi le mode Avancé.",
	"WARNING": "Attention",
	"VOTE_FOR_WITNESS": "Vote pour témoin",
	"VOTED_FOR_WITNESS": "a voté pour témoin",
	"AGO": "depuis",
	"FROM_NOW": "à partir de maintenant",
	"SECS": "Secondes",
	"A_MIN": "une min",
	"AN_HOUR": "une heure",
	"HOURS": "h",
	"A_DAY": "un jour",
	"DAYS": "jours",
	"A_MONTH": "un mois",
	"MONTHS": "mois",
	"A_YEAR": "une année",
	"YEARS": "années",
	"MIN_READ": "min temps lecture",
	"DOWNVOTE_FLAG": "Downvote",
	"CAPTURE_PICTURE": "Capturer Image",
	"SELECT_PICTURE": "Sélectionner Image",
	"SET_CUSTOM_URL": "Configurer URL personnalisée",
	"INSERT_PICTURE": "Insérer Image",
	"ERROR": "Erreur",
	"UPLOAD_ERROR": "Erreur téléchargement",
	"CAMERA_CANCELLED": "Caméra supprimée",
	"SET_URL": "Configurer URL",
	"DIRECT_LINK_PICTURE": "Lien direct pour l'image",
	"COMMENT_SUBMITTED": "Commentaire envoyé!",
	"DELETE_COMMENT": "La suppression des commentaires est irréversible.",
	"DELETED_COMMENT": "Commentaire supprimé",
	"UPLOADING_PICTURE": "Téléchargement de l'image",
	"UPLOAD_COMPLETED": "Téléchargement terminé",
	"UPLOAD_FAILED": "Téléchargement échoué",
	"PASSWORD_INCORRECT": "Mot de passe ou nom d'utilisateur incorrect",
	"QR_TEXT": "Placer le QR code dans la zone de scan",
	"BALANCE_TEXT": "Soyez sur d'avoir un solde suffisant pour la transaction!",
	"NONEXIST_USER": "L'utilisateur auquel vous essayez d'envoyer des fonds n'existe pas!",
	"TRANSFER_TEXT": "Etes-vous sur de vouloir transférer?",
	"TX_BROADCASTED": "La transaction est diffusée",
	"FEED": "Suivis",
	"TRENDING": "Tendance",
	"NEW": "Nouveau",
	"PROMOTED": "Promu",
	"PAYOUT": "Paiement",
	"COMMENTS": "Commentaires",
	"TRENDING_30": "Tendance depuis 30 jours",
	"SORT_POST_BY": "Classer posts par:",
	"PAYOUT_CYCLE": "Cycle de Paiement",
	"POTENTIAL_PAYOUT": "Paiement potentiel",
	"PAST_PAYOUT": "Paiement passé",
	"AUTHOR_PAYOUT": "Paiement auteur",
	"CURATION_PAYOUT": "Paiement votes",
	"POST_SUBMITTED": "Post envoyé!",
	"POST_LATER": "Soumettre le post plus tard!",
	"SAVED": "Sauvegardé",
	"CLEARED": "Supprimé",
	"FLAGGING_TEXT": "Downvote un post peut enlever les récompenses et rendre celui-ci moins visible.<br><br>Le Downvote devrait être utilisé pour ceci: <ul><li>Fraude ou Plagiarisme</li><li>Trolls ou discours de haine</li><li>Contenu inapproprié intentionnel ou Spam</li></ul>",
	"REQUEST_LIMIT_TEXT": "Limite atteinte. Découvrez d'autres tags/tendances!",
	"POST_IS_UNBOOKMARK": "Post enlevé des signets!",
	"POST_IS_BOOKMARK": "Post ajouté au signets!",
	"RESET": "Réinitialiser",
	"MODIFY_PICTURE": "Modifier l'image du profil",
	"MODIFY_COVER_PICTURE": "Modifier l'image de couverture",
	"ACTIVE_KEY_REQUIRED_TEXT": "SVP, veuillez indiquer la clé privée active si vous avez choisi le mode de connexion avancé.",
	"RESET_PICTURE_TEXT": "Ceci va réinitialiser l'image profil de l'utilisateur",
	"RESET_COVER_PICTURE_TEXT": "Ceci va réinitialiser l'image de couverture de l'utilisateur",
	"UPDATE_REQUIRES_RESTART": "La mise à jour du serveur nécessite un redémarrage!",
	"SETTINGS_UPDATED": "Paramètres mis à jour!",
	"LANGUAGES": "Langues",
	"LANGUAGES_TEXT": "Vous pouvez changer ici la langue de l'application",
	"LOGIN_TO_X": "Cette opération requiert que l'utilisateur soit connecté avec le mot de passe principal, la clé de post/clé active. Veuillez vous connecter et réessayer.",
	"GALLERY": "Gallerie",
	"TRANSLATIONS": "Contributeurs de traduction",
	"SHARE": "Partage",
	"MARKETPLACE": "Marché",
	"EXCHANGE": "Echange",
	"DRAFTS": "Brouillons",
	"POST_IS_UNDRAFT": "Post supprimé des brouillons!",
	"POST_IS_DRAFT": "Post ajouté aux brouillons!",
	"SWIPE_LEFT": "Glisser vers la gauche pour voir les options",
	"MANAGE": "Gérer",
	"IMAGE_REMOVED": "Image enlevée",
	"COPY": "copié",
	"NO_IMAGE": "Vous n'avez pas encore télécharger d'images pour le moment!",
	"PULL_DOWN_TO_REFRESH": "Tirez vers le bas pour rafraîchir",
	"EXTERNAL_APPS": "Apps externe",
	"SUGGEST": "Suggestion",
	"COMING_SOON": "Bientôt",
	"CHAIN_TEXT": "Ici vous pouvez changer pour la blockchain ou la plate-forme par défaut."
}
},{}],113:[function(require,module,exports){
module.exports={
	"HOME": "עמוד הבית",
	"LOGIN": "כניסה",
	"LOGOUT": "יציאה",
	"PROFILE": "פרופיל",
	"FOLLOW": "לעקוב",
	"BOOKMARKS": "סימניות",
	"TRANSFER": "העברה",
	"MARKET": "שוק",
	"SETTINGS": "אפשרויות",
	"ABOUT": "מידע",
	"ABOUT_1": "מקום שבו כל אחד יכול להרוויח בזכות התכנים שלו!",
	"ABOUT_2": "מופעל על ידי {{platformname}}. האפילקציה נכתבה על ידי",
	"ABOUT_3": "והוא פתוח, ומונע על ידי הקהילה. הוא מציע גישה לקריאה, לכתיבת תגובות, ללייקים, להעברת כספים וכו'. הפעולות מוצעות על ידי הבלוקצ'יין של {{platformname}} ועל ידי {{sitename}}",
	"ABOUT_4": "1. לאפליקציה אין גישה לכספים של המשתמש.",
	"ABOUT_5": "2. האפליקציה היא בטוחה, כשהקוד הפרטי שמור מקומית ולא נשלח לשרתים חיצוניים.",
	"ABOUT_6": "3. האפליקציה מציעה גישה פשוטה ונוחה למשתמש.",
	"ABOUT_7": "4. האפליקציה לא מבקשת ממשתמשים מידע פרטי.",
	"ABOUT_8": "הצביעו ל-good-karma בתור עד",
	"ABOUT_9": "צור קשר",
	"ABOUT_10": "מידע נוסף:",
	"REMOVE": "הסרה",
	"MARKET_VIEW": "צפה בשוק",
	"PRICE": "מחיר",
	"AMOUNT": "כמות",
	"TOTAL": "סך הכל",
	"NOORDERS": "אין הזמנות פתוחות עבור",
	"DATE": "תאריך",
	"BUY": "קנייה",
	"SELL": "מכירה",
	"OPEN": "פתיחה",
	"HISTORY": "היסטוריה",
	"FOLLOW_BACK": "לעקוב",
	"FOLLOWED": "עוקב",
	"UNFOLLOW": "להפסיק לעקוב",
	"FOLLOWING": "עוקב",
	"FOLLOWERS": "עוקבים",
	"SEARCH_FOLLOWERS": "חיפוש בעוקבים אחריי",
	"SEARCH_FOLLOWING": "חיפוש במי שאני עוקב אחריו",
	"BY": "על ידי",
	"IN": "בתוך",
	"MENU": "תפריט",
	"BOOKMARK": "סימניה",
	"REBLOG": "עשו ריבלוג",
	"UPVOTE": "לייק",
	"DOWNVOTE": "אנלייק",
	"UNVOTE_DOWNVOTED": "ביטול אנלייק",
	"UNVOTE_UPVOTED": "ביטול לייק",
	"REPLY": "להשיב",
	"EDIT": "עריכה",
	"POST_1": "החלק את התגוה שמאלה לצפייה באפשרויות",
	"POST_2": "לחץ על תגובה כדי לראות תתי-תגובות",
	"OPTIONS": "אפשרויות",
	"RESTEEMED_BY": "עשו ריסטים",
	"NOTHING_HERE": "אין פה כלום עדיין...",
	"BALANCES": "כספים",
	"PROFILE_1": "{{platformname}}, מטבעות שניתנים להעברה בכל עת. ניתן להמיר {{platformname}} ל-{{platformpower}} בעזרת תהליך שנקרא פאוור-אפ.",
	"PROFILE_2": "{{platformpower}}, מטבעות השפעה שמוסיפים לכם כוח בהצבעה. ככל שיש לכם יותר, תוכלי להשפיע יותר על התשלום של פוסטים ותוכלו להרוויח רווחים גדולים יותר בהצבעה.",
	"PROFILE_3": "מטבעות ששויים {{platformsunit}} של {{platformname}}.",
	"ESTIMATED_VALUE": "ערך מוערך",
	"PROFILE_4": "הערך חושב על ידי ממוצע מחירים ב-7 הימים האחרונים של {{platformname}}.",
	"TRANSACTION_HISTORY": "היסטוריית פעולות",
	"POSTING": "העלאת פוסט",
	"PROFILE_5": "מפתח הפוסטים נועד לכתיבת פוסטים וללייקים. עליו להיות שונה מהמפתח הפעיל וממפתח המשתמש.",
	"OWNER": "בעלים",
	"PROFILE_6": "מפתח המשתמש הוא המפתח הראשי לחשבון והוא נחוץ על מנת לשנות מפתחות אחרים. המפתח הפרטי או הסיסמא לקבלת מפתח המשתמש חייבים להיות שמורים מחוץ לאתר.",
	"ACTIVE": "פעיל",
	"PROFILE_7": "המפתח הפעיל נועד לביצוע הברות כספים ולביצוע הזמנות בשוק הפנימי.",
	"MEMO": "הערה",
	"PROFILE_8": "מפתח התזיכירם נועד לכתיבת וקריאת תזכירים.",
	"BLOG": "בלוג",
	"POSTS": "פוסטים",
	"REPLIES": "תגובות",
	"WALLET": "ארנק",
	"TAG": "טאגים",
	"USER": "משתמש",
	"CLOSE": "סגור",
	"TO": "אל",
	"ASSET": "נכס",
	"SEND": "לשלוח",
	"SECURITY": "בטיחות",
	"AVAILABLE": "פנוי",
	"PUBLIC_MEMO": "הערה פומבית",
	"TO_DESC": "משתמש, לדוגמא good-karma",
	"PIN_CODE": "קוד",
	"PIN_TEXT": "קוד עוזר לכם לאבטח את האפילקציה ואת המידע שלכם. הערה: ברגע שהופעל, אפשר לנסות לפתוח עד 4 פעמים. אם שכחתם את הקוד, האפליקציה תמחק את המידע של המשתמש. תוכל להיכנס מחדש ולהשתמש באפליקציה.",
	"NOTIFICATIONS": "הודעות",
	"VOTE_TEXT": "תקבול הודעה כשמישהו יעשה לכם לייק! הערה: ההודעות יכללו גם את משקל הלייק (בין אם לייק, אנלייק, או ביטול לייק).",
	"VOTE": "להצביע",
	"COMMENT_TEXT": "תקבלו הודעה כשמישהו יגיב לפוסטים או לתגובות שלכם! הערה: תקבלו הודעה גם כשמישהו יערוך את התגובה שלו.",
	"COMMENT": "תגובה",
	"FOLLOW_TEXT": "תקבל הודעה כשמישהו יעקוב או יפסיק לעקוב אחריך!",
	"MENTIONS": "תזכורים",
	"MENTIONS_TEXT": "תקבל הודעה כשמישהו יזכיר אותך בפוסט או בתגובה!",
	"RESTEEM": "עשו ריבלוג",
	"RESTEEM_TEXT": "תקבלו הודעה כשמישהו יעשה ריסטים לפוסט שלכם!",
	"CONFIGURATIONS": "קונפיגורציות",
	"VOTING": "הצבעות",
	"VOTING_TEXT": "משקל הלייק נותן לכם לשלוט בגודל הגמול שתקבלו. הערה: פעולה זו תשנה גם את המשקל עבור אנלייק",
	"SERVER": "שרת",
	"SERVER_TEXT": "מומלץ",
	"SAVE_CHANGES": "לשמור שינויים",
	"VOTERS_INFO": "מידע על מצביעים",
	"WELCOME_BACK": "ברוכים השבים!",
	"LOGIN_1": "היכנסו בעזרת שם המשתמש והסיסמא על מנת להמשיך.",
	"LOGIN_2": "מפתח הפוסטים נועד לכתיבת פוסטים ותגובות, וללייקים.",
	"LOGIN_3": "המפתח הפעיל נועד להעברות ולעדכון תמונת הפרופיל.",
	"LOGIN_4": "המידע על המשתמש שמור מקומית על המכשיר. כשמתנתקים המידע נמחק!",
	"DONT_HAVE": "אין לכם חשבון משתמש?",
	"SIGN_UP_NOW": "הרשמו עכשיו",
	"CANCEL": "ביטול",
	"ADVANCED": "מתקדם",
	"ACTIVE_PRIKEY": "מפתח פעיל",
	"POSTING_PRIKEY": "מפתח פוסטים",
	"MASTER_PASS": "מפתח ראשי",
	"USERNAME": "שם משתמש",
	"CARD_VIEW": "תצוגת כרטיסים",
	"COMPACT_VIEW": "תצוגה קומפקטית",
	"SEARCH": "חיפוש",
	"SUBMIT_A_STORY": "כתבו פוסט",
	"REPLYTO": "השיבו ל-",
	"POST": "פוסט",
	"PREVIEW": "תצוגה מקדימה",
	"DEFAULT": "ברירת מחדך 50% / 50%",
	"POWERUP": "פאוור-אפ 100%",
	"DECLINE_PAYOUT": "סרבו לתשלום",
	"SAVE_FOR_LATER": "שמרו למאוחר יותר",
	"CLEAR": "ניקוי",
	"POST_CONTENT": "תוכן הפוסט",
	"COMMENT_CONTENT": "תוכן התגובה",
	"TITLE": "כותרת",
	"TAGS": "טאגים",
	"NOT_MATCH": "לא מתאים",
	"CONFIRM_PIN": "אשר קוד",
	"INCORRECT": "שגוי",
	"OPENING_POST": "פותח פוסט",
	"SET_PIN": "קבעו קוד",
	"ENTER_PIN": "הזינו קוד",
	"ARE_YOU_SURE": "בטוחים?",
	"REBLOG_TEXT": "אי אפשר לבטל ריסטים, תרצו להמשיך?",
	"BROADCAST_ERROR": "בעיית תקשורת, נסה שוב!",
	"SUCCESS": "הצלחה",
	"REBLOGGED_POST": "עשיתם לפוסט ריבלוג!",
	"LOGIN_FAIL": "הכניסה נכשלה! אנא ודאו שנכנסתם עם הסיסמא הראשית או שהזנתם את מפתח הפוסטים אם ניסיתם להיכנס במצב מתקדמת.",
	"LOGIN_FAIL_A": "הכניסה נכשלה! אנא ודאו שנכנסתם עם הסיסמא הראשית או שהזנתם את המפתח הפעיל אם ניסיתם להיכנס במצב מתקדמת.",
	"WARNING": "אזהרה",
	"VOTE_FOR_WITNESS": "הצבעה לעד",
	"VOTED_FOR_WITNESS": "הצבעה לעד בוצעה",
	"AGO": "לפני",
	"FROM_NOW": "מעכשיו",
	"SECS": "שניות",
	"A_MIN": "דקה",
	"MINS": "דקות",
	"AN_HOUR": "שעה",
	"HOURS": "שעות",
	"A_DAY": "יום",
	"DAYS": "ימים",
	"A_MONTH": "חודש",
	"MONTHS": "חודשים",
	"A_YEAR": "שנה",
	"YEARS": "שנים",
	"MIN_READ": "דקות קריאה",
	"DOWNVOTE_FLAG": "עשו אנלייק",
	"CAPTURE_PICTURE": "צלמו תמונה",
	"SELECT_PICTURE": "בחר תמונה",
	"SET_CUSTOM_URL": "קבעו כתובת אישית",
	"INSERT_PICTURE": "הכנסה תמונה",
	"ERROR": "שגיאה",
	"UPLOAD_ERROR": "שגיאה בהעלאה",
	"CAMERA_CANCELLED": "מצלמה בוטלה",
	"SET_URL": "קבעו קישור",
	"DIRECT_LINK_PICTURE": "קישור לתמונה",
	"COMMENT_SUBMITTED": "התגובה נשלחה!",
	"DELETE_COMMENT": "אי אפשר לשחזר תגובה שנמחקה...",
	"DELETED_COMMENT": "תגובה נמחקה",
	"UPLOADING_PICTURE": "מעלה תמונה",
	"UPLOAD_COMPLETED": "תמונה הועלתה",
	"UPLOAD_FAILED": "העלאה נכשלה",
	"PASSWORD_INCORRECT": "הסיסמה או שם המתשמש שגויים",
	"INFO": "מידע",
	"QR_TEXT": "שימו קוד QR בתוך אזור הקריאה",
	"BALANCE_TEXT": "בדקו שיש לכם מספיק כספים להעברה!",
	"NONEXIST_USER": "המשתמש שאליו ניסיתם להעביר כספים לא קיים!",
	"TRANSFER_TEXT": "בטוח שתרצו להעביר את הכספים?",
	"CONFIRMATION": "אישור",
	"TX_BROADCASTED": "הפעולה נשלחה",
	"FEED": "פיד",
	"TRENDING": "מצליח",
	"HOT": "חם",
	"NEW": "חדש",
	"PROMOTED": "מקודמים",
	"VOTES": "לייקים",
	"PAYOUT": "תשלום",
	"COMMENTS": "תגובות",
	"TRENDING_30": "חמים ב-30 הימים האחרונים",
	"SORT_POST_BY": "מיינו לפי:",
	"PAYOUT_CYCLE": "זמן תשלום",
	"POTENTIAL_PAYOUT": "תשלום עתידי",
	"PAST_PAYOUT": "תשלום עבר",
	"AUTHOR_PAYOUT": "תשלום לכותב",
	"CURATION_PAYOUT": "תשלום למשגיחים",
	"POST_SUBMITTED": "הפוסט נשלח!",
	"POST_LATER": "לשלוח מאוחר יותר",
	"SAVED": "נשמר",
	"CLEARED": "נוקה",
	"FLAGGING_TEXT": "אנלייק לפוסט מחסיר מהתשלום והופך אותו לפחות נראה. אנלייק מיועד למקרים הבאים: העתקה, גזענות, דברי שנאה, טרולינג, ספאם",
	"REQUEST_LIMIT_TEXT": "הגעתם לגבול מספר הבקשות. בדקו טאגים אחרים!",
	"POST_IS_UNBOOKMARK": "הפוסט הוסר מהסימניות!",
	"POST_IS_BOOKMARK": "הפוסט נשמר בסימניות!",
	"RESET": "איתחול",
	"MODIFY_PICTURE": "לשנות תמונת פרופיל",
	"MODIFY_COVER_PICTURE": "לשנות תמונת כותרת",
	"ACTIVE_KEY_REQUIRED_TEXT": "אנא הוסיפו מפתח פעיל אם תרצו להיכנס למצב מתקדם!",
	"RESET_PICTURE_TEXT": "תמונת הפרופיל תאותחל",
	"RESET_COVER_PICTURE_TEXT": "תמונת הכותרת תאותחל",
	"UPDATE_REQUIRES_RESTART": "עדכון השרת דורש אתחול!",
	"SETTINGS_UPDATED": "ההגדרות עודכנו!",
	"LANGUAGES": "שפות",
	"LANGUAGES_TEXT": "כאן ניתן לשנות את השפה.",
	"LOGIN_TO_X": "פעולה זו דורשת מהמשתמש להיות רשום עם הסיסמא הראשית והמפתח הפעיל או מפתח הפסוט. אנא כנסו ונסו שנית.",
	"GALLERY": "גלריה",
	"TRANSLATIONS": "מתרגמים",
	"SHARE": "שתף",
	"MARKETPLACE": "השוק",
	"EXCHANGE": "מסחר",
	"DRAFTS": "טיוטות",
	"POST_IS_UNDRAFT": "הפוסט הוסר מהטיוטות!",
	"POST_IS_DRAFT": "הפוסט התווסף לטיוטות!",
	"SWIPE_LEFT": "החליקו שמאלה בשביל אפשרויות",
	"MANAGE": "ניהול",
	"IMAGE_REMOVED": "התמונה הוסרה",
	"COPY": "העתק",
	"NO_IMAGE": "עוד לא העלית תמונה!",
	"PULL_DOWN_TO_REFRESH": "משכו למטה כדי לרענן",
	"EXTERNAL_APPS": "יישומים חיצוניים",
	"PLUGINS": "תוספות",
	"SUGGEST": "הצע לקריאה",
	"COMING_SOON": "בקרוב",
	"CHAIN": "שרשרת",
	"CHAIN_TEXT": "כאן תוכלו לשנות בלוקצ'יין או את ברירת המחדל",
	"CURRENCY": "מטבע",
	"CURRENCY_TEXT": "כאן תוכלו לשנות את מטבע ברירת המחדל שלכם. השווי של פוסט\\תגובה יופיע במטבע זה.",
	"ABOUT_11": "<br><b>רשימת שימושים בפלטפורמה</b> <br>-גישה למאמרים יחודיים בכל נושא שתהיו מעוניינים לקרוא. <br> -התחברו לכותבים דרך תגובות ודיונים. <br>-הצבעה עבור פוסטים להענקת גמול, והרווחת גמול עבור הצבעות. <br>-פרסמו מאמרים ופוסטים, הרוויחו תגמולים ומצאו אנשים שיעקבו אחרי הבלוג שלכם. <br>-כתיבת מאמרים דינמית, שמירת קבות של הפוסט לפרסום מאוחר יותר. <br>- שמרו מאמרים לקריאה במועד מאוחר יותר. <br>- פדו את הרווחים שלכם. <br>-שלחו כספים לחברים או למשתמשים אחרים <br>- עקבו אחרי סופרים ובלוגרים מעניינים. <br> -חיפוש בעוקבים שלכם ובמי שעוקב אחריכם. <br>-קבלו הודעות על מנת להישאר בעניינים עם עוקבים ועם ודיונים שאתם מערובים בהם. <br>-חיפוש תגיות/קטגוריות מעניינות של מאמרים וכותבים. <br> -התאמה אישית של הפרופיל שלך. <br>-עוד הרבה פונקציות בדרך. <br><br><b>אבטחה</b> <br>1. לאפליקציה אין גישה לכספי המשתמש. <br>2. האפליקציה מציעה מודל אבטחה בצד הלקוח, עם מפתחות פרטיים השמורים באופן מקומי ושאינם נשלחים לשרתים, אתם אחראים לגיבוי הסיסמאות שלכם. <br>3. האפליקציה מציעה ממשק וחוויה אטרקטיבית למשתמש <br>4. האפליקציה מציעה שכבה נוספת של ביטחון עם קוד <br><br> eSteem תומך בפלטפורמות Steem ו-Golos. <br>",
	"FOUNDER": "מייסד ומפתח ראשי",
	"ADD_ACCOUNT": "הוסף משתמש",
	"PLATFORM": "פלטפורמה"
}
},{}],114:[function(require,module,exports){
module.exports={
	"HOME": "Početna stranica",
	"LOGIN": "Prijava",
	"LOGOUT": "Odjava",
	"PROFILE": "Profil",
	"FOLLOW": "Prati",
	"BOOKMARKS": "Oznake",
	"TRANSFER": "Prijenos",
	"MARKET": "Trgovina",
	"SETTINGS": "Postavke",
	"ABOUT": "O aplikaciji",
	"ABOUT_1": "gdje svatko može zaraditi nagrade za svoj sadržaj!",
	"ABOUT_2": "je društvena aplikacija gdje si plaćen za bloganje, komentiranje i kuracije.",
	"ABOUT_3": "i ona je otvorenog-izvora, zajednica pokreće mobilni projekt. Nudi sadržaj koji je dostupan za čitanje, komentiranje, glasanje, objavljivanje, prijenos zarade i druge pogodnosti koje nam nudi {{platformname}} blockchain i {{sitename}}.",
	"ABOUT_4": "Aplikacija nikad ne pristupa ili zadržava korisnička sredstva.",
	"ABOUT_5": "2. Aplikacija nudi sigurnosni model na strani klijenta. Privatni ključevi su spremeljani lokalno i nikad se ne šalju na servere.",
	"ABOUT_6": "3. Aplikacija nudi jednostavno, atraktivno korisničko sučelje i doživljaj.",
	"ABOUT_7": "4. Aplikacija nikad ne zahtjeva od korisnika da unosi privatne informacije.",
	"ABOUT_8": "Glasaj za good-karma kao svjedoka",
	"ABOUT_9": "Kontakt/feedback:",
	"ABOUT_10": "Više informacija:",
	"REMOVE": "Ukloni",
	"MARKET_VIEW": "Pregled tržišta",
	"PRICE": "Cijena",
	"AMOUNT": "Iznos",
	"TOTAL": "Ukupno",
	"NOORDERS": "Nema otvorenih narudžbi za",
	"DATE": "Datum",
	"BUY": "Kupi",
	"SELL": "Prodaj",
	"OPEN": "Otvori",
	"HISTORY": "Povijest",
	"FOLLOW_BACK": "Uzvrati praćenje",
	"FOLLOWED": "Pratim",
	"UNFOLLOW": "Prestani pratiti",
	"FOLLOWING": "Praćenje",
	"FOLLOWERS": "Pratitelji",
	"SEARCH_FOLLOWERS": "Pretraži pratitelje",
	"SEARCH_FOLLOWING": "Pretraži one koje pratite",
	"BY": "od",
	"IN": "u",
	"MENU": "Izbornik",
	"BOOKMARK": "Oznaka",
	"REBLOG": "Podijeli",
	"REPLY": "Odgovor",
	"EDIT": "Uredi",
	"POST_1": "Povucite u lijevo komentare da bi ste vidjeli opcije",
	"POST_2": "Dodirnite komentare da bi ste vidjeli pod-komentare",
	"OPTIONS": "Opcije",
	"RESTEEMED_BY": "Podjeljeno od",
	"NOTHING_HERE": "Još uvijek nemate ništa ovdje...",
	"BALANCES": "Stanje",
	"PROFILE_1": "{{platformname}}, Trgovinski tokeni koji se mogu prebaciti u bilo koje vrijeme.{{platformname}} može biti prebačen u {{platformpower}} u procesu koji se zove Jačanje profila.",
	"PROFILE_2": "{{platformpower}}, tokeni koji prezentiraju jačinu vašeg profila. Što ih više netko ima to ima veći utjecaj na nagradu objave za koju glasuje i zarađuje veće nagrade za glasovanje.",
	"PROFILE_3": "Tokeni vrijede otprilike {{platformsunit}} od {{platformname}}.",
	"ESTIMATED_VALUE": "Procijenjena vrijednost",
	"PROFILE_4": "Procijenjena vrijednost bazirana na 7 dnevnoj prosječnoj vrijednosti od {{platformname}}.",
	"TRANSACTION_HISTORY": "Povijest transakcija",
	"POSTING": "Objavljivanje",
	"PROFILE_5": "Ključ za objavljivanje se koristi za objave i glasanje. Trebao bi biti drugačiji od aktivnog i vlasničkog ključa.",
	"OWNER": "Vlasnik",
	"PROFILE_6": "Vlasnički ključ je master ključ za račun i potreban je za promjenu drugih ključeva. Privatni ključ ili lozinka za vlasnički ključ trebala bi biti van mreže što je više moguće.",
	"ACTIVE": "Aktivnosti",
	"PROFILE_7": "Aktivni ključ se koristi za transakcije i zadavanje narudžbi u ugrađenom tržištu.",
	"MEMO": "Bilješka",
	"PROFILE_8": "Ključ za bilješku se koristi za izradu i čitanje bilješki.",
	"BLOG": "Blog",
	"POSTS": "Objave",
	"REPLIES": "Odgovori",
	"WALLET": "Novčanik",
	"TAG": "Tagovi",
	"USER": "Korisnik",
	"CLOSE": "Zatvori",
	"TO": "Za",
	"ASSET": "Imovina",
	"SEND": "Pošalji",
	"SECURITY": "Sigurnost",
	"AVAILABLE": "Dostupno",
	"PUBLIC_MEMO": "Javna bilješka",
	"TO_DESC": "Korisnik npr. good-karma",
	"PIN_CODE": "Pin kod",
	"PIN_TEXT": "PIN kod vam pomaže zaštititi aplikaciju i vaše podatke.<br/><br/><b>Napomena:</b>Kad se jednom uključi, imate maksimalno 4 pokušaja za otključati, ako zaboravite pin ili pogriješite, aplikacija će maknuti podatke logiranja. Možete se ponovo logirati i nastaviti koristiti aplikaciju.",
	"NOTIFICATIONS": "Obavijesti",
	"VOTE": "Glas",
	"COMMENT_TEXT": "Dobit ćete obavijest kad netko komentira vašu objavu ili komentar!<br/><b>Napomena:</b>Obavijesti će također sadržavati i <b>promjene</b> njihovih komentara.",
	"COMMENT": "Komentar",
	"FOLLOW_TEXT": "Dobit ćete obavijest kad vas netko počne ili prestane pratiti!",
	"MENTIONS": "Spominjanja",
	"MENTIONS_TEXT": "Dobit ćete obavijest kad vas netko spomene u objavi ili komentaru!",
	"RESTEEM": "Podijeli",
	"RESTEEM_TEXT": "Dobit ćete obavijest kada netko podijeli tvoju objavu!",
	"CONFIGURATIONS": "Konfiguracija",
	"VOTING": "Glasovanje",
	"SERVER": "Server",
	"SERVER_TEXT": "Preporučeno",
	"SAVE_CHANGES": "Spremi promjene",
	"VOTERS_INFO": "Informacije glasača",
	"WELCOME_BACK": "Dobro došli natrag!",
	"LOGIN_1": "Prijavite se sa svojim korisničkim imenon i lozinkom za nastavak.",
	"LOGIN_2": "Ključ za objave se koristi za objave, komentare, glasovanje, praćenje.",
	"LOGIN_3": "Aktivni ključ se koristi za prijenos sredstava i promjenu profilne slike.",
	"LOGIN_4": "Korisnički podatci prijave čuvaju se lokalno na uređaju. Nakon odjave podatci za prijavu nestaju!",
	"DONT_HAVE": "Nemate korisnički račun?",
	"SIGN_UP_NOW": "Registrirajte se odmah",
	"CANCEL": "Odustani",
	"ADVANCED": "Napredno",
	"ACTIVE_PRIKEY": "Aktivni privatni ključ",
	"POSTING_PRIKEY": "Privatni ključ za objave",
	"MASTER_PASS": "Master/glavna lozinka",
	"USERNAME": "Korisničko ime",
	"CARD_VIEW": "Kartični pregled",
	"COMPACT_VIEW": "Kompaktni pregled",
	"SEARCH": "Pretraži",
	"SUBMIT_A_STORY": "Objavi novu priču",
	"REPLYTO": "Odgovor na",
	"POST": "Objava",
	"PREVIEW": "Predpregled",
	"DEFAULT": "Zadano 50% / 50%",
	"POWERUP": "Jačanje profila 100%",
	"DECLINE_PAYOUT": "Otkaži isplatu",
	"SAVE_FOR_LATER": "SPREMI ZA KASNIJE",
	"CLEAR": "OČISTI",
	"POST_CONTENT": "Sadržaj objave",
	"COMMENT_CONTENT": "Komentirajte sadržaj",
	"TITLE": "Naslov",
	"TAGS": "Tagovi",
	"NOT_MATCH": "NE ODGOVARA",
	"CONFIRM_PIN": "Potvrdite PIN",
	"INCORRECT": "NEISPRAVNO",
	"OPENING_POST": "otvaranje objave",
	"SET_PIN": "Postavi PIN",
	"ENTER_PIN": "Unesite PIN",
	"ARE_YOU_SURE": "Jeste li sigurni?",
	"REBLOG_TEXT": "Dijeljenje posta je nepovratno, želite li nastaviti?",
	"BROADCAST_ERROR": "Pogreška prilikom emitiranja, pokušajte ponovo!",
	"SUCCESS": "Uspješno",
	"REBLOGGED_POST": "Objava je podijeljena!",
	"LOGIN_FAIL": "Prijava nije uspjela. Molimo provjerite jeste li prijavljeni sa master lozinkom ili ključem za objave ako ste odabrali napredni način rada.",
	"LOGIN_FAIL_A": "Prijava nije uspjela! Molimo vas provjerite jeste li prijavljeni sa master lozinkom ili aktivnim privatnim ključem ako ste odabrali napredni način.",
	"WARNING": "Upozorenje",
	"VOTE_FOR_WITNESS": "Glasovanje za svjedoka",
	"VOTED_FOR_WITNESS": "Glasali ste za svjedoka",
	"AGO": "prije",
	"FROM_NOW": "od sada",
	"SECS": "sekundi",
	"A_MIN": "1 min",
	"MINS": "min",
	"AN_HOUR": "1 sat",
	"HOURS": "sati",
	"A_DAY": "1 dan",
	"DAYS": "dana",
	"A_MONTH": "mjesec dana",
	"MONTHS": "mjeseci",
	"A_YEAR": "godinu dana",
	"YEARS": "godine",
	"MIN_READ": "min čitanja",
	"CAPTURE_PICTURE": "Snimi sliku",
	"SELECT_PICTURE": "Odaberite sliku",
	"SET_CUSTOM_URL": "Postavljanje prilagođenog URL-a",
	"INSERT_PICTURE": "Umetni sliku",
	"ERROR": "Greška",
	"UPLOAD_ERROR": "Pogreška pri prijenosu",
	"CAMERA_CANCELLED": "Kamera otkazana",
	"SET_URL": "Postavi URL",
	"DIRECT_LINK_PICTURE": "Direktni web link na sliku",
	"COMMENT_SUBMITTED": "Komentar je poslan!",
	"DELETE_COMMENT": "Brisanje komentara je nepovratno...",
	"DELETED_COMMENT": "Izbrisani komentar",
	"UPLOADING_PICTURE": "Učitavanje slike",
	"UPLOAD_COMPLETED": "Učitavanje završeno",
	"UPLOAD_FAILED": "Neuspješan prijenos",
	"INFO": "Info",
	"QR_TEXT": "Postavi QR kod unutar područja skeniranja",
	"BALANCE_TEXT": "Provjerite imate li dovoljno sredstava za transakciju!",
	"NONEXIST_USER": "Korisnik kojem želite poslati sredstva ne postoji!",
	"TRANSFER_TEXT": "Jeste li sigurni da želite obaviti transakciju?",
	"CONFIRMATION": "Potvrda",
	"TX_BROADCASTED": "Tranksacija je provedena",
	"FEED": "Novosti",
	"TRENDING": "Popularno",
	"HOT": "Aktualno",
	"NEW": "Novo",
	"PROMOTED": "Promovirano",
	"VOTES": "Glasovi",
	"PAYOUT": "Isplata",
	"COMMENTS": "Komentari",
	"TRENDING_30": "Popularno zadnjih 30 dana",
	"SORT_POST_BY": "Rasporedi postove po:",
	"PAYOUT_CYCLE": "Isplatni ciklus",
	"POTENTIAL_PAYOUT": "Moguća isplata",
	"PAST_PAYOUT": "Prošla isplata",
	"AUTHOR_PAYOUT": "Autorska isplata",
	"CURATION_PAYOUT": "Kuracijska isplata",
	"POST_SUBMITTED": "Objava je objavljena!",
	"POST_LATER": "Objava za objavljivanje kasnije!",
	"SAVED": "Spremljeno",
	"CLEARED": "Izbrisano",
	"FLAGGING_TEXT": "Prijava objave može maknuti nagrade i učiniti njen sadržaj manje vidljiv.<br><br>Prijava bi se trebala koristiti za:<ul><li>Prevare i plagijate</li><li>Govor mržnje ili provociranje</li><li>pogrešn</ul></ul>o kategorizirani sadržaj ili spam</li></ul>",
	"REQUEST_LIMIT_TEXT": "Nema sadržaja. Pogledajte druge stranice/tagove!",
	"POST_IS_UNBOOKMARK": "Objava je izbrisana iz oznaka!",
	"POST_IS_BOOKMARK": "Objava je dodana u oznake!",
	"RESET": "Resetiraj",
	"MODIFY_PICTURE": "Promijeni sliku profila",
	"MODIFY_COVER_PICTURE": "Promijeni naslovnu sliku",
	"ACTIVE_KEY_REQUIRED_TEXT": "Molimo unesite aktivni ključ ako ste odabrali napredni način logiranja!",
	"RESET_PICTURE_TEXT": "Ovo će resetirati korisničku profilnu sliku",
	"RESET_COVER_PICTURE_TEXT": "Ovo će resetirati korisničku naslovnu sliku",
	"UPDATE_REQUIRES_RESTART": "Ažuriranje servera zahtjeva Restart!",
	"SETTINGS_UPDATED": "Postavke su ažurirane!",
	"LANGUAGES": "Jezici",
	"LANGUAGES_TEXT": "Ovdje možete promijeniti jezik aplikacije.",
	"LOGIN_TO_X": "Ovaj postupak zahtjeva da korisnik bude prijavljen sa glavnom lozinkom, aktivnim/ključem za objave. Molimo prijavite se i pokušajte ponovo.",
	"GALLERY": "Galerija",
	"TRANSLATIONS": "Preveli i prilagodili:",
	"SHARE": "Podijeli",
	"MARKETPLACE": "Trgovina",
	"EXCHANGE": "Burza",
	"DRAFTS": "Skice",
	"POST_IS_UNDRAFT": "Objava je maknuta iz skica!",
	"POST_IS_DRAFT": "Objava je dodana u skice!",
	"SWIPE_LEFT": "Povuci u lijevo za vidjeti opcije",
	"MANAGE": "Upravljanje",
	"IMAGE_REMOVED": "Slika je uklonjena",
	"COPY": "Kopiraj",
	"NO_IMAGE": "Još niste postavili nijednu sliku!",
	"PULL_DOWN_TO_REFRESH": "Povucite dolje za osvježavanje",
	"EXTERNAL_APPS": "Vanjske aplikacije",
	"PLUGINS": "Dodatci",
	"SUGGEST": "Predloži",
	"COMING_SOON": "Uskoro dolazi",
	"CHAIN": "Lanac",
	"CHAIN_TEXT": "Ovdje možete promijeniti blockchain ili zadanu platformu.",
	"CURRENCY": "Valuta",
	"CURRENCY_TEXT": "Ovdje možeze promijeniti vašu zadanu valutu. Nagrade na objavama i komentarima će vam biti prikazane u ovoj valuti.",
	"ABOUT_11": "<br><b>Lista mogućnosti</b><br>-Pristupite bilo kojoj objavi u bilo kojoj temi koja vas zanima.<br>Uključite se sa autorima s komentiranjem i raspravljanjem o temama.<br>-Glasujte za objave tako da nagradite autora i da zaradite na kuracijama.<br>-Objavite vaše članke,objave besplatno i zaradite nagrade s privlačenjem i dobivanjem pratitelja.<br>-Pišite članke za putu, spremite više skica za kasniju objavu.<br>-Označi najdraže članke za pročitati kasnije.<br>-Razmjeni ili isplati svoju zaradu.<br>-Pošaljite vaša sredstva bilo kojem autoru ili korisniku, prijatelju, pratitelju, itd.<br>-Prati zanimljive autore, blogere.<br>-Pretraži svoje pratitelje i autore koje pratite.<br>-Dobivajte obavijesti da bi ste ostali u kontaktu sa svojim pratiteljima i raspravama u kojima ste uključeni.<br>-Pretražite zanimljive tagove/kategorije članaka, autora.<br>Personalizirajte vaš profil.<br>-Još puno novosti stiže.<br><br><b>Sigurnost</b><br>1.Aplikacija nikad ne pristupa ili zadržava na korisničkim sredstvima.<br>2.Aplikacija nudi sigurnosni model na strani klijenta, s privatnim ključevima pohranjenima lokalno i nikad se ne šalju na server, vi ste odgovorni za čuvanje vaših lozinki.<br>3. Aplikacija nudi jednostavano, atraktivano korisničko sučelje i doživljaj<br>4.Aplikacija nudi dodatan sloj zaštite sa PIN kodom<br><br>eSteem podržava Steem i Golos platforme.<br>",
	"FOUNDER": "Osnivač i glavni programer",
	"ADD_ACCOUNT": "Dodaj račun",
	"PLATFORM": "Platforma",
	"ESCROW_AGENT": "Namjenski agent",
	"RATIFICATION_DEADLINE": "Rok potvrđivanja",
	"ESCROW_EXPIRATION": "Namjenski istek",
	"ESCROW_FEE": "Namjenski honorar",
	"ESCROW_TERMS": "Namjenski uvjeti"
}
},{}],115:[function(require,module,exports){
module.exports={
	"HOME": "Kezdőlap",
	"LOGIN": "Bejelentkezés",
	"LOGOUT": "Kijelentkezés",
	"PROFILE": "Profil",
	"FOLLOW": "Követés",
	"BOOKMARKS": "Könyvjelzők",
	"TRANSFER": "Átutalás",
	"MARKET": "Piac",
	"SETTINGS": "Beállítások",
	"ABOUT": "Rólunk",
	"ABOUT_1": "ahol bárki kaphat jutalmakat a tartalmaiért!",
	"ABOUT_2": "a {{platformname}} platform üzemelteti. Az alkalmazás készítője",
	"ABOUT_3": "és nyílt forráskódú, közösség által működtetett projekt. Támogatja a tartalomhozzáférést olvasásért, a hozzászólást, szavazást, posztolást, fizetség átutalását, stb. funkciókat, amiket a {{platformname}} blokklánc és a {{sitename}} kínálnak.",
	"ABOUT_4": "1. Az alkalmazás soha nem fér hozzá vagy tárolja a felhasználók pénzét.",
	"ABOUT_5": "2. Az alkalmazás kliens oldali biztonsági modellt kínál, a privát kulcsok helybeni tárolásával, amik soha nem kerülnek elküldésre semmilyen szerverre.",
	"ABOUT_6": "3. Az alkalmazás egyszerű, tetszetős felhasználói felületet és -élményt nyújt.",
	"ABOUT_7": "4. Az alkalmazás soha nem kéri a felhasználókat a személyes adataik megadására.",
	"ABOUT_8": "Szavazz good-karma -ra mint tanú",
	"ABOUT_9": "Kapcsolat/Visszajelzés:",
	"ABOUT_10": "Több infó:",
	"REMOVE": "Eltávolítás",
	"MARKET_VIEW": "Piac Nézet",
	"PRICE": "Ár",
	"AMOUNT": "Összeg",
	"TOTAL": "Összesen",
	"NOORDERS": "Nincs nyitott megbízás",
	"DATE": "Dátum",
	"BUY": "Vétel",
	"SELL": "Eladás",
	"OPEN": "Nyitás",
	"HISTORY": "Történet",
	"FOLLOW_BACK": "Visszakövetés",
	"FOLLOWED": "Követve",
	"UNFOLLOW": "Követés megszüntetése",
	"FOLLOWING": "Követettek",
	"FOLLOWERS": "Követők",
	"SEARCH_FOLLOWERS": "Követők keresése",
	"SEARCH_FOLLOWING": "Követettek keresése",
	"BY": "által",
	"IN": "itt:",
	"MENU": "Menü",
	"BOOKMARK": "Könyvjelzők",
	"REBLOG": "Újrablogolás",
	"UPVOTE": "Felszavazás",
	"DOWNVOTE": "Leszavazás",
	"UNVOTE_DOWNVOTED": "Leszavazás eltávolítása",
	"UNVOTE_UPVOTED": "Felszavazás eltávolítása",
	"REPLY": "Válasz",
	"EDIT": "Szerkesztés",
	"POST_1": "Csúsztass balra a hozzászólásokon, hogy lásd az opciókat",
	"POST_2": "Koppints a hozzászólásokon, hogy lásd az al-hozzászólásokat",
	"OPTIONS": "Opciók",
	"RESTEEMED_BY": "Újraosztva általa:",
	"NOTHING_HERE": "Semmi sincs itt még...",
	"BALANCES": "Egyenlegek",
	"PROFILE_1": "{{platformname}}, eladható tokenek, amelyeket át lehet utalni bármikor.\n{{platformname}} konvertálható {{platformpower}} -é egy folyamatban, amit feltöltésnek nevezünk.",
	"PROFILE_2": "{{platformpower}}, befolyásoló tokenek, amik több erőt kapnak a hosszú távú birtoklásukért és a posztok felszavazásáért. Minél többet birtokol belőle valaki, annál jobban tudja befolyásolni mások jutalmait és kap több jutalmat az alapos szavazásért.",
	"PROFILE_3": "Tokenek, amik körülbelül {{platformsunit}} -nyi {{platformname}} -et érnek.",
	"ESTIMATED_VALUE": "Becsült Érték",
	"PROFILE_4": "A becsült érték a {{platformname}} 7 napos átlagos értékén alapszik.",
	"TRANSACTION_HISTORY": "Átutalás Történet",
	"POSTING": "Posztolás",
	"PROFILE_5": "A posztoló kulcs posztolásra és szavazásra használatos. Különbözőnek kell lennie az aktív és a tulajdonosi kulcsoktól.",
	"OWNER": "Tulajdonos",
	"PROFILE_6": "A tulajdonos kulcs egy mesterkulcs a számlához és kötelező a többi kulcs megváltoztatásához. A tulajdonosi kulcs privát kulcsát vagy jelszavát titokban és offline kell tartani, amennyire csak lehetséges.",
	"ACTIVE": "Aktív",
	"PROFILE_7": "Az aktív kulcs használatos az átutalások indításához és a megbízások bejegyzéséhez a belső piacon.",
	"MEMO": "Feljegyzés",
	"PROFILE_8": "A feljegyzés kulcs használatos feljegyzések készítésére és olvasására.",
	"BLOG": "Blog",
	"POSTS": "Posztok",
	"REPLIES": "Válaszok",
	"WALLET": "Tárca",
	"TAG": "Címke",
	"USER": "Felhasználó",
	"CLOSE": "Bezár",
	"TO": "Neki",
	"ASSET": "Vagyontárgy",
	"SEND": "Küld",
	"SECURITY": "Biztonság",
	"AVAILABLE": "Rendelkezésre áll",
	"PUBLIC_MEMO": "Nyilvános feljegyzés",
	"TO_DESC": "Felhasználó, pl. good-karma",
	"PIN_CODE": "PIN-kód",
	"PIN_TEXT": "A PIN-kód segít hogy megóvd az alkalmazásod és az adataid. <br/><br/><b>Megjegyzés:</b> Miután alkalmazva van, max. 4 próbálkozási lehetőséged van hogy felnyisd; ha elfelejted a PIN-t vagy hibázol, az alkalmazás el fogja távolítani minden bejelentkezett felhasználói adatot. Vissza tudsz jelentkezni és folytathatod az alkalmazás használatát.",
	"NOTIFICATIONS": "Értesítések",
	"VOTE_TEXT": "Értesítéseket kapsz, amikor valaki szavaz a bejegyzésedre! br/> <b>Megjegyzés:</b> Az értesítések tartalmazzák a szavazás súlyozását a figyelmeztető üzenetben is (Legyen az felszavazás, leszavazás vagy szavazat visszavonása).",
	"VOTE": "Szavazás",
	"COMMENT_TEXT": "Értesítést kapsz ha valaki hozzászól a posztodhoz vagy a hozzászólásodhoz! <br/> <b>Megjegyzés:</b> Az értesítések tartalmazzák azt is, amikor valaki <b>szerkeszti</b> a hozzászólásait.",
	"COMMENT": "Hozzászólás",
	"FOLLOW_TEXT": "Értesítést kapsz, amikor valaki Követ téged vagy Visszavonja a követést!",
	"MENTIONS": "Említések",
	"MENTIONS_TEXT": "Értesítéseket kapsz, amikor valaki megemlít téged egy posztban/hozzászólásban!",
	"RESTEEM": "Újrablogolás",
	"RESTEEM_TEXT": "Értesítést kapsz, amikor valaki resteemeli a posztodat!",
	"CONFIGURATIONS": "Konfiguráció",
	"VOTING": "Szavazás",
	"VOTING_TEXT": "A szavazat súlyozása vagy százaléka a szavazati erőre van kihatással az alkalmazásban, így szabályozni tudod a szavazási jutalmaid. <br/><br/><b>Megjegyzés:</b> Ez a leszavazás szavazati erejét/százalékát is meg fogja változtatni és mindenütt érvényes az alkalmazáson belül.",
	"SERVER": "Szerver",
	"SERVER_TEXT": "Ajánlott",
	"SAVE_CHANGES": "Változtatások Mentése",
	"VOTERS_INFO": "Infó a szavazókról",
	"WELCOME_BACK": "Üdv újra!",
	"LOGIN_1": "A folytatáshoz jelentkezz be a felhasználóneveddel és jelszavaddal.",
	"LOGIN_2": "A posztoló kulcs a posztokhoz, hozzászólásokhoz, szavazáshoz és követéshez használatos.",
	"LOGIN_3": "Az aktív kulcs az utalásokhoz és a profilkép frissítéséhez használatos.",
	"LOGIN_4": "A felhasználó bejelentkezési adatai helyileg vannak tárolva a készüléken. Kijelentkezéskor a bejelentkezési adatok eltávolítódnak!",
	"DONT_HAVE": "Nincs még fiókod?",
	"SIGN_UP_NOW": "Regisztrálj most",
	"CANCEL": "Mégse",
	"ADVANCED": "Haladó",
	"ACTIVE_PRIKEY": "Aktív privát kulcs",
	"POSTING_PRIKEY": "Posztoló privát kulcs",
	"MASTER_PASS": "Mester/fő jelszó",
	"USERNAME": "Felhasználónév",
	"CARD_VIEW": "Kártya nézet",
	"COMPACT_VIEW": "Kompakt nézet",
	"SEARCH": "Keresés",
	"SUBMIT_A_STORY": "Cikk beküldése",
	"REPLYTO": "Válasz neki",
	"POST": "Poszt",
	"PREVIEW": "Előnézet",
	"DEFAULT": "Alapértelmezett 50% / 50%",
	"POWERUP": "Feltöltés 100%",
	"DECLINE_PAYOUT": "Kifizetés Elutasítása",
	"SAVE_FOR_LATER": "MENTÉS KÉSŐBBRE",
	"CLEAR": "TÖRLÉS",
	"POST_CONTENT": "Tartalom posztolása",
	"COMMENT_CONTENT": "Hozzászólás tartalomhoz",
	"TITLE": "Cím",
	"TAGS": "Címkék",
	"NOT_MATCH": "NEM ILLIK ÖSSZE",
	"CONFIRM_PIN": "PIN megerősítése",
	"INCORRECT": "NEM MEGFELELŐ",
	"OPENING_POST": "nyitó poszt",
	"SET_PIN": "PIN beállítása",
	"ENTER_PIN": "PIN megadása",
	"ARE_YOU_SURE": "Biztos vagy benne?",
	"REBLOG_TEXT": "A resteem visszavonhatatlan, biztos vagy benne?",
	"BROADCAST_ERROR": "Terjesztési hiba, próbáld újra.",
	"SUCCESS": "Siker",
	"REBLOGGED_POST": "Újrablogolt poszt!",
	"LOGIN_FAIL": "A belépés nem sikerült! Kérlek győződj meg róla, hogy a mesterjelszavaddal léptél be vagy megadtad a Posztoló privát kulcsot, ha a Haladó módot választottad Bejelentkezéskor.",
	"LOGIN_FAIL_A": "A belépés nem sikerült! Kérlek győződj meg róla, hogy a mesterjelszavaddal léptél be vagy megadtad az Aktív privát kulcsot, ha a Haladó módot választottad Bejelentkezéskor.",
	"WARNING": "Figyelmeztetés",
	"VOTE_FOR_WITNESS": "Szavazás tanúra",
	"VOTED_FOR_WITNESS": "Szavaztál tanúra",
	"AGO": "óta",
	"FROM_NOW": "mostantól",
	"SECS": "másodperc",
	"A_MIN": "egy perc",
	"MINS": "percek",
	"AN_HOUR": "egy óra",
	"HOURS": "óra",
	"A_DAY": "egy nap",
	"DAYS": "napok",
	"A_MONTH": "egy hónap",
	"MONTHS": "hónapok",
	"A_YEAR": "egy év",
	"YEARS": "évek",
	"MIN_READ": "perc olvasás",
	"DOWNVOTE_FLAG": "Leszavazás vagy Jelentés",
	"CAPTURE_PICTURE": "Kép Készítés",
	"SELECT_PICTURE": "Kép Kiválasztás",
	"SET_CUSTOM_URL": "Egyedi URL Beállítás",
	"INSERT_PICTURE": "Kép Beillesztés",
	"ERROR": "Hiba",
	"UPLOAD_ERROR": "Feltöltési Hiba",
	"CAMERA_CANCELLED": "Kamera Törölve",
	"SET_URL": "URL beállítás",
	"DIRECT_LINK_PICTURE": "Direkt web link a képhez",
	"COMMENT_SUBMITTED": "A hozászólás elküldve!",
	"DELETE_COMMENT": "A hozzászólások törlése visszavonhatatlan...",
	"DELETED_COMMENT": "Törölt hozzászólás",
	"UPLOADING_PICTURE": "Kép feltöltése",
	"UPLOAD_COMPLETED": "Feltöltés Kész",
	"UPLOAD_FAILED": "Feltöltés Meghiúsult",
	"PASSWORD_INCORRECT": "A jelszó vagy felhasználónév hibás volt",
	"INFO": "Infó",
	"QR_TEXT": "Helyezz egy QR-kódot a leolvasási területbe",
	"BALANCE_TEXT": "Győződj meg róla, hogy elegendő egyenleged van az utaláshoz!",
	"NONEXIST_USER": "A felhasználó, akinek utalni próbálsz, nem létezik!",
	"TRANSFER_TEXT": "Biztos vagy benne, hogy utalni akarsz?",
	"CONFIRMATION": "Megerősítés",
	"TX_BROADCASTED": "A tranzakció közvetítve",
	"FEED": "Hírfolyam",
	"TRENDING": "Népszerű",
	"HOT": "Forró",
	"NEW": "Új",
	"PROMOTED": "Támogatott",
	"VOTES": "Szavazatok",
	"PAYOUT": "Kifizetés",
	"COMMENTS": "Hozzászólások",
	"TRENDING_30": "Népszerű 30 napra",
	"SORT_POST_BY": "Posztok rendezése:",
	"PAYOUT_CYCLE": "Kifizetési Ciklus",
	"POTENTIAL_PAYOUT": "Lehetséges Kifizetés",
	"PAST_PAYOUT": "Régi Kifizetés",
	"AUTHOR_PAYOUT": "Szerzői Kifizetés",
	"CURATION_PAYOUT": "Kurátori Kifizetés",
	"POST_SUBMITTED": "A poszt beküldve!",
	"POST_LATER": "Poszt későbbi beküldésre!",
	"SAVED": "Mentve",
	"CLEARED": "Törölve",
	"FLAGGING_TEXT": "Egy poszt jelentése el tudja távolítani a jutalmakat és kevésbé láthatóvá teszi ezt az anyagot.<br><br>A jelentést a következőkre kellene használni: <ul><li>Csalás vagy Plagizálás</li><li>Gyűlölet beszéd vagy Internet Trollkodás</li><li>Tudatosan félrekategorizált tartalom vagy Spam</li></ul>",
	"REQUEST_LIMIT_TEXT": "Kérési limit elérve. Nézz meg más trendet/címkét!",
	"POST_IS_UNBOOKMARK": "A poszt eltávolítva a könyvjelzők közül!",
	"POST_IS_BOOKMARK": "A poszt hozzáadva a könyvjelzőkhöz!",
	"RESET": "Visszaállítás",
	"MODIFY_PICTURE": "Profilkép Módosítása",
	"MODIFY_COVER_PICTURE": "Borítókép Módosítása",
	"ACTIVE_KEY_REQUIRED_TEXT": "Kérlek add meg az Aktív privát kulcsot, ha a Haladó belépési módot választottad!",
	"RESET_PICTURE_TEXT": "Ez vissza fogja állítani a profilképet",
	"RESET_COVER_PICTURE_TEXT": "Ez vissza fogja állítani a borítóképet",
	"UPDATE_REQUIRES_RESTART": "A szerver frissítése megköveteli az Újraindítást.",
	"SETTINGS_UPDATED": "Beállítások frissítve!",
	"LANGUAGES": "Nyelvek",
	"LANGUAGES_TEXT": "Itt tudod megváltoztatni az alkalmazás nyelvét.",
	"LOGIN_TO_X": "Ez a művelet megköveteli, hogy a felhasználó a fő jelszavával, aktív/posztoló kulcsával legyen bejelentkezve. Kérlek lépj be és próbáld újra.",
	"GALLERY": "Galéria",
	"TRANSLATIONS": "A fordítás közreműködői",
	"SHARE": "Megosztás",
	"MARKETPLACE": "Piactér",
	"EXCHANGE": "Váltó",
	"DRAFTS": "Piszkozat",
	"POST_IS_UNDRAFT": "A bejegyzés eltávolítva a piszkozatokból!",
	"POST_IS_DRAFT": "A bejegyzés hozzáadva a piszkozatokhoz!",
	"SWIPE_LEFT": "Csúsztass balra az opciókért",
	"MANAGE": "Kezelés",
	"IMAGE_REMOVED": "Kép törölve",
	"COPY": "Másolás",
	"NO_IMAGE": "Még nem töltöttél fel semmilyen képet!",
	"PULL_DOWN_TO_REFRESH": "Húzd le a frissítéshez",
	"EXTERNAL_APPS": "Külső Alkalmazások",
	"PLUGINS": "Beépülők",
	"SUGGEST": "Javasol",
	"COMING_SOON": "Hamarosan megjelenik",
	"CHAIN": "Lánc",
	"CHAIN_TEXT": "Itt tudsz blokkláncot vagy alapértelmezett felületet cserélni.",
	"CURRENCY": "Pénznem",
	"CURRENCY_TEXT": "Itt tudod megváltoztatni az alapértelmezett pénznemet. Ebben a pénznemben fogod látni a bejegyzéseid jutalmait.",
	"ABOUT_11": "<br><b>Funkció lista</b><br>- Férj hozzá egyedi cikkekhez bármilyen témában, ami csak érdekel.<br>- Kerülj közelebb a szerzőkhöz hozzászólásokkal, beszélgetésekkel.<br>- Szavazz bejegyzésekre, hogy megjutalmazd a szerzőket és eközben kurátori jutalmat kapj.<br>- Publikáld a cikkeid és blog posztjaid, tárold őket ingyen és érj el jutalmakat azzal, hogy követőket szerzel és foglalkozol velük.<br>- Írj cikkeket menet közben, ments el több piszkozatot a későbbi publikációhoz.<br>- Könyvjelzőzd a kedvenc cikkeid a későbbi olvasáshoz.<br>- Váltsd át vagy vedd ki a fizetséged.<br>- Küldj pénzt bármely szerzőnek, felhasználónak, barátnak, követőnek, stb.<br>- Kövess érdekes szerzőket, bloggereket.<br>- Keress rá a követőidre és az általad követettekre.<br>- Kapj értesítéseket, hogy kapcsolatban maradhass a követőiddel és a beszélgetésekkel, amikben részt veszel.<br>- Keress cikkeket és szerzőket érdekes címkék/kategóriák alatt.<br>- Szabd személyre a profilodat.<br>- És még sok új funkció várható.<br><br><b>Biztonság</b><br>1. Az alkalmazás soha nem fér hozzá a felhasználó pénzéhez.<br>2. Az alkalmazás kliens-oldali hitelesítést használ, a privát kulcsok helyben vannak tárolva és soha nem kerülnek elküldésre semmilyen szerverre; te vagy a felelős a jelszavaid biztonsági mentéseiért.<br>3. Az alkalmazás egyszerű, tetszetős felhasználói felületet és élményt nyújt<br>4. Az alkalmazás extra biztonsági réteget kínál a PIN-kóddal<br><br>Az eSteem támogatja a Steem és a Golos platformokat.<br>",
	"FOUNDER": "Alapító és Vezető fejlesztő",
	"ADD_ACCOUNT": "Fiók hozzáadása",
	"PLATFORM": "Platform",
	"ESCROW_AGENT": "Letéti ügynök",
	"RATIFICATION_DEADLINE": "Megerősítési határidő",
	"ESCROW_EXPIRATION": "Letét lejárta",
	"ESCROW_FEE": "Letéti díj",
	"ESCROW_TERMS": "Letéti feltételek"
}
},{}],116:[function(require,module,exports){
module.exports={
	"HOME": "Beranda",
	"LOGIN": "Masuk",
	"LOGOUT": "Keluar",
	"PROFILE": "Profil",
	"FOLLOW": "Ikuti",
	"BOOKMARKS": "Bookmark",
	"TRANSFER": "Transfer",
	"MARKET": "Pasar",
	"SETTINGS": "Setelan",
	"ABOUT": "Tentang",
	"ABOUT_1": "Siapapun bisa mendapatkan keuntungan dari konten",
	"ABOUT_2": "Applikasi dibuat oleh",
	"ABOUT_3": "dan ini adalah open source, proyek mobile berbasis masyarakat. Ini menawarkan akses konten untuk membaca, berkomentar, voting, posting, mentransfer pendapatan, dll fitur yang ditawarkan oleh {{platformname}} blockchain dan {{sitename}}.",
	"ABOUT_4": "1. App tidak pernah mengakses atau memegang dana pengguna.",
	"ABOUT_5": "2. App menawarkan model keamanan client-side, dengan kunci pribadi host secara lokal dan tidak pernah dikirim ke server.",
	"ABOUT_6": "3. App menawarkan sederhana, user interface yang menarik dan pengalaman.",
	"ABOUT_7": "4. App tidak pernah mengharuskan pengguna untuk memasukkan informasi pribadi apapun.",
	"ABOUT_8": "Pilih good-karma sebagai witness",
	"ABOUT_9": "Kontak/Saran:",
	"ABOUT_10": "Info lebih lanjut:",
	"REMOVE": "Menghapus",
	"MARKET_VIEW": "Pasar",
	"PRICE": "Harga",
	"AMOUNT": "Jumlah",
	"TOTAL": "Jumlah",
	"NOORDERS": "No open order untuk",
	"DATE": "Tanggal",
	"BUY": "Beli",
	"SELL": "Jual",
	"OPEN": "Buka",
	"HISTORY": "Riwayat",
	"FOLLOW_BACK": "Mengikuti kembali",
	"FOLLOWED": "Diikuti",
	"UNFOLLOW": "Berhenti mengikuti",
	"FOLLOWING": "Mengikuti",
	"FOLLOWERS": "Pengikut",
	"SEARCH_FOLLOWERS": "Mencari Pengikut",
	"SEARCH_FOLLOWING": "Mencari Mengikuti",
	"BY": "oleh",
	"IN": "dalam",
	"MENU": "Menu",
	"BOOKMARK": "Bookmark",
	"REBLOG": "Reblog",
	"UPVOTE": "Upvote",
	"DOWNVOTE": "Downvote",
	"UNVOTE_DOWNVOTED": "Batalkan Downvote\n",
	"UNVOTE_UPVOTED": "Batalkan Upvoted\n",
	"REPLY": "Balas",
	"EDIT": "Edit",
	"POST_1": "Geser ke kiri pada komentar untuk melihat opsi",
	"POST_2": "Ketuk pada komentar untuk melihat sub-komentar",
	"OPTIONS": "Opsi",
	"RESTEEMED_BY": "Resteemed Oleh",
	"NOTHING_HERE": "Tidak ada di sini...",
	"BALANCES": "Saldo",
	"PROFILE_1": "{{Platformname}}, token tradeable yang dapat ditransfer kapan saja. {{Platformname}} dapat dikonversi ke {{kekuatan platform yang}} dalam proses yang disebut powering up.",
	"PROFILE_2": "{{Platformpower}}, mempengaruhi token yang mendapatkan lebih banyak kekuatan untuk memegang jangka panjang dan suara pada posting. Semakin satu memegang lebih satu dapat mempengaruhi imbalan lain dan mendapatkan imbalan untuk voting akurat.",
	"PROFILE_3": "Token bernilai sekitar {{platformsunit}} dari {{platformname}}.",
	"ESTIMATED_VALUE": "Perkiraan Nilai",
	"PROFILE_4": "Nilai estimasi ini didasarkan pada nilai rata-rata 7 hari {{platformname}}.",
	"TRANSACTION_HISTORY": "Sejarah Transaksi",
	"POSTING": "Postingan",
	"PROFILE_5": "Kunci postingan digunakan untuk posting dan voting. Ini harus berbeda dari tombol aktif dan pemilik.",
	"OWNER": "Pemilik",
	"PROFILE_6": "Kunci pemilik adalah kunci master untuk account dan diperlukan untuk mengubah kunci lainnya. Kunci pribadi atau password untuk kunci pemilik harus disimpan secara offline sebanyak mungkin.",
	"ACTIVE": "Aktif",
	"PROFILE_7": "Kunci aktif digunakan untuk melakukan transfer dan tempat order di pasar internal.",
	"MEMO": "Memo",
	"PROFILE_8": "Kunci memo digunakan untuk membuat dan membaca memo.",
	"BLOG": "Blog",
	"POSTS": "Post",
	"REPLIES": "Balasan",
	"WALLET": "Dompet",
	"TAG": "Tag",
	"USER": "Pengguna",
	"CLOSE": "Tutup",
	"TO": "Kepada",
	"ASSET": "Aset",
	"SEND": "Kirim",
	"SECURITY": "Keamanan",
	"AVAILABLE": "Tersedia",
	"PUBLIC_MEMO": "Memo publik",
	"TO_DESC": "Pengguna misalnya good-karma",
	"PIN_CODE": "Kode Pin",
	"PIN_TEXT": "Kode PIN membantu Anda untuk mengamankan aplikasi dan data Anda. <br/><br/> <b>Catatan:</b> Setelah diaktifkan, Anda memiliki max 4 mencoba untuk membuka, jika Anda lupa pin atau gagal, aplikasi akan hapus login data pengguna. Anda dapat login kembali dan terus menggunakan aplikasi.",
	"NOTIFICATIONS": "Notifikasi",
	"VOTE_TEXT": "Anda akan mendapatkan notifikasi ketika seseorang memberikan suara konten Anda! <br/> <b>Catatan:</b> Pemberitahuan termasuk suara berat serta dalam pesan peringatan. (Baik itu up-vote, down-vote, un-vote).",
	"VOTE": "Voting",
	"COMMENT_TEXT": "Anda akan mendapatkan notifikasi ketika seseorang komentar pada posting atau komentar!<br/> <b>Catatan:</b> Pemberitahuan termasuk ketika seseorang <b>Sunting</b> komentar mereka juga.",
	"COMMENT": "Komentar",
	"FOLLOW_TEXT": "Anda akan mendapatkan notifikasi ketika seseorang Follow atau Unfollow Anda!",
	"MENTIONS": "Menyebutkan",
	"MENTIONS_TEXT": "Anda akan mendapatkan pemberitahuan bila seseorang menyebutkan Anda dalam postingan mereka/komentar!",
	"RESTEEM": "Reblog",
	"RESTEEM_TEXT": "Anda akan mendapatkan notifikasi ketika seseorang reblogs posting Anda!",
	"CONFIGURATIONS": "Konfigurasi",
	"VOTING": "Voting",
	"VOTING_TEXT": "Kekuatan Voting atau persentase mempengaruhi hak suara pada aplikasi, sehingga Anda dapat mengatur reward Voting Anda. <br/><br/><b>Catatan:</b> ini akan mengubah kekuatan voting/persentase untuk downvoting juga dan itu adalah di mana-mana pada aplikasi",
	"SERVER": "Server",
	"SERVER_TEXT": "Direkomendasikan",
	"SAVE_CHANGES": "Simpan perubahan",
	"VOTERS_INFO": "Voters info",
	"WELCOME_BACK": "Selamat Datang kembali!",
	"LOGIN_1": "Masuk dengan nama pengguna dan password untuk melanjutkan.",
	"LOGIN_2": "Posting kunci digunakan untuk posting, komentar, voting, follow.",
	"LOGIN_3": "Active kunci digunakan untuk transfer dan memperbarui gambar profil.",
	"LOGIN_4": "kredensial pengguna disimpan secara lokal pada perangkat. Setelah Keluar kredensial dihapus!",
	"DONT_HAVE": "Tidak memiliki akun?",
	"SIGN_UP_NOW": "Daftar Sekarang",
	"CANCEL": "Batal",
	"ADVANCED": "Lanjutan",
	"ACTIVE_PRIKEY": "Kunci aktif pribadi",
	"POSTING_PRIKEY": "Kunci Posting Pribadi",
	"MASTER_PASS": "Master/password utama",
	"USERNAME": "Nama Pengguna",
	"CARD_VIEW": "Lihat kartu",
	"COMPACT_VIEW": "Compact View",
	"SEARCH": "Cari",
	"SUBMIT_A_STORY": "Masukkan cerita",
	"REPLYTO": "Balas ke",
	"POST": "posting",
	"PREVIEW": "Tinjauan",
	"DEFAULT": "Default 50% / 50%",
	"POWERUP": "Power Up 100%",
	"DECLINE_PAYOUT": "Menolak pembayaran",
	"SAVE_FOR_LATER": "SIMPAN UNTUK NANTI",
	"CLEAR": "BERSIHKAN",
	"POST_CONTENT": "Posting konten",
	"COMMENT_CONTENT": "Konten komentar",
	"TITLE": "Judul",
	"TAGS": "Tags",
	"NOT_MATCH": "TIDAK COCOK",
	"CONFIRM_PIN": "Konfirmasi Pin",
	"INCORRECT": "SALAH",
	"OPENING_POST": "Post pembukaan",
	"SET_PIN": "Atur PIN",
	"ENTER_PIN": "Masukan PIN",
	"ARE_YOU_SURE": "Apakah anda yakin?",
	"REBLOG_TEXT": "Reblog ireversibel, apakah Anda ingin melanjutkan?",
	"BROADCAST_ERROR": "Siaran error, coba lagi!",
	"SUCCESS": "Sukses",
	"REBLOGGED_POST": "Reblogged post!",
	"LOGIN_FAIL": "Gagal masuk! Pastikan Anda telah login dengan password master atau tersedia Posting kunci pribadi pada Login jika Anda telah choosed mode Advanced.",
	"LOGIN_FAIL_A": "Gagal masuk! Pastikan Anda telah login dengan password master atau disediakan kunci pribadi Aktif di Login jika Anda telah memilih mode Advanced.",
	"WARNING": "Peringatan",
	"VOTE_FOR_WITNESS": "Voting untuk witness",
	"VOTED_FOR_WITNESS": "Voted untuk witness",
	"AGO": "lalu",
	"FROM_NOW": "dari sekarang",
	"SECS": "detik",
	"A_MIN": "semenit",
	"MINS": "menit",
	"AN_HOUR": "sejam",
	"HOURS": "jam",
	"A_DAY": "sehari",
	"DAYS": "hari",
	"A_MONTH": "sebulan",
	"MONTHS": "bulan",
	"A_YEAR": "setahun",
	"YEARS": "tahun",
	"MIN_READ": "min baca",
	"DOWNVOTE_FLAG": "Downvote atau bendera",
	"CAPTURE_PICTURE": "Ambil Gambar",
	"SELECT_PICTURE": "Pilih Gambar",
	"SET_CUSTOM_URL": "Menetapkan URL kustom",
	"INSERT_PICTURE": "Masukan Gambar",
	"ERROR": "kesalahan",
	"UPLOAD_ERROR": "kesalahan Mengupload ",
	"CAMERA_CANCELLED": "Kamera Dibatalkan",
	"SET_URL": "Menetapkan URL",
	"DIRECT_LINK_PICTURE": "Direct web link utuk Gambar",
	"COMMENT_SUBMITTED": "Komentar disampaikan!",
	"DELETE_COMMENT": "Menghapus komentar adalah ireversibel...",
	"DELETED_COMMENT": "Menghapus komentar",
	"UPLOADING_PICTURE": "Upload Gambar",
	"UPLOAD_COMPLETED": "Upload Selesai",
	"UPLOAD_FAILED": "Upload Gagal",
	"PASSWORD_INCORRECT": "Password atau nama akun tidak benar",
	"INFO": "Info",
	"QR_TEXT": "Tempatkan kode QR di dalam area pindai",
	"BALANCE_TEXT": "Pastikan Anda memiliki saldo yang cukup untuk transaksi!",
	"NONEXIST_USER": "Pengguna yang Anda ccoba untuk mentransfer dana, tidak ada!",
	"TRANSFER_TEXT": "Apakah Anda yakin Anda ingin mentransfer?",
	"CONFIRMATION": "Konfirmasi",
	"TX_BROADCASTED": "Transaksi disiarkan",
	"FEED": "Umpan",
	"TRENDING": "Trending",
	"HOT": "Hot",
	"NEW": "Baru",
	"PROMOTED": "Promosi",
	"VOTES": "Vote",
	"PAYOUT": "Dibayar",
	"COMMENTS": "Komentar",
	"TRENDING_30": "Trending 30 Hari",
	"SORT_POST_BY": "Urutkan Postingan:",
	"PAYOUT_CYCLE": "Siklus pembayaran",
	"POTENTIAL_PAYOUT": "Potensi Pembayaran",
	"PAST_PAYOUT": "Pembayaran terakhir",
	"AUTHOR_PAYOUT": "Pembayaran Penulis",
	"CURATION_PAYOUT": "Pembayaran Kurasi",
	"POST_SUBMITTED": "Post ditayangkan!",
	"POST_LATER": "Posting untuk diajukan nanti!",
	"SAVED": "Disimpan",
	"CLEARED": "Dibersihkan",
	"FLAGGING_TEXT": "Flagging postingan dapat menghapus imbalan dan membuat bahan ini kurang terlihat <br> bendera harus digunakan untuk berikut: <ul><li>Penipuan atau Plagiarisme</li><li>Kata kasar atau Internet Trolling </li><li>Konten Disengaja dikategorikan atau Spam</li> </ul>",
	"REQUEST_LIMIT_TEXT": "Batas permintaan tercapai. Lihat tren/tag lainnya!",
	"POST_IS_UNBOOKMARK": "Posting dihilangkan dari bookmark!",
	"POST_IS_BOOKMARK": "Posting ditambahkan ke bookmark!",
	"RESET": "Setel Ulang",
	"MODIFY_PICTURE": "Modifikasi gambar Profil",
	"MODIFY_COVER_PICTURE": "Memodifikasi Sampul gambar",
	"ACTIVE_KEY_REQUIRED_TEXT": "Harap memberikan kunci pribadi Active jika Anda telah memilih modus masuk Lanjutan!",
	"RESET_PICTURE_TEXT": "Ini akan menyetel ulang gambar profil",
	"RESET_COVER_PICTURE_TEXT": "Ini akan mereset gambar sampul",
	"UPDATE_REQUIRES_RESTART": "Update server memerlukan Restart!",
	"SETTINGS_UPDATED": "Pengaturan diperbarui!",
	"LANGUAGES": "Bahasa",
	"LANGUAGES_TEXT": "Di sini Anda dapat mengubah bahasa aplikasi.",
	"LOGIN_TO_X": "Operasi ini mengharuskan pengguna untuk login dengan password utama, aktif/postingan kunci. Silahkan login dan coba lagi.",
	"GALLERY": "Galeri",
	"TRANSLATIONS": "Kontributor terjemahan",
	"SHARE": "Bagikan\n",
	"MARKETPLACE": "Pasar",
	"EXCHANGE": "Pertukaran",
	"DRAFTS": "draft",
	"POST_IS_UNDRAFT": "Posting akan dihapus dari draft!",
	"POST_IS_DRAFT": "Posting ditambahkan ke draft!",
	"SWIPE_LEFT": "Geser ke kiri untuk melihat opsi",
	"MANAGE": "Mengelola\n",
	"IMAGE_REMOVED": "Gambar dihapus",
	"COPY": "copy",
	"NO_IMAGE": "Anda belum mengunggah gambar apapun, belum!",
	"PULL_DOWN_TO_REFRESH": "Tarik ke bawah untuk menyegarkan",
	"EXTERNAL_APPS": "\n External Apps",
	"PLUGINS": "Plugins",
	"SUGGEST": "Saran",
	"COMING_SOON": "Segera hadir",
	"CHAIN": "Chain\n",
	"CHAIN_TEXT": "Di sini Anda dapat mengubah blockchain atau platform default.\nChain_Text",
	"CURRENCY": "Mata uang",
	"CURRENCY_TEXT": "Di sini Anda dapat mengubah mata uang default Anda. Anda akan melihat nilai hadiah posting/komentar pada mata uang ini.",
	"ABOUT_11": "<br><b>Daftar fitur</b> <br>-akses unik artikel dalam subjek Anda tertarik membaca. <br> -Terlibat dengan penulis dengan komentar, membahas topik. <br>-Voting untuk posting ke penulis hadiah serta mendapatkan pahala pengkurasian. <br>-Publish artikel, posting blog dan host mereka secara gratis dan mendapatkan imbalan dengan melibatkan dan mendapatkan pengikut. <br>-Menulis artikel tentang pergi, menyimpan draf beberapa posting untuk kemudian publikasi. <br>-Bookmark favorit artikel untuk dibaca nanti. <br>-Exchange atau uang tunai penghasilan Anda. <br>-Mengirim dana kepada penulis atau pengguna, temanmu, pengikutmu, dll <br>-ikuti menarik penulis, blogger. <br> -Cari pengikutnya dan penulis Anda mengikuti Anda. <br>-Get pemberitahuan untuk tetap berhubungan dengan pengikut Anda dan diskusi Anda yang terlibat in. <br>-pencarian untuk menarik tags/Kategori artikel, penulis. <br> -Mempersonalisasikan profil Anda. <br>-Banyak lebih banyak fitur untuk datang. <br><br><b>Keamanan</b> <br>1. App tidak pernah mengakses atau memegang pengguna dana. <br>2. app menawarkan model keamanan sisi klien dengan private key host secara lokal dan tidak pernah dikirimkan ke server apapun, Anda bertanggung jawab untuk membuat cadangan password Anda. <br>3. app menawarkan antarmuka pengguna yang sederhana, menarik dan pengalaman <br>4. App menawarkan lapisan tambahan keamanan dengan kode pin <br><br>harga mendukung platform Steem dan Golos. <br>",
	"FOUNDER": "Pendiri dan pengembang",
	"ADD_ACCOUNT": "Tambah akun",
	"PLATFORM": "Platform",
	"ESCROW_AGENT": "Agen escrow",
	"RATIFICATION_DEADLINE": "Ratifikasi tenggat waktu",
	"ESCROW_EXPIRATION": "Escrow kadaluarsa",
	"ESCROW_FEE": "Escrow biaya",
	"ESCROW_TERMS": "Escrow persyaratan"
}
},{}],117:[function(require,module,exports){
module.exports={
	"HOME": "Pagina Iniziale",
	"LOGIN": "Accedi",
	"LOGOUT": "Esci",
	"PROFILE": "Profilo",
	"FOLLOW": "Chi Segui",
	"BOOKMARKS": "Preferiti",
	"TRANSFER": "Trasferimenti",
	"MARKET": "Mercato",
	"SETTINGS": "Impostazioni",
	"ABOUT": "Info",
	"ABOUT_1": "dove chiunque può guadagnare ricompense per i propri contenuti!",
	"ABOUT_2": "è offerto dalla piattaforma {{platformname}}. L'app è creata da",
	"ABOUT_3": "ed è un progetto per dispositivi mobili, open-source e portato avanti dalla community. Offre l'accesso per la lettura, il commento, il voto, e la pubblicazione di contenuti. Caratteristiche offerte dalla {{platformname}} blockchain e da {{sitename}}",
	"ABOUT_4": "1. L'app non ha mai l'accesso nè il controllo sui fondi dell'utente.",
	"ABOUT_5": "2. L'app offre un modello di sicurezza \"lato cliente\", grazie alle chiavi private memorizzate localmente e mai trasmesse ad alcun server.",
	"ABOUT_6": "3. L'app offre un'esperienza e un'inferfaccia grafica semplice e attraente.",
	"ABOUT_7": "4. L'app non richiede mai l'inserimento di informazioni personali da parte dell'utente",
	"ABOUT_8": "Vota good-karma come testimonial",
	"ABOUT_9": "Contatti/Feedback:",
	"ABOUT_10": "Maggiori informazioni:",
	"REMOVE": "Elimina",
	"MARKET_VIEW": "Mercato",
	"PRICE": "Prezzo",
	"AMOUNT": "Importo",
	"TOTAL": "Totale",
	"NOORDERS": "Nessun ordine aperto",
	"DATE": "Data",
	"BUY": "Compra",
	"SELL": "Vendi",
	"OPEN": "Apri",
	"HISTORY": "Cronologia",
	"FOLLOW_BACK": "Segui",
	"FOLLOWED": "Seguito",
	"UNFOLLOW": "Smetti di seguire",
	"FOLLOWING": "Seguito",
	"FOLLOWERS": "Followers",
	"SEARCH_FOLLOWERS": "Cerca tra i tuoi followers",
	"SEARCH_FOLLOWING": "Cerca tra chi segui",
	"BY": "da",
	"IN": "in",
	"MENU": "Menu",
	"BOOKMARK": "Aggiungi ai preferiti",
	"REBLOG": "Condividi",
	"UPVOTE": "Vota",
	"DOWNVOTE": "Disapprova",
	"UNVOTE_DOWNVOTED": "Rimuovi Downvote",
	"UNVOTE_UPVOTED": "Rimuovi Upvote",
	"REPLY": "Rispondi",
	"EDIT": "Modifica",
	"POST_1": "Swipe a sinistra sui commenti per visualizzare le opzioni",
	"POST_2": "Clicca sui commenti per visualizzare i sotto-commenti",
	"OPTIONS": "Opzioni",
	"RESTEEMED_BY": "Contdiviso da",
	"NOTHING_HERE": "Non c'è ancora niente qui...",
	"BALANCES": "Saldi",
	"PROFILE_1": "{{platformname}}, sono tokens che possono essere scambiati. {{platformname}} possono essere convertiti in {{platformpower}} attraverso un processo chiamato powering up.",
	"PROFILE_2": " \n",
	"PROFILE_3": "I tokens valgono circa {{platformsunit}} di {{platformname}}. ",
	"ESTIMATED_VALUE": "Valore Stimato",
	"PROFILE_4": "Il valore stimato si basa sulla media degli ultimi 7 giorni di {{platformname}}.",
	"TRANSACTION_HISTORY": "Cronologia delle transazioni",
	"POSTING": "Pubblicazione",
	"PROFILE_5": "La \"posting key\" è utilizzata per la pubblicazione e la votazione di contenuti. Essa dovrebbe essere diversa dall'active e dall'owner key.",
	"OWNER": "Proprietario",
	"PROFILE_6": "La \"owner key\" è la chiave maestra dell'account ed è richiesta per modificare le altre chiavi. Tale chiave privata, così come la password principale, dovrebbero essere tenute offline il più possibile.",
	"ACTIVE": "Attività",
	"PROFILE_7": "La \"active key\" è utilizzata per effettuare trasferimenti e piazzare ordini nel mercato interno.",
	"MEMO": "Memo",
	"PROFILE_8": "La \"memo key\" è utilizzata per la creazione e lettura dei memo.",
	"BLOG": "Blog",
	"POSTS": "Commenti",
	"REPLIES": "Risposte",
	"WALLET": "Portafoglio",
	"TAG": "Tag",
	"USER": "Utente",
	"CLOSE": "Chiudi",
	"TO": "A",
	"ASSET": "Asset",
	"SEND": "Invia",
	"SECURITY": "Sicurezza",
	"AVAILABLE": "Disponibile",
	"PUBLIC_MEMO": "Memo pubblica",
	"TO_DESC": "Utente ad esempio good-karma",
	"PIN_CODE": "Codice PIN",
	"PIN_TEXT": "Il codice PIN ti aiuta a rendere sicuri l'applicazione e i tuoi dati. <br/><br/><b>Attenzione:</b> una volta attivato, hai al massimo 4 tentativi per sbloccare l'app, se ti dimentichi il PIN o fallisci i tentativi, l'applicazione rimuoverà i dati utente. Potrai fare nuovamente il login e continuare ad usare l'applicazione.",
	"NOTIFICATIONS": "Notifiche",
	"VOTE_TEXT": "Riceverai una notifica quando qualcuno vota i tuoi contenuti!<br/><br>Nota:</b> La notifica includerà il tipo di voto. (up-vote, down-vote, un-vote).",
	"VOTE": "Voto",
	"COMMENT_TEXT": "Riceverai una notifica quando qualcuno commenta un tuo post o risponde ad un tuo commento!<br/><br>Nota:</b> Riceverai una notifica anche quando qualcuno modifica il suo commento!",
	"COMMENT": "Commento",
	"FOLLOW_TEXT": "Riceverai una notifica quando qualcuno inizia o smette di seguirti!",
	"MENTIONS": "Menzione",
	"MENTIONS_TEXT": "Riceverai una notifica quando qualcuno ti menziona in un suo post o commento!",
	"RESTEEM": "Condividi",
	"RESTEEM_TEXT": "Riceverai una notifica quando qualcuno condivide il tuo post!",
	"CONFIGURATIONS": "Configurazioni",
	"VOTING": "Voto",
	"VOTING_TEXT": "Il peso del voto o la percentuale influenzano il potere di voto nell'app, così puoi regolare il premio del tuo voto. <br/><br/><b>Nota:</b> questo cambierà anche peso/percentuale del downvote.",
	"SERVER": "Server",
	"SERVER_TEXT": "Raccomandati",
	"SAVE_CHANGES": "Salva le modifiche",
	"VOTERS_INFO": "Info Votanti",
	"WELCOME_BACK": "Bentornato!",
	"LOGIN_1": "Accedi fornendo il tuo Nome Utente e la tua Password per continuare.",
	"LOGIN_2": "La \"posting key\" viene usata per pubblicare nuovi post e commenti, per votare, e per gestire chi segui",
	"LOGIN_3": "La \"active key\" è utilizzata per i trasferimenti e per aggiornare la foto del profilo.",
	"LOGIN_4": "Le tue credenziali sono memorizzate localmente sul dispositivo. Se fai il Logout le credenziali verranno rimosse!",
	"DONT_HAVE": "Non hai un account?",
	"SIGN_UP_NOW": "Registrati ora",
	"CANCEL": "Cancella",
	"ADVANCED": "Avanzate",
	"ACTIVE_PRIKEY": "Chiave privata attiva",
	"POSTING_PRIKEY": "Chiave Privata per pubblicazione",
	"MASTER_PASS": "Password principale",
	"USERNAME": "Nome Utente",
	"CARD_VIEW": "Vista estesa",
	"COMPACT_VIEW": "Vista compatta",
	"SEARCH": "Cerca",
	"SUBMIT_A_STORY": "Inserisci un articolo",
	"REPLYTO": "Rispondi a",
	"POST": "Pubblica",
	"PREVIEW": "Anteprima",
	"DEFAULT": "Predefinito 50% / 50%",
	"POWERUP": "Power Up 100%",
	"DECLINE_PAYOUT": "Rifiuta ricompensa",
	"SAVE_FOR_LATER": "SALVA PER DOPO",
	"CLEAR": "CANCELLA",
	"POST_CONTENT": "Testo del post",
	"COMMENT_CONTENT": "Testo del commento",
	"TITLE": "Titolo",
	"TAGS": "Tags",
	"NOT_MATCH": "NON TROVATO",
	"CONFIRM_PIN": "Conferma PIN",
	"INCORRECT": "INCORRETTO",
	"OPENING_POST": "apertura post",
	"SET_PIN": "Imposta PIN",
	"ENTER_PIN": "Inserisci PIN",
	"ARE_YOU_SURE": "Sei sicuro?",
	"REBLOG_TEXT": "Il reblog è irreversibile, vuoi continuare?",
	"BROADCAST_ERROR": "Errore di trasmissione, riprova!",
	"SUCCESS": "Successo",
	"REBLOGGED_POST": "Post condiviso!",
	"LOGIN_FAIL": "Accesso fallito! Per favore, assicurati di aver richiesto l'accesso tramite la tua password principale o avendo inserito la \"Posting private key\" se hai scelto la modalità Avanzata.",
	"LOGIN_FAIL_A": "Accesso fallito! Per favore, assicurati di aver richiesto l'accesso tramite la tua password principale o avendo inserito la tua \"Active private key\" se hai scelto la modalità Avanzata.",
	"WARNING": "Attenzione",
	"VOTE_FOR_WITNESS": "Votazione per il witness",
	"VOTED_FOR_WITNESS": "Votato per il testimonial",
	"AGO": "fa",
	"FROM_NOW": "da ora",
	"SECS": "secondi",
	"A_MIN": "un minuto",
	"MINS": "minuti",
	"AN_HOUR": "un'ora",
	"HOURS": "ore",
	"A_DAY": "un giorno",
	"DAYS": "giorni",
	"A_MONTH": "un mese",
	"MONTHS": "mesi",
	"A_YEAR": "un anno",
	"YEARS": "anni",
	"MIN_READ": "minuti di lettura.",
	"DOWNVOTE_FLAG": "Downvote o segnala",
	"CAPTURE_PICTURE": "Scatta Foto",
	"SELECT_PICTURE": "Seleziona foto",
	"SET_CUSTOM_URL": "Imposta URL personalizzata",
	"INSERT_PICTURE": "Inserisci Immagine",
	"ERROR": "Errore",
	"UPLOAD_ERROR": "Errore durante il caricamento",
	"CAMERA_CANCELLED": "Camera cancellata",
	"SET_URL": "Imposta URL",
	"DIRECT_LINK_PICTURE": "Link web diretto per l'immagine",
	"COMMENT_SUBMITTED": "Commento inserito!",
	"DELETE_COMMENT": "La cancellazione dei commenti è irreversibile...",
	"DELETED_COMMENT": "Commento rimosso",
	"UPLOADING_PICTURE": "Sto caricando l'immagine",
	"UPLOAD_COMPLETED": "Caricamento completato",
	"UPLOAD_FAILED": "Caricamento fallito",
	"PASSWORD_INCORRECT": "Nome Utente o Password errati",
	"INFO": "Info",
	"QR_TEXT": "Posiziona un codice QR all'interno dell'area di scansione",
	"BALANCE_TEXT": "Assicurati che il tuo bilancio sia sufficiente per la transazione",
	"NONEXIST_USER": "L'utente a cui stai cercando di trasferire dei fondi non esiste!",
	"TRANSFER_TEXT": "Sei sicuro di voler procedere con il trasferimento?",
	"CONFIRMATION": "Conferma",
	"TX_BROADCASTED": "La transazione è stata trasmessa",
	"FEED": "Feed",
	"TRENDING": "Di tendenza",
	"HOT": "Popolari",
	"NEW": "Nuovo",
	"PROMOTED": "Sponsorizzati",
	"VOTES": "Voti",
	"PAYOUT": "Pagamento",
	"COMMENTS": "Commenti",
	"TRENDING_30": "Trending per 30 giorni",
	"SORT_POST_BY": "Ordina per:",
	"PAYOUT_CYCLE": "Ciclo dei pagamenti",
	"POTENTIAL_PAYOUT": "Payout potenziale",
	"PAST_PAYOUT": "Payout passato",
	"AUTHOR_PAYOUT": "Ricompensa dell'autore",
	"CURATION_PAYOUT": "Ricompensa dei curatori",
	"POST_SUBMITTED": "L'articolo è stato inserito!",
	"POST_LATER": "Inserisci Port più tardi!",
	"SAVED": "Salvato",
	"CLEARED": "Cancellato",
	"FLAGGING_TEXT": "Segnalare un post può annullare le ricompense e rendere questo materiale meno visibile. <br><br> La segnalazione dovrebbe essere usata per i seguenti motivi: <ul> truffa o Plagio </li><li> incitazione all'odio o Trolling </li><li> post inseriti intenzionalmente in categorie errate o Spam</li></ul>",
	"REQUEST_LIMIT_TEXT": "Limite raggiunto. Verifica altri trend/tags!",
	"POST_IS_UNBOOKMARK": "Il post è stato rimosso dai segnalibri!",
	"POST_IS_BOOKMARK": "Il post è stato aggiunto ai segnalibri!",
	"RESET": "Reimposta",
	"MODIFY_PICTURE": "Modifica la Foto del Profilo",
	"MODIFY_COVER_PICTURE": "Modifica l'immagine di copertina",
	"ACTIVE_KEY_REQUIRED_TEXT": "Per favore, inserisci la tua \"Active private key\" se hai scelto l'accesso in modalità Avanzata!",
	"RESET_PICTURE_TEXT": "Questa azione resetterà l'immagine del profilo",
	"RESET_COVER_PICTURE_TEXT": "Questa azione resetterà l'immagine di copertina",
	"UPDATE_REQUIRES_RESTART": "Un aggiornamento lato server richiede il Riavvio dell'applicazione!",
	"SETTINGS_UPDATED": "Impostazioni aggiornate!",
	"LANGUAGES": "Lingua",
	"LANGUAGES_TEXT": "Qui puoi cambiare la lingua dell'app",
	"LOGIN_TO_X": "Questa operazioni richiede che l'utente abbia effettuato l'accesso. Per favore, accedi e riprova.",
	"GALLERY": "Galleria Immagini",
	"TRANSLATIONS": "Traduttori",
	"SHARE": "Condividi",
	"MARKETPLACE": "Altre applicazioni",
	"EXCHANGE": "Scambio",
	"DRAFTS": "Bozze",
	"POST_IS_UNDRAFT": "Il post è stato rimosso dalle bozze!",
	"POST_IS_DRAFT": "Il post è stato aggiunto alle bozze!",
	"SWIPE_LEFT": "Trascina a sinistra per vedere le opzioni",
	"MANAGE": "Gestisci",
	"IMAGE_REMOVED": "Immagine rimossa",
	"COPY": "Copia",
	"NO_IMAGE": "Non hai ancora caricato un'immagine!",
	"PULL_DOWN_TO_REFRESH": "Trascina in basso per aggiornare",
	"EXTERNAL_APPS": "Applicazioni esterne",
	"PLUGINS": "PlugIns",
	"SUGGEST": "Suggerisci",
	"COMING_SOON": "Prossimamente",
	"CHAIN": "Chain",
	"CHAIN_TEXT": "Qui puoi cambiare la blockchain o la piattaforma predefinita.",
	"CURRENCY": "Valuta",
	"CURRENCY_TEXT": "Qui puoi modificare la tua valuta predefinita. Vedrai il valore di ricompensa post/commento in questa valuta.",
	"ABOUT_11": "<br><b>Lista delle funzionalità</b><br>- Accesso agli articoli sulle tematiche di vostro interesse. <br>- Interazione con gli autori degli articoli commentando e discutendo sugli argomenti.<br>- Possibilità di votare i post per ricompensare gli autori e, allo stesso tempo, guadagnare ricompense dai voti dati.<br>- Possibilità di pubblicare i vostri articoli, postarli sul blog gratuitamente e guadagnare ricompense interagendo e incrementando il numero dei followers. <br>- Possibilità di scrivere articoli da pubblicare, salvando le bozze per pubblicarli in seguito.<br>- Utilizzo di un \"segnalibro\" per gli articoli preferiti, in modo da poterli leggere successivamente.<br>- Possibilità di scambiare o incassare i vostri guadagni.<br>- Possibilità di inviare i vostri fondi ad altri autori o utenti, amici, followers, etc. <br>- Ricerca dei vostri followers e degli autori che seguite.<br>- Ricezione di notifiche per rimanere aggiornati sui vostri followers e sulle discussioni in cui siete coinvolti. <br>- Ricerca di articoli per tags/categorie di vostro interesse e autori.<br>- Possibilità di personalizzare il proprio profilo.<br>- Molte altre funzionalità sono in fase di sviluppo.<br><br><b>Sicurezza</b><br>1. L'Applicazione non avrà mai accesso ai fondi degli utenti nè li potrà detenere. <br>2. L'Applicazione offre un modello di sicurezza Client-side, con Chiavi private detenute localmente e mai inviate ad alcun server. Tu stesso sarai responsabile di fare il backup delle tue Chiavi Private/Passwords. <br>3. L'Applicazione offre interfaccia ed esperienze semplice e attraenti per l'utente. <br>4. L'Applicazione offre un ulteriore livello di sicurezza tramite l'uso di codice Pin. <br><br>eSteem supporta le piattaforme di Steem e di Golos.<br>",
	"FOUNDER": "Fondatore e responsabile dello sviluppo",
	"ADD_ACCOUNT": "Aggiungi account",
	"PLATFORM": "Piattaforma",
	"ESCROW_AGENT": "Depositario",
	"RATIFICATION_DEADLINE": "Scadenza della ratificazione",
	"ESCROW_EXPIRATION": "Scadenza del deposito",
	"ESCROW_FEE": "Tassa del deposito",
	"ESCROW_TERMS": "Condizioni e termini del Deposito"
}
},{}],118:[function(require,module,exports){
module.exports={
	"HOME": "Kediaman",
	"LOGIN": "Log Masuk",
	"LOGOUT": "Log Keluar",
	"PROFILE": "Profil",
	"FOLLOW": "Ikut",
	"BOOKMARKS": "Penanda buku",
	"TRANSFER": "Pindah",
	"MARKET": "Pasar",
	"SETTINGS": "Tetapan",
	"ABOUT": "Mengenai",
	"ABOUT_1": "di mana anda terima ganjaran untuk isi kandundan anda!",
	"ABOUT_2": "dikuasai oleh platform {{platformname}}, aplikasi dicipta oleh.",
	"ABOUT_3": "dan ianya sumber terbuka, komuniti yang didorong oleh projek mudah alih. Ia menawarkan akses kandungan untuk membaca, mengulas, mengundi, posting, pemindahan pendapatan, dan lain-lain ciri-ciri yang ditawarkan oleh {{platformname}} blockchain dan {{sitename}}.",
	"ABOUT_4": "1. Aplikasi ini tidak mempynyai akses ke akaun anda.",
	"ABOUT_5": "2. Aplikasi menawarkan keselamatan-klien, dengan kunci peribadi yang dihoskan dalam tempatan dan tidak akan dihantar ke mana-mana server lain.",
	"ABOUT_6": "3. Aplikasi menawarkan antaramuka pengguna yang mudah dan menarik.",
	"ABOUT_7": "4. Aplikasi tidak akan memerlukan pengguna untuk memasukkan maklumat peribadi.",
	"ABOUT_8": "Undi good-karma sebagai saksi",
	"ABOUT_9": "Hubungi/Maklum balas:",
	"ABOUT_10": "Info lanjut:",
	"REMOVE": "Membuang",
	"MARKET_VIEW": "Gambaran Pasaran",
	"PRICE": "Harga",
	"AMOUNT": "Jumlah",
	"TOTAL": "Jumlah",
	"NOORDERS": "Pesanan tidak terbuka untuk",
	"DATE": "Tarikh",
	"BUY": "Beli",
	"SELL": "Menjual",
	"OPEN": "Dibuka",
	"HISTORY": "Sejarah",
	"FOLLOW_BACK": "Ikut kembali",
	"FOLLOWED": "Diikuti",
	"UNFOLLOW": "Berhenti",
	"FOLLOWING": "Berikut",
	"FOLLOWERS": "Followers",
	"SEARCH_FOLLOWERS": "Cari pengikut",
	"SEARCH_FOLLOWING": "Cari pengikut",
	"BY": "oleh",
	"IN": "dalam",
	"MENU": "Menu",
	"BOOKMARK": "Penanda buku",
	"REBLOG": "Reblog",
	"UPVOTE": "Undi naik",
	"DOWNVOTE": "Undi (negatif)",
	"UNVOTE_DOWNVOTED": "Batalkan undi (negatif)",
	"UNVOTE_UPVOTED": "Batalkan undi",
	"REPLY": "Jawapan",
	"EDIT": "Edit",
	"POST_1": "Sapu ke kiri atas komen untuk melihat opsyen",
	"POST_2": "Ketuk atas komen untuk melihat sub-komen",
	"OPTIONS": "Pilihan",
	"RESTEEMED_BY": "Reblogged oleh",
	"NOTHING_HERE": "TIADA APA DI SINI",
	"BALANCES": "Baki",
	"PROFILE_1": "{{platformname}}, token cair yang boleh dipindahkan pada bila-bila masa. {{platformname}} boleh ditukar kepada {{platformpower}} di dalam proses yang dipanggil menjanakan.",
	"PROFILE_2": "{{platformpower}}, pengaruh token yang mendapat kuasa yang lebih untuk pegangan jangka panjang dan pengundian ke atas posting. Lebih banyak seseorang memegang lebih banyak yang boleh mempengaruhi ganjaran lain dan mendapat ganjaran untuk undian yang tepat.",
	"PROFILE_3": "Token bernilai kira-kira {{platformsunit}} daripada {{platformname}}.",
	"ESTIMATED_VALUE": "Anggaran nilai",
	"PROFILE_4": "Nilai anggaran ini adalah berdasarkan nilai purata 7 hari {{platformname}}.",
	"TRANSACTION_HISTORY": "Urus niaga",
	"POSTING": "PENEMPATAN",
	"PROFILE_5": "Kekunci posting digunakan untuk posting dan mengundi. Ia harus berbeza daripada kekunci aktif dan pemilik.",
	"OWNER": "Pemilik",
	"PROFILE_6": "Kekunci pemilik adalah kunci utama untuk akaun dan dikehendaki menukar kekunci yang lain. Kunci peribadi dan kata laluan untuk pemilik kunci perlu disimpan di luar talian sebanyak mungkin.",
	"ACTIVE": "Aktif",
	"PROFILE_7": "Kekunci yang aktif digunakan untuk membuat pemindahan dan membuat pesanan dalam pasaran dalaman.",
	"MEMO": "Memo",
	"PROFILE_8": "Kekunci memo digunakan untuk mencipta dan membaca memo.",
	"BLOG": "Blog",
	"POSTS": "Jawatan",
	"REPLIES": "Balasan",
	"WALLET": "Wallet",
	"TAG": "Tag",
	"USER": "Pengguna",
	"CLOSE": "Tutup",
	"TO": "To",
	"ASSET": "Aset",
	"SEND": "Hantar",
	"SECURITY": "Keselamatan",
	"AVAILABLE": "Tersedia",
	"PUBLIC_MEMO": "Memo awam",
	"TO_DESC": "Pengguna contohnya good-karma",
	"PIN_CODE": "Kod Pin",
	"PIN_TEXT": "Kod PIN membantu anda untuk mendapatkan aplikasi dan data anda. <br/> <br/> <b>Nota:</b> Sebaik sahaja dibolehkan, anda mempunyai maksimum 4 cuba untuk membuka, jika anda terlupa pin atau gagal, aplikasi akan memadam log masuk data pengguna. Anda boleh login semula dan terus menggunakan aplikasi.",
	"NOTIFICATIONS": "Warta",
	"VOTE_TEXT": "Anda akan mendapat pemberitahuan apabila seseorang undi kandungan anda! <br/> <b>Nota:</b> pemberitahuan termasuk mengundi berat serta mesej amaran. (sama ada undi (positif), undi (negatif), membatalkan undi).",
	"VOTE": "Vote",
	"COMMENT_TEXT": "Anda akan mendapat pemberitahuan apabila seseorang atau memberi komen pada posting atau komen anda! <br/> <b>Nota:</b> Pemberitahuan termasuk apabila seseorang <b>suntingan</b> komen mereka juga.",
	"COMMENT": "Komen",
	"FOLLOW_TEXT": "Anda akan mendapatkan pemberitahuan apabila seseorang mengikuti atau ikut anda!",
	"MENTIONS": "Menyebut",
	"MENTIONS_TEXT": "Anda akan mendapat pemberitahuan apabila seseorang menyebut anda di post/komen!",
	"RESTEEM": "Reblog",
	"RESTEEM_TEXT": "Anda akan mendapat pemberitahuan apabila seseorang reblog post anda!",
	"CONFIGURATIONS": "Konfigurasi",
	"VOTING": "Mengundi",
	"VOTING_TEXT": "Berat undi atau peratus menjejaskan kuasa mengundi pada aplikasi, supaya anda boleh mengawal ganjaran mengundi. <br/> <br/> <b>Nota:</b> Ini akan mengubah berat/peratusan undian untuk undi (negatif) juga dan ia adalah di mana-mana aplikasi",
	"SERVER": "Server",
	"SERVER_TEXT": "Disyorkan",
	"SAVE_CHANGES": "Simpan perubahan",
	"VOTERS_INFO": "Info pengundi",
	"WELCOME_BACK": "Selamat kembali!",
	"LOGIN_1": "Daftar Masuk dengan username dan password anda untuk teruskan.",
	"LOGIN_2": "Kunci posting digunakan untuk pos komen, undi, ikut.",
	"LOGIN_3": "Kunci aktif digunakan untuk pemindahan dan kemaskini gambar profil.",
	"LOGIN_4": "Kelayakan pengguna disimpan secara tempatan pada peranti. Apabila log keluar kelayakan akan dikeluarkan!",
	"DONT_HAVE": "Tidak ada akaun?",
	"SIGN_UP_NOW": "Daftarlah sekarang",
	"CANCEL": "Batal",
	"ADVANCED": "Advanced",
	"ACTIVE_PRIKEY": "Kunci aktif persendirian",
	"POSTING_PRIKEY": "Kunci posting persendirian",
	"MASTER_PASS": "Kata laluan induk/utama",
	"USERNAME": "Nama Pengguna",
	"CARD_VIEW": "Kad paparan",
	"COMPACT_VIEW": "Paparan yang padat",
	"SEARCH": "Carian",
	"SUBMIT_A_STORY": "Hantar cerita",
	"REPLYTO": "Balas kepada",
	"POST": "Hantar",
	"PREVIEW": "Preview",
	"DEFAULT": "Lalai 50% / 50%",
	"POWERUP": "Mengekuasai 100%",
	"DECLINE_PAYOUT": "Menolak bayaran",
	"SAVE_FOR_LATER": "SIMPAN UNTUK KEMUDIAN",
	"CLEAR": "JELAS",
	"POST_CONTENT": "Post kandungan",
	"COMMENT_CONTENT": "Komen kandungan",
	"TITLE": "Tajuk",
	"TAGS": "Tags",
	"NOT_MATCH": "TIDAK PADAN",
	"CONFIRM_PIN": "Sahkan PIN",
	"INCORRECT": "BETUL",
	"OPENING_POST": "pembukaan post",
	"SET_PIN": "Tetapkan PIN",
	"ENTER_PIN": "Masukkan PIN",
	"ARE_YOU_SURE": "Adakah anda pasti?",
	"REBLOG_TEXT": "Reblog tidak boleh dibalikkan, adakah anda pasti hendak meneruskan?",
	"BROADCAST_ERROR": "Disiarkan ralat, cuba lagi!",
	"SUCCESS": "Kejayaan",
	"REBLOGGED_POST": "Reblogged post!",
	"LOGIN_FAIL": "Log masuk gagal! Sila pastikan anda telah log masuk dengan kata laluan induk atau kunci peribadi posting anda ke atas log masuk jika anda telah memilih mod Advanced.",
	"LOGIN_FAIL_A": "Log masuk gagal! Sila pastikan anda telah log masuk dengan kata laluan induk atau kunci peribadi posting anda ke atas log masuk jika anda telah memilih mod Advanced.",
	"WARNING": "Amaran",
	"VOTE_FOR_WITNESS": "Mengundi untuk saksi",
	"VOTED_FOR_WITNESS": "Mengundi untuk saksi",
	"AGO": "Lalu",
	"FROM_NOW": "dari sekarang",
	"SECS": "saat",
	"A_MIN": "minit",
	"MINS": "minit",
	"AN_HOUR": "sejam",
	"HOURS": "jam",
	"A_DAY": "satu hari",
	"DAYS": "hari",
	"A_MONTH": "sebulan",
	"MONTHS": "bulan",
	"A_YEAR": "setahun",
	"YEARS": "tahun",
	"MIN_READ": "minit membaca",
	"DOWNVOTE_FLAG": "Vote (negatif) atau Menandai",
	"CAPTURE_PICTURE": "Tangkap gambar",
	"SELECT_PICTURE": "Pilih gambar",
	"SET_CUSTOM_URL": "Tetapkan URL boleh-ubah",
	"INSERT_PICTURE": "Masukkan gambar",
	"ERROR": "Ralat",
	"UPLOAD_ERROR": "Ralat muat naik",
	"CAMERA_CANCELLED": "Kamera Telah Dibatalkan",
	"SET_URL": "Tetapkan URL",
	"DIRECT_LINK_PICTURE": "Pautan web langsung gambar",
	"COMMENT_SUBMITTED": "Komen dihantar!",
	"DELETE_COMMENT": "Menghapuskan komen tidak boleh dibalikkan...",
	"DELETED_COMMENT": "Komen dihapuskan",
	"UPLOADING_PICTURE": "Muat Naik Gambar",
	"UPLOAD_COMPLETED": "Muat Naik Selesai",
	"UPLOAD_FAILED": "Muat Naik Gagal",
	"PASSWORD_INCORRECT": "Nama akaun atau kata laluan tidak betul",
	"INFO": "Maklumat",
	"QR_TEXT": "Letakkan Kod QR di dalam kawasan imbasan",
	"BALANCE_TEXT": "Pastikan anda mempunyai baki yang mencukupi untuk transaksi!",
	"NONEXIST_USER": "Pengguna yang anda cuba untuk memindahkan dana, tidak wujud!",
	"TRANSFER_TEXT": "Adakah anda pasti anda mahu memindahkan?",
	"CONFIRMATION": "Pengesahan",
	"TX_BROADCASTED": "Urus niaga disiarkan",
	"FEED": "Suapan",
	"TRENDING": "Tren",
	"HOT": "Panas",
	"NEW": "Baru",
	"PROMOTED": "Digalakkan",
	"VOTES": "Undi",
	"PAYOUT": "Pembayaran",
	"COMMENTS": "KOMENTAR",
	"TRENDING_30": "Tren untuk 30 hari",
	"SORT_POST_BY": "Posting susun oleh:",
	"PAYOUT_CYCLE": "Kitaran pembayaran",
	"POTENTIAL_PAYOUT": "Potensi Pembayaran",
	"PAST_PAYOUT": "Pembayaran Masa Lalu",
	"AUTHOR_PAYOUT": "Bayaran Penulis",
	"CURATION_PAYOUT": "Pembayaran Curation",
	"POST_SUBMITTED": "Pos dihantar!",
	"POST_LATER": "Pos untuk penghantaran lewat!",
	"SAVED": "tersimpan",
	"CLEARED": "DIPADAMKAN",
	"FLAGGING_TEXT": "Menanda atau undian (negatif) pos boleh keluarkan ganjaran dan jadikan bahan ini kurang kelihatan. <br><br>Bendera hendaklah digunakan untuk perkara-perkara berikut: <ul><li>penipuan atau plagiat</li> <li>ucapan benci atau Internet Trolling</li> <li>Kategori yang mengelirukan atau Spam</li></ul>",
	"REQUEST_LIMIT_TEXT": "Had pemintaan dicapai. Menyemak aliran tag lain!",
	"POST_IS_UNBOOKMARK": "Pos dialih keluar daripada penanda!",
	"POST_IS_BOOKMARK": "Post ditambah ke penanda!",
	"RESET": "Tetapkan semula",
	"MODIFY_PICTURE": "Tukar Gambar Profil",
	"MODIFY_COVER_PICTURE": "Tukar Gambar Cover",
	"ACTIVE_KEY_REQUIRED_TEXT": "Sila berikan kunci peribadi yang aktif jika anda telah memilih mod login maju!",
	"RESET_PICTURE_TEXT": "Ini akan menetapkan semula gambar profil pengguna",
	"RESET_COVER_PICTURE_TEXT": "Ini akan menetapkan semula gambar profil pengguna",
	"UPDATE_REQUIRES_RESTART": "Kemaskini pelayan memerlukan reset!",
	"SETTINGS_UPDATED": "Tetapan dikemaskini!",
	"LANGUAGES": "BAHASA",
	"LANGUAGES_TEXT": "Di sini anda boleh menukar bahasa daripada aplikasi ini.",
	"LOGIN_TO_X": "Operasi ini memerlukan pengguna log masuk dengan kata laluan utama, kekunci aktif/posting. Sila log masuk dan cuba lagi.",
	"GALLERY": "GALERI",
	"TRANSLATIONS": "TERJEMAHAN",
	"SHARE": "Kongsi",
	"MARKETPLACE": "Pasaran",
	"EXCHANGE": "Pertukaran",
	"DRAFTS": "Draf",
	"POST_IS_UNDRAFT": "Pos dialih keluar daripada draf!",
	"POST_IS_DRAFT": "Post ditambah kepada draf!",
	"SWIPE_LEFT": "Sapu kiri untuk melihat opsyen",
	"MANAGE": "Urus",
	"IMAGE_REMOVED": "Imej dikeluarkan",
	"COPY": "Salin",
	"NO_IMAGE": "Anda tidak upload gambar apa-apa, lagi!",
	"PULL_DOWN_TO_REFRESH": "Tarik ke bawah untuk memuat semula",
	"EXTERNAL_APPS": "Aplikasi luaran",
	"PLUGINS": "Plugin",
	"SUGGEST": "Cadangkan",
	"COMING_SOON": "Akan datang",
	"CHAIN": "Chain",
	"CHAIN_TEXT": "Di sini anda boleh menukar platform blockchain atau lalai.",
	"CURRENCY": "Matawang",
	"CURRENCY_TEXT": "Di sini anda boleh menukar Mata Wang lalai anda. Anda akan melihat post/komen ganjaran nilai Mata Wang ini.",
	"ABOUT_11": "<br><b>Senarai ciri-ciri</b> <br>akses unik artikel dalam mana-mana subjek anda berminat membaca. <br> -Melibatkan diri dengan penulis oleh mengulas, membincangkan topik. <br>-Pengundian bagi jawatan kepada pengarang ganjaran serta mendapat ganjaran curation. <br>-Siarkan artikel, posting blog anda dan host mereka secara percuma dan mendapat ganjaran dengan melibatkan dan mendapat pengikut. <br>Tulis artikel mengenai pergi, simpan beberapa Draf jawatan untuk penerbitan kemudian. <br>-Bookmark artikel kegemaran membaca kemudian. <br>-Pertukaran atau Wang Tunai daripada pendapatan anda. <br>Menghantar dana anda kepada mana-mana pengarang atau pengguna, rakan-rakan, pengikut, dan lain-lain <br>-ikut penulis menarik, Blogger. <br> -Cari pengikut dan penulis anda mengikuti anda. <br>-Dapatkan pemberitahuan untuk kekal berhubung dengan pengikut dan perbincangan anda anda akan terlibat in. <br>-Cari label/kategori menarik artikel, pengarang. <br> -Memperibadikan profil anda. <br>-Banyak lebih banyak ciri untuk datang. <br><br><b>Keselamatan</b> <br>1. Aplikasi tidak pernah mencapai atau memegang wang pengguna. <br>2. aplikasi menawarkan model Keselamatan-klien, dengan kunci peribadi yang dihoskan dalam negara dan tidak pernah dihantar ke mana-mana pelayan, anda bertanggungjawab untuk menyandarkan kata laluan anda. <br>3. aplikasi menawarkan antara muka pengguna yang mudah, menarik dan pengalaman <br>4. Aplikasi menawarkan tambahan lapisan Keselamatan dengan harga <br><br>kod pin menyokong platform Steem dan Golos. <br>",
	"FOUNDER": "Pengasas dan pemaju utama",
	"ADD_ACCOUNT": "Tambah akaun",
	"PLATFORM": "Platform",
	"ESCROW_AGENT": "Ejen escrow",
	"RATIFICATION_DEADLINE": "Tarikh akhir kelulusan",
	"ESCROW_EXPIRATION": "Escrow tamat",
	"ESCROW_FEE": "Yuran escrow",
	"ESCROW_TERMS": "Terma-terma escrow"
}
},{}],119:[function(require,module,exports){
module.exports={
	"HOME": "Home",
	"LOGIN": "Inloggen",
	"LOGOUT": "Uitloggen",
	"PROFILE": "Profiel",
	"FOLLOW": "Volgen",
	"BOOKMARKS": "Bladwijzers",
	"TRANSFER": "Overschrijven",
	"MARKET": "Markt",
	"SETTINGS": "Instellingen",
	"ABOUT": "Over",
	"ABOUT_1": "waar iedereen een beloning kan verdienen!",
	"ABOUT_2": "mede mogelijk gemaakt door {{platformname}} platform. App gemaakt door",
	"ABOUT_3": "en het is een open-source, community gedreven project. Het biedt mogelijkheden tot lezen, reageren, stemmen, berichten plaatsen, inkomsten overschrijven, etc. functies aangeboden door {{platformname}} blockchain and {{sitename}}.",
	"ABOUT_4": "1. De app heeft geen toegang tot fondsen van de gebruiker.",
	"ABOUT_5": "2. De app biedt een beveiligingsmodel aan de kant van de gebruiker, met privésleutels die lokaal worden opgeslagen en nooit naar servers worden verzonden.",
	"ABOUT_6": "3. De app biedt simpele, aantrekkelijke gebruikersomgevingen en ervaringen.",
	"ABOUT_7": "4. De app vraagt u nooit om persoonlijke informatie.",
	"ABOUT_8": "Stem op good-karma als witness",
	"ABOUT_9": "Contact/Terugkoppeling:",
	"ABOUT_10": "Meer informatie:",
	"REMOVE": "Verwijderen",
	"MARKET_VIEW": "Markt Weergave",
	"PRICE": "Prijs",
	"AMOUNT": "Bedrag",
	"TOTAL": "Totaal",
	"NOORDERS": "Geen uitstaande opdrachten voor",
	"DATE": "Datum",
	"BUY": "Kopen",
	"SELL": "Verkopen",
	"OPEN": "Open",
	"HISTORY": "Geschiedenis",
	"FOLLOW_BACK": "Terugvolgen",
	"FOLLOWED": "Gevolgd",
	"UNFOLLOW": "Ontvolgen",
	"FOLLOWING": "Volgend",
	"FOLLOWERS": "Volgers",
	"SEARCH_FOLLOWERS": "Zoek volgers",
	"SEARCH_FOLLOWING": "Zoek volgenden",
	"BY": "door",
	"IN": "in",
	"MENU": "Menu",
	"BOOKMARK": "Bladwijzer",
	"REBLOG": "Herblog",
	"UPVOTE": "Stem Omhoog",
	"DOWNVOTE": "Stem Omlaag",
	"UNVOTE_DOWNVOTED": "Downvote weghalen",
	"UNVOTE_UPVOTED": "Stem Omhaag weghalen",
	"REPLY": "Reageer",
	"EDIT": "Aanpassen",
	"POST_1": "Swipe naar links op een reactie om opties te zien",
	"POST_2": "Tik op een reactie om sub-reactie te zien",
	"OPTIONS": "Opties",
	"RESTEEMED_BY": "Herblogd door",
	"NOTHING_HERE": "Nog niets te zien hier...",
	"BALANCES": "Tegoeden",
	"PROFILE_1": "{{platformname}}, ruilbare valuta die altijd overgemaakt kan worden. {{platformname}} kan worden omgevormd naar {{platformpower}} in een proces genaamd powering up.",
	"PROFILE_2": "{{platformpower}}, invloedsvaluta die meer kracht verdienen door het op lange termijn te bewaren en door het stemmen op verhalen. Hoe meer u vasthoudt, hoe meer invloed u heeft op andermans opbrengsten.",
	"PROFILE_3": "Eenheden zijn ongeveer {{platformsunit}} {{platformname}} waard.",
	"ESTIMATED_VALUE": "Geschatte waarde",
	"PROFILE_4": "De geschatte waarde wordt gebaseerd op een 7-daags gemiddelde van waarde van {{platformname}}.",
	"TRANSACTION_HISTORY": "Transactiegeschiedenis",
	"POSTING": "Plaatsen",
	"PROFILE_5": "De posting sleutel wordt gebruikt voor het plaatsen van berichten en voor het stemmen op berichten. Deze zou anders moeten zijn dan de actieve- en eigenaarsleutels.",
	"OWNER": "Eigenaar",
	"PROFILE_6": "De eigenaarssleutel is de hoofdsleutel voor het account en is nodig om andere sleutels aan te passen. De privésleutel of wachtwoord voor de eigenaarssleutel zou zo veel mogelijk offline gelaten moeten worden.",
	"ACTIVE": "Actief",
	"PROFILE_7": "De actieve sleutel wordt gebruikt om transacties en bestellingen te doen in de interne markt.",
	"MEMO": "Memo",
	"PROFILE_8": "De memo sleutel wordt gebruikt voor het maken en lezen van memo's.",
	"BLOG": "Blog",
	"POSTS": "Berichten",
	"REPLIES": "Reacties",
	"WALLET": "Portemonnee",
	"TAG": "Label",
	"USER": "Gebruiker",
	"CLOSE": "Sluiten",
	"TO": "Naar",
	"ASSET": "Bezittingen",
	"SEND": "Verzenden",
	"SECURITY": "Beveiliging",
	"AVAILABLE": "Beschikbaar",
	"PUBLIC_MEMO": "Publiekelijke memo",
	"TO_DESC": "Gebruiker bijv. good-karma",
	"PIN_CODE": "Pincode",
	"PIN_TEXT": "PIN code helpt u uw app en gegevens te beschermen. <br/><br/><b>Opmerking:</b> Eenmaal ingesteld heeft u maximaal 4 kansen, wanneer u de PIN bent vergeten of u het 4 keer verkeerd heeft ingevoerd zal de app uw gebruikersgegevens verwijderen. U kunt dan opnieuw inloggen om de app weer te kunnen gebruiken.",
	"NOTIFICATIONS": "Meldingen",
	"VOTE_TEXT": "U krijgt een melding wanneer iemand voor uw bericht stemt.<br/> <b>Opmerking:</b> Meldingen geeft zwaarte van de stem aan alsook in het meldingsbericht. (zowel voor stem omhoog, stem omlaag, verwijder stem).",
	"VOTE": "Stem",
	"COMMENT_TEXT": "U krijgt een notificatie wanneer iemand op u reageert. <br/> <b>Opmerking:</b> Notificaties wanneer iemand zijn comment <b>aanpast</b> worden ook weergeven.",
	"COMMENT": "Commentaar",
	"FOLLOW_TEXT": "U krijgt een notificatie wanneer iemand u volgt of stopt met volgen!",
	"MENTIONS": "Vernoemingen",
	"MENTIONS_TEXT": "U krijgt een notificatie wanneer iemand u noemt in zijn of haar post/reactie!",
	"RESTEEM": "Herblog",
	"RESTEEM_TEXT": "U krijgt een notificatie wanneer iemand uw post herbloged!",
	"CONFIGURATIONS": "Configuraties",
	"VOTING": "Stemmen",
	"VOTING_TEXT": "Stemzwaarte of percentages hebben invloed op Stemkracht in de app, zodat u uw stemopbrengsten kun reguleren. <br/><br/><b>Opmerking:</b> Dit zal uw stemkracht/percentage voor het naar beneden stemmen ook aantasten en het is overal in de app",
	"SERVER": "Server",
	"SERVER_TEXT": "Aangeraden",
	"SAVE_CHANGES": "Wijzigingen opslaan",
	"VOTERS_INFO": "Stemmers informatie",
	"WELCOME_BACK": "Welkom terug!",
	"LOGIN_1": "Log in met uw gebruikersnaam en wachtwoord om verder te gaan.",
	"LOGIN_2": "Posting sleutel wordt gebruikt voor het plaatsen van berichten, commentaar, stemmen en het volgen van gebruikers.",
	"LOGIN_3": "Actieve sleutel wordt gebruikt voor overmaken en profielfoto aanpassingen.",
	"LOGIN_4": "Gebruikersgegevens worden lokaal op uw apparaat opgeslagen. Bij het uitloggen worden de gegevens verwijderd!",
	"DONT_HAVE": "Heeft u geen account?",
	"SIGN_UP_NOW": "Meld je nu aan",
	"CANCEL": "Annuleren",
	"ADVANCED": "Geavanceerd",
	"ACTIVE_PRIKEY": "Actieve primaire sleutel",
	"POSTING_PRIKEY": "Posting privé sleutel",
	"MASTER_PASS": "Hoofdwachtwoord",
	"USERNAME": "Gebruikersnaam",
	"CARD_VIEW": "Kaart weergave",
	"COMPACT_VIEW": "Compacte weergave",
	"SEARCH": "Zoeken",
	"SUBMIT_A_STORY": "Plaats een verhaal",
	"REPLYTO": "Reageer op",
	"POST": "Bericht",
	"PREVIEW": "Voorbeeld",
	"DEFAULT": "Standaard 50% / 50%",
	"POWERUP": "Power Up 100%",
	"DECLINE_PAYOUT": "Uitbetaling afwijzen",
	"SAVE_FOR_LATER": "OPSLAAN VOOR LATER",
	"CLEAR": "LEEGMAKEN",
	"POST_CONTENT": "Plaats bericht",
	"COMMENT_CONTENT": "Reageer op bericht",
	"TITLE": "Titel",
	"TAGS": "Labels",
	"NOT_MATCH": "MATCHEN NIET",
	"CONFIRM_PIN": "Bevestig PIN",
	"INCORRECT": "Onjuist",
	"OPENING_POST": "Bericht openen",
	"SET_PIN": "Instellen PIN",
	"ENTER_PIN": "Invoeren PIN",
	"ARE_YOU_SURE": "Weet u het zeker?",
	"REBLOG_TEXT": "Herbloggen is definitief, wilt u doorgaan?",
	"BROADCAST_ERROR": "Verzendfout, probeer opnieuw!",
	"SUCCESS": "Succesvol",
	"REBLOGGED_POST": "Bericht opnieuw geblogd!",
	"LOGIN_FAIL": "Inloggen mislukt! Controleer of u heeft geprobeerd in te loggen met uw hoofdwachtwoord of Posting privésleutel als u voor geavanceerde modus heeft gekozen.",
	"LOGIN_FAIL_A": "Inloggen mislukt! Controleer of u heeft geprobeerd in te loggen met uw hoofdwachtwoord of Active privésleutel als u voor geavanceerde modus heeft gekozen.",
	"WARNING": "Waarschuwing",
	"VOTE_FOR_WITNESS": "Stemmen voor getuige",
	"VOTED_FOR_WITNESS": "Gestemd voor getuige",
	"AGO": "geleden",
	"FROM_NOW": "vanaf nu",
	"SECS": "seconden",
	"A_MIN": "een minuut",
	"MINS": "minuten",
	"AN_HOUR": "een uur",
	"HOURS": "uren",
	"A_DAY": "een dag",
	"DAYS": "dagen",
	"A_MONTH": "een maand",
	"MONTHS": "maanden",
	"A_YEAR": "een jaar",
	"YEARS": "jaren",
	"MIN_READ": "min. leestijd",
	"DOWNVOTE_FLAG": "Stem Omlaag of Aangeven",
	"CAPTURE_PICTURE": "Neem Foto",
	"SELECT_PICTURE": "Selecteer Foto",
	"SET_CUSTOM_URL": "Stel Eigen URL in",
	"INSERT_PICTURE": "Foto invoegen",
	"ERROR": "Fout",
	"UPLOAD_ERROR": "Upload fout",
	"CAMERA_CANCELLED": "Camera Geannuleerd",
	"SET_URL": "Stel URL in",
	"DIRECT_LINK_PICTURE": "Directe web link voor de foto",
	"COMMENT_SUBMITTED": "Commentaar is ingediend!",
	"DELETE_COMMENT": "Het verwijderen van comments is definitief...",
	"DELETED_COMMENT": "Verwijderd commentaar",
	"UPLOADING_PICTURE": "Foto is aan het uploaden",
	"UPLOAD_COMPLETED": "Upload geslaagd",
	"UPLOAD_FAILED": "Upload Mislukt",
	"PASSWORD_INCORRECT": "Het wachtwoord of gebruikersnaam is fout",
	"INFO": "Info",
	"QR_TEXT": "Plaats een QR code in het scangebied",
	"BALANCE_TEXT": "Controleer of u genoeg tegoed heeft voor de transactie!",
	"NONEXIST_USER": "De gebruiker naar wie u probeert over te maken, bestaat niet!",
	"TRANSFER_TEXT": "Weet u zeker te willen overmaken?",
	"CONFIRMATION": "Bevestiging",
	"TX_BROADCASTED": "Transactie is verstuurd",
	"FEED": "Feed",
	"TRENDING": "Trending",
	"HOT": "Populair",
	"NEW": "Nieuw",
	"PROMOTED": "Gesponsord",
	"VOTES": "Stemmen",
	"PAYOUT": "Uitbetaling",
	"COMMENTS": "Commentaar",
	"TRENDING_30": "Trending voor 30 dagen",
	"SORT_POST_BY": "Sorteer berichten op:",
	"PAYOUT_CYCLE": "Uitbetalingscyclus",
	"POTENTIAL_PAYOUT": "Potentiële uitbetaling",
	"PAST_PAYOUT": "Verleden uitbetaling",
	"AUTHOR_PAYOUT": "Uitbetaling auteur",
	"CURATION_PAYOUT": "Uitbetaling voor stemmen",
	"POST_SUBMITTED": "Bericht is verzonden!",
	"POST_LATER": "Te versturen berichten!",
	"SAVED": "Opgeslagen",
	"CLEARED": "Leeggemaakt",
	"FLAGGING_TEXT": "Een post flaggen of naar beneden stemmen kan de opbrengsten van de post weghalen en het bericht minder zichtbaar maken.<br><br>De flag mag alleen in de volgende gevallen gebruikt worden: <ul><li>Fraude or Plagiaat</li><li>Haatspraak of Trolling</li><li>Met intentie in verkeerde categorie geplaatst of Spam</li></ul>",
	"REQUEST_LIMIT_TEXT": "Limiet verzoek bereikt. Bekijk ook andere trends/tags!",
	"POST_IS_UNBOOKMARK": "Post is van bladwijzers verwijderd!",
	"POST_IS_BOOKMARK": "Post is aan bladwijzers toegevoegd!",
	"RESET": "Herstellen",
	"MODIFY_PICTURE": "Pas profielfoto aan",
	"MODIFY_COVER_PICTURE": "Pas omslagfoto aan",
	"ACTIVE_KEY_REQUIRED_TEXT": "Gelieve een actieve sleutel aan te leveren wanneer u kiest voor geavanceerde inlogmodus!",
	"RESET_PICTURE_TEXT": "Dit zal de profielfoto van de gebruiker resetten",
	"RESET_COVER_PICTURE_TEXT": "Dit zal de omslagfoto van de gebruiker resetten",
	"UPDATE_REQUIRES_RESTART": "Server update vereist restart!",
	"SETTINGS_UPDATED": "Instellingen zijn verwerkt!",
	"LANGUAGES": "Talen",
	"LANGUAGES_TEXT": "Hier kunt u de taal van de app veranderen.",
	"LOGIN_TO_X": "Om dit te doen dient u in te loggen met uw hoofdwachtwoord, actieve/posting key. Log alstublieft in en probeer opnieuw.",
	"GALLERY": "Gallerij",
	"TRANSLATIONS": "Vertalingsbijdragers",
	"SHARE": "Delen",
	"MARKETPLACE": "Marktplaats",
	"EXCHANGE": "Beurs",
	"DRAFTS": "Concepten",
	"POST_IS_UNDRAFT": "Post is uit concepten verwijderd!",
	"POST_IS_DRAFT": "Post toegevoegd aan concepten!",
	"SWIPE_LEFT": "Swipe naar links voor opties",
	"MANAGE": "Beheer",
	"IMAGE_REMOVED": "Afbeelding is verwijderd",
	"COPY": "Kopiëren",
	"NO_IMAGE": "Je hebt nog geen afbeelding geupload.",
	"PULL_DOWN_TO_REFRESH": "Trek naar beneden op te verversen",
	"EXTERNAL_APPS": "Externe applicaties",
	"PLUGINS": "Plugins",
	"SUGGEST": "Suggereer",
	"COMING_SOON": "Binnenkort beschikbaar",
	"CHAIN": "Ketting",
	"CHAIN_TEXT": "Hier kunt u veranderen naar blockchain of standaard platform",
	"CURRENCY": "Valuta",
	"CURRENCY_TEXT": "Verander hier uw standaard valuta. Beloningen voor berichten/opmerkingen in deze valuta.",
	"FOUNDER": "Oprichter en Hoofdontwikkelaar",
	"ADD_ACCOUNT": "Account toevoegen",
	"PLATFORM": "Platform",
	"ESCROW_AGENT": "Escrow-agent",
	"RATIFICATION_DEADLINE": "Ratificatie termijn",
	"ESCROW_EXPIRATION": "Escrow verlopen",
	"ESCROW_FEE": "Escrow vergoeding",
	"ESCROW_TERMS": "Escrow voorwaarden"
}
},{}],120:[function(require,module,exports){
module.exports={
	"HOME": "Strona główna",
	"LOGIN": "Zaloguj",
	"LOGOUT": "Wyloguj",
	"PROFILE": "Profil",
	"FOLLOW": "Obserwuj",
	"BOOKMARKS": "Zakładki",
	"TRANSFER": "Przelew",
	"MARKET": "Giełda",
	"SETTINGS": "Ustawienia",
	"ABOUT": "O Nas",
	"ABOUT_1": "gdzie każdy może zdobywać wynagrodzenie za swoje wpisy!",
	"ABOUT_2": "funkcjonuje w oparciu o patformę {{platformname}}. Aplikacja jest stworzona przez",
	"ABOUT_3": "i jest ona otwartym i prowadzonym przez społeczność projektem. Oferuje dostęp do czytania, komentowania, oddawania głosu na treści oraz udostępniania wpisów, a także na zarządzanie zarobkami oraz innymi dostępnymi opcjami oferowanymi przez łańcuch bloków {{platformname}} i {{sitename}}.",
	"ABOUT_4": "Aplikacja nigdy nie ma dostępu i nie przetrzymuje środków finansowych użytkownika.",
	"ABOUT_5": "Aplikacja oferuje model bezpieczeństwa po stronie klienta, gdzie klucze prywatne są przechowywane lokalnie i nigdy nie są przesyłane na jakiekolwiek serwery.",
	"ABOUT_6": "Aplikacja oferuje łatwy i przyjemny w obsłudze interfejs.",
	"ABOUT_7": "Aplikacja nigdy nie wymaga podania danych osobowych od swoich użytkowników.",
	"ABOUT_8": "Zagłosuj na good-karma na świadka",
	"ABOUT_9": "Kontakt/Opinie",
	"ABOUT_10": "Więcej informacji:",
	"REMOVE": "Usuń",
	"MARKET_VIEW": "Widok na giełdę",
	"PRICE": "Cena",
	"AMOUNT": "Ilość",
	"TOTAL": "Suma",
	"NOORDERS": "Brak otwartych zleceń dla",
	"DATE": "Data",
	"BUY": "Kup",
	"SELL": "Sprzedaj",
	"OPEN": "W toku",
	"HISTORY": "Historia",
	"FOLLOW_BACK": "Obserwuj również",
	"FOLLOWED": "Obserwowany",
	"UNFOLLOW": "Przestań obserwować",
	"FOLLOWING": "Obserwujesz",
	"FOLLOWERS": "Obserwują cię",
	"SEARCH_FOLLOWERS": "Szukaj wśród obserwujących",
	"SEARCH_FOLLOWING": "Szukaj wśród obserwowanych",
	"BY": "przez",
	"IN": "w",
	"MENU": "Menu",
	"BOOKMARK": "Zakładki",
	"REBLOG": "Rebloguj",
	"UPVOTE": "Głos za",
	"DOWNVOTE": "Głos przeciw",
	"UNVOTE_DOWNVOTED": "Anuluj głos przeciw",
	"UNVOTE_UPVOTED": "Anuluj głos za",
	"REPLY": "Odpowiedź",
	"EDIT": "Edytuj",
	"POST_1": "Przeciągnij komentarz w lewo, aby zobaczyć dostępne opcje",
	"POST_2": "Naciśnij na komentarze, aby rozwinąć",
	"OPTIONS": "Opcje",
	"RESTEEMED_BY": "Resteemowany przez",
	"NOTHING_HERE": "Na razie nic tu nie ma...",
	"BALANCES": "Salda",
	"PROFILE_1": "{{platformname}} wymienialne tokeny, które mogą być przetransferowane w dowolnym momencie. {{platformname}} mogą być wymienione na {{platformpower}} w procesie zwanym Power-up.\n",
	"PROFILE_2": "{{platformpower}} tokeny wpływu, które umożliwiają na zdobywanie większej ilości mocy za trzymanie ich dłuoterminowo oraz za głosowanie na wpisy. Im więcej się ich posiada, tym bardziej wpływa się na wynagrodzenie innych wpisów i na zdobywanie nagród związane z oddaniem głosu.",
	"PROFILE_3": "Tokeny warte około {{platformsunit}} platformy {{platformname}}.",
	"ESTIMATED_VALUE": "Szacowana wartość",
	"PROFILE_4": "Wartość jest szacowana na podstawie średniej wartości z 7-miu dni.",
	"TRANSACTION_HISTORY": "Historia transakcji",
	"POSTING": "Udostępnianie",
	"PROFILE_5": "Klucz udostępnienia jest używany przy udostępnianiu wpisów i oddawaniu głosów. Powinien być inny niż klucz aktywny i klucz własności.",
	"OWNER": "Właściciel",
	"PROFILE_6": "Klucz własności jest kluczem głównym konta i jest wymagany do zmiany pozostałych kluczy. Klucz prywatny lub hasło do klucza własności powinno być trzymane offline, gdy jest to tylko możliwe.",
	"ACTIVE": "Aktywny",
	"PROFILE_7": "Klucz aktywny jest używany do wykonywania przelewów i składania zamówień na wewnętrznej giełdzie.",
	"MEMO": "Notatka",
	"PROFILE_8": "Klucz notatki jest użyty, aby sporządzać i czytać notatki.",
	"BLOG": "Blog",
	"POSTS": "Wpisy",
	"REPLIES": "Odpowiedzi",
	"WALLET": "Portfel",
	"TAG": "Etykieta",
	"USER": "Użytkownik",
	"CLOSE": "Zamknij",
	"TO": "Do",
	"ASSET": "Kapitał",
	"SEND": "Wyślij",
	"SECURITY": "Bezpieczeństwo",
	"AVAILABLE": "Dostępny",
	"PUBLIC_MEMO": "Notatka publiczna",
	"TO_DESC": "Użytkownik np. good-karma",
	"PIN_CODE": "Kod PIN",
	"PIN_TEXT": "Kod PIN pozwala Ci zabezpieczyć aplikację oraz twoje dane. <br/><br/> <b>Uwaga:</> Masz maksymalnie 4 próby aby wpisać poprawne hasło i odblokować konto, jeżeli zapomniałeś kodu PIN lub wpisałeś złe hasło więcej razy, aplikacja usunie wszystkie dane użytkownika. Możesz się wtedy zalogować ponownie i kontynuować użytkowanie aplikacji.",
	"NOTIFICATIONS": "Powiadomienia",
	"VOTE_TEXT": "Otrzymasz powiadomienie, gdy ktoś odda głos na twój wpis! <br/><b>Uwaga:</b>Powiadomienia zawierają także typ głosu (tzn. głos za, głos przeciw, anuluj głos).",
	"VOTE": "Zagłosuj",
	"COMMENT_TEXT": "Otrzymasz powadomienie, gdy ktoś skomentuje twój wpis lub komentarz!<br/> <b>Uwaga:</b>Zostaniesz również powiadomiony, gdy ktoś <b>edytuje</b> swój komentarz.",
	"COMMENT": "Komentarz",
	"FOLLOW_TEXT": "Otrzymasz powiadomienie, gdy ktoś zacznie lub przestanie cię obserwować!",
	"MENTIONS": "Wzmianki",
	"MENTIONS_TEXT": "Zostaniesz powiadomiony, gdy ktoś wspomni cię w swoim wpisie/komentarzu!",
	"CONFIGURATIONS": "Konfiguracje",
	"VOTING": "Oddanie głosu",
	"VOTING_TEXT": "Moc lub procent głosu wpływa na moc oddanego głosu i umożliwia ci na regulowanie swojego wynagrodzenia za oddane głosy. <br/><br/><b>Uwaga:</b> Zmiana wpłynie na moc/procent głosu całej aplikacji, dotyczy to również głosów oddanych przeciw",
	"SERVER": "Serwer",
	"SERVER_TEXT": "Rekomendowane",
	"SAVE_CHANGES": "Zachowaj zmiany",
	"VOTERS_INFO": "Głosowali",
	"WELCOME_BACK": "Witaj ponownie!",
	"LOGIN_1": "Aby kontynuować, zaloguj się przy użyciu loginu i hasła.",
	"LOGIN_2": "Klucz udostępniający jest używany do udostępniania wpisów, komentowania, głosowania i śledzenia.",
	"LOGIN_3": "Klucz aktywny używany jest do wykonywania przelewów i zmian zdjęcia profilowego.",
	"LOGIN_4": "Dane użytkownika są trzymane lokalnie przy użycia twojego urządzenia. Po wylogowaniu dane zostają usunięte!",
	"DONT_HAVE": "Nie masz jeszcze konta?",
	"SIGN_UP_NOW": "Załóż konto",
	"CANCEL": "Anuluj",
	"ADVANCED": "Zaawansowane",
	"ACTIVE_PRIKEY": "Klucz aktywny prywatny",
	"POSTING_PRIKEY": "Klucz udostępniający prywatny",
	"MASTER_PASS": "Hasło główne",
	"USERNAME": "Login",
	"CARD_VIEW": "Widok karty",
	"COMPACT_VIEW": "Widok kompaktowy",
	"SEARCH": "Szukaj",
	"SUBMIT_A_STORY": "Opublikuj treść",
	"REPLYTO": "Odpowiedz",
	"POST": "Opublikuj",
	"PREVIEW": "Podgląd",
	"DEFAULT": "Standardowe 50% / 50%",
	"DECLINE_PAYOUT": "Odmów wynagrodzenia",
	"SAVE_FOR_LATER": "ZACHOWAJ NA PÓŹNIEJ",
	"CLEAR": "WYCZYŚĆ",
	"POST_CONTENT": "Opublikuj wpis",
	"COMMENT_CONTENT": "Skomentuj",
	"TITLE": "Tytuł",
	"TAGS": "Etykiety",
	"NOT_MATCH": "BRAK ZGODNOŚCI",
	"CONFIRM_PIN": "Powtórz PIN",
	"INCORRECT": "NIEPOPRAWNY",
	"OPENING_POST": "otwieranie wpisu",
	"SET_PIN": "Ustaw PIN",
	"ENTER_PIN": "Podaj PIN",
	"ARE_YOU_SURE": "Czy jesteś pewien?",
	"BROADCAST_ERROR": "Błąd połączenia, spróbuj ponownie!",
	"SUCCESS": "Zakończono powodzeniem",
	"REBLOGGED_POST": "Rebloguj wpis!",
	"LOGIN_FAIL": "Błąd logowania! Upewnij się czy zalogowałeś się przy użyciu klucza głównego lub czy użyłeś aktywnego klucza prywatnego przy logowaniu w trybie zaawansowanym.",
	"LOGIN_FAIL_A": "Błąd logowania! Upewnij się czy zalogowałeś się przy użyciu klucza głównego lub czy użyłeś prywatnego klucza udostępniającego przy logowaniu w trybie zaawansowanym.",
	"WARNING": "Uwaga",
	"VOTE_FOR_WITNESS": "Głosujesz na świadka",
	"VOTED_FOR_WITNESS": "Zagłosowałeś na świadka",
	"AGO": "temu",
	"FROM_NOW": "od teraz",
	"SECS": "sekund(y)",
	"A_MIN": "minutę",
	"MINS": "minut(y)",
	"AN_HOUR": "godzinę",
	"HOURS": "godzin(y)",
	"A_DAY": "dzień",
	"DAYS": "dni",
	"A_MONTH": "miesiąc",
	"MONTHS": "miesięcy",
	"A_YEAR": "rok",
	"YEARS": "lat(a)",
	"MIN_READ": "minut temu zostało przeczytane",
	"DOWNVOTE_FLAG": "Głosuj przeciw lub oflaguj",
	"CAPTURE_PICTURE": "Zrób zdjęcie",
	"SELECT_PICTURE": "Wybierz obraz",
	"SET_CUSTOM_URL": "Ustaw wybrany URL",
	"INSERT_PICTURE": "Wstaw obraz",
	"ERROR": "Błąd",
	"UPLOAD_ERROR": "Błąd przy wrzucaniu pliku",
	"CAMERA_CANCELLED": "Aparat nieaktywna",
	"SET_URL": "Ustaw URL",
	"DIRECT_LINK_PICTURE": "Bezpośredni link na stronę ze zdjęciem",
	"COMMENT_SUBMITTED": "Komentarz został opublikowany!",
	"DELETE_COMMENT": "Usunięcie komentarzy jest nieodwracalne...",
	"DELETED_COMMENT": "Usuń komentarz",
	"UPLOADING_PICTURE": "Wstaw zdjęcie",
	"UPLOAD_COMPLETED": "Wstawienie zakończone",
	"UPLOAD_FAILED": "Wrzucenie nie powiodło się",
	"PASSWORD_INCORRECT": "Nieprawidłowy login lub hasło",
	"INFO": "Informacja",
	"QR_TEXT": "Umieść kod QR w obrębie pola skanowania",
	"BALANCE_TEXT": "Upewnij się, czy masz wystarczającą ilość środków aby wykonać transakcję!",
	"NONEXIST_USER": "Użytkownik do którego próbujesz przesłać środki, nie istnieje!",
	"TRANSFER_TEXT": "Czy na pewno chcesz wysłać środki?",
	"CONFIRMATION": "Potwierdzenie",
	"TX_BROADCASTED": "Transakcja w toku",
	"FEED": "Aktualności",
	"TRENDING": "Trendy",
	"HOT": "Na topie",
	"NEW": "Nowe",
	"PROMOTED": "Promowane",
	"VOTES": "Ilość głosów",
	"PAYOUT": "Przychód",
	"COMMENTS": "Ilość Komentarzy",
	"TRENDING_30": "Trendy z 30 dni",
	"SORT_POST_BY": "Uporządkuj według:",
	"PAYOUT_CYCLE": "Cykl przychodu",
	"POTENTIAL_PAYOUT": "Potencjalny przychód",
	"PAST_PAYOUT": "Wcześniej wypłacono",
	"AUTHOR_PAYOUT": "Przychód autora",
	"CURATION_PAYOUT": "Przychód za mecenat",
	"POST_SUBMITTED": "Wpis został opublikowany!",
	"POST_LATER": "Opublikuj wpis później!",
	"SAVED": "Zapamiętaj",
	"CLEARED": "Wyczyść",
	"FLAGGING_TEXT": "Oflagowanie wpisu może spowodować usunięcie wynagrodzenia i zmniejszenie jego widoczności.<br><br>Flaga powinna być użyta w sytuacjach takich jak: <ul><li>Oszustwo lub Plagiat</li><li>Mowę nienawiści lub Internetowy trolling</li><li>Wpis celowo źle skatagoryzowany lub Spam</li></ul>",
	"REQUEST_LIMIT_TEXT": "Limit został osiągnięty. Sprawdź inne etykiety/trendy!",
	"POST_IS_UNBOOKMARK": "Wpis został usunięty z zakładek!",
	"POST_IS_BOOKMARK": "Wpis został dodany do zakładek!",
	"RESET": "Zresetuj",
	"MODIFY_PICTURE": "Zmodyfikuj zdjęcie profilowe",
	"MODIFY_COVER_PICTURE": "Zmień zdjęcie w tle",
	"ACTIVE_KEY_REQUIRED_TEXT": "Podaj aktywny klucz prywatny jeśli wybrałeś tryb zaawansowanego logowania!",
	"RESET_PICTURE_TEXT": "Spowoduje zresetowanie zdjęcia profilowego",
	"RESET_COVER_PICTURE_TEXT": "Spowoduje zresetowanie zdjęcia w tle",
	"UPDATE_REQUIRES_RESTART": "Aktualizacja serwera wymaga zresetowania!",
	"SETTINGS_UPDATED": "Ustawienia zostały zaktualizowane",
	"LANGUAGES": "Język",
	"LANGUAGES_TEXT": "Tu możesz zmienić język aplikacji.",
	"LOGIN_TO_X": "Ta operacja wymaga zalogowania hasłem głównym, kluczem akytwnym/udostępniającym. Zaloguj się i spróbuj ponownie.",
	"GALLERY": "Galeria",
	"TRANSLATIONS": "Przetłumaczyli",
	"SHARE": "Poleć",
	"MARKETPLACE": "Sklep",
	"EXCHANGE": "Wymiana",
	"DRAFTS": "Wersje robocze",
	"POST_IS_UNDRAFT": "Wpis został usunięty z roboczych!",
	"POST_IS_DRAFT": "Wpis został zapisany jako wersja robocza!",
	"SWIPE_LEFT": "Przeciągnij w lewo, aby zobaczyć opcje",
	"MANAGE": "Zarządzaj",
	"IMAGE_REMOVED": "Obraz został usunięty",
	"COPY": "Kopiuj",
	"NO_IMAGE": "Nie opublikowałeś jeszcze żadnego obrazu!",
	"PULL_DOWN_TO_REFRESH": "Przeciągnij w dół, aby odświeżyć.",
	"EXTERNAL_APPS": "Aplikacje zewnętrzne",
	"PLUGINS": "Pluginy",
	"SUGGEST": "Zasugeruj",
	"COMING_SOON": "Już wkrótce",
	"CHAIN": "Łańcuch",
	"CHAIN_TEXT": "Tutaj możesz zmienić łańcuch bloków lub domyślną platformę.",
	"CURRENCY": "Waluta",
	"CURRENCY_TEXT": "Tutaj można zmienić domyślną walutę. Wartość nagrody za post/komentarz zostanie wyświetlona w tej walucie.",
	"FOUNDER": "Założyciel i główny programista",
	"ADD_ACCOUNT": "Dodaj konto",
	"PLATFORM": "Platforma"
}
},{}],121:[function(require,module,exports){
module.exports={
	"HOME": "Página Inicial",
	"LOGIN": "Entrar",
	"LOGOUT": "Sair",
	"PROFILE": "Perfil",
	"FOLLOW": "Seguir",
	"BOOKMARKS": "Favoritos",
	"TRANSFER": "Transferir",
	"MARKET": "Mercado",
	"SETTINGS": "Configurações",
	"ABOUT": "Sobre",
	"ABOUT_1": "onde qualquer um pode ganhar recompensas pelo seu conteúdo",
	"ABOUT_2": "é patrocinado pela plataforma {{platformname}}. Aplicativo criado por",
	"ABOUT_3": "e é código-aberto, projecto orientado para a comunidade móvel. Oferece acesso ao conteúdo para leitura, comentários, votos, publicar, tranferir ganhos etc. Caraterísticas oferecidas pel {{platformname}} blockchain e {{sitename}}.",
	"ABOUT_4": "1. O aplicativo nunca acessa ou guarda o dinheiro dos usuários.",
	"ABOUT_5": "2. A App ofereçe um modelo seguro do lado-cliente, com chaves privadas, guardadas localmente e nunca envida a outros servidores.",
	"ABOUT_6": "3. O Aplicativo oferece simplicidade, interfaces de usuário e experiências atrativas.",
	"ABOUT_7": "4. O Aplicativo requer que os usuários insiram informações pessoais.",
	"ABOUT_8": "Vote bom-karma como testemunha",
	"ABOUT_9": "Contato/Comentários",
	"ABOUT_10": "Mais informações:",
	"REMOVE": "Remover",
	"MARKET_VIEW": "Visão do Mercado",
	"PRICE": "Preço",
	"AMOUNT": "Quantidade",
	"NOORDERS": "Sem ordens abertas para",
	"DATE": "Data",
	"BUY": "Comprar",
	"SELL": "Vender",
	"OPEN": "Abrir",
	"HISTORY": "Hitórico",
	"FOLLOW_BACK": "Seguir de volta",
	"FOLLOWED": "Seguido",
	"UNFOLLOW": "Deixar de seguir",
	"FOLLOWING": "Seguindo",
	"FOLLOWERS": "Seguidores",
	"SEARCH_FOLLOWERS": "Procurar seguidores",
	"SEARCH_FOLLOWING": "Procurar quem estou seguindo",
	"BY": "por",
	"IN": "no",
	"BOOKMARK": "Favoritos",
	"REBLOG": "Repostar",
	"UPVOTE": "Upvote",
	"UNVOTE_DOWNVOTED": "Cancelar Downvote",
	"UNVOTE_UPVOTED": "Cancelar Upvote",
	"REPLY": "Responder",
	"EDIT": "Editar",
	"POST_1": "Deslize para esquerda nos comentários para ver as opções",
	"POST_2": "Toque nos comentários para ver os sub-comentários",
	"OPTIONS": "Opções",
	"RESTEEMED_BY": "Repostado por",
	"NOTHING_HERE": "Nada por aqui, ainda...",
	"BALANCES": "Balanço",
	"PROFILE_1": "{{platformname}}, provas transacionáveis que podem ser transferidas em qualquer altura. {{platformname}} podem ser convertidas {{platformpower}} num processo chamado poder abaixo.",
	"PROFILE_2": "{{platformpower}}, provas de influencia par ganhar mais poder por guardar a longo prazo e votar nas publicações. Quanto mais se possui mais se pode influenciar as recompensas a outros e ganhar mais recompensas por votar.",
	"PROFILE_3": "Provas valendo cerca de {{platformsunit}} de {{platformname}}.",
	"ESTIMATED_VALUE": "Valor estimado",
	"PROFILE_4": "O valor estimado é baseado numa média do valor de 7 dias de {{platformname}}.",
	"TRANSACTION_HISTORY": "Histórico de Transações",
	"POSTING": "Postando",
	"PROFILE_5": "A chave de postagem é usada para postar e votar. Ela deverá ser diferente da chave de ativação e da chave de proprietário.",
	"OWNER": "Proprietário",
	"PROFILE_6": "A chave de proprietário é a chave mestra para conta e é exigida para mudar as outras chaves. Uma chave privada ou senha para a chave de proprietário deverá ser mantida offline assim que possível.",
	"ACTIVE": "Ativo",
	"PROFILE_7": "A chave de ativação é usada para fazer transferências e colocar ordens no mercado interno.",
	"MEMO": "Anotações",
	"PROFILE_8": "A chave de anotações é usada para criar e ler anotações.",
	"POSTS": "Postagens",
	"REPLIES": "Respostas",
	"WALLET": "Carteira",
	"USER": "Usuário",
	"CLOSE": "Fechado",
	"TO": "Para",
	"ASSET": "Ativo",
	"SEND": "Enviar",
	"SECURITY": "Segurança",
	"AVAILABLE": "Disponível",
	"PUBLIC_MEMO": "Memorando Público",
	"TO_DESC": "Utilizador ex: good-karma",
	"PIN_CODE": "Código Pin",
	"PIN_TEXT": "Código Pin ajuda você a assegurar o aplicativo e suas informações. <br/><br/> Uma vez ativado, você terá no máximo 4 tentativas para destravar, se voce esquecero pin ou errar, o aplicativo irá remover suas informações de usuário. Você pode entrar de novo e continuar a usar o aplicativo.",
	"NOTIFICATIONS": "Notificações",
	"VOTE_TEXT": "Você receberá uma notificação quando alguém voter no seu conteúdo! Notificações também incluem peso de voto no alerta da mensagem.) seja voto positivo, voto negativo, voto nulo).",
	"VOTE": "Votar",
	"COMMENT_TEXT": "Você receberá notificação quando alguém comentar nas suas postagens ou comentários.<br/> Notificações incluem quando alguém edita os comentários também.",
	"COMMENT": "Comentar",
	"FOLLOW_TEXT": "Você receberá uma notificação quando alguém Seguir ou Deixar de seguir você!",
	"MENTIONS": "Menções",
	"MENTIONS_TEXT": "Você receberá uma notificação quando alguém mencionar você em alguma postagem ou comentário!",
	"CONFIGURATIONS": "Configurações",
	"VOTING": "Votando",
	"VOTING_TEXT": "O peso de voto ou percentagem afeta o poder de voto na app, por isso pode regular o seu recompensa de voto <br/><br/><b>Nota:</b> Isto irá modificar o pseso/percentagem para votar para baixo também e em todo o lado na App",
	"SERVER": "Servidor",
	"SERVER_TEXT": "Recomendado",
	"SAVE_CHANGES": "Salvar mudanças",
	"VOTERS_INFO": "Informações dos eleitores",
	"WELCOME_BACK": "Bem vindo de Volta!",
	"LOGIN_1": "Conecte-se com seu nome de usuário e senha para continuar.",
	"LOGIN_2": "Chave de postagem é usada para postar, comentar, votar, seguir.",
	"LOGIN_3": "Chave de ativação é usada para tranferências e atualização de fotos de perfil.",
	"LOGIN_4": "As credenciais do utilizador são guardadas localmente no seu aparelho. Depis de desligar as suas cerdenciais são removidas!",
	"DONT_HAVE": "Não possui uma conta?\n",
	"SIGN_UP_NOW": "Cadastre-se agora",
	"CANCEL": "Cancelar",
	"ADVANCED": "Avançado",
	"ACTIVE_PRIKEY": "Chave de ativação privada",
	"POSTING_PRIKEY": "Chave de postagem privada",
	"MASTER_PASS": "Senha Mestra/Principal",
	"USERNAME": "Usuário",
	"CARD_VIEW": "Visão de Cartão",
	"COMPACT_VIEW": "Vista compacta",
	"SEARCH": "Procurar",
	"SUBMIT_A_STORY": "Postar uma história",
	"REPLYTO": "Responder para",
	"POST": "Postagem",
	"PREVIEW": "Vizualização",
	"DEFAULT": "Padrão 50% / 50%",
	"POWERUP": "Força Total 100%",
	"DECLINE_PAYOUT": "Recusar Pagamento",
	"SAVE_FOR_LATER": "Guardar pra mais tarde",
	"CLEAR": "Terminado",
	"POST_CONTENT": "Conteúdo da postagem",
	"COMMENT_CONTENT": "Conteúdo do comentário",
	"TITLE": "Título",
	"NOT_MATCH": "Não condiz",
	"CONFIRM_PIN": "Confirmar Pin",
	"INCORRECT": "Incorreto",
	"OPENING_POST": "Abrindo postagem",
	"SET_PIN": "Configure PIN",
	"ENTER_PIN": "Entrar com Pin",
	"ARE_YOU_SURE": "Você tem certeza?",
	"REBLOG_TEXT": "Republicar é irreversível, quer mesmo continuar?",
	"BROADCAST_ERROR": "Erro de difusão, tente novamente!",
	"SUCCESS": "Sucesso",
	"REBLOGGED_POST": "Publucação republicada",
	"LOGIN_FAIL": "Login falhou! por favor certifique-se que está conetado com a senha master ou a chave publicação privada no Login se escolheu o modo avançado.",
	"LOGIN_FAIL_A": "Login falhou! por favor certifique-se que está conetado com a senha master ou a chave ativa privada no Login se escolheu o modo avançado.",
	"WARNING": "Cuidado",
	"VOTE_FOR_WITNESS": "Votando por uma Testemunha",
	"VOTED_FOR_WITNESS": "Votou por uma Testemunha",
	"AGO": "atrás",
	"FROM_NOW": "de agora",
	"SECS": "segs",
	"A_MIN": "um minuto",
	"AN_HOUR": "uma hora",
	"HOURS": "horas",
	"A_DAY": "um dia",
	"DAYS": "dias",
	"A_MONTH": "um mês",
	"MONTHS": "meses",
	"A_YEAR": "um ano",
	"YEARS": "anos",
	"MIN_READ": "ler min",
	"DOWNVOTE_FLAG": "Vote abaixo ou bandeire",
	"CAPTURE_PICTURE": "Capturar imagem",
	"SELECT_PICTURE": "Escolher uma imagem",
	"SET_CUSTOM_URL": "Configure URL costumizada",
	"INSERT_PICTURE": "Inserir uma imagem",
	"ERROR": "Erro",
	"UPLOAD_ERROR": "Erro no carregamento",
	"CAMERA_CANCELLED": "Camera cancelada",
	"SET_URL": "Configural URL",
	"DIRECT_LINK_PICTURE": "Link web direto para a imagem",
	"COMMENT_SUBMITTED": "Comentário postado!",
	"DELETE_COMMENT": "Deletar comentários é irreversível",
	"DELETED_COMMENT": "Comentário deletado",
	"UPLOADING_PICTURE": "Carregabdo imagem",
	"UPLOAD_COMPLETED": "Carregamento compeleto",
	"UPLOAD_FAILED": "Carregamento falhou",
	"PASSWORD_INCORRECT": "A senha ou nome da conta estão incorretos",
	"INFO": "Informações",
	"QR_TEXT": "Ponha o código QR dentro da área de scan",
	"BALANCE_TEXT": "Certifique-se que possui saldo suficiente para a transação!",
	"NONEXIST_USER": "O utilizador para quem está a tentar transferir fundos, não existe",
	"TRANSFER_TEXT": "Tem certeza que quer transferir?",
	"CONFIRMATION": "Confirmação",
	"TX_BROADCASTED": "Transação foi difundida",
	"TRENDING": "Tendencia",
	"HOT": "Quente",
	"NEW": "Novidades",
	"PROMOTED": "Promovidos",
	"VOTES": "Votos",
	"PAYOUT": "Pagamento",
	"COMMENTS": "Comentários",
	"TRENDING_30": "Tendencia a 30 dias",
	"SORT_POST_BY": "Ordenar publicações por:",
	"PAYOUT_CYCLE": "Ciclo de Pagamento",
	"POTENTIAL_PAYOUT": "Pagamento em potencial",
	"PAST_PAYOUT": "Último Pagamento",
	"AUTHOR_PAYOUT": "Pagamento do Autor",
	"CURATION_PAYOUT": "Pagamento de curadoria",
	"POST_SUBMITTED": "Postagem enviada!",
	"POST_LATER": "Publique para futura submissão",
	"SAVED": "Salvo",
	"CLEARED": "Limpo",
	"FLAGGING_TEXT": "Por Bandeira numa publicação pode remover recompensas e tornar o material menos visivel.<br><br>A bandeira dev ser usada para : <ul><li>Fraude ou Plagiarismo</li><li>Discurso de ódio ou Internet Trolling</li><li>Categorização mal feita intencionalmente ou Spam</li></ul>",
	"REQUEST_LIMIT_TEXT": "Limite de pedidos atingido. verifique outro assunto/etiqueta!",
	"POST_IS_UNBOOKMARK": "Postagem removida dos favoritos!",
	"POST_IS_BOOKMARK": "Postagem adicionada aos favoritos!",
	"RESET": "Reiniciar",
	"MODIFY_PICTURE": "Modificar foto de perfil",
	"MODIFY_COVER_PICTURE": "Modificar foto de capa",
	"ACTIVE_KEY_REQUIRED_TEXT": "Por favor fornaça a chave de activação privada que escolheu, Modo de Login Avançado",
	"RESET_PICTURE_TEXT": "Isto reconfigura a imagem do perfil ultizador",
	"RESET_COVER_PICTURE_TEXT": "Isto reconfigura a imagem do ultizador",
	"UPDATE_REQUIRES_RESTART": "Atualização do server obriga a Reiniciar!",
	"SETTINGS_UPDATED": "Configurações foram atualizadas",
	"LANGUAGES": "Línguas",
	"LANGUAGES_TEXT": "Aqui pode mudar a língua da App",
	"LOGIN_TO_X": "Est operação obriga que o utilizador estaja ligado com a senha prinipal, chave activação/publicação",
	"GALLERY": "Galeria",
	"TRANSLATIONS": "Tradutores que contribuiram",
	"SHARE": "Partilhar",
	"MARKETPLACE": "Mercado",
	"EXCHANGE": "Cambio",
	"DRAFTS": "Rascunhos",
	"POST_IS_UNDRAFT": "Postagem removida dos Rascunhos!",
	"POST_IS_DRAFT": "Postagem adicionada a Rascunhos!",
	"SWIPE_LEFT": "Role para a esquerda para opções",
	"MANAGE": "Gerir",
	"IMAGE_REMOVED": "Image. removida",
	"COPY": "Copiar",
	"NO_IMAGE": "Não carregou nenhuma imagem, ainda",
	"PULL_DOWN_TO_REFRESH": "Carregue para refrescar",
	"EXTERNAL_APPS": "Apps Externas",
	"SUGGEST": "Sugira",
	"COMING_SOON": "Brevemente",
	"CHAIN_TEXT": "Aqui pode escolher blockchain ou a plataforma por defeito"
}
},{}],122:[function(require,module,exports){
module.exports={
	"HOME": "Página Inicial",
	"LOGIN": "Entrar",
	"LOGOUT": "Sair",
	"PROFILE": "Perfil",
	"FOLLOW": "Seguir",
	"BOOKMARKS": "Favoritos",
	"TRANSFER": "Transferir",
	"MARKET": "Mercado",
	"SETTINGS": "Configurações",
	"ABOUT": "Sobre",
	"ABOUT_1": "Onde qualquer um pode ganhar recompensas pelo seu conteúdo",
	"ABOUT_2": "É patrocinado pela plataforma {{platformname}}. Aplicativo criado por",
	"ABOUT_3": "e é código-aberto, projecto orientado para a comunidade móvel. Oferece acesso ao conteúdo para leitura, comentários, votos, publicar, tranferir ganhos etc. Carateristicas oferecidas por {{platformname}} blockchain and {{sitename}}.",
	"ABOUT_4": "1. O aplicativo nunca acessa ou guarda o dinheiro dos utilizadores.",
	"ABOUT_5": "2. A App oferece um modelo seguro do lado-cliente, com chaves privadas, guardadas localmente e nunca enviada para outros servidores.",
	"ABOUT_6": "3. O Aplicativo oferece simplicidade, interfaces de utilizador e experiências atrativas.",
	"ABOUT_7": "4. O Aplicativo requer que os utilizadores insiram informações pessoais.",
	"ABOUT_8": "Vote bom-karma como testemunha",
	"ABOUT_9": "Contato/Comentários",
	"ABOUT_10": "Mais informações:",
	"REMOVE": "Remover",
	"MARKET_VIEW": "Visão do Mercado",
	"PRICE": "Preço",
	"AMOUNT": "Quantidade",
	"NOORDERS": "Sem ordens abertas para",
	"DATE": "Data",
	"BUY": "Comprar",
	"SELL": "Vender",
	"OPEN": "Abrir",
	"HISTORY": "Hitórico",
	"FOLLOW_BACK": "Seguir de volta",
	"FOLLOWED": "Seguido",
	"UNFOLLOW": "Deixar de seguir",
	"FOLLOWING": "Seguindo",
	"FOLLOWERS": "Seguidores",
	"SEARCH_FOLLOWERS": "Procurar seguidores",
	"SEARCH_FOLLOWING": "Procurar quem estou a seguir",
	"BY": "por",
	"IN": "no",
	"BOOKMARK": "Favoritos",
	"REBLOG": "Repostar",
	"UPVOTE": "Upvote ",
	"UNVOTE_DOWNVOTED": "Cancelar Downvote",
	"UNVOTE_UPVOTED": "Cancelar Upvote",
	"REPLY": "Responder",
	"EDIT": "Editar",
	"POST_1": "Deslize para esquerda nos comentários para veras opções",
	"POST_2": "Toque nos comentários para ver os sub-comentários",
	"OPTIONS": "Opções",
	"RESTEEMED_BY": "Repostado por",
	"NOTHING_HERE": "Nada por aqui, ainda...",
	"BALANCES": "Balanço",
	"PROFILE_1": "{{platformname}}, provas transacionáveis que podem ser transferidas em qualquer altura. {{platformname}} podem ser convertidas {{platformpower}} num processo chamado poder abaixo.",
	"PROFILE_2": "{{platformpower}}, tokens de influencia para ganhar mais poder para guardar a longo prazo e votar nas publicações. Quanto mais se possui mais se pode influenciar as recompensas para outros e ganhar mais recompensas por votar.",
	"PROFILE_3": "Provas que valem cerca de {{platformsunit}} de {{platformname}}.",
	"ESTIMATED_VALUE": "Valor estimado",
	"PROFILE_4": "O valor estimado é baseado numa média do valor de 7 dias de {{platformname}}.",
	"TRANSACTION_HISTORY": "Histórico de Transação",
	"POSTING": "Publicando",
	"PROFILE_5": "A chave de publicação é usada para publicar e votar. Ela deve ser diferente da chave de ativação e da chave de proprietário.",
	"OWNER": "Proprietário",
	"PROFILE_6": "A chave de proprietário é a chave mestra para conta e é exigida para mudar as outras chaves. Uma chave privada ou senha para a chave de proprietário deverá ser mantida offline assim que possível.",
	"ACTIVE": "Ativo",
	"PROFILE_7": "A chave de ativação é usada para fazer transferências e colocar ordens no mercado interno.",
	"MEMO": "Anotações",
	"PROFILE_8": "A chave de anotações é usada para criar e ler anotações.",
	"POSTS": "Publicações",
	"REPLIES": "Respostas",
	"WALLET": "Carteira",
	"USER": "Utilizador",
	"CLOSE": "Fechado",
	"TO": "Para",
	"ASSET": "Ativo",
	"SEND": "Enviar",
	"SECURITY": "Segurança",
	"AVAILABLE": "Disponível",
	"PUBLIC_MEMO": "Memorando Público",
	"TO_DESC": "Utilizador ex: good-karma",
	"PIN_CODE": "Código Pin",
	"PIN_TEXT": "Código Pin ajuda a assegurar o aplicativo e suas informações. <br/><br/> Uma vez ativado, terá no máximo 4 tentativas para destravar, se esquecer o pin ou errar, o aplicativo irá remover suas informações de utilizador. Pode entrar de novo e continuar a usar o aplicativo.",
	"NOTIFICATIONS": "Notificações",
	"VOTE_TEXT": "Você receberá uma notificação quando alguém votar no seu conteúdo! Notificações também incluem peso de voto no alerta da mensagem.) seja voto positivo, voto negativo, voto nulo).",
	"VOTE": "Votar",
	"COMMENT_TEXT": "Recebe uma notificação quando alguém comentar nas suas publicações ou comentários.<br/> Notificações incluem quando alguém edita os comentários também.",
	"COMMENT": "Comentar",
	"FOLLOW_TEXT": "Recebe sempre uma notificação quando alguém Seguir ou Deixar de segui-lo!",
	"MENTIONS": "Menções",
	"MENTIONS_TEXT": "Recebe sempre uma notificação quando alguém o mencionar nalguma publicação ou comentário!",
	"CONFIGURATIONS": "Configurações",
	"VOTING": "Votando",
	"VOTING_TEXT": "O peso de voto ou percentagem afeta o poder de voto na app, por isso pode regular o seu recompensa de voto <br/><br/><b>Nota:</b> Isto irá modificar o peso/percentagem para votar para baixo também e em todo o lado na App",
	"SERVER": "Servidor",
	"SERVER_TEXT": "Recomendado",
	"SAVE_CHANGES": "Salvar mudanças",
	"VOTERS_INFO": "Informações dos eleitores",
	"WELCOME_BACK": "Bem vindo de Volta!",
	"LOGIN_1": "Conecte-se com seu nome de utilizador e senha para continuar.",
	"LOGIN_2": "Chave de publicação é usada para publicar, comentar, votar, seguir.",
	"LOGIN_3": "Chave de ativação é usada para tranferências e atualização de fotos de perfil.",
	"LOGIN_4": "As credenciais do utilizador são guardadas localmente no seu aparelho. Depis de desligar as suas credenciais são removidas",
	"DONT_HAVE": "Não possui conta?\n",
	"SIGN_UP_NOW": "Registe-se agora",
	"CANCEL": "Cancelar",
	"ADVANCED": "Avançado",
	"ACTIVE_PRIKEY": "Chave de ativação privada",
	"POSTING_PRIKEY": "Chave de publicação privada",
	"MASTER_PASS": "Senha Mestra/Principal",
	"USERNAME": "Utilizador",
	"CARD_VIEW": "Visão de Cartão",
	"COMPACT_VIEW": "Vista compacta",
	"SEARCH": "Procurar",
	"SUBMIT_A_STORY": "Publicar uma história",
	"REPLYTO": "Responder para",
	"POST": "Publicação",
	"PREVIEW": "Vizualizar",
	"DEFAULT": "Padrão 50% / 50%",
	"POWERUP": "Força Total 100%",
	"DECLINE_PAYOUT": "Recusar Pagamento",
	"SAVE_FOR_LATER": "Guardar pra mais tarde",
	"CLEAR": "Terminado",
	"POST_CONTENT": "Conteúdo da publicação",
	"COMMENT_CONTENT": "Conteúdo do comentário",
	"TITLE": "Título",
	"NOT_MATCH": "Não condiz",
	"CONFIRM_PIN": "Confirmar Pin",
	"INCORRECT": "Incorreto",
	"OPENING_POST": "Abrindo postagem",
	"SET_PIN": "Configure PIN",
	"ENTER_PIN": "Entrar com Pin",
	"ARE_YOU_SURE": "Tem a certeza?",
	"REBLOG_TEXT": "Republicar é irreversível, quer mesmo continuar?",
	"BROADCAST_ERROR": "Erro de difusão, tente novamente!",
	"SUCCESS": "Sucesso",
	"REBLOGGED_POST": "Publicação republicada",
	"LOGIN_FAIL": "Login falhou! por favor certifique-se que está ligado com a senha master ou a chave publicação privada no Login se escolheu o modo avançado.",
	"LOGIN_FAIL_A": "Login falhou! por favor certifique-se que está conetado com a senha master ou a chave ativa privada no Login se escolheu o modo avançado.",
	"WARNING": "Cuidado",
	"VOTE_FOR_WITNESS": "Votando por uma Testemunha",
	"VOTED_FOR_WITNESS": "Votou por uma Testemunha",
	"AGO": "atrás",
	"FROM_NOW": "de agora",
	"SECS": "segs",
	"A_MIN": "um minuto",
	"AN_HOUR": "uma hora",
	"HOURS": "horas",
	"A_DAY": "um dia",
	"DAYS": "dias",
	"A_MONTH": "um mês",
	"MONTHS": "meses",
	"A_YEAR": "um ano",
	"YEARS": "anos",
	"MIN_READ": "ler min",
	"DOWNVOTE_FLAG": "Vote para baixo ou bandeira",
	"CAPTURE_PICTURE": "Capturar imagem",
	"SELECT_PICTURE": "Escolher uma imagem",
	"SET_CUSTOM_URL": "Configure URL costumizada",
	"INSERT_PICTURE": "Inserir uma imagem",
	"ERROR": "Erro",
	"UPLOAD_ERROR": "Erro no carregamento",
	"CAMERA_CANCELLED": "Camera cancelada",
	"SET_URL": "Configurarl URL",
	"DIRECT_LINK_PICTURE": "Link web direto para a imagem",
	"COMMENT_SUBMITTED": "Comentário publicado!",
	"DELETE_COMMENT": "Apagar comentários é irreversível",
	"DELETED_COMMENT": "Comentário apagado",
	"UPLOADING_PICTURE": "Carregando imagem",
	"UPLOAD_COMPLETED": "Carregamento completo",
	"UPLOAD_FAILED": "Carregamento falhou",
	"PASSWORD_INCORRECT": "A senha ou nome da conta são incorretos",
	"INFO": "Informações",
	"QR_TEXT": "Ponha o código QR dentro da área de scan",
	"BALANCE_TEXT": "Certifique-se que possui saldo suficiente para a transação!",
	"NONEXIST_USER": "O utilizador para quem está a tentar transferir fundos, não existe",
	"TRANSFER_TEXT": "Tem certeza que quer transferir?",
	"CONFIRMATION": "Confirmação",
	"TX_BROADCASTED": "Transação foi difundida",
	"TRENDING": "Tendencia",
	"HOT": "Quente",
	"NEW": "Novidades",
	"PROMOTED": "Promovidos",
	"VOTES": "Votos",
	"PAYOUT": "Pagamento",
	"COMMENTS": "Comentários",
	"TRENDING_30": "Tendencia a 30 dias",
	"SORT_POST_BY": "Ordenar publicações por:",
	"PAYOUT_CYCLE": "Ciclo de Pagamento",
	"POTENTIAL_PAYOUT": "Pagamento em potencial",
	"PAST_PAYOUT": "Último Pagamento",
	"AUTHOR_PAYOUT": "Pagamento do Autor",
	"CURATION_PAYOUT": "Pagamento de curadoria",
	"POST_SUBMITTED": "Publicação enviada!",
	"POST_LATER": "Publique para futura submissão",
	"SAVED": "Salvo",
	"CLEARED": "Limpo",
	"FLAGGING_TEXT": "Por uma bandeira numa publicação pode remover recompensas e tornar o material menos visivel.<br><br>A bandeira deve ser usada para : <ul><li>Fraude ou Plagiarismo</li><li>Discurso de ódio ou Internet Trolling</li><li>Categorização mal feita intencionalmente ou Spam</li></ul>",
	"REQUEST_LIMIT_TEXT": "Limite de pedidos atingido. verifique outro assunto/etiqueta!",
	"POST_IS_UNBOOKMARK": "Publicação removida dos favoritos!",
	"POST_IS_BOOKMARK": "Publicação adicionada aos favoritos!",
	"RESET": "Reiniciar",
	"MODIFY_PICTURE": "Modificar a fotografia de perfil",
	"MODIFY_COVER_PICTURE": "Modificar fotografia da capa",
	"ACTIVE_KEY_REQUIRED_TEXT": "Por favor insira a chave de activação privada que escolheu, Modo de Login Avançado",
	"RESET_PICTURE_TEXT": "Isto reconfigura a imagem do perfil ultizador",
	"RESET_COVER_PICTURE_TEXT": "Isto reconfigura a imagem do ultizador",
	"UPDATE_REQUIRES_RESTART": "Atualização do server obriga a Reiniciar!",
	"SETTINGS_UPDATED": "Configurações foram atualizadas",
	"LANGUAGES": "Língua",
	"LANGUAGES_TEXT": "Aqui pode mudar a língua da App",
	"LOGIN_TO_X": "Esta operação obriga que o utilizador estaja ligado com a senha principal, chave activação/publicação",
	"GALLERY": "Galeria",
	"TRANSLATIONS": "Tradutores que contribuiram",
	"SHARE": "Partilhar",
	"MARKETPLACE": "Mercado",
	"EXCHANGE": "Câmbio",
	"DRAFTS": "Rascunhos",
	"POST_IS_UNDRAFT": "Publicação removida dos Rascunhos!",
	"POST_IS_DRAFT": "Puplicação adicionada a Rascunhos!",
	"SWIPE_LEFT": "Role para a esquerda para opções",
	"MANAGE": "Gerir",
	"IMAGE_REMOVED": "Imagem removida",
	"COPY": "Copiar",
	"NO_IMAGE": "Não carregou nenhuma imagem, ainda",
	"PULL_DOWN_TO_REFRESH": "Carregue para refrescar",
	"EXTERNAL_APPS": "Apps Externas",
	"SUGGEST": "Sugira",
	"COMING_SOON": "Brevemente",
	"CHAIN_TEXT": "Aqui pode escolher blockchain ou a plataforma por defeito"
}
},{}],123:[function(require,module,exports){
module.exports={
	"HOME": "Домой",
	"LOGIN": "Войти",
	"LOGOUT": "Выйти",
	"PROFILE": "Профиль",
	"FOLLOW": "Подписаться",
	"BOOKMARKS": "Закладки",
	"TRANSFER": "Перевести средства",
	"MARKET": "Рынок",
	"SETTINGS": "Настройки",
	"ABOUT": "О программе",
	"ABOUT_1": "где каждый может получать вознаграждение за свои контент!",
	"ABOUT_2": "основано на платформе {{platformname}}. Приложение создано",
	"ABOUT_3": "и является мобильным проектом с открытым исходным кодом управляемым сообществом. Приложение предоставляет доступ к контенту для чтения, комментирования, голосования и размещения, предоставляет возможность перевода средств и другие функции, предлагаемые блокчейном {{platformname}} и сервисом {{sitename}}.",
	"ABOUT_4": "1. Приложение не имеет доступа к денежным средствам пользователя и не удерживает их;",
	"ABOUT_5": "2. Приложение использует модель безопасности на стороне клиента, закрытые ключи хранятся локально и никогда не передаются на сервера;",
	"ABOUT_6": "3. Приложение предоставляет простой и привлекательный пользовательский интерфейс;",
	"ABOUT_7": "4. Приложение никогда не требует пользователя ввести какие-либо персональные данные.",
	"ABOUT_8": "Проголосовать за делегата good-karma",
	"ABOUT_9": "Контакты/Обратная связь:",
	"ABOUT_10": "Дополнительная информация:",
	"REMOVE": "Удалить",
	"MARKET_VIEW": "Обзор рынка",
	"PRICE": "Цена",
	"AMOUNT": "Сумма",
	"TOTAL": "Всего",
	"NOORDERS": "Нет открытых ордеров у",
	"DATE": "Дата",
	"BUY": "Купить",
	"SELL": "Продать",
	"OPEN": "Открыть",
	"HISTORY": "История",
	"FOLLOW_BACK": "Подписаться взаимно",
	"FOLLOWED": "Подписки",
	"UNFOLLOW": "Отписаться",
	"FOLLOWING": "Подписка",
	"FOLLOWERS": "Подписаны",
	"SEARCH_FOLLOWERS": "Поиск подписчиков",
	"SEARCH_FOLLOWING": "Поиск подписанных",
	"BY": "от",
	"IN": "в",
	"MENU": "Меню",
	"BOOKMARK": "Закладка",
	"REBLOG": "Репост",
	"UPVOTE": "Голос За",
	"DOWNVOTE": "Голос Против",
	"UNVOTE_DOWNVOTED": "Снять Голос Против",
	"UNVOTE_UPVOTED": "Снять Голос За",
	"REPLY": "Ответить",
	"EDIT": "Редактировать",
	"POST_1": "Проведите пальцем влево на комментарии, чтобы увидеть варианты",
	"POST_2": "Нажмите на комментарии, чтобы увидеть вложенные комментарии",
	"OPTIONS": "Параметры",
	"RESTEEMED_BY": "Репостнуто",
	"NOTHING_HERE": "Здесь пока ничего нет...",
	"BALANCES": "Балансы",
	"PROFILE_1": "{{platformname}}, перемещаемые цифровые токены, которые могут быть переданы в любое время. {{platformname}} может быть конвертирован в {{platformpower}}, этот процесс называется «усиление {{platformname}}-а».",
	"PROFILE_2": "{{platformpower}}, неперемещаемые цифровые токены, их количество увеличивается при долгосрочном хранении и голосовании за посты. Чем их у Вас больше, тем сильней Вы влияете на вознаграждение за посты других и тем больше Вы получаете вознаграждение за свое голосование.",
	"PROFILE_3": "Токены стоят примерно {{platformsunit}} в {{platformname}} эквиваленте.",
	"ESTIMATED_VALUE": "Ориентировочная стоимость",
	"PROFILE_4": "Ориентировочная стоимость основана на 7-дневной средней стоимости {{platformname}}.",
	"TRANSACTION_HISTORY": "История транзакций",
	"POSTING": "Постинг",
	"PROFILE_5": "Постинг ключ используется для постинга и голосования. Он должен отличаться от активного ключа и ключа владельца.",
	"OWNER": "Владелец",
	"PROFILE_6": "Ключ владельца является мастер ключом для аккаунта и требуется для изменения других ключей. Закрытый ключ или пароль от ключа владельца должен храниться офлайн, насколько это возможно.",
	"ACTIVE": "Активный",
	"PROFILE_7": "Активный ключ используется для перевода средств и размещения ордеров на внутреннем рынке.",
	"MEMO": "Примечание",
	"PROFILE_8": "Ключ для примечаний используется для создания и чтения примечаний.",
	"BLOG": "Блог",
	"POSTS": "Посты",
	"REPLIES": "Ответы",
	"WALLET": "Кошелек",
	"TAG": "Тег",
	"USER": "Пользователь",
	"CLOSE": "Закрыть",
	"TO": "Кому",
	"ASSET": "Актив",
	"SEND": "Отправить",
	"SECURITY": "Безопасность",
	"AVAILABLE": "Доступно",
	"PUBLIC_MEMO": "Общедоступное примечание",
	"TO_DESC": "Пользователь, например good-karma",
	"PIN_CODE": "PIN-код",
	"PIN_TEXT": "PIN-код поможет Вам защитить приложение и Ваши данные. <br/><br/><b>Примечание:</b> После включения, у Вас есть максимум 4 попытки разблокировать приложение, если Вы забыли PIN-код или ошиблись в его наборе, приложение удалит данные вошедшего в систему пользователя. Вы можете повторно выполнить вход и продолжить использовать приложение.",
	"NOTIFICATIONS": "Уведомления",
	"VOTE_TEXT": "Вы получите уведомление, когда кто то голосует за Ваш контент! <br/><b>Примечание:</b> Уведомления отображают вес голоса в сообщении (будь то Голос За, Голос Против, снятие Голоса).",
	"VOTE": "Голосование",
	"COMMENT_TEXT": "Вы получите уведомление, когда кто-то прокомментирует Ваши посты или комментарии!<br/> <b>Примечание:</b> Вы также получите уведомление, если кто-то <b>отредактирует</b> свой комментарий.",
	"COMMENT": "Комментарий",
	"FOLLOW_TEXT": "Вы получите уведомление, когда кто-то подпишется или отпишется от Вас!",
	"MENTIONS": "Упоминания",
	"MENTIONS_TEXT": "Вы получите уведомление, когда кто-то упомянет Вас в своем посте/комментарий!",
	"RESTEEM": "Репосты",
	"RESTEEM_TEXT": "Вы получите уведомление, когда кто-то сделает репост Вашего поста!",
	"CONFIGURATIONS": "Конфигурация",
	"VOTING": "Голосовать",
	"VOTING_TEXT": "Вес голоса в процентах влияет на силу голоса в приложении, так что Вы можете регулировать награду при голосовании. <br/><br/><b>Примечание:</b> Это также изменит вес Голоса Против",
	"SERVER": "Сервер",
	"SERVER_TEXT": "Рекомендованный",
	"SAVE_CHANGES": "Сохранить изменения",
	"VOTERS_INFO": "Информация о проголосовавших",
	"WELCOME_BACK": "Добро пожаловать!",
	"LOGIN_1": "Чтобы продолжить, войдите с Вашим именем пользователя и паролем.",
	"LOGIN_2": "Постинг ключ используется для написания постов, комментариев, голосования и подписок.",
	"LOGIN_3": "Активный ключ используется для перевода средств и обновления изображения в профиле.",
	"LOGIN_4": "Учетные данные пользователя хранятся локально на устройстве. При Выходе учетные данные будут удалены!",
	"DONT_HAVE": "Не зарегистрированы?",
	"SIGN_UP_NOW": "Зарегистрироваться сейчас",
	"CANCEL": "Отмена",
	"ADVANCED": "Расширенный режим",
	"ACTIVE_PRIKEY": "Активный закрытый ключ",
	"POSTING_PRIKEY": "Постинг закрытый ключ",
	"MASTER_PASS": "Мастер/основной пароль",
	"USERNAME": "Имя пользователя",
	"CARD_VIEW": "Карточки",
	"COMPACT_VIEW": "Компактный",
	"SEARCH": "Поиск",
	"SUBMIT_A_STORY": "Добавить статью",
	"REPLYTO": "Ответить на",
	"POST": "Пост",
	"PREVIEW": "Предварительный просмотр",
	"DEFAULT": "По умолчанию 50% / 50%",
	"POWERUP": "Заплатить 100% в {{platformpower}}",
	"DECLINE_PAYOUT": "Отказаться от выплаты",
	"SAVE_FOR_LATER": "СОХРАНИТЬ ДЛЯ ПОСЛЕДУЮЩЕГО ИСПОЛЬЗОВАНИЯ",
	"CLEAR": "ОЧИСТИТЬ",
	"POST_CONTENT": "Содержание поста",
	"COMMENT_CONTENT": "Содержание комментария",
	"TITLE": "Заголовок",
	"TAGS": "Теги",
	"NOT_MATCH": "НЕ СОВПАДЕНИЙ",
	"CONFIRM_PIN": "Подтвердите PIN-код",
	"INCORRECT": "НЕПРАВИЛЬНО",
	"OPENING_POST": "открытие поста",
	"SET_PIN": "Установите PIN-код",
	"ENTER_PIN": "Введите PIN-код",
	"ARE_YOU_SURE": "Вы уверены?",
	"REBLOG_TEXT": "Репост является необратимым, Вы хотите продолжить?",
	"BROADCAST_ERROR": "Не удалось транслировать, попробуйте еще раз!",
	"SUCCESS": "Успешно",
	"REBLOGGED_POST": "Репостнутый пост!",
	"LOGIN_FAIL": "Ошибка входа! Пожалуйста, убедитесь, что вы вошли в систему с мастер паролем или указали закрытый Постинг ключ при входе в систему в расширенном режиме.",
	"LOGIN_FAIL_A": "Ошибка входа! Пожалуйста, убедитесь, что вы вошли в систему с мастер паролем или указали закрытый Активный ключ при входе в систему в расширенном режиме.",
	"WARNING": "Предупреждение",
	"VOTE_FOR_WITNESS": "Голосовать за делегата",
	"VOTED_FOR_WITNESS": "Проголосовали за делегата",
	"AGO": "назад",
	"FROM_NOW": "с этого момента",
	"SECS": "секунд",
	"A_MIN": "минута",
	"MINS": "минут(ы)",
	"AN_HOUR": "час",
	"HOURS": "часа(ов)",
	"A_DAY": "день",
	"DAYS": "дня(ей)",
	"A_MONTH": "месяц",
	"MONTHS": "месяца(ев)",
	"A_YEAR": "год",
	"YEARS": "года",
	"MIN_READ": "мин чтения",
	"DOWNVOTE_FLAG": "Голос Против или флаг",
	"CAPTURE_PICTURE": "Захват изображения",
	"SELECT_PICTURE": "Выбор изображения",
	"SET_CUSTOM_URL": "Задать пользовательский URL",
	"INSERT_PICTURE": "Вставить изображение",
	"ERROR": "Ошибка",
	"UPLOAD_ERROR": "Ошибка при загрузке",
	"CAMERA_CANCELLED": "Захват изображения отменен",
	"SET_URL": "Вставить ссылку",
	"DIRECT_LINK_PICTURE": "Прямая ссылка на изображение",
	"COMMENT_SUBMITTED": "Комментарий отправлен!",
	"DELETE_COMMENT": "Удаление комментариев является необратимым",
	"DELETED_COMMENT": "Удаленный комментарий",
	"UPLOADING_PICTURE": "Загрузка изображения",
	"UPLOAD_COMPLETED": "Загрузка завершена",
	"UPLOAD_FAILED": "Не удалось загрузить",
	"PASSWORD_INCORRECT": "Неправильный пароль или имя пользователя",
	"INFO": "Информация",
	"QR_TEXT": "Разместите QR код внутри сканирующей области",
	"BALANCE_TEXT": "Убедитесь что у Вас достаточно средств для транзакции!",
	"NONEXIST_USER": "Пользователь, которому Вы пытаетесь перевести средства, не существует!",
	"TRANSFER_TEXT": "Вы уверены что хотите осуществить перевод средств?",
	"CONFIRMATION": "Подтверждение",
	"TX_BROADCASTED": "Транзакция была транслирована",
	"FEED": "Лента",
	"TRENDING": "Лучшее",
	"HOT": "Актуальное",
	"NEW": "Новое",
	"PROMOTED": "Продвигаемое",
	"VOTES": "Голосов",
	"PAYOUT": "Выплата",
	"COMMENTS": "Комментариев",
	"TRENDING_30": "Лучшее за 30 дней",
	"SORT_POST_BY": "Сортировать посты по:",
	"PAYOUT_CYCLE": "Период выплат",
	"POTENTIAL_PAYOUT": "Потенциальная выплата",
	"PAST_PAYOUT": "Последняя выплата",
	"AUTHOR_PAYOUT": "Авторская выплата",
	"CURATION_PAYOUT": "Кураторская выплата",
	"POST_SUBMITTED": "Пост опубликован!",
	"POST_LATER": "Пост для отсроченной публикации!",
	"SAVED": "Сохранен",
	"CLEARED": "Очищен",
	"FLAGGING_TEXT": "Ставя флаг посту, Вы можете уменьшить награду и сделать этот материал менее заметным.<br><br>Флаг должен быть использован в следующих случаях: <ul><li>Мошенничество или Плагиат</li><li>Брань или Интернет Троллинг</li><li>Преднамеренное использование несоотверствующей категории или Спам</li></ul>",
	"REQUEST_LIMIT_TEXT": "Превышено количество запросов. Проверьте другие тренды/теги!",
	"POST_IS_UNBOOKMARK": "Пост удален из закладок!",
	"POST_IS_BOOKMARK": "Пост добавлен в закладки!",
	"RESET": "Сбросить",
	"MODIFY_PICTURE": "Изменить изображение профиля",
	"MODIFY_COVER_PICTURE": "Изменить изображение обложки",
	"ACTIVE_KEY_REQUIRED_TEXT": "Пожалуйста, предоставьте Активный закрытый ключ, если Вы выбрали расширенный режим авторизации!",
	"RESET_PICTURE_TEXT": "Это приведет к сбросу изображения Вашего профиля",
	"RESET_COVER_PICTURE_TEXT": "Это приведет к сбросу изображения Вашей обложки",
	"UPDATE_REQUIRES_RESTART": "Обновление сервера требует перезагрузки!",
	"SETTINGS_UPDATED": "Настройки обновлены!",
	"LANGUAGES": "Языки",
	"LANGUAGES_TEXT": "Здесь вы можете изменить язык приложения.",
	"LOGIN_TO_X": "Эта операция требует авторизации пользователя в системе с паролем, активным/постинг ключом. Пожалуйста, авторизуйтесь и повторите попытку.",
	"GALLERY": "Галерея",
	"TRANSLATIONS": "Авторы перевода",
	"SHARE": "Поделиться",
	"MARKETPLACE": "Рынок",
	"EXCHANGE": "Биржа",
	"DRAFTS": "Черновики",
	"POST_IS_UNDRAFT": "Пост удален из черновиков!",
	"POST_IS_DRAFT": "Пост добавлен в черновики!",
	"SWIPE_LEFT": "Проведите пальцем влево чтобы увидеть варианты",
	"MANAGE": "Управление",
	"IMAGE_REMOVED": "Изображение удалено",
	"COPY": "Копировать",
	"NO_IMAGE": "Вы еще не загрузили ни одного изображения!",
	"PULL_DOWN_TO_REFRESH": "Потяните вниз, чтобы обновить",
	"EXTERNAL_APPS": "Внешние приложения",
	"PLUGINS": "Плагины",
	"SUGGEST": "Предложить",
	"COMING_SOON": "Скоро",
	"CHAIN": "Блокчейн",
	"CHAIN_TEXT": "Здесь вы можете изменить платформу по умолчанию (блокчейн).",
	"CURRENCY": "Валюта",
	"CURRENCY_TEXT": "Здесь Вы можете изменить валюту по умолчанию. Награда за пост/комментарий будет отображаться в этой валюте.",
	"ABOUT_11": "<br><b>Перечень возможностей</b><br>- Получите доступ к уникальным статьям на любую интересную Вам тему;<br>- Взаимодействуйте с авторами, комментируя и участвуя в дискуссиях;<br>- Голосуйте за посты, чтобы вознаградить автора, а также получить кураторское вознаграждение;<br>- Публикуйте свои посты и бесплатно размещайте их, чтобы привлечь фолловеров и получить вознаграждения;<br>- Пишите статьи в пути, сохраняйте несколько черновиков поста и публикуйте их, когда Вам удобно;<br>- Добавляйте понравившиеся статьи в закладки, чтобы вернуться к ним позже;<br>- Обменивайте или обналичивайте Ваши вознаграждения;<br>- Посылайте средства любым авторам, пользователям, друзьям, фолловерам и т.д.;<br>- Подписывайтесь на интересных авторов и блоггеров;<br>- Пользуйтесь удобным поиском по фолловерам или авторам, на которых Вы подписаны;<br>- Получайте уведомления - оставайтесь на связи с Вашими фолловерами и наблюдайте за развитием дискуссий, в которых участвуете;<br>- Находите новых интересных авторов и статьи, используя поиск по тегам/категориям;<br>- Персонализируйте страницу своего профиля;<br>- Не пропускайте обновления - в них Вы найдете еще больше новых функций!<br><br><b>Безопасность</b><br>1. Приложение не имеет доступа или права распоряжаться средствами пользователя;<br>2. Приложение предлагает модель безопасности на стороне клиента, где приватные ключи хранятся локально и никогда не отправляются ни на какие сервера - только Вы ответственны за хранение своих паролей;<br>3. Приложение обладает простым привлекательным пользовательским интерфейсом, что подарит Вам положительный опыт использования;<br>4. В приложении предусмотрен дополнительный уровень безопасности в виде пин-кода.<br><br>eSteem поддерживает платформы Steem и Golos.<br>",
	"FOUNDER": "Основатель и ведущий разработчик",
	"ADD_ACCOUNT": "Добавить аккаунт",
	"PLATFORM": "Платформа",
	"ESCROW_AGENT": "Гарант",
	"RATIFICATION_DEADLINE": "Срок ратификации сделки",
	"ESCROW_EXPIRATION": "Срок действия сделки",
	"ESCROW_FEE": "Комиссия гаранта",
	"ESCROW_TERMS": "Условия сделки"
}
},{}],124:[function(require,module,exports){
module.exports={
	"HOME": "Hem",
	"LOGIN": "Logga in",
	"LOGOUT": "Logga ut",
	"PROFILE": "Profil",
	"FOLLOW": "Följ",
	"BOOKMARKS": "Bokmärken",
	"TRANSFER": "Överföring",
	"MARKET": "Marknad",
	"SETTINGS": "Inställningar",
	"ABOUT": "Om",
	"ABOUT_1": "där vem som helst kan belönas för sitt material!",
	"ABOUT_2": "är en social mediaplatform där du betalas för att blogga, kommentera och kurrera inlägg.",
	"ABOUT_3": "och är ett community-drivet projekt för mobilen som baseras på öppen källkod. Den ger ger dig tillgång så att du kan läsa innehåll, kommentera, rösta, skapa inlägg och föra över belöningar, och diverse andra funktioner som görs möjliga av {{platformname}} block-kedja och {{sitename}}.",
	"ABOUT_4": "Appen har aldrig tillgång till användarens pengar.",
	"ABOUT_5": "Appen erbjuder en klientcentrerad säkerhetsmodell, dvs. dina privata nycklar stannar lokalt och skickas inte till andra servrar.",
	"ABOUT_6": "Appen erbjuder ett enkelt och attraktivt användergränssnitt, vilket ger en god användarupplevelse.",
	"ABOUT_7": "Appen kräver aldrig att användaren matar in personlig information.",
	"ABOUT_8": "Rösta på good-karma som vittne",
	"ABOUT_9": "Kontakt/Återkoppling",
	"ABOUT_10": "Mera information:",
	"REMOVE": "Ta bort",
	"MARKET_VIEW": "Marknadsvy",
	"PRICE": "Pris",
	"AMOUNT": "Mängd",
	"TOTAL": "Summa",
	"NOORDERS": "Inga aktiva ordrar för",
	"DATE": "Datum",
	"BUY": "Köp",
	"SELL": "Sälj",
	"OPEN": "Öppen",
	"HISTORY": "Historik",
	"FOLLOW_BACK": "Följ tillbaka",
	"FOLLOWED": "Följer",
	"UNFOLLOW": "Sluta följa",
	"FOLLOWING": "Följer",
	"FOLLOWERS": "Följare",
	"SEARCH_FOLLOWERS": "Sök bland följare",
	"SEARCH_FOLLOWING": "Sök bland de du följer",
	"BY": "av",
	"IN": "i",
	"MENU": "Meny",
	"BOOKMARK": "Bokmärk",
	"REBLOG": "Återblogga",
	"UPVOTE": "Rösta upp",
	"DOWNVOTE": "Rösta ner",
	"UNVOTE_DOWNVOTED": "Ångra rösta ner",
	"UNVOTE_UPVOTED": "Ångra rösta upp",
	"REPLY": "Svara",
	"EDIT": "Redigera",
	"POST_1": "Svep åt vänster över kommentarer för att se alternativ",
	"POST_2": "Dutta på kommentarer för att se underkommentarer",
	"OPTIONS": "Alternativ",
	"RESTEEMED_BY": "Återsteemades av",
	"NOTHING_HERE": "Tomt än så länge...",
	"BALANCES": "Saldon",
	"PROFILE_1": "Steem, utbytsbara polletter som går att överföra när som helst. Steem kan omvandlas till SteemPower i en process som kallas att öka rösteffekt eller \"ånga upp\".",
	"PROFILE_2": "SteemPower, inflytandepolletter som ger högre rösteffekt för att du sparar dem långsiktigt och röstar på inlägg. Ju mer du har, desto mer kan du påverka andras belöningar och belönas för smart röstning.",
	"PROFILE_3": "Polletter värda ungefär {{platformsunit}} av {{platformname}.",
	"ESTIMATED_VALUE": "Uppskattat värde",
	"PROFILE_4": "Det uppskattade värdet är baserat på ett 7 dagars genomsnittlig värde av {{platformname}.",
	"TRANSACTION_HISTORY": "Transaktionshistorik",
	"POSTING": "Inlägg",
	"PROFILE_5": "Inläggsnyckeln används för att skriva inlägg och rösta. Den bör vara olik allmännyckeln och huvudnyckeln.",
	"OWNER": "Ägare",
	"PROFILE_6": "Ägarnyckeln är huvudnyckeln för kontot och behövs för att kunna byta de andra nycklarna. För att öka säkerheten bör den \"privata nyckeln\" eller lösenordet till huvudnyckeln användas så lite som möjligt.",
	"ACTIVE": "Rörelse",
	"PROFILE_7": "Allmännyckeln används för att göra överföringar och att lägga ordrar i den interna marknaden.",
	"MEMO": "Anteckning",
	"PROFILE_8": "Anteckningsnyckeln används för att skapa och läsa anteckningar.",
	"BLOG": "Blogg",
	"POSTS": "Inlägg",
	"REPLIES": "Svar",
	"WALLET": "Plånbok",
	"TAG": "Ämne",
	"USER": "Användare",
	"CLOSE": "Stäng",
	"TO": "Till",
	"ASSET": "Tillgång",
	"SEND": "Skicka",
	"SECURITY": "Säkerhet",
	"AVAILABLE": "Tillgänglig",
	"PUBLIC_MEMO": "Offentlig anteckning",
	"TO_DESC": "Användare t.ex. good-karma",
	"PIN_CODE": "Pinkod",
	"PIN_TEXT": "Pinkoden hjälper dig att säkra appen och din data. När den aktiveras har du max 4 försök att låsa upp appen. Om du har glömt den eller misslyckas kommer appen att ta bort inloggad användardata. Du måste då logga in på nytt för att fortsätta använda appen.",
	"NOTIFICATIONS": "Meddelanden",
	"VOTE_TEXT": "Du kommer få ett meddelande när någon röstar upp ditt inlägg. Meddelanden talar även om den valda röstvikten. (oavsett uppröstning, nedröstning, av/omröstning).",
	"VOTE": "Rösta",
	"COMMENT_TEXT": "Du kommer få ett meddelande när någon kommenterar på ditt inlägg eller kommentar. Meddelanden inkluderar även när någon redigerar sin kommentar.",
	"COMMENT": "Kommentar",
	"FOLLOW_TEXT": "Du kommer få ett meddelande när någon följer eller slutar följa dig.",
	"MENTIONS": "Omnämnande",
	"MENTIONS_TEXT": "Du kommer få ett meddelande när någon nämnar ditt namn i deras inlägg/kommentar!",
	"RESTEEM": "Återblogga",
	"RESTEEM_TEXT": "Du kommer få ett meddelande när någon återbloggar ditt inlägg!",
	"CONFIGURATIONS": "Inställningar",
	"VOTING": "Röstning",
	"VOTING_TEXT": "Röstningsvikt eller procent påverkar röstningskraften på appen så att du kan reglera hur mycket du vill belöna inlägg. Detta ändrar också på röstningsvikten/procenten för nedröstningar och gäller överallt på appen.",
	"SERVER": "Server",
	"SERVER_TEXT": "Rekommenderas",
	"SAVE_CHANGES": "Spara ändringar",
	"VOTERS_INFO": "Röstarens information",
	"WELCOME_BACK": "Välkommen tillbaka!",
	"LOGIN_1": "Logga in med ditt användarnamn och lösenord för att fortsätta.",
	"LOGIN_2": "Inläggsnyckeln används för att göra inlägg, kommentera, röst, följa.",
	"LOGIN_3": "Allmännyckeln används för att göra överföringar och att uppdatera profilbild.",
	"LOGIN_4": "Användaruppgifter lagras lokalt på enheten. Vid utloggning avlägsnas uppgifterna!",
	"DONT_HAVE": "Har du inget konto?",
	"SIGN_UP_NOW": "Registrera dig nu",
	"CANCEL": "Avbryt",
	"ADVANCED": "Avancerat läge",
	"ACTIVE_PRIKEY": "Privat allmännyckel",
	"POSTING_PRIKEY": "Privat inläggsnyckel",
	"MASTER_PASS": "Ägare/huvudlösenord",
	"USERNAME": "Användarnamn",
	"CARD_VIEW": "Kortvy",
	"COMPACT_VIEW": "Kompakt vy",
	"SEARCH": "Sök",
	"SUBMIT_A_STORY": "Gör ett inlägg",
	"REPLYTO": "Svara",
	"POST": "Skicka",
	"PREVIEW": "Förhandsgranska",
	"DEFAULT": "Normal 50% / 50%",
	"POWERUP": "Ånga upp 100%",
	"DECLINE_PAYOUT": "Avsäg dig belöning",
	"SAVE_FOR_LATER": "SPARA TILL SENARE",
	"CLEAR": "TÖM",
	"POST_CONTENT": "Skriv inlägg",
	"COMMENT_CONTENT": "Kommentera material",
	"TITLE": "Titel",
	"TAGS": "Ämnen",
	"NOT_MATCH": "MATCHAR INTE",
	"CONFIRM_PIN": "Bekräfta pinkod",
	"INCORRECT": "FELAKTIG",
	"OPENING_POST": "öppnar inlägg",
	"SET_PIN": "Ställ in pinkod",
	"ENTER_PIN": "Ange pinkod",
	"ARE_YOU_SURE": "Är du säker?",
	"REBLOG_TEXT": "Återbloggade inlägg kan inte ångras, vill du fortsätta?",
	"BROADCAST_ERROR": "Sändningsfel, försök igen!",
	"SUCCESS": "Utfört",
	"REBLOGGED_POST": "Återbloggade inlägg!",
	"LOGIN_FAIL": "Inloggning misslyckades! Var god säkerställ att du loggar in med huvudlösenord eller din privata inläggsnyckel om du valt \"Avancerat läge\".",
	"LOGIN_FAIL_A": "Inloggning misslyckades! Var god säkerställ att du loggar in med huvudlösenord eller din privata rörelsenyckel om du valt \"Avancerat läge\".",
	"WARNING": "Varning",
	"VOTE_FOR_WITNESS": "Rösta på vittne",
	"VOTED_FOR_WITNESS": "Röstade på vittnet",
	"AGO": "sedan",
	"FROM_NOW": "från och med nu",
	"SECS": "sek",
	"A_MIN": "en minut",
	"MINS": "min",
	"AN_HOUR": "en timme",
	"HOURS": "timmar",
	"A_DAY": "en dag",
	"DAYS": "dagar",
	"A_MONTH": "en månad",
	"MONTHS": "månader",
	"A_YEAR": "ett år",
	"YEARS": "år",
	"MIN_READ": "min läsning",
	"DOWNVOTE_FLAG": "Rösta Ner",
	"CAPTURE_PICTURE": "Ta Foto",
	"SELECT_PICTURE": "Välj Bild",
	"SET_CUSTOM_URL": "Ställ in egen URL",
	"INSERT_PICTURE": "Infoga Bild",
	"ERROR": "Fel",
	"UPLOAD_ERROR": "Uppladdningsfel",
	"CAMERA_CANCELLED": "Kamera Avbruten",
	"SET_URL": "Ställ in URL",
	"DIRECT_LINK_PICTURE": "Direkt webblänk för bild",
	"COMMENT_SUBMITTED": "Kommentaren är skickad!",
	"DELETE_COMMENT": "Borttagning av kommentarer går inte att ångra...",
	"DELETED_COMMENT": "Tog bort kommentaren",
	"UPLOADING_PICTURE": "Laddar upp bild",
	"UPLOAD_COMPLETED": "Uppladdning Slutförd",
	"UPLOAD_FAILED": "Uppladdning Misslyckades",
	"PASSWORD_INCORRECT": "Lösenordet eller kontonamnet var felaktigt",
	"INFO": "Info",
	"QR_TEXT": "Placera QR-kod innanför skanningsområdet",
	"BALANCE_TEXT": "Se till att du har tillräckligt saldo för transaktionen!",
	"NONEXIST_USER": "Användaren du försöker överföra till existerar inte!",
	"TRANSFER_TEXT": "Är du säker att du vill föra över?",
	"CONFIRMATION": "Bekräftelse",
	"TX_BROADCASTED": "Överföring sändes",
	"FEED": "Flöde",
	"TRENDING": "Trendande",
	"HOT": "Hett",
	"NEW": "Nytt",
	"PROMOTED": "Marknadsfört",
	"VOTES": "Röster",
	"PAYOUT": "Utbetalning",
	"COMMENTS": "Kommentarer",
	"TRENDING_30": "Trendande för 30 dagar",
	"SORT_POST_BY": "Sortera inlägg efter",
	"PAYOUT_CYCLE": "Utbetalningsperiod",
	"POTENTIAL_PAYOUT": "Potentiell Utbetalning",
	"PAST_PAYOUT": "Tidigare Utbetalning",
	"AUTHOR_PAYOUT": "Skribents Utbetalning",
	"CURATION_PAYOUT": "Kuratorers Utbetalning",
	"POST_SUBMITTED": "Inlägget är publicerat!",
	"POST_LATER": "Inlägg för senare publicering!",
	"SAVED": "Sparat",
	"CLEARED": "Tömt",
	"FLAGGING_TEXT": "Att rösta ner ett inlägg kan ta bort belöning och göra inlägget mindre synligt.<br><br> Nedrösten bör användas för följande: <ul><li>Bedräger eller Plagiat</li><li>Hets eller Trolling</li><li>Medvetet felkategoriserat innehåll eller Spam</li></ul>",
	"REQUEST_LIMIT_TEXT": "Slut på flödet nått. Kolla in andra trender/ämnestaggar!",
	"POST_IS_UNBOOKMARK": "Inlägget har tagits bort från bokmärken!",
	"POST_IS_BOOKMARK": "Inlägget har lagts till i bokmärken!",
	"RESET": "Återställ",
	"MODIFY_PICTURE": "Modifiera profilbild",
	"MODIFY_COVER_PICTURE": "Modifiera uppslagsbild",
	"ACTIVE_KEY_REQUIRED_TEXT": "Var god ange den privata rörelsenyckeln om du har valt Avancerat läge!",
	"RESET_PICTURE_TEXT": "Det här återställer profilbild",
	"RESET_COVER_PICTURE_TEXT": "Det här återställer uppslagsbild",
	"UPDATE_REQUIRES_RESTART": "Serveruppdatering kräver omstart!",
	"SETTINGS_UPDATED": "Inställningar har uppdaterats!",
	"LANGUAGES": "Språk",
	"LANGUAGES_TEXT": "Här kan du välja det språk som appen använder.",
	"LOGIN_TO_X": "Den här operationen kräver att användaren är inloggad med lösenord, allmännyckel/inläggsnyckel. Var god logga in och försök igen.",
	"GALLERY": "Galleri",
	"TRANSLATIONS": "Bidragande översättare",
	"SHARE": "Dela",
	"MARKETPLACE": "Marknadsplats",
	"EXCHANGE": "Börs",
	"DRAFTS": "Utskick",
	"POST_IS_UNDRAFT": "Inlägg har tagits bort från utskick!",
	"POST_IS_DRAFT": "Inlägg har lagts till i utskick!",
	"SWIPE_LEFT": "Dra åt vänster för att se alternativ",
	"MANAGE": "Hantera",
	"IMAGE_REMOVED": "Bilden är borttagen",
	"COPY": "Kopiera",
	"NO_IMAGE": "Du har inte laddat upp någon bild ännu!",
	"PULL_DOWN_TO_REFRESH": "Dra ner för att uppdatera",
	"EXTERNAL_APPS": "Externa appar",
	"PLUGINS": "Plugin",
	"SUGGEST": "Förslag",
	"COMING_SOON": "Kommer snart",
	"CHAIN": "Kedja",
	"CHAIN_TEXT": "Här kan du ändra blockkedja eller förvald plattform.",
	"CURRENCY": "Valuta",
	"CURRENCY_TEXT": "Här kan du ändra din standardvaluta. Det är den valuta som belöningar för inlägg/kommentarer kommer att visas i.",
	"ABOUT_11": "<br><b>Lista över funktioner</b><br>- Tillgång till artiklar i ämnen som intresserar dig.<br>- Interagera med skribenter genom att kommentera, diskutera ämnen.<br>- Rösta på inlägg för at belöna skribenter och tjäna kureringsbelöningar.<br>- Publicera dina artiklar, blogginlägg och gör dem tillgänliga för andra helt gratis, samt tjäna belöningar genom att engagera och få följare.<br>- Skriv artiklar på stående fåt, spara flera utkast av dina inlägg för senare publicering.<br>- Bokmärk favortinlägg för att läsa senare.<br>- Handla med eller ta ut dina belöningar.<br>- Gör transaktioner till valfri användare, vän, följare, etc.<br>- Följ intressanta skribenter, bloggare.<br>- Sök bland dina följare och skribenter du följer.<br>- Få meddelande så att du kan hålla kontakten med dina följare och ha koll på de diskussioner du deltar i.<br>- Sök efter intressanta ämnen/artikelkategorier, skribenter.<br>- Gör din profil mer personlig.<br>- Många fler funktioner på väg<br><br><b>Säkerhet</b><br>1. Appen har får aldrig tillgång till eller kontroll över dina pengar.<br>2. Appens säkerhetsmodell är klientcentrerad, med privata nycklar sparade lokalt och aldrig skickade till några andra servrar, du är själv ansvarig för att säkerhetskopiera dina lösenord.<br>3. Appen erbjuder ett enkelt, attraktivt användargränssnitt och användarupplevelse.<br>4. Appen erbjuder extra säkerhet med pin-kod<br><br>eSteem stödjer Steem- och Golos- plattformarna.<br>",
	"FOUNDER": "Grundare och Lead Developer",
	"ADD_ACCOUNT": "Lägg till konto",
	"PLATFORM": "Plattform",
	"ESCROW_AGENT": "Escrow agent",
	"RATIFICATION_DEADLINE": "Ratificeringen tidsfristen",
	"ESCROW_EXPIRATION": "Escrow förfallodatum",
	"ESCROW_FEE": "Escrow avgift",
	"ESCROW_TERMS": "Escrow villkor"
}
},{}],125:[function(require,module,exports){
module.exports={
	"HOME": "На головну",
	"LOGIN": "Увійти",
	"LOGOUT": "Вийти",
	"PROFILE": "Профіль",
	"FOLLOW": "Підписатися",
	"BOOKMARKS": "Закладки",
	"TRANSFER": "Переказ коштів",
	"MARKET": "Ринок",
	"SETTINGS": "Налаштування",
	"ABOUT": "Інформація про...",
	"ABOUT_1": "де кожен зможе отримати винагороду за свій контент!",
	"ABOUT_2": "є соціальним додатком, де ви отримуєте оплату за публікації, коментарі та кураторство.",
	"ABOUT_3": "і є мобільним проектом з відкритим вихідним кодом. Воно надає доступ до контенту для читання, коментування, голосування, постингу, дає можливість передачі коштів та інші функціі, що пропонуються {{platformname}} блокчейном та {{sitename}}.",
	"ABOUT_4": "Додаток не буде мати доступу до коштів користувача чи утримувати їх.",
	"ABOUT_5": "Додаток має кліент-орієнтовану модель безпеки. Приватні ключі зберігаються локально на пристрої користувача і ніколи не надсилаються на інші сервери.",
	"ABOUT_6": "3. Додаток пропонує простий, привабливий користувацький інтерфейс та досвід.",
	"ABOUT_7": "Додаток ніколи не вимагає від користувачів жодних особистих даних.",
	"ABOUT_8": "Проголосувати за good-karma як за делегата",
	"ABOUT_9": "Контакт/Зворотній зв'язок",
	"ABOUT_10": "Більше інформації",
	"REMOVE": "Видалити",
	"MARKET_VIEW": "Огляд ринку",
	"PRICE": "Ціна",
	"AMOUNT": "Кількість",
	"TOTAL": "Загалом",
	"NOORDERS": "Немає відкритих ордерів для",
	"DATE": "Дата",
	"BUY": "Купити",
	"SELL": "Продати",
	"OPEN": "Відкрити",
	"HISTORY": "Історія",
	"FOLLOW_BACK": "Відписатися",
	"FOLLOWED": "Підписки",
	"UNFOLLOW": "Не слідкувати",
	"FOLLOWING": "За кими ви слідкуєте",
	"FOLLOWERS": "Послідовники",
	"SEARCH_FOLLOWERS": "Пошук послідовників",
	"SEARCH_FOLLOWING": "Пошук відстежуваного",
	"BY": "за",
	"IN": "В",
	"MENU": "Меню",
	"BOOKMARK": "Закладка",
	"REBLOG": "Репост",
	"UPVOTE": "Голос За",
	"DOWNVOTE": "Голос Проти",
	"UNVOTE_DOWNVOTED": "Зняти голос Проти",
	"UNVOTE_UPVOTED": "Зняти голос За",
	"REPLY": "Повторити",
	"EDIT": "Редагувати",
	"POST_1": "Проведіть пальцем вліво на коментарі, щоб побачити варіанти",
	"POST_2": "Натисніть на коментарі, щоб побачити вкладені коментарі",
	"OPTIONS": "Варіанти",
	"RESTEEMED_BY": "Репостнуто",
	"NOTHING_HERE": "Тут нічого, поки що...",
	"BALANCES": "Баланси",
	"PROFILE_1": "{{platformname}}, торгові маркери, які можуть передаватися в будь-який час. {{platformname}} можна конвертувати в {{platformpower}} в процесі, що має назву \"посилення\".",
	"PROFILE_2": "{{platformpower}}, маркери впливу, які надають більше сили при їх довгостроковому збереженні та голосуванні за пости. Чим більше Ви їх маєте, тим більший Ваш вплив на винагороду за пост, і більша Ваша винагорода за голосування.",
	"PROFILE_3": "Токени коштують приблизно {{platformsunit}} {{platformname}}.",
	"ESTIMATED_VALUE": "Середня вартість",
	"PROFILE_4": "Орієнтовна вартість базується на 7-денній середній вартості {{platformname}}.",
	"TRANSACTION_HISTORY": "Історія транзакцій",
	"POSTING": "Публікація",
	"PROFILE_5": "Постинг-ключ використовується для постингу та голосування. Він повинен відрізнятися від Активного ключа і ключа користувача.",
	"OWNER": "Власник",
	"PROFILE_6": "Ключ користувача є Майстер-ключем для облікового запису і необхідний для зміни інших ключів. Закритий ключ або пароль до Ключа користувача повинні зберігатися по можливості оффлайн.",
	"ACTIVE": "Активні",
	"PROFILE_7": "Активний ключ використовується для того, щоб здійснювати перекази та розміщувати замовлення на внутрішньому ринку.",
	"MEMO": "Пам'ятка",
	"PROFILE_8": "Пам'ятка ключ використовується для створення і читання пам'яток.",
	"BLOG": "Блог",
	"POSTS": "Пости",
	"REPLIES": "Відповіді",
	"WALLET": "Гаманець",
	"TAG": "Тег",
	"USER": "Користувач",
	"CLOSE": "Закрити",
	"TO": "Кому",
	"ASSET": "Актив",
	"SEND": "Відправити",
	"SECURITY": "Безпека",
	"AVAILABLE": "Доступно",
	"PUBLIC_MEMO": "Загальнодоступна пам'ятка",
	"TO_DESC": "Користувач, наприклад good-karma",
	"PIN_CODE": "PIN-код",
	"PIN_TEXT": "PIN-код допомагає вам захистити додаток і ваші дані. <br/> <br/> <b>Примітка:</b> Після включення у Вас є максимум 4 спроби, щоб розблокувати. Якщо ви забули ПІН-код або помилилися при введенні даних, додаток видалить дані користувача, що зайшов у систему. Ви можете авторизуватися повторно і продовжити користування додатком.",
	"NOTIFICATIONS": "Повідомлення",
	"VOTE_TEXT": "Ви отримаєте повідомлення, коли хтось голосує за Ваш контент! <br/> <b>Примітка:</b> Повідомлення включають вагу голосу а також у попередження (будь то голосування За, голосування Проти, Зняття голосу).",
	"VOTE": "Голосувати",
	"COMMENT_TEXT": "Ви отримаєте повідомлення, коли хтось прокоментує Ваші публікації чи коментарі! <br/> <b>Примітка:</b> Повідомлення також прийде у випадку, коли хтось <b>відредагує</b> свої власні коментарі.",
	"COMMENT": "Коментар",
	"FOLLOW_TEXT": "Ви отримаєте повідомлення, коли хтось підпишеться на Ваші публікації або відпишеться від них!",
	"MENTIONS": "Згадування",
	"MENTIONS_TEXT": "Ви отримаєте повідомлення, коли хтось згадає Вас у своїй публікації/коментарі!",
	"RESTEEM": "Репост",
	"RESTEEM_TEXT": "Ви отримаєте повідомлення, коли хтось зробить репост вашої публікації!",
	"CONFIGURATIONS": "Конфігурації",
	"VOTING": "Голосування",
	"VOTING_TEXT": "Вага голосу у відсотках впливає на вагу голосу в додатку, таким чином ви можете регулювати винагороду при голосуванні. <br/> <br/> <b>Примітка:</b> Це також змінить вагу голосу/відсоток при голосуванні Проти, і скрізь у додатку",
	"SERVER": "Сервер",
	"SERVER_TEXT": "Рекомендовано",
	"SAVE_CHANGES": "Зберегти зміни",
	"VOTERS_INFO": "Інформація про тих, хто голосував",
	"WELCOME_BACK": "З поверненням!",
	"LOGIN_1": "Щоб продовжити, увійдіть за допомогою Вашого Імені користувача та паролю.",
	"LOGIN_2": "Постинг-ключ ключ використовується для розміщення постів, коментарів, голосування, підписок.",
	"LOGIN_3": "Активний ключ використовується для переказів та оновлення зображення профілю.",
	"LOGIN_4": "Облікові дані користувача зберігаються локально на пристрої. При виході облікові дані будуть видалені!",
	"DONT_HAVE": "Ще не зареєстровані?",
	"SIGN_UP_NOW": "Зареєструватися зараз",
	"CANCEL": "Відміна",
	"ADVANCED": "Розширений",
	"ACTIVE_PRIKEY": "Активний закритий ключ",
	"POSTING_PRIKEY": "Постинг-ключ",
	"MASTER_PASS": "Майстер/основний пароль",
	"USERNAME": "Ім'я користувача",
	"CARD_VIEW": "У вигляді карток",
	"COMPACT_VIEW": "Компактний вигляд",
	"SEARCH": "Пошук",
	"SUBMIT_A_STORY": "Публікація статті",
	"REPLYTO": "Відповісти",
	"POST": "Пост",
	"PREVIEW": "Перегляд",
	"DEFAULT": "За замовчуванням 50% / 50%",
	"POWERUP": "Збільшити силу до 100%",
	"DECLINE_PAYOUT": "Відмовитися від виплати",
	"SAVE_FOR_LATER": "ЗБЕРЕГТИ НА МАЙБУТНЄ",
	"CLEAR": "Очистити",
	"POST_CONTENT": "Вміст повідомлення",
	"COMMENT_CONTENT": "Вміст коментарю",
	"TITLE": "Заголовок",
	"TAGS": "Теги",
	"NOT_MATCH": "НЕ СПІВПАДАЄ",
	"CONFIRM_PIN": "Підтвердіть PIN-код",
	"INCORRECT": "НЕ ВІРНО",
	"OPENING_POST": "відкриття поста",
	"SET_PIN": "Встановити PIN-код",
	"ENTER_PIN": "Введіть PIN-код",
	"ARE_YOU_SURE": "Ви впевнені?",
	"REBLOG_TEXT": "Репост є незворотнім, ви бажаєте продовжити?",
	"BROADCAST_ERROR": "Помилка трансляції, спробуйте ще раз!",
	"SUCCESS": "Успіх",
	"REBLOGGED_POST": "Реблог поста!",
	"LOGIN_FAIL": "Увійти не вдалося! Будь ласка, переконайтеся, що авторизуєтесь за допомогою майстер-паролю або вказали закритий Постинг-ключ при вході до системи у розширеному режимі.",
	"LOGIN_FAIL_A": "Увійти не вдалося! Будь ласка, переконайтеся, що авторизуєтесь за допомогою майстер-паролю або вказали Активний персональний ключ при вході до системи у розширеному режимі.",
	"WARNING": "Попередження",
	"VOTE_FOR_WITNESS": "Голосування за свідка",
	"VOTED_FOR_WITNESS": "Проголосували за свідка",
	"AGO": "тому",
	"FROM_NOW": "з цього моменту",
	"SECS": "сек",
	"A_MIN": "мін",
	"MINS": "хв.",
	"AN_HOUR": "год.",
	"HOURS": "год.",
	"A_DAY": "день",
	"DAYS": "дні(ів)",
	"A_MONTH": "місяць",
	"MONTHS": "місяці(ів)",
	"A_YEAR": "рік",
	"YEARS": "роки",
	"MIN_READ": "хв. читання",
	"DOWNVOTE_FLAG": "Голос Проти або прапор",
	"CAPTURE_PICTURE": "Захопити зображення",
	"SELECT_PICTURE": "Виберіть зображення",
	"SET_CUSTOM_URL": "Встановити URL користувача",
	"INSERT_PICTURE": "Вставити зображення",
	"ERROR": "Помилка",
	"UPLOAD_ERROR": "Помилка при завантаженні",
	"CAMERA_CANCELLED": "Камера недоступна",
	"SET_URL": "Вставити URL",
	"DIRECT_LINK_PICTURE": "Пряме посилання на зображення",
	"COMMENT_SUBMITTED": "Коментар прийнято!",
	"DELETE_COMMENT": "Видалення коментарів є незворотнім...",
	"DELETED_COMMENT": "Видалені коментарі",
	"UPLOADING_PICTURE": "Завантаження малюнка",
	"UPLOAD_COMPLETED": "Завантаження завершено",
	"UPLOAD_FAILED": "Не вдалося завантажити",
	"PASSWORD_INCORRECT": "Невірний пароль або ім'я користувача",
	"INFO": "Інформація",
	"QR_TEXT": "Розмістити QR-код всередині області сканування",
	"BALANCE_TEXT": "Переконайтеся, що у вас достатньо коштів для транзакції!",
	"NONEXIST_USER": "Користувача, якому ви намагаєтеся переказати кошти, не існує!",
	"TRANSFER_TEXT": "Ви справді бажаєте здійснити переказ?",
	"CONFIRMATION": "Підтвердження",
	"TX_BROADCASTED": "Транзакція передана",
	"FEED": "Стрічка",
	"TRENDING": "Популярне",
	"HOT": "Актуальне",
	"NEW": "Нове",
	"PROMOTED": "Підтримане",
	"VOTES": "Голоси",
	"PAYOUT": "Виплата",
	"COMMENTS": "Коментарі",
	"TRENDING_30": "Популярне за 30 днів",
	"SORT_POST_BY": "Сортувати повідомлення:",
	"PAYOUT_CYCLE": "Період виплати",
	"POTENTIAL_PAYOUT": "Потенційна виплата",
	"PAST_PAYOUT": "Минулі виплати",
	"AUTHOR_PAYOUT": "Авторська винагорода",
	"CURATION_PAYOUT": "Кураторська винагорода",
	"POST_SUBMITTED": "Коментар опублікований!",
	"POST_LATER": "Пост для подальшої публікації!",
	"SAVED": "Збережено",
	"CLEARED": "Очищено",
	"FLAGGING_TEXT": "Позначення повідомлення прапором може відмінити винагороду та зробити цей матеріал менш помітними. <br><br>Прапор слід використовувати для наступних випадків: <ul><li>Шахрайство або Плагіат</li> <li>Лайка або Інтернет Тролінг</li> <li>Умисне розміщення не в ту категорію або Спам</li></ul>",
	"REQUEST_LIMIT_TEXT": "Перевищено ліміт запитів. Перевірте інші тренди/теги!",
	"POST_IS_UNBOOKMARK": "Повідомлення видалено із закладок!",
	"POST_IS_BOOKMARK": "Повідомлення додано в закладки!",
	"RESET": "Скинути",
	"MODIFY_PICTURE": "Змінити зображення профілю",
	"MODIFY_COVER_PICTURE": "Змінити малюнок обкладинки",
	"ACTIVE_KEY_REQUIRED_TEXT": "Будь ласка, надайте активних закритий ключ, якщо ви обрали розгорнутий режим авторизації!",
	"RESET_PICTURE_TEXT": "Це призведе до скидання зображення профілю користувача",
	"RESET_COVER_PICTURE_TEXT": "Це призведе до скидання зображення обкладинки користувача",
	"UPDATE_REQUIRES_RESTART": "Оновлення серверу потребує перезапуску!",
	"SETTINGS_UPDATED": "Налаштування оновлено!",
	"LANGUAGES": "Мови",
	"LANGUAGES_TEXT": "Тут ви можете змінити мову додатку.",
	"LOGIN_TO_X": "Ця операція потребує авторизації користувача за допомогою основного паролю, активного/постинг ключа. Будь ласка, авторизуйтесь та повторіть спробу ще раз.",
	"GALLERY": "Галерея",
	"TRANSLATIONS": "Автори перекладу",
	"SHARE": "Поділитися",
	"MARKETPLACE": "Ринок",
	"EXCHANGE": "Обмін",
	"DRAFTS": "Чернетки",
	"POST_IS_UNDRAFT": "Повідомлення видалено із чернеток!",
	"POST_IS_DRAFT": "Повідомлення додано до чернеток!",
	"SWIPE_LEFT": "Гортайте ліворуч, щоб переглянути опції",
	"MANAGE": "Управління",
	"IMAGE_REMOVED": "Зображення видалено",
	"COPY": "Копіювати",
	"NO_IMAGE": "Ви ще не завантажили жодного зображення!",
	"PULL_DOWN_TO_REFRESH": "Щоб оновити, потягніть вниз",
	"EXTERNAL_APPS": "Зовнішні додатки",
	"PLUGINS": "Плагіни",
	"SUGGEST": "Пропонуємо",
	"COMING_SOON": "Незабаром",
	"CHAIN": "Блокчейн",
	"CHAIN_TEXT": "Тут ви можете змінити блокчейн або базову платформу.",
	"CURRENCY": "Валюта",
	"CURRENCY_TEXT": "Тут ви можете змінити валюту за замовчуванням. Винагорода за пост/коментар буде відображатися в цій валюті.",
	"ABOUT_11": "<br><b>Можливості</b> <br>-Отримайте доступ до унікальних статей на будь-яку цікаву для Вас тему. <br> -Співпрацюйте з авторами, коментуючи та обговорюючи теми. <br>Голосуйте за публікації, щоб винагородити автора, а також заробити кураторську винагороду. <br>Публікуйте ваші статті, повідомлення в блозі і розміщуйте їх безкоштовно, щоб залучити послідовників та отримати винагороду. <br>Записуйте статті на ходу, зберігайте декілька чернеток посту для подальшої публікації у зручний для Вас час. <br>Додавайте до закладок улюблений статті щоб прочитати їх пізніше. <br>Обмінюйте або переводьте у готівку ваш заробіток. <br>Пересилайте кошти будь-яким авторам або користувачам, друзям, послідовники тощо <br>Підписуйтесь на цікавих авторів, блогерів. <br> -Використовуйте зручний пошук послідовників і авторів, на яких Ви підписані. <br>Отримуйте сповіщення, щоб залишатися на зв'язку із послідовниками і спостерігати за розвитком дискусій, в яких Ви приймаєте участь <br>Використовуйте пошук по цікавим тегам/категоріям статей, авторам. <br> -Персоналізуйте ваш профіль. <br>Багато нових функцій очікується в майбутньому. <br><br><b>Безпека</b> <br>1. Додаток не має доступу або права розпоряджатися коштами користувача. <br>2. Додаток пропонує клієнт-безпечну модель, де закриті ключі зберігаються локально і ніколи не надсилаються до будь-яких серверів, ви самі несете відповідальність збереження своїх паролів. <br>3. Додаток пропонує простий, привабливий інтерфейс користувача і позитивний досвід використання. <br>4. В додатку передбачено додатковий рівень безпеки з використанням pin-коду. <br><br> eSteem підтримує платформи Steem та Golos. <br>",
	"FOUNDER": "Засновник та провідний розробник",
	"ADD_ACCOUNT": "Додати акаунт",
	"PLATFORM": "Платформа",
	"ESCROW_AGENT": "Агент угоди",
	"RATIFICATION_DEADLINE": "Кінцевий термін ратифікації",
	"ESCROW_EXPIRATION": "Термін дії угоди",
	"ESCROW_FEE": "Комісія за угоду",
	"ESCROW_TERMS": "Умови угоди"
}
},{}],126:[function(require,module,exports){
module.exports={
	"HOME": "首页",
	"LOGIN": "登录",
	"LOGOUT": "退出",
	"PROFILE": "简介",
	"FOLLOW": "关注",
	"BOOKMARKS": "书签",
	"TRANSFER": "转账",
	"MARKET": "市场",
	"SETTINGS": "设置",
	"ABOUT": "关于",
	"ABOUT_1": "在这里任何人都可以靠贡献内容赚钱！",
	"ABOUT_2": "由{{platformname}}平台提供。应用程序创建由",
	"ABOUT_3": "它作为开源、社区驱动移动端项目，提供内容访问用于阅读、评论、投票、发表、转账收益等功能。由{{platformname}}区块链和{{sitename}}提供功能。",
	"ABOUT_4": "1.应用程序永不访问或持有用户金钱。",
	"ABOUT_5": "2. 应用程序提供客户端安全模型，私钥保存在本地，永不发送给任何服务器",
	"ABOUT_6": "3.应用程序提供简单具有吸引力的用户接口以及体验。",
	"ABOUT_7": "4.应用程序永不要求用户输入任何个人信息",
	"ABOUT_8": "投票 good-karma 作为见证人",
	"ABOUT_9": "联系/反馈",
	"ABOUT_10": "更多信息",
	"REMOVE": "移除",
	"MARKET_VIEW": "市场观察",
	"PRICE": "价格",
	"AMOUNT": "数量",
	"TOTAL": "总共",
	"NOORDERS": "没有订单",
	"DATE": "日期",
	"BUY": "买",
	"SELL": "卖",
	"OPEN": "开放",
	"HISTORY": "历史",
	"FOLLOW_BACK": "关注回",
	"FOLLOWED": "已关注",
	"UNFOLLOW": "取消关注",
	"FOLLOWING": "关注",
	"FOLLOWERS": "粉丝",
	"SEARCH_FOLLOWERS": "搜索粉丝",
	"SEARCH_FOLLOWING": "搜索关注",
	"BY": "由",
	"IN": "在",
	"MENU": "菜单",
	"BOOKMARK": "书签",
	"REBLOG": "转发",
	"UPVOTE": "赞成票",
	"DOWNVOTE": "反对票",
	"UNVOTE_DOWNVOTED": "取消反对票",
	"UNVOTE_UPVOTED": "取消赞成票",
	"REPLY": "回复",
	"EDIT": "编辑",
	"POST_1": "在评论上向左滑动来查看选项",
	"POST_2": "在评论上点击来查看子评论",
	"OPTIONS": "选项",
	"RESTEEMED_BY": "转发由",
	"NOTHING_HERE": "这还什么都没有...",
	"BALANCES": "余额",
	"PROFILE_1": "{{platformname}}, 可交易代币可以随时转移. {{platformname}} 可以通过叫做充能的过程被转换为{{platformpower}}。",
	"PROFILE_2": "{{platformpower}}, 影响力代币用于长期持有以及给文章投票。持有的越多越能影响他人的赏金以及通过正确地投票获得奖励。",
	"PROFILE_3": "代币大概值{{platformsunit}} {{platformname}}",
	"ESTIMATED_VALUE": "估计价值",
	"PROFILE_4": "估计价值基于{{platformname}}的7日平均值",
	"TRANSACTION_HISTORY": "交易历史",
	"POSTING": "发布",
	"PROFILE_5": "发布密钥用于发表文章以及投票，它应该不同于活动密钥以及所有者密钥。",
	"OWNER": "所有者",
	"PROFILE_6": "所有者密钥是帐户主密钥，当修改其它密钥时需要提供。所有者密钥的私钥或密码应尽可能地离线保管。",
	"ACTIVE": "活动",
	"PROFILE_7": "活动密钥用于发起转账以及在内部市场下单",
	"MEMO": "备注",
	"PROFILE_8": "备注密钥用于创建和阅读备注",
	"BLOG": "博客",
	"POSTS": "文章",
	"REPLIES": "回复",
	"WALLET": "钱包",
	"TAG": "标签",
	"USER": "用户",
	"CLOSE": "关闭",
	"TO": "到",
	"ASSET": "资产",
	"SEND": "发送",
	"SECURITY": "安全",
	"AVAILABLE": "可用",
	"PUBLIC_MEMO": "公共备注",
	"TO_DESC": "用户 (例如:good-karma)",
	"PIN_CODE": "Pin 码",
	"PIN_TEXT": "PIN码帮助你保护应用和数据安全。<br/><br/><b>注意:</b>一旦启用，你最多尝试解锁4次，如果忘记或失败，应用程序将移除已登陆用户数据。你可以重新登陆并继续使用应用程序。",
	"NOTIFICATIONS": "通知",
	"VOTE_TEXT": "当有人给你的内容投票时，你将得到通知！<br/> <b>注意:</b> 通知包括投票权重以及提醒信息。 (赞成票, 反对票, 取消投票). ",
	"VOTE": "投票",
	"COMMENT_TEXT": "当有人评论你的文章或评论时，你将得到通知！<b>注意:</b> 通知也包括别人<b>编辑</b>他们的评论. ",
	"COMMENT": "评论",
	"FOLLOW_TEXT": "当他人关注你或取消关注时你将获得通知！",
	"MENTIONS": "提及",
	"MENTIONS_TEXT": "当他人在文章或评论中提及你，你将得到通知！",
	"RESTEEM": "转发",
	"RESTEEM_TEXT": "当他人转发你的文章时，你将得到通知！",
	"CONFIGURATIONS": "配置",
	"VOTING": "投票中",
	"VOTING_TEXT": "投票权重或百分比影响APP中投票威力，你可以用于调节你的投票收益。<br/><br/><b>注意:</b> 这也将更改投反对票的权重/百分比并且整个APP范围内有效.",
	"SERVER": "服务器",
	"SERVER_TEXT": "推荐",
	"SAVE_CHANGES": "保存修改",
	"VOTERS_INFO": "投票者信息",
	"WELCOME_BACK": "欢迎归来！",
	"LOGIN_1": "使用用户名密码登陆后继续",
	"LOGIN_2": "发布密钥用于发表文章、评论、投票、以及关注他人",
	"LOGIN_3": "活动密钥用于转账以及更新资料图片。",
	"LOGIN_4": "用户凭证保存在设备本地，退出后凭证会被移除！",
	"DONT_HAVE": "还没有账户？",
	"SIGN_UP_NOW": "立即注册",
	"CANCEL": "取消",
	"ADVANCED": "高级的",
	"ACTIVE_PRIKEY": "活动私钥",
	"POSTING_PRIKEY": "发布私钥",
	"MASTER_PASS": "主密码",
	"USERNAME": "用户名",
	"CARD_VIEW": "卡片视图",
	"COMPACT_VIEW": "紧凑视图",
	"SEARCH": "搜索",
	"SUBMIT_A_STORY": "提交故事",
	"REPLYTO": "回复给",
	"POST": "发布",
	"PREVIEW": "预览",
	"DEFAULT": "默认 50% / 50%",
	"POWERUP": "100% 充能",
	"DECLINE_PAYOUT": "拒绝奖金",
	"SAVE_FOR_LATER": "留待以后",
	"CLEAR": "清除",
	"POST_CONTENT": "文章内容",
	"COMMENT_CONTENT": "评论内容",
	"TITLE": "标题",
	"TAGS": "标签",
	"NOT_MATCH": "不匹配",
	"CONFIRM_PIN": "确认 PIN",
	"INCORRECT": "错误的",
	"OPENING_POST": "正在打开文章",
	"SET_PIN": "设置 PIN",
	"ENTER_PIN": "输入 PIN",
	"ARE_YOU_SURE": "你确定吗？",
	"REBLOG_TEXT": "转发不可逆，是否继续？",
	"BROADCAST_ERROR": "广播错误，请重试！",
	"SUCCESS": "成功",
	"REBLOGGED_POST": "转发的文章",
	"LOGIN_FAIL": "登陆失败！如果选择高级模式，请确认使用主密码登陆或在登陆时提供发布私钥。",
	"LOGIN_FAIL_A": "登陆失败！如果选择高级模式，请确认使用主密码登陆或在登陆时提供发布私钥。",
	"WARNING": "警告",
	"VOTE_FOR_WITNESS": "投票给见证人",
	"VOTED_FOR_WITNESS": "已投票给见证人",
	"AGO": "以前",
	"FROM_NOW": "从现在开始",
	"SECS": "秒",
	"A_MIN": "一分钟",
	"MINS": "分钟",
	"AN_HOUR": "一小时",
	"HOURS": "小时",
	"A_DAY": "一天",
	"DAYS": "天",
	"A_MONTH": "一月",
	"MONTHS": "月",
	"A_YEAR": "一年",
	"YEARS": "年",
	"MIN_READ": "分钟阅读",
	"DOWNVOTE_FLAG": "反对票",
	"CAPTURE_PICTURE": "捕获图片",
	"SELECT_PICTURE": "选择图片",
	"SET_CUSTOM_URL": "设置自定义URL",
	"INSERT_PICTURE": "插入图片",
	"ERROR": "错误",
	"UPLOAD_ERROR": "上传错误",
	"CAMERA_CANCELLED": "相机已取消",
	"SET_URL": "设置URL",
	"DIRECT_LINK_PICTURE": "图片的直接网络链接",
	"COMMENT_SUBMITTED": "评论已提交",
	"DELETE_COMMENT": "删除评论是不可逆的...",
	"DELETED_COMMENT": "评论已删除",
	"UPLOADING_PICTURE": "图片上传中",
	"UPLOAD_COMPLETED": "上传完成",
	"UPLOAD_FAILED": "上传失败",
	"PASSWORD_INCORRECT": "用户名或密码不对",
	"INFO": "信息",
	"QR_TEXT": "请将二维码框入扫描区域",
	"BALANCE_TEXT": "请确认你有足够的余额用于转账！",
	"NONEXIST_USER": "你转账的目标用户不存在！",
	"TRANSFER_TEXT": "是否确认转账？",
	"CONFIRMATION": "确认",
	"TX_BROADCASTED": "交易已广播",
	"FEED": "话题",
	"TRENDING": "趋向",
	"HOT": "热点",
	"NEW": "新的",
	"PROMOTED": "推销",
	"VOTES": "票",
	"PAYOUT": "奖金",
	"COMMENTS": "评论",
	"TRENDING_30": "30日趋向",
	"SORT_POST_BY": "排序按：",
	"PAYOUT_CYCLE": "支付周期",
	"POTENTIAL_PAYOUT": "潜在奖金",
	"PAST_PAYOUT": "过去的奖金",
	"AUTHOR_PAYOUT": "作者奖金",
	"CURATION_PAYOUT": "监护人奖金",
	"POST_SUBMITTED": "文章已提交！",
	"POST_LATER": "文章留待以后提交！",
	"SAVED": "已保存",
	"CLEARED": "已清除",
	"FLAGGING_TEXT": "给文章投反对票会移除收益并降低材料的可见性。<br><br>反对票用于以下场景：<ul><li>弄虚作假或剽窃</li><li>仇恨言论或网络钓鱼</li><li>故意放错类目内容或者SPAM</li></ul>",
	"REQUEST_LIMIT_TEXT": "达到请求限制。检查其他趋势/标签！",
	"POST_IS_UNBOOKMARK": "文章已从书签内移除！",
	"POST_IS_BOOKMARK": "文章已经加入书签！",
	"RESET": "重置",
	"MODIFY_PICTURE": "编辑资料图片",
	"MODIFY_COVER_PICTURE": "修改封面图片",
	"ACTIVE_KEY_REQUIRED_TEXT": "如果你选中高级登陆模式，请提供活动私钥！",
	"RESET_PICTURE_TEXT": "这将重置用户资料图片",
	"RESET_COVER_PICTURE_TEXT": "这将重置用户封面图片",
	"UPDATE_REQUIRES_RESTART": "服务器更新需要重启",
	"SETTINGS_UPDATED": "设置已更新",
	"LANGUAGES": "语言",
	"LANGUAGES_TEXT": "你可以在这修改此应用语言。",
	"LOGIN_TO_X": "此项操作要求用户使用主密码，活动/发布密钥。请登陆并重试。",
	"GALLERY": "图库",
	"TRANSLATIONS": "翻译贡献者",
	"SHARE": "分享",
	"MARKETPLACE": "市场",
	"EXCHANGE": "交易所",
	"DRAFTS": "草稿",
	"POST_IS_UNDRAFT": "文章已从草稿内移除！",
	"POST_IS_DRAFT": "文章已经加入草稿！",
	"SWIPE_LEFT": "向左滑动查看选项",
	"MANAGE": "管理",
	"IMAGE_REMOVED": "图像已删除",
	"COPY": "复制",
	"NO_IMAGE": "你还没有上传任何图片！",
	"PULL_DOWN_TO_REFRESH": "下拉刷新",
	"EXTERNAL_APPS": "外部应用",
	"PLUGINS": "插件",
	"SUGGEST": "建议",
	"COMING_SOON": "即将到来",
	"CHAIN": "链",
	"CHAIN_TEXT": "在着你可以修改区块链或默认平台",
	"CURRENCY": "货币",
	"CURRENCY_TEXT": "在这里，您可以更改您的默认币种。你会看到这种货币帖奖励值。",
	"ABOUT_11": "<br><b>功能列表</b> <br>访问独特文章中的任何主题你有兴趣读。 <br>-同作者的评论，讨论的话题。<br>投票为奖励作者员额，以及获得精选的奖励。<br>发布你的文章，博客和免费收容他们赚取报酬进行和获得的追随者。<br>-写下去，保存多个草稿员额，其后发表的文章。<br>书签喜欢的文章，以便以后阅读。<br>交换或现金支付你的收入。<br>-发送您的资金到任何作者或用户、 朋友、 粉丝等 <br>跟随有趣的作者，博客。 <br>-搜索您的追随者和作者你如下。<br>得到通知，保持你的追随者和讨论你是涉及的英寸 <br>搜索为类别的物品，作者有趣标签。 <br>-个性化您的配置文件。<br>多更多的功能来。<br><br><b>安全</b> <br>1。应用程序永远不会访问或抓住用户的资金。<br>2.应用程序提供了客户端的安全模型，与私有密钥的本地托管和永远不会发送到任何服务器，您要负责对备份您的密码。<br>3.应用程序提供简单，有吸引力的用户界面和体验 <br>4。应用程序提供额外的安全与 pin 码 <br><br>自尊层支持蒸汽和 Golos 平台。 <br>",
	"FOUNDER": "创始人和主要开发人员",
	"ADD_ACCOUNT": "添加帐号",
	"PLATFORM": "平台"
}
},{}],127:[function(require,module,exports){
module.exports={
	"HOME": "首頁",
	"LOGIN": "登入",
	"LOGOUT": "登出",
	"PROFILE": "關於",
	"FOLLOW": "追蹤",
	"BOOKMARKS": "書籤",
	"TRANSFER": "轉帳",
	"MARKET": "市場",
	"SETTINGS": "設定",
	"ABOUT": "關於",
	"ABOUT_1": "所有人的內容都可以在這裡獲得獎勵",
	"ABOUT_2": "是由{{platformname}}平台所支持。此App之開發者為",
	"ABOUT_3": "此為開源式、社區驅動之行動使用方案，提供使用者內容閱讀、評論、投票、文章發布與收入轉帳等功能。各項功能是由{{platformname}}之區塊鏈以及{{sitename}}網站所提供。",
	"ABOUT_4": "本App不會處理或管控使用者之資金。",
	"ABOUT_5": "本App提供客戶端安全使用模式，使用者私鑰只在本機內部使用，絕不送出到任何外部伺服器。",
	"ABOUT_6": "本App提供簡單好用之使用者介面與經驗。",
	"ABOUT_7": "本App絕不會向使用者要求提供任何個人資料。",
	"ABOUT_8": "投票支持good-karma成為witness",
	"ABOUT_9": "聯絡/意見回饋",
	"ABOUT_10": "更多訊息",
	"REMOVE": "移除",
	"MARKET_VIEW": "交易市場",
	"PRICE": "價格",
	"AMOUNT": "數量",
	"TOTAL": "總計",
	"NOORDERS": "無掛單",
	"DATE": "日期",
	"BUY": "買入",
	"SELL": "賣出",
	"OPEN": "掛單",
	"HISTORY": "歷史紀錄",
	"FOLLOW_BACK": "納入追蹤",
	"FOLLOWED": "正被追蹤",
	"UNFOLLOW": "取消追蹤",
	"FOLLOWING": "追蹤你的名單",
	"FOLLOWERS": "你追蹤的名單",
	"SEARCH_FOLLOWERS": "搜尋追蹤你的名單",
	"SEARCH_FOLLOWING": "搜尋你追蹤的名單",
	"BY": "由",
	"IN": "在",
	"MENU": "選單",
	"BOOKMARK": "書籤",
	"REBLOG": "轉貼",
	"UPVOTE": "讚",
	"DOWNVOTE": "噓",
	"UNVOTE_DOWNVOTED": "取消噓",
	"UNVOTE_UPVOTED": "取消讚",
	"REPLY": "回覆",
	"EDIT": "編輯",
	"POST_1": "評論上向左滑以顯示動作清單",
	"POST_2": "點擊評論可展開下一層評論",
	"OPTIONS": "選項",
	"RESTEEMED_BY": "轉貼",
	"NOTHING_HERE": "施工中",
	"BALANCES": "結餘",
	"PROFILE_1": "{{platformname}} 是可交易的貨幣，隨時可以進行移轉。{{platformname}} 可以被轉換成 {{platformpower}}，此一動作稱為powering up。",
	"PROFILE_2": "{{platformpower}} 可視為具有影響力的股權，持有可長期增值並對文章投票，持有數量越多對於其他人獎勵大小的影響力就越大，也更能從準確的投票行為中獲得獎勵。 ",
	"PROFILE_3": "目前持有{{platformsunit}}的{{platformname}}。",
	"ESTIMATED_VALUE": "概估價值",
	"PROFILE_4": "概估價值是以{{platformname}}3-5天之平均價為基礎",
	"TRANSACTION_HISTORY": "交易歷史紀錄",
	"PROFILE_5": "Posting私鑰使用於發文與按讚活動上，其與Active以及Owner私鑰功能不同。",
	"PROFILE_6": "Owner私鑰是本帳號之主鑰，具有更改其他私鑰的權力。安全起見，Owner私鑰密碼應該儘可能地離線儲存。",
	"PROFILE_7": "Active私鑰用於帳號資金處理活動以及於內部市場下單買賣方面。",
	"PROFILE_8": "Memo私鑰用於創造與讀取memo訊息。",
	"BLOG": "部落格",
	"POSTS": "你的評論",
	"REPLIES": "回應評論",
	"WALLET": "錢包",
	"TAG": "標籤",
	"USER": "使用者",
	"CLOSE": "關閉",
	"TO": "到",
	"ASSET": "資產",
	"SEND": "傳送",
	"SECURITY": "安全性",
	"AVAILABLE": "可使用",
	"PUBLIC_MEMO": "公開訊息",
	"TO_DESC": "使用者，例如 good-karma",
	"PIN_CODE": "密碼",
	"PIN_TEXT": "設置此密碼以保護App與用戶資料。<br/><br/><b>注意：</b>一旦啟用，你只能有4次解鎖機會，如果忘記密碼或是全數登入失敗，則App會移除登入資料。你可以再次登入並繼續使用App。",
	"NOTIFICATIONS": "通知",
	"VOTE_TEXT": "你的內容獲得別人按讚時會通知你！<br/> <b>注意：</b> 通知內容包括按讚權重與提醒訊息。（按讚、按噓、取消讚）",
	"VOTE": "投票",
	"COMMENT_TEXT": "他人評論你的文章或評論時，你會收到通知！<br/> <b>注意：</b> 對方若<b>重新編輯</b>評論內容，亦會通知你。",
	"COMMENT": "評論",
	"FOLLOW_TEXT": "他人追蹤或取消追蹤你時，你會收到通知！",
	"MENTIONS": "提及",
	"MENTIONS_TEXT": "他人在文章或評論中提及你時，你會收到通知！",
	"CONFIGURATIONS": "組態設定",
	"VOTING": "投票",
	"VOTING_TEXT": "投票權重會影響投票能量以及投票獎勵，你可以予以調整。<br/> <b>注意：</b> 對權重之調整同樣適用於按讚與按噓，並持續保持此一權重。",
	"SERVER": "伺服器",
	"SERVER_TEXT": "推薦",
	"SAVE_CHANGES": "儲存變更",
	"VOTERS_INFO": "投票訊息",
	"WELCOME_BACK": "歡迎回來！",
	"LOGIN_1": "請以您的使用者帳號與密碼登入",
	"LOGIN_2": "Posting key用於發布文章、投票與追蹤。",
	"LOGIN_3": "Active key用於轉帳相關與「關於」之圖片更新。",
	"LOGIN_4": "使用者的認證資訊只保存在裝置本地端。登出後認證資訊將被移除。",
	"DONT_HAVE": "還沒有帳號嗎？",
	"SIGN_UP_NOW": "馬上去註冊",
	"CANCEL": "取消",
	"ADVANCED": "進階",
	"MASTER_PASS": "Master密碼/主密碼",
	"USERNAME": "使用者名稱",
	"CARD_VIEW": "正常模式",
	"COMPACT_VIEW": "精簡模式",
	"SEARCH": "搜尋",
	"SUBMIT_A_STORY": "提交文章",
	"REPLYTO": "回覆",
	"POST": "貼文",
	"PREVIEW": "預覽",
	"DEFAULT": "預設 50% / 50%",
	"DECLINE_PAYOUT": "謝絕Payout",
	"SAVE_FOR_LATER": "預存草稿",
	"CLEAR": "清除",
	"POST_CONTENT": "貼文內容",
	"COMMENT_CONTENT": "評論內容",
	"TITLE": "標題",
	"TAGS": "標籤",
	"NOT_MATCH": "不符",
	"CONFIRM_PIN": "確認密碼",
	"INCORRECT": "不正確",
	"OPENING_POST": "打開貼文",
	"SET_PIN": "重設密碼",
	"ENTER_PIN": "輸入密碼",
	"ARE_YOU_SURE": "是否確定？",
	"BROADCAST_ERROR": "廣播錯誤，請再試一次！",
	"SUCCESS": "成功",
	"REBLOGGED_POST": "轉貼文章",
	"LOGIN_FAIL": "登入失敗！請確認你是以master密碼登入，或是在進階模式下以提供之Posting私鑰登入。",
	"LOGIN_FAIL_A": "登入失敗！請確認你是以master密碼登入，或是在進階模式下以提供之Active私鑰登入。",
	"WARNING": "警告",
	"VOTE_FOR_WITNESS": "投票支持見證人",
	"VOTED_FOR_WITNESS": "投票支持為見證人",
	"AGO": "前",
	"FROM_NOW": "還有",
	"SECS": "秒",
	"A_MIN": "一分鐘",
	"MINS": "分鐘",
	"AN_HOUR": "一小時",
	"HOURS": "小時",
	"A_DAY": "一天",
	"DAYS": "天",
	"A_MONTH": "一個月",
	"MONTHS": "個月",
	"A_YEAR": "一年",
	"YEARS": "個年",
	"MIN_READ": "分鐘閱讀時間",
	"DOWNVOTE_FLAG": "按噓",
	"CAPTURE_PICTURE": "獲取圖片",
	"SELECT_PICTURE": "選擇圖片",
	"SET_CUSTOM_URL": "設定專用連結",
	"INSERT_PICTURE": "插入圖片",
	"ERROR": "錯誤",
	"UPLOAD_ERROR": "上傳錯誤",
	"CAMERA_CANCELLED": "取消相機",
	"SET_URL": "設定URL",
	"DIRECT_LINK_PICTURE": "圖片之網站連結",
	"COMMENT_SUBMITTED": "評論送出",
	"DELETE_COMMENT": "刪除評論動作是不可恢復的",
	"DELETED_COMMENT": "已刪除之評論",
	"UPLOADING_PICTURE": "上傳圖片",
	"UPLOAD_COMPLETED": "上傳完成",
	"UPLOAD_FAILED": "上傳失敗",
	"PASSWORD_INCORRECT": "密碼或帳號名稱錯誤",
	"INFO": "訊息",
	"QR_TEXT": "請將QR code置於掃描區域內",
	"BALANCE_TEXT": "請確認有足夠餘額可供交易！",
	"NONEXIST_USER": "轉入帳號不存在",
	"TRANSFER_TEXT": "確定要進行轉帳？",
	"CONFIRMATION": "確認",
	"TX_BROADCASTED": "交易已廣播",
	"FEED": "動態消息",
	"TRENDING": "焦點",
	"HOT": "熱門",
	"NEW": "最新",
	"PROMOTED": "贊助",
	"VOTES": "票數",
	"PAYOUT": "收入",
	"COMMENTS": "評論",
	"TRENDING_30": "30天焦點",
	"SORT_POST_BY": "文章排序",
	"PAYOUT_CYCLE": "收入週期",
	"POTENTIAL_PAYOUT": "未實現收入",
	"PAST_PAYOUT": "已支付收入",
	"AUTHOR_PAYOUT": "作者收入",
	"CURATION_PAYOUT": "投票收入",
	"POST_SUBMITTED": "文章已送出",
	"POST_LATER": "待發文章",
	"SAVED": "已儲存",
	"CLEARED": "已清除",
	"FLAGGING_TEXT": "對文章按噓會影響其獎勵，並降低其能見度。<br><br> 應在下列情況下按噓：<ul><li>詐欺或抄襲</li><li>仇恨性言論或網路濫用</li><li>內容故意分類錯誤或大量散布垃圾訊息</li></ul>",
	"REQUEST_LIMIT_TEXT": "已達要求限度，請查詢其他焦點文章或標籤！",
	"POST_IS_UNBOOKMARK": "文章已自書籤中移除",
	"POST_IS_BOOKMARK": "文章已加入書籤",
	"RESET": "重置",
	"MODIFY_PICTURE": "修改「關於」的圖片",
	"MODIFY_COVER_PICTURE": "修改封面圖片",
	"ACTIVE_KEY_REQUIRED_TEXT": "若選擇進階模式，請提供Active私鑰！",
	"RESET_PICTURE_TEXT": "此動作將重設使用者「關於」的圖片",
	"RESET_COVER_PICTURE_TEXT": "此動作將重設使用者封面圖片",
	"UPDATE_REQUIRES_RESTART": "由於伺服器更新需要重新啟動！",
	"SETTINGS_UPDATED": "設定已更新！",
	"LANGUAGES": "語言",
	"LANGUAGES_TEXT": "你可以在此更改APP的使用語言",
	"LOGIN_TO_X": "此一動作需要使用者以主密碼、Active私鑰或Posting私鑰登入。請登入再試一下。",
	"GALLERY": "陳列",
	"TRANSLATIONS": "多國語言翻譯工作協助者",
	"SHARE": "分享",
	"MARKETPLACE": "市場",
	"EXCHANGE": "交易所",
	"DRAFTS": "草稿",
	"POST_IS_UNDRAFT": "文章自草稿中移除！",
	"POST_IS_DRAFT": "文章加入草稿！",
	"SWIPE_LEFT": "向左滑動可開啟動作選項",
	"MANAGE": "管理",
	"IMAGE_REMOVED": "圖片移除",
	"COPY": "複製",
	"NO_IMAGE": "您尚未上傳任何圖片！",
	"PULL_DOWN_TO_REFRESH": "向下拉動可更新",
	"EXTERNAL_APPS": "外部App",
	"PLUGINS": "外掛程式",
	"SUGGEST": "建議",
	"COMING_SOON": "即將推出",
	"CHAIN": "鏈",
	"CHAIN_TEXT": "您可以在這裡變更使用的區塊鏈或是預設的平台。"
}
},{}],128:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
//angular.module('steem.services', [])
module.exports = function (app) {
	app.service('APIs', ['$http', '$rootScope', 'API_END_POINT', function ($http, $rootScope, API_END_POINT) {
		'use strict';
		return {
      getCurrencyRate: function(code_from, code_to){
        console.log(code_from,code_to);
        return $http.get("https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20yahoo.finance.xchange%20where%20pair%20in%20(%22"+code_from+code_to+"%22)&format=json&diagnostics=false&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys");
      },
      saveSubscription: function(deviceid, username, subscription) {
        return $http.post(API_END_POINT+"/api/devices", {deviceid: deviceid, username: username, subscription: subscription, chain: $rootScope.$storage.chain});
      },
      updateSubscription: function(deviceid, username, subscription) {
        return $http.put(API_END_POINT+"/api/devices", {deviceid: deviceid, username: username, subscription: subscription, chain: $rootScope.$storage.chain});
      },
      updateToken: function(deviceid, newdev) {
        return $http.put(API_END_POINT+"/api/device/"+deviceid, {newdev: newdev, chain: $rootScope.$storage.chain});
      },
      deleteSubscription: function(deviceid) {
        return $http.delete(API_END_POINT+"/api/devices/"+deviceid);
      },
      getSubscriptions: function(deviceid) {
        return $http.get(API_END_POINT+"/api/devices/"+deviceid);
      },
			addBookmark: function(user, bookmark) {
        return $http.post(API_END_POINT+"/api/bookmark", {username: user, author: bookmark.author, permlink: bookmark.permlink, chain: $rootScope.$storage.chain});
      },
			getBookmarks: function(user) {
        return $http.get(API_END_POINT+"/api/bookmarks/"+user);
      },
			removeBookmark: function(id, user) {
        return $http.delete(API_END_POINT+"/api/bookmarks/"+user+"/"+id);
      },
			addDraft: function(user, draft) {
        return $http.post(API_END_POINT+"/api/draft", {username: user, title: draft.title, body: draft.body, tags: draft.tags, post_type: draft.post_type, chain: $rootScope.$storage.chain});
      },
			getDrafts: function(user) {
        return $http.get(API_END_POINT+"/api/drafts/"+user);
      },
			removeDraft: function(id, user) {
        return $http.delete(API_END_POINT+"/api/drafts/"+user+"/"+id);
      },
			removeImage: function(id, user) {
        return $http.delete(API_END_POINT+"/api/images/"+user+"/"+id);
      },
			fetchImages: function(user) {
        return $http.get(API_END_POINT+"/api/images/"+user);
      },
      searchEscrow: function(id) {
        return $http.get(API_END_POINT+"/api/escrow/"+$rootScope.$storage.chain+"/"+id);
      },
		};
	}])
  app.directive('backImg', function(){
    return function(scope, element, attrs){
        var url = attrs.backImg;
        element.css({
            'background-image': 'url(' + url +')',
            'background-size' : 'cover'
        });
    };
  });
  app.directive('select', function() {
    return {
      restrict: 'E',
      link: function(scope, element, attrs) {
        element.bind('focus', function(e) {
          if (window.cordova && window.cordova.plugins.Keyboard) {
            // $rootScope.log("show bar (hide = false)");
            cordova.plugins.Keyboard.hideKeyboardAccessoryBar(false);
          }
        });
        element.bind('blur', function(e) {
          if (window.cordova && window.cordova.plugins.Keyboard) {
            // $rootScope.log("hide bar (hide = true)");
            cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
          }
        });
      }
    };
  });
  app.directive('navigation', function () {
    var controller = ['$scope', '$rootScope', function ($scope, $rootScope) {
      $scope.addactiveclass = function (menuItem) {
          $scope.activeMenu = menuItem.name;
          //$rootScope.log(menuItem);
          $rootScope.$storage.filter = menuItem.href;
          $rootScope.$broadcast('filter:change');
          $scope.center(menuItem.name);
          $scope.someCtrlFn({menulinks: menuItem});
      };

      $(window).resize(function(){
        $scope.center();
      });
      $scope.center = function(menuItem) {
        var nav = document.getElementById("nav1");
        var navWidth = document.getElementById("nav2").offsetWidth;
        var currentElement = document.querySelectorAll('[name="'+menuItem+'"]');
        currentElement = menuItem ? currentElement[0] : document.getElementsByClassName('active')[0];
        if(currentElement) {
          var margin = 0;
          var lenm = nav.children.length;
          for(var i =0; i<lenm; i++){

            if(currentElement == nav.children[i]){
              break;
            }else {
              margin += nav.children[i].offsetWidth;
            }
          }
          nav.style.marginLeft = (navWidth/2 - margin - currentElement.offsetWidth/2) + 'px';
        }
        else {
          nav.style.marginLeft = (navWidth/2 - $scope.activeMenu.length) + 'px';
        }
      };
      var _len = $scope.menulinks.length;
      for (var i = 0; i < _len; i++) {
        if ($rootScope.$storage.filter) {
          if ($scope.menulinks[i].href == $rootScope.$storage.filter) {
            $scope.activeMenu = $scope.menulinks[i].name;
          }
        } else {
          $scope.activeMenu = "Trending";
        }
      }

      //$scope.center();
      setTimeout(function() {
        $scope.center();
      }, 50);
    }];

    return {
      restrict: "E",
      replace: true,
      scope: {
        menulinks: '=',
        someCtrlFn: '&callbackFn'
      },
      controller: controller,
      template: "<ul id='nav1'>"+
              "<li ng-repeat='menulinks in menulinks' name='{{menulink.name}}' class='top {{menulink.role}}' ng-class='{active : activeMenu === menulink.name}'>"+
                "<a on-tap='addactiveclass(menulink)'>"+
                  "{{menulink.name}}"
                +"</a>"+
                "<div class='arrow'></div>"+
                "</li>"
            +"</ul>"
    }
  });
  function SimplePubSub() {
      var events = {};
      return {
          on: function(names, handler) {
              names.split(' ').forEach(function(name) {
                  if (!events[name]) {
                      events[name] = [];
                  }
                  events[name].push(handler);
              });
              return this;
          },
          trigger: function(name, args) {
              angular.forEach(events[name], function(handler) {
                  handler.call(null, args);
              });
              return this;
          }
      };
  };

  app.directive('onFinishRender', function ($timeout) {
      return {
          restrict: 'A',
          link: function (scope, element, attr) {
              if (scope.$last === true) {
                  $timeout(function () {
                      scope.$emit('ngRepeatFinished');
                  });
              }
          }
      }
  })
  app.directive('clickHandler', function($timeout){
      return{
          restrict: 'A',
          link: function($scope, $element,$attr){
              $timeout(function(){
                      $element.on('tap', function(){
                        //the function you want to perform on tap
        alert("Just been Clicked");
                      });
              });
          }
      };
  })
  app.directive('tabSlideBox', [ '$timeout', '$window', '$ionicSlideBoxDelegate', '$ionicScrollDelegate', '$rootScope',
    function($timeout, $window, $ionicSlideBoxDelegate, $ionicScrollDelegate, $rootScope) {
      'use strict';

      return {
        restrict : 'A, E, C',
        link : function(scope, element, attrs, ngModel) {

          var ta = element[0], $ta = element;
          $ta.addClass("tabbed-slidebox");
          if(attrs.tabsPosition === "bottom"){
            $ta.addClass("btm");
          }

          //Handle multiple slide/scroll boxes
          var handle = ta.querySelector('.slider').getAttribute('delegate-handle');

          var ionicSlideBoxDelegate = $ionicSlideBoxDelegate;
          if(handle){
            ionicSlideBoxDelegate = ionicSlideBoxDelegate.$getByHandle(handle);
          }

          var ionicScrollDelegate = $ionicScrollDelegate;
          if(handle){
            ionicScrollDelegate = ionicScrollDelegate.$getByHandle(handle);
          }

          function renderScrollableTabs(){
            var iconsDiv = angular.element(ta.querySelector(".tsb-icons")), icons = iconsDiv.find("a"), wrap = iconsDiv[0].querySelector(".tsb-ic-wrp"), totalTabs = icons.length;
            var scrollDiv = wrap.querySelector(".scroll");

            angular.forEach(icons, function(value, key){
                 var a = angular.element(value);
                 a.on('click', function(){
                   ionicSlideBoxDelegate.slide(key);
                 });

              if(a.attr('icon-off')) {
                a.attr("class", a.attr('icon-off'));
              }
            });

            var initialIndex = attrs.tab;
            //Initializing the middle tab
            if(typeof attrs.tab === 'undefined' || (totalTabs <= initialIndex) || initialIndex < 0){
              initialIndex = Math.floor(icons.length/2);
            }

            //If initial element is 0, set position of the tab to 0th tab
            if(initialIndex == 0){
              setPosition(0);
            }
            //$rootScope.log('initialIndex '+initialIndex);
            if ($rootScope.$storage.filter) {
              if ($rootScope.$storage.user) {
                if ($rootScope.$storage.filter === 'feed') {
                  //$scope.events.trigger("slideChange", {"index" : 0});
                  initialIndex = 0;
                }
                if ($rootScope.$storage.filter === 'trending') {
                  //$scope.events.trigger("slideChange", {"index" : 0});
                  initialIndex = 1;
                }
                if ($rootScope.$storage.filter === 'hot'){
                  //$scope.events.trigger("slideChange", {"index" : 1});
                  initialIndex = 2;
                }
                if ($rootScope.$storage.filter === 'created'){
                  //$scope.events.trigger("slideChange", {"index" : 2});
                  initialIndex = 3;
                }
                if ($rootScope.$storage.filter === 'active'){
                  //$scope.events.trigger("slideChange", {"index" : 3});
                  initialIndex = 4;
                }
                if ($rootScope.$storage.filter === 'promoted'){
                  //$scope.events.trigger("slideChange", {"index" : 4});
                  initialIndex = 5;
                }
                if ($rootScope.$storage.filter === 'trending30'){
                  //$scope.events.trigger("slideChange", {"index" : 5});
                  initialIndex = 6;
                }
                if ($rootScope.$storage.filter === 'votes'){
                  //$scope.events.trigger("slideChange", {"index" : 6});
                  initialIndex = 7;
                }
                if ($rootScope.$storage.filter === 'children'){
                  //$scope.events.trigger("slideChange", {"index" : 7});
                  initialIndex = 8;
                }
                if ($rootScope.$storage.filter === 'cashout'){
                  //$scope.events.trigger("slideChange", {"index" : 8});
                  initialIndex = 9;
                }
              } else {
                if ($rootScope.$storage.filter === 'trending') {
                  //$scope.events.trigger("slideChange", {"index" : 0});
                  initialIndex = 0;
                }
                if ($rootScope.$storage.filter === 'hot'){
                  //$scope.events.trigger("slideChange", {"index" : 1});
                  initialIndex = 1;
                }
                if ($rootScope.$storage.filter === 'created'){
                  //$scope.events.trigger("slideChange", {"index" : 2});
                  initialIndex = 2;
                }
                if ($rootScope.$storage.filter === 'active'){
                  //$scope.events.trigger("slideChange", {"index" : 3});
                  initialIndex = 3;
                }
                if ($rootScope.$storage.filter === 'promoted'){
                  //$scope.events.trigger("slideChange", {"index" : 4});
                  initialIndex = 4;
                }
                if ($rootScope.$storage.filter === 'trending30'){
                  //$scope.events.trigger("slideChange", {"index" : 5});
                  initialIndex = 5;
                }
                if ($rootScope.$storage.filter === 'votes'){
                  //$scope.events.trigger("slideChange", {"index" : 6});
                  initialIndex = 6;
                }
                if ($rootScope.$storage.filter === 'children'){
                  //$scope.events.trigger("slideChange", {"index" : 7});
                  initialIndex = 7;
                }
                if ($rootScope.$storage.filter === 'cashout'){
                  //$scope.events.trigger("slideChange", {"index" : 8});
                  initialIndex = 8;
                }
              }
            }
            $timeout(function() {
              ionicSlideBoxDelegate.slide(initialIndex);
            }, 10);
          }

          function setPosition(index){
            var iconsDiv = angular.element(ta.querySelector(".tsb-icons")), icons = iconsDiv.find("a"), wrap = iconsDiv[0].querySelector(".tsb-ic-wrp"), totalTabs = icons.length;
            var scrollDiv = wrap.querySelector(".scroll");

            var middle = iconsDiv[0].offsetWidth/2;
            var curEl = angular.element(icons[index]);
            var prvEl = angular.element(iconsDiv[0].querySelector(".active"));
            if(curEl && curEl.length){
              var curElWidth = curEl[0].offsetWidth, curElLeft = curEl[0].offsetLeft;

              if(prvEl.attr('icon-off')) {
                prvEl.attr("class", prvEl.attr('icon-off'));
              } else{
                prvEl.removeClass("active");
              }
              if(curEl.attr('icon-on')) {
                curEl.attr("class", curEl.attr('icon-on'));
              }
              curEl.addClass("active");

              var leftStr = (middle  - (curElLeft) -  curElWidth/2 + 5);
              //If tabs are not scrollable
              if(!scrollDiv){
                var leftStr = (middle  - (curElLeft) -  curElWidth/2 + 5) + "px";
                wrap.style.webkitTransform =  "translate3d("+leftStr+",0,0)" ;
              } else {
                //If scrollable tabs
                var wrapWidth = wrap.offsetWidth;
                var currentX = Math.abs(getX(scrollDiv.style.webkitTransform));
                var leftOffset = 100;
                var elementOffset = 54;
                //If tabs are reaching right end or left end
                if(((currentX + wrapWidth) < (curElLeft + curElWidth + elementOffset)) || (currentX > (curElLeft - leftOffset))){
                  if(leftStr > 0){
                    leftStr = 0;
                  }
                  //Use this scrollTo, so when scrolling tab manually will not flicker
                  setTimeout(function() {
                    ionicScrollDelegate.scrollTo(Math.abs(leftStr), 0, true);
                  }, 10);

                } else {
                  if(leftStr > 0){
                    leftStr = 0;
                  }
                  setTimeout(function() {
                    ionicScrollDelegate.scrollTo(Math.abs(leftStr), 0, true);
                  }, 10);
                }
              }
            }
          };
          function getX(matrix) {

            matrix = matrix.replace("translate3d(","");
            matrix = matrix.replace("translate(","");
            return (parseInt(matrix));
          }
          var events = scope.events;
          events.on('slideChange', function(data){
            setPosition(data.index);
          });
          events.on('ngRepeatFinished', function(ngRepeatFinishedEvent) {
            renderScrollableTabs();
          });
          setTimeout(function() {
            renderScrollableTabs();
          }, 10);

        },
        controller : function($scope, $attrs, $element, $rootScope) {
          $scope.events = new SimplePubSub();
          $scope.slideHasChanged = function(index){
            $rootScope.log("SlideChanged "+index);
            $scope.currentSlide = index;
            $scope.events.trigger("slideChange", {"index" : index});
            $timeout(function(){
              if($scope.onSlideMove) {
                $scope.onSlideMove({"index" : eval(index)});
              }

              if ($rootScope.$storage.user) {
                if (index === 0) {
                  $rootScope.$storage.filter = 'feed';
                  $rootScope.$broadcast('filter:change');
                }
                if (index === 1) {
                  $rootScope.$storage.filter = 'trending';
                  $rootScope.$broadcast('filter:change');
                }
                if (index === 2) {
                  $rootScope.$storage.filter = 'hot';
                  $rootScope.$broadcast('filter:change');
                }
                if (index === 3) {
                  $rootScope.$storage.filter = 'created';
                  $rootScope.$broadcast('filter:change');
                }
                if (index === 4) {
                  $rootScope.$storage.filter = 'active';
                  $rootScope.$broadcast('filter:change');
                }
                if (index === 5) {
                  $rootScope.$storage.filter = 'promoted';
                  $rootScope.$broadcast('filter:change');
                }
                if (index === 6) {
                  $rootScope.$storage.filter = 'trending30';
                  $rootScope.$broadcast('filter:change');
                }
                if (index === 7) {
                  $rootScope.$storage.filter = 'votes';
                  $rootScope.$broadcast('filter:change');
                }
                if (index === 8) {
                  $rootScope.$storage.filter = 'children';
                  $rootScope.$broadcast('filter:change');
                }
                if (index === 9) {
                  $rootScope.$storage.filter = 'cashout';
                  $rootScope.$broadcast('filter:change');
                }
              } else {
                if (index === 0) {
                  $rootScope.$storage.filter = 'trending';
                  $rootScope.$broadcast('filter:change');
                }
                if (index === 1) {
                  $rootScope.$storage.filter = 'hot';
                  $rootScope.$broadcast('filter:change');
                }
                if (index === 2) {
                  $rootScope.$storage.filter = 'created';
                  $rootScope.$broadcast('filter:change');
                }
                if (index === 3) {
                  $rootScope.$storage.filter = 'active';
                  $rootScope.$broadcast('filter:change');
                }
                if (index === 4) {
                  $rootScope.$storage.filter = 'promoted';
                  $rootScope.$broadcast('filter:change');
                }
                if (index === 5) {
                  $rootScope.$storage.filter = 'trending30';
                  $rootScope.$broadcast('filter:change');
                }
                if (index === 6) {
                  $rootScope.$storage.filter = 'votes';
                  $rootScope.$broadcast('filter:change');
                }
                if (index === 7) {
                  $rootScope.$storage.filter = 'children';
                  $rootScope.$broadcast('filter:change');
                }
                if (index === 8) {
                  $rootScope.$storage.filter = 'cashout';
                  $rootScope.$broadcast('filter:change');
                }
              }
              if (!$rootScope.$$phase){
                $rootScope.$apply();
              }
            }, 10);
          };

          $scope.$on('ngRepeatFinished', function(ngRepeatFinishedEvent) {
            $rootScope.log('ngRepeatFinished');
            $scope.events.trigger("ngRepeatFinished", {"event" : ngRepeatFinishedEvent});
          });
        }
      };

    }
  ]);

	app.filter('timeago', function($filter, $translate, $rootScope) {

      function TimeAgo(input, p_allowFuture) {
        var substitute = function (stringOrFunction, number, strings) {
                var string = angular.isFunction(stringOrFunction) ? stringOrFunction(number, dateDifference) : stringOrFunction;
                var value = (strings.numbers && strings.numbers[number]) || number;
                return string.replace(/%d/i, value);
            },
            nowTime = (new Date()).getTime(),
            date = (new Date(input)).getTime(),
            //refreshMillis= 6e4, //A minute
            allowFuture = p_allowFuture || false,
            strings= {
                prefixAgo: '',
                prefixFromNow: '',
                suffixAgo: $filter('translate')('AGO'),
                suffixFromNow: $filter('translate')('FROM_NOW'),
                seconds: $filter('translate')('SECS'),
                minute: $filter('translate')('A_MIN'),
                minutes: "%d "+$filter('translate')('MINS'),
                hour: $filter('translate')('AN_HOUR'),
                hours: "%d "+$filter('translate')('HOURS'),
                day: $filter('translate')('A_DAY'),
                days: "%d "+$filter('translate')('DAYS'),
                month: $filter('translate')('A_MONTH'),
                months: "%d "+$filter('translate')('MONTHS'),
                year: $filter('translate')('A_YEAR'),
                years: "%d "+$filter('translate')('YEARS')
            },
            dateDifference = nowTime - date,
            words,
            seconds = Math.abs(dateDifference) / 1000,
            minutes = seconds / 60,
            hours = minutes / 60,
            days = hours / 24,
            years = days / 365,
            separator = strings.wordSeparator === undefined ?  " " : strings.wordSeparator,


            prefix = strings.prefixAgo,
            suffix = strings.suffixAgo;

        if (allowFuture) {
            if (dateDifference < 0) {
                prefix = strings.prefixFromNow;
                suffix = strings.suffixFromNow;
            }
        }

        words = seconds < 45 && substitute(strings.seconds, Math.round(seconds), strings) ||
        seconds < 90 && substitute(strings.minute, 1, strings) ||
        minutes < 45 && substitute(strings.minutes, Math.round(minutes), strings) ||
        minutes < 90 && substitute(strings.hour, 1, strings) ||
        hours < 24 && substitute(strings.hours, Math.round(hours), strings) ||
        hours < 42 && substitute(strings.day, 1, strings) ||
        days < 30 && substitute(strings.days, Math.round(days), strings) ||
        days < 45 && substitute(strings.month, 1, strings) ||
        days < 365 && substitute(strings.months, Math.round(days / 30), strings) ||
        years < 1.5 && substitute(strings.year, 1, strings) ||
        substitute(strings.years, Math.round(years), strings);
        //$rootScope.log(prefix+words+suffix+separator);
        prefix.replace(/ /g, '')
        words.replace(/ /g, '')
        suffix.replace(/ /g, '')
        return (prefix+' '+words+' '+suffix+' '+separator);

      };

      TimeAgo.$stateful = true;
      return TimeAgo;
    });

    app.filter('parseUrl', function($sce) {
	    var urls = /(\b(https?|ftp):\/\/[A-Z0-9+&@#\/%?=~_|!:,.;-]*[-A-Z0-9+&@#\/%=~_|])/gim;
	    var emails = /(\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,6})/gim;
  	 	var imgs = /(https?:\/\/.*\.(?:png|jpg|jpeg|gif))/gim;
  		var youtube = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*/;
  		var youtubeid = /(?:(?:youtube.com\/watch\?v=)|(?:youtu.be\/))([A-Za-z0-9\_\-]+)/i;

	    return function(textu, subpart) {
        var options = {
        	gfm: true,
			    tables: true,
          smartLists: true,
			    breaks: true,
			    pedantic: false,
			    sanitize: false,
			    smartLists: true,
			    smartypants: false
			  };
        if (textu) {
          var textu = marked(textu, options);
          if (subpart) {
            var s = $sce.trustAsHtml(textu).toString();
            var text = s.substring(s.indexOf("<p>"), s.indexOf("</p>"));
            return text;
          } else {
            return $sce.trustAsHtml(textu);
          }
        }
	    };
	});

    app.filter('metadata', function($sce) {
        var urls = /(\b(https?|ftp):\/\/[A-Z0-9+&@#\/%?=~_|!:,.;-]*[-A-Z0-9+&@#\/%=~_|])/gim;
        var users = /(^|\s)(@[a-z][-\.a-z\d]+[a-z\d])/gim;
        var imgs = /(https?:\/\/.*\.(?:png|jpg|jpeg|gif))/gim;
        var youtube = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*/;
        var youtubeid = /(?:(?:youtube.com\/watch\?v=)|(?:youtu.be\/))([A-Za-z0-9\_\-]+)/i;

        return function(textu) {
            var out = {};
            var murls = textu.match(urls);
            var musers = textu.match(users);
            var mimgs = [];
            var mlinks = [];
            if (murls) {
              var _len = murls.length;
                for (var i = 0; i < _len; i++) {
                    var ind = murls[i].match(imgs);
                    if (ind) {
                        mimgs.push(murls[i]);
                    } else {
                        mlinks.push(murls[i]);
                    }
                }
                if (mlinks) {
                    angular.merge(out, {links: mlinks});
                }
                if (mimgs) {
                    angular.merge(out, {image: mimgs});
                }
            }
            if (musers) {
              var _len = musers.length;
                for (var i = 0; i < _len; i++) {
                    musers[i] = musers[i].trim().substring(1);
                }
                if (musers) {
                    angular.merge(out, {users: musers});
                }
            }
            return out;
        };
    });

    app.filter('metadataUsers', function($sce) {
        var users = /(^|\s)(@[a-z][-\.a-z\d]+[a-z\d])/gim;
        return function(textu) {
          if (textu) {
            var out = {};
            var musers = textu.match(users);

            $rootScope.log(angular.toJson(musers));

            return textu;
          }
        };
    });

    app.filter('ldots', function() {
        return function(text) {
          if (text) {
            return text+'...';
          }
        };
    });
    
    app.filter('detransliterate', function(){
      // copypaste from https://gist.github.com/tamr/5fb00a1c6214f5cab4f6
      // (it have been modified: ий > iy and so on)
      // this have been done beecause we cannot use special symbols in url (`` and '')
      // and url seems to be the only source of thruth
      var d = /\s+/g,
      //rus = "щ  ш ч ц ю ю я я  ые ий  ё ё ж ъ э ы а б в г д е з и й к л м н о п р с т у ф х х   ь".split(d),
      //eng = "sch  sh  ch  cz  yu  ju  ya  q  yie  iy  yo  jo  zh  w ye  y a b v g d e z i yi  k l m n o p r s t u f x h j".split(d);

      rus = "щ    ш  ч  ц  й  ё  э  ю  я  х  ж  а б в г д е з и к л м н о п р с т у ф ъ  ы ь".split(d),
      eng = "shch sh ch cz ij yo ye yu ya kh zh a b v g d e z i k l m n o p r s t u f xx y x".split(d);
      return function (str, reverse) {
        if (!reverse && str.substring(0, 4) !== 'ru--') return str
        if (!reverse) str = str.substring(4)

        // TODO rework this
        // (didnt placed this earlier because something is breaking and i am too lazy to figure it out ;( )
        if(!reverse) {
        //    str = str.replace(/j/g, 'ь')
        //    str = str.replace(/w/g, 'ъ')
            str = str.replace(/yie/g, 'ые')
        }
        else {
        //    str = str.replace(/ь/g, 'j')
        //    str = str.replace(/ъ/g, 'w')
            str = str.replace(/ые/g, 'yie')
        }

        var i,
            s = /[^[\]]+(?=])/g, orig = str.match(s),
            t = /<(.|\n)*?>/g, tags = str.match(t);

        if(reverse) {
            for(i = 0; i < rus.length; ++i) {
                str = str.split(rus[i]).join(eng[i]);
                str = str.split(rus[i].toUpperCase()).join(eng[i].toUpperCase());
            }
        }
        else {
            for(i = 0; i < rus.length; ++i) {
                str = str.split(eng[i]).join(rus[i]);
                str = str.split(eng[i].toUpperCase()).join(rus[i].toUpperCase());
            }
        }

        if(orig) {
            var restoreOrig = str.match(s);

            for (i = 0; i < restoreOrig.length; ++i)
                str = str.replace(restoreOrig[i], orig[i]);
        }

        if(tags) {
            var restoreTags = str.match(t);

            for (i = 0; i < restoreTags.length; ++i)
                str = str.replace(restoreTags[i], tags[i]);

            str = str.replace(/\[/g, '').replace(/\]/g, '');
        }

        return str;
      }
    })
     app.filter('getCurrencySymbol', function($filter) {
        return function(text) {
          if (text) {
            //console.log(text.split('-')[1]);
            //var x = text.split('-')[1];
            //var tt = $filter('uppercase')(x);
            var textu = window.getSymbol(text);
            return textu=="?"?text:textu;
          }
        };
    });

  function ansiWordBound(c) {
    return (
      (' ' === c) ||
      ('\n' === c) ||
      ('\r' === c) ||
      ('\t' === c)
    )
  }

  function readingTime(text, options) {
    var words = 0, start = 0, end = text.length - 1, wordBound, i

    options = options || {}

    // use default values if necessary
    options.wordsPerMinute = options.wordsPerMinute || 200

    // use provided function if available
    wordBound = options.wordBound || ansiWordBound

    // fetch bounds
    while (wordBound(text[start])) start++
    while (wordBound(text[end])) end--

    // calculate the number of words
    for (i = start; i <= end;) {
      for (; i <= end && !wordBound(text[i]); i++) ;
      words++
      for (; i <= end && wordBound(text[i]); i++) ;
    }

    // reading time stats
    var minutes = words / options.wordsPerMinute
    var time = minutes * 60 * 1000
    var displayed = Math.ceil(minutes.toFixed(2))

    return {
      text: displayed + ' min read',
      minutes: Math.ceil(minutes.toFixed(2)),
      time: time,
      words: words
    }
  }

  app.filter('readingtime', function($sce, $rootScope) {
      return function(text) {
        if (text) {
          return readingTime(text).minutes;
        }
      };
  })

	app.filter('sp', function($sce, $rootScope) {
	    return function(text) {
	    	if (text) {
	    		return (Number(text.split(" ")[0])/1e6*$rootScope.$storage.steem_per_mvests).toFixed(3);
	    	}
	    };
	})
	app.filter('sd', function($sce, $rootScope) {
	    return function(text, balance, sbd) {
	    	if (text) {
	    		return ((Number(text.split(" ")[0])/1e6*$rootScope.$storage.steem_per_mvests*$rootScope.$storage.base + Number(balance.split(" ")[0])*$rootScope.$storage.base + Number(sbd.split(" ")[0])).toFixed(3))*$rootScope.$storage.currencyRate;
	    	}
	    };
	})
	app.filter('sbd', function($sce, $rootScope) {
	    return function(text) {
	    	if (text) {
	    		return (Number(text.split(" ")[0]).toFixed(3));
	    	}
	    };
	})
	app.filter('st', function($sce, $rootScope) {
	    return function(text) {
	    	if (text) {
	    		return (Number(text.split(" ")[0]).toFixed(3));
	    	}
	    };
	})
	app.filter('reputation', function(){
		return function(value, bool) {
			reputation_level = 1;
			neg = false;

			if (value < 0)
				neg = true;

			if (value != 0) {
				reputation_level = Math.log10(Math.abs(value));
				reputation_level = Math.max(reputation_level - 9, 0);

				if (reputation_level < 0)
					reputation_level = 0;
				if (neg)
					reputation_level *= -1;

				reputation_level = (reputation_level*9) + 25;
			} else {
				return 0;
			}

			return bool?reputation_level:Math.floor(reputation_level);
		}
	})

  app.filter("sumPostTotal", function($rootScope){
    function SumPostTotal(value, rate) {
      //console.log(value, rate);
      if (value && value.pending_payout_value) {
        //value.total_payout_value.split(" ")[0])+parseFloat(value.total_pending_payout_value.split(" ")[0])
        //return (parseFloat(value.pending_payout_value.split(" ")[0])*rate);
        return ((parseFloat(value.total_payout_value.split(" ")[0]))+(parseFloat(value.total_pending_payout_value.split(" ")[0]))*rate);
      }
    }
    //SumPostTotal.$stateful = true;

    return SumPostTotal;
  });

  app.filter("rate", function($rootScope){
    return function(value) {
      if (value) {
        return (parseFloat(value)*$rootScope.$storage.currencyRate);
      }
    }
  });  

  app.filter('hrefToJS', function ($sce, $sanitize) {
      return function (text) {
          var regex = /href="([\S]+)"/g;
          var newString = $sanitize(text).replace(regex, "href onClick=\"window.open('$1', '_blank', 'location=yes');return false;\"");
          return $sce.trustAsHtml(newString);
      }
  });

  app.directive('autofocus', ['$timeout',
    function ($timeout) {
      return {
        restrict: 'A',
        link: function ($scope, $element) {
          $timeout(function () {
            $element[0].focus();
          });
        }
      };
    }]);

	app.directive('qrcode', function($interpolate) {
		return {
		    restrict: 'E',
		    link: function($scope, $element, $attrs) {

		      var options = {
		        text: '',
		        width: 128,
		        height: 128,
		        colorDark: '#000000',
		        colorLight: '#ffffff',
		        correctLevel: 'H'
		      };

		      Object.keys(options).forEach(function(key) {
		        options[key] = $interpolate($attrs[key] || '')($scope) || options[key];
		      });

		      options.correctLevel = QRCode.CorrectLevel[options.correctLevel];

		      new QRCode($element[0], options);

		    }
		}
	});


    app.directive('ionComment', ionComment)
    app.directive('ionThread', ionThread);

    function ionComment() {
        return {
            restrict: 'E',
            scope: {
                comment: '='
            },
            template: '<ion-item ng-if="comment.author" class="ion-comment item">\
                        <div class="ion-comment--author"><img class="round-avatar" src="img/user_profile.png" ng-src="{{$root.$storage.paccounts[comment.author].json_metadata.user_image||$root.$storage.paccounts[comment.author].json_metadata.profile.profile_image}}" onerror="this.src=\'img/user_profile.png\'" onabort="this.src=\'img/user_profile.png\'" /><b><a href="#/app/profile/{{comment.author}}">{{comment.author}}</a></b>&nbsp;<div class="reputation">{{comment.author_reputation|reputation|number:0}}</div>&middot;{{comment.created|timeago}}</div>\
                        <div class="ion-comment--score"><span on-tap="openTooltip($event,comment)"><b>{{$root.$storage.currency|getCurrencySymbol}}</b> {{comment.total_pending_payout_value.split(" ")[0]|rate|number}} </span> | <span on-tap="downvotePost(comment)"><span class="fa fa-flag" ng-class="{\'assertive\':comment.downvoted}"></span></span></div>\
                        <div class="ion-comment--text bodytext selectable" ng-bind-html="comment.body | parseUrl "></div>\
                        <div class="ion-comment--replies"><span on-tap="upvotePost(comment)" on-hold="openSliderr($event, comment)"><span class="fa fa-chevron-circle-up" ng-class="{\'positive\':comment.upvoted}"></span> {{"UPVOTE"|translate}}</span> | <span on-tap="$root.openInfo(comment)">{{comment.net_votes || 0}} {{"VOTES"|translate}}</span> | <span on-tap="toggleComment(comment)">{{comment.children || 0}} {{"REPLIES"|translate}}</span> | <span on-tap="replyToComment(comment)"><span class="fa fa-reply"></span> {{"REPLY"|translate}}</span> <span ng-if="comment.author == $root.$storage.user.username && compateDate(comment)" on-tap="editComment(comment)"> | <span class="ion-ios-compose-outline"></span> {{\'EDIT\'|translate}}</span> <span ng-if="comment.author == $root.$storage.user.username" on-tap="deleteComment(comment)"> | <span class="ion-ios-trash-outline"></span> {{\'REMOVE\'|translate}}</span></div>\
                    </ion-item>',
            controller: function($scope, $rootScope, $state, $ionicModal, $ionicPopover, $ionicPopup, $ionicActionSheet, $cordovaCamera, $filter) {
                  $ionicPopover.fromTemplateUrl('popoverTr.html', {
                      scope: $scope
                   }).then(function(popover) {
                      $scope.tooltip = popover;
                   });
                  
                  $ionicPopover.fromTemplateUrl('popoverSliderr.html', {
                      scope: $scope
                  }).then(function(popover) {
                      $scope.tooltipSliderr = popover;
                  });

                  $scope.openSliderr = function($event, d) {
                    $scope.votingPost = d;
                    $scope.rangeValue = $rootScope.$storage.voteWeight/100;
                    $scope.tooltipSliderr.show($event);
                  };
                  $scope.votePostS = function() {
                    $scope.tooltipSliderr.hide();
                    $scope.upvotePost($scope.votingPost);
                  }
                  $scope.drag = function(v) {
                    //console.log(v);
                    $rootScope.$storage.voteWeight = v*100;
                  };

                  $scope.closeSliderr = function() {
                    $scope.tooltipSliderr.hide();
                  };

                  $scope.openTooltip = function($event, d) {
                    var tppv = Number(d.total_pending_payout_value.split(' ')[0])*$rootScope.$storage.currencyRate;
                    var p = Number(d.promoted.split(' ')[0])*$rootScope.$storage.currencyRate;
                    var tpv = Number(d.total_payout_value.split(' ')[0])*$rootScope.$storage.currencyRate;
                    var ar = Number(d.total_payout_value.split(' ')[0]-d.curator_payout_value.split(' ')[0])*$rootScope.$storage.currencyRate;
                    var crp = Number(d.curator_payout_value.split(' ')[0])*$rootScope.$storage.currencyRate;
                    var texth = "<div class='row'><div class='col'><b>"+$filter('translate')('PAYOUT_CYCLE')+"</b></div><div class='col'>"+d.mode.replace('_',' ')+"</div></div><div class='row'><div class='col'><b>"+$filter('translate')('POTENTIAL_PAYOUT')+"</b></div><div class='col'>"+$filter('getCurrencySymbol')($rootScope.$storage.currency)+$filter('number')(tppv, 3)+"</div></div><div class='row'><div class='col'><b>"+$filter('translate')('PAST_PAYOUT')+"</b></div><div class='col'>"+$filter('getCurrencySymbol')($rootScope.$storage.currency)+$filter('number')(tpv,3)+"</div></div><div class='row'><div class='col'><b>"+$filter('translate')('PAYOUT')+"</b></div><div class='col'>"+$filter('timeago')(d.cashout_time, true)+"</div></div>";
                    $scope.tooltipText = texth;
                    $scope.tooltip.show($event);
                  };

                  $scope.closeTooltip = function() {
                      $scope.tooltip.hide();
                  };

                  //Cleanup the popover when we're done with it!
                  $scope.$on('$destroy', function() {
                      $scope.tooltip.remove();
                  });


                  $scope.compateDate = function(comment) {
                    if (comment.last_payout == "1970-01-01T00:00:00") {
                        return true;
                    } else {
                      if (comment.mode == "first_payout"){
                        return true;
                      } else {
                        return false;
                      }
                    }
                  };
                  $scope.toggleComment = function(comment) {
                      $rootScope.log('toggleComment');

                      if (comment.showChildren) {
                          comment.showChildren = false;
                      } else {
                          comment.showChildren = true;
                      }
                    //$rootScope.$broadcast('hide:loading');
                  };
                  $scope.upvotePost = function(post) {
                    $rootScope.votePost(post, 'upvote', 'update:content');
                  };

                  $scope.downvotePost = function(post) {
                    var confirmPopup = $ionicPopup.confirm({
                      title: $filter('translate')('ARE_YOU_SURE'),
                      template: $filter('translate')('DOWNVOTE_FLAG')
                    });
                    confirmPopup.then(function(res) {
                      if(res) {
                        $rootScope.log('You are sure');
                        $rootScope.votePost(post, 'downvote', 'update:content');
                      } else {
                        $rootScope.log('You are not sure');
                      }
                    });
                  };

                  $scope.unvotePost = function(post) {
                    $rootScope.votePost(post, 'unvote', 'update:content');
                  };
                  $scope.data={};
                  $ionicModal.fromTemplateUrl('templates/reply.html', {
                    scope: $scope  }).then(function(modal) {
                    $scope.cmodal = modal;
                  });

                  $scope.openModal = function(item) {
                    $scope.cmodal.show();
                  };

                  $scope.closeModal = function() {
                    $scope.replying = false;
                    $scope.cmodal.hide();
                  };

                  $scope.isreplying = function(cho, xx) {
                    $scope.replying = xx;
                    $scope.post = cho;
                    if (xx) {
                        $scope.editc = false;
                        $scope.edit = false;
                        $scope.data.comment = '';
                        $scope.openModal();
                    } else {
                        $scope.editc = true;
                        $scope.edit = true;
                        $scope.data.comment = $scope.post.body;
                        $scope.patchbody = $scope.post.body;
                        $scope.openModal();
                    }
                  };

                  $scope.showImg = function() {
                   var hideSheet = $ionicActionSheet.show({
                     buttons: [
                       { text: $filter('translate')('CAPTURE_PICTURE') },
                       { text: $filter('translate')('SELECT_PICTURE') },
                       { text: $filter('translate')('SET_CUSTOM_URL') },
                     ],
                     titleText: $filter('translate')('INSERT_PICTURE'),
                     cancelText: $filter('translate')('CANCEL'),
                     cancel: function() {
                        // add cancel code..
                      },
                     buttonClicked: function(index) {
                        $scope.insertImageC(index);
                        return true;
                     }
                   });
                  };

                  $scope.insertImageC = function(type) {
                    var options = {};
                    if (type == 0 || type == 1) {
                      options = {
                        quality: 50,
                        destinationType: Camera.DestinationType.FILE_URI,
                        sourceType: (type===0)?Camera.PictureSourceType.CAMERA:Camera.PictureSourceType.PHOTOLIBRARY,
                        allowEdit: (type===0)?true:false,
                        encodingType: Camera.EncodingType.JPEG,
                        popoverOptions: CameraPopoverOptions,
                        saveToPhotoAlbum: false
                        //correctOrientation:true
                      };
                      $cordovaCamera.getPicture(options).then(function(imageData) {
                        setTimeout(function() {
                          ImageUploadService.uploadImage(imageData).then(function(result) {
                            //var url = result.secure_url || '';
                            var url = result.imageUrl || '';
                            var final = " ![image](" + url + ")";
                            $rootScope.log(final);
                            if ($scope.data.comment) {
                              $scope.data.comment += final;
                            } else {
                              $scope.data.comment = final;
                            }
                            if (!ionic.Platform.isAndroid() || !ionic.Platform.isWindowsPhone()) {
                              $cordovaCamera.cleanup();
                            }
                          },
                          function(err) {
                            $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('UPLOAD_ERROR'));
                            if (!ionic.Platform.isAndroid() || !ionic.Platform.isWindowsPhone()) {
                              $cordovaCamera.cleanup();
                            }
                          });
                        }, 10);
                      }, function(err) {
                        $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('CAMERA_CANCELLED'));
                      });
                    } else {
                      $ionicPopup.prompt({
                        title: $filter('translate')('SET_URL'),
                        template: $filter('translate')('DIRECT_LINK_PICTURE'),
                        inputType: 'text',
                        inputPlaceholder: 'http://example.com/image.jpg'
                      }).then(function(res) {
                        $rootScope.log('Your url is' + res);
                        if (res) {
                          var url = res.trim();
                          var final = " ![image](" + url + ")";
                          $rootScope.log(final);
                          if ($scope.data.comment) {
                            $scope.data.comment += final;
                          } else {
                            $scope.data.comment = final;
                          }
                        }
                      });
                    }
                  };

                  var dmp = new window.diff_match_patch();
                  function createPatch(text1, text2) {
                      if (!text1 && text1 === '') return undefined;
                      var patches = dmp.patch_make(text1, text2);
                      var patch = dmp.patch_toText(patches);
                      return patch;
                  }
                  $scope.reply = function (xx) {
                    if (!$scope.editc) {
                        $rootScope.$broadcast('show:loading');
                        if ($rootScope.$storage.user) {
                          $scope.mylogin = new window.ejs.Login();
                          $scope.mylogin.setRoles(["posting"]);
                          var loginSuccess = $scope.mylogin.checkKeys({
                              accountName: $rootScope.$storage.user.username,
                              password: $rootScope.$storage.user.password || null,
                              auths: {
                                  posting: $rootScope.$storage.user.posting.key_auths
                              },
                              privateKey: $rootScope.$storage.user.privatePostingKey || null
                            }
                          );
                          if (loginSuccess) {
                            var tr = new window.ejs.TransactionBuilder();
                            var t = new Date();
                            var timeformat = t.getFullYear().toString()+(t.getMonth()+1).toString()+t.getDate().toString()+"t"+t.getHours().toString()+t.getMinutes().toString()+t.getSeconds().toString()+t.getMilliseconds().toString()+"z";

                            var json = {tags: angular.fromJson($scope.post.json_metadata).tags[0] || "", app: 'esteem/'+$rootScope.$storage.appversion, format: 'markdown+html' };
                            tr.add_type_operation("comment", {
                              parent_author: $scope.post.author,
                              parent_permlink: $scope.post.permlink,
                              author: $rootScope.$storage.user.username,
                              permlink: "re-"+$scope.post.author+"-"+$scope.post.permlink+"-"+timeformat,
                              title: "",
                              body: $scope.data.comment,
                              json_metadata: angular.toJson(json)
                            });
                            //$rootScope.log(my_pubkeys);
                            localStorage.error = 0;
                            tr.process_transaction($scope.mylogin, null, true);

                            $scope.replying = false;
                            setTimeout(function() {
                              if (localStorage.error == 1) {
                                $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('BROADCAST_ERROR')+" "+localStorage.errormessage)
                              } else {
                                $scope.closeModal();
                                $scope.data.comment = "";
                                $rootScope.showMessage($filter('translate')('SUCCESS'), $filter('translate')('COMMENT_SUBMITTED'));
                                $rootScope.$broadcast("update:content");
                              }
                              $rootScope.$broadcast('hide:loading');
                            }, 3000);
                          } else {
                            $rootScope.$broadcast('hide:loading');
                            $rootScope.showMessage($filter('translate')('ERROR'), $filter('translate')('LOGIN_FAIL'));
                          }
                        } else {
                          $rootScope.$broadcast('hide:loading');
                          $rootScope.showAlert($filter('translate')('WARNING'), $filter('translate')('LOGIN_TO_X'));
                        }
                    } else {

                        var patch = createPatch($scope.patchbody, $scope.data.comment)
                        // Putting body into buffer will expand Unicode characters into their true length
                        if (patch && patch.length < new Buffer($scope.data.comment, 'utf-8').length) {
                          $scope.data.comment2 = patch;
                          //$rootScope.log(patch);
                        }

                        $rootScope.$broadcast('show:loading');
                        if ($rootScope.$storage.user) {
                          $scope.mylogin = new window.ejs.Login();
                          $scope.mylogin.setRoles(["posting"]);
                          var loginSuccess = $scope.mylogin.checkKeys({
                              accountName: $rootScope.$storage.user.username,
                              password: $rootScope.$storage.user.password || null,
                              auths: {
                                  posting: $rootScope.$storage.user.posting.key_auths
                              },
                              privateKey: $rootScope.$storage.user.privatePostingKey || null
                            }
                          );
                          if (loginSuccess) {
                            var tr = new window.ejs.TransactionBuilder();

                            var json = {tags: angular.fromJson($scope.post.json_metadata).tags[0] || "", app: 'esteem/'+$rootScope.$storage.appversion, format: 'markdown+html' };
                            tr.add_type_operation("comment", {
                              parent_author: $scope.post.parent_author,
                              parent_permlink: $scope.post.parent_permlink,
                              author: $scope.post.author,
                              permlink: $scope.post.permlink,
                              title: "",
                              body: $scope.data.comment2 || $scope.data.comment,
                              json_metadata: $scope.post.json_metadata
                            });
                            //$rootScope.log(my_pubkeys);
                            localStorage.error = 0;
                            tr.process_transaction($scope.mylogin, null, true);

                            $scope.closeModal();
                            $scope.replying = false;
                            setTimeout(function() {
                              if (localStorage.error == 1) {
                                $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('BROADCAST_ERROR')+" "+localStorage.errormessage)
                              } else {
                                $scope.data.comment = "";
                                $rootScope.showMessage($filter('translate')('SUCCESS'), $filter('translate')('COMMENT_SUBMITTED'));
                                $rootScope.$broadcast("update:content");
                              }
                              $rootScope.$broadcast('hide:loading');
                            }, 3000);
                          } else {
                            $rootScope.$broadcast('hide:loading');
                            $rootScope.showMessage($filter('translate')('ERROR'), $filter('translate')('LOGIN_FAIL'));
                          }
                        } else {
                          $rootScope.$broadcast('hide:loading');
                          $rootScope.showAlert($filter('translate')('WARNING'), $filter('translate')('LOGIN_TO_X'));
                        }
                    }
                  $rootScope.$broadcast('hide:loading');
                }
                $scope.replyToComment = function(comment) {
                    $rootScope.log('reply to comment')
                    //$rootScope.$storage.sitem = comment;
                    $scope.isreplying(comment, true);
                }
                $scope.editComment = function(comment) {
                    $rootScope.log('edit to comment')
                    //$rootScope.$storage.sitem = comment;
                    $scope.isreplying(comment, false);
                }
                $scope.deleteComment = function(comment) {
                    $rootScope.log('delete to comment '+ angular.toJson(comment));
                    var confirmPopup = $ionicPopup.confirm({
                        title: $filter('translate')('ARE_YOU_SURE'),
                        template: $filter('translate')('DELETE_COMMENT')
                    });
                    confirmPopup.then(function(res) {
                        if(res) {
                            $rootScope.log('You are sure');
                            $rootScope.$broadcast('show:loading');
                            if ($rootScope.$storage.user) {
                              $scope.mylogin = new window.ejs.Login();
                              $scope.mylogin.setRoles(["posting"]);
                              var loginSuccess = $scope.mylogin.checkKeys({
                                  accountName: $rootScope.$storage.user.username,
                                  password: $rootScope.$storage.user.password || null,
                                  auths: {
                                      posting: $rootScope.$storage.user.posting.key_auths
                                  },
                                  privateKey: $rootScope.$storage.user.privatePostingKey || null
                                }
                              );
                              if (loginSuccess) {
                                var tr = new window.ejs.TransactionBuilder();

                                tr.add_type_operation("delete_comment", {
                                  author: comment.author,
                                  permlink: comment.permlink
                                });
                                //$rootScope.log(my_pubkeys);
                                localStorage.error = 0;
                                tr.process_transaction($scope.mylogin, null, true);

                                setTimeout(function() {
                                  if (localStorage.error == 1) {
                                    $rootScope.showAlert($filter('translate')('ERROR'), $filter('translate')('BROADCAST_ERROR')+" "+localStorage.errormessage)
                                  } else {
                                    $rootScope.showMessage($filter('translate')('SUCCESS'), $filter('translate')('DELETED_COMMENT'));
                                    $rootScope.$broadcast("update:content");
                                  }
                                  $rootScope.$broadcast('hide:loading');
                                }, 3000);
                              } else {
                                $rootScope.$broadcast('hide:loading');
                              }
                            } else {
                              $rootScope.$broadcast('hide:loading');
                              $rootScope.showAlert($filter('translate')('WARNING'), $filter('translate')('LOGIN_TO_X'));
                            }
                        } else {
                          $rootScope.log('You are not sure');
                        }
                    });
                }
            }
        }
    }

    function ionThread() {
        return {
            restrict: 'E',
            scope: {
                comments: '='
            },
            //Replace ng-if="!comment.showChildren" with ng-if="comment.showChildren" to hide all child comments by default
            //Replace comment.data.replies.data.children according to the API you are using | orderBy:\'-net_votes\'
            template: '<script type="text/ng-template" id="node.html">\
                            <ion-comment comment="comment">\
                            </ion-comment>\
                            <div class="reddit-post--comment--container">\
                                 <ul ng-if="!comment.showChildren" class="animate-if ion-comment--children">\
                                    <li ng-repeat="comment in comment.comments | orderBy:\'-net_votes\' track by $index ">\
                                        <ng-include src="\'node.html\'"/>\
                                    </li>\
                                </ul>\
                            </div>\
                        </script>\
                        <ion-list ng-if="comments && comments.length > 0">\
                          <ul>\
                            <li ng-repeat="comment in comments | orderBy:\'-net_votes\' track by $index">\
                                <ng-include src="\'node.html\'"/>\
                            </li>\
                          </ul>\
                        </ion-list>',
            controller: function($scope, $rootScope) {
                $scope.toggleComment = function(comment) {
                  $rootScope.log('toggleComment');
                  if (comment.showChildren) {
                      comment.showChildren = false;
                  } else {
                      comment.showChildren = true;
                  }
                };
            }
        }
    }

    function ius($q, $ionicLoading, $cordovaFileTransfer, $ionicPlatform, $filter, $rootScope) {
        var service = {};
        service.uploadImage = uploadImage;
        return service;
        function uploadImage(imageURI) {
          var deferred = $q.defer();
          var fileSize;
          var percentage;
          /*if (ionic.Platform.isAndroid()) {
            if (imageURI.indexOf('file://')===-1) {
              imageURI="file://"+imageURI;
            }
          }*/
          // Find out how big the original file is
          window.resolveLocalFileSystemURL(imageURI, function(fileEntry) {
            fileEntry.file(function(fileObj) {
              fileSize = fileObj.size;
              // Display a loading indicator reporting the start of the upload
              $ionicLoading.show({template : $filter('translate')('UPLOADING_PICTURE') + 0 + '%'});
              // Trigger the upload
              uploadFile();
            });
          });
          function uploadFile() {
            // Add the Cloudinary "upload preset" name to the headers
            // "https://api.cloudinary.com/v1_1/esteem/image/upload"
            var uploadOptions = {
              params : { 'username': $rootScope.$storage.user.username}
            };
            $ionicPlatform.ready(function() {
                $cordovaFileTransfer.upload("http://192.158.29.1:8080/api/upload", imageURI, uploadOptions).then(function(result) {
                    // Let the user know the upload is completed
                    $ionicLoading.show({template : $filter('translate')('UPLOAD_COMPLETED'), duration: 1000});
                    // Result has a "response" property that is escaped
                    // FYI: The result will also have URLs for any new images generated with
                    // eager transformations
                    var response = JSON.parse(decodeURIComponent(result.response));
                    deferred.resolve(response);
                  }, function(err) {
                    // Uh oh!
                    $ionicLoading.show({template : $filter('translate')('UPLOAD_FAILED'), duration: 2000});
                    deferred.reject(err);
                  }, function (progress) {
                    // The upload plugin gives you information about how much data has been transferred
                    // on some interval.  Use this with the original file size to show a progress indicator.
                    percentage = Math.floor((progress.loaded / fileSize) * 100);
                    $ionicLoading.show({template : $filter('translate')('UPLOADING_PICTURE') + percentage + '%'});
                  });
            });
          }
          return deferred.promise;
        }
    }

    app.factory('ImageUploadService', ius);

    app.constant('defaultSettings', {
        alphabetcolors: ["#5A8770", "#B2B7BB", "#6FA9AB", "#F5AF29", "#0088B9", "#F18636", "#D93A37", "#A6B12E", "#5C9BBC", "#F5888D", "#9A89B5", "#407887", "#9A89B5", "#5A8770", "#D33F33", "#A2B01F", "#F0B126", "#0087BF", "#F18636", "#0087BF", "#B2B7BB", "#72ACAE", "#9C8AB4", "#5A8770", "#EEB424", "#407887"],
        textColor: '#ffffff',
        defaultBorder: 'border:5px solid white',
        triangleup: 'width: 0;height: 0;border-left: 50px solid transparent;border-right: 50px solid transparent;border-bottom: 100px solid;',
        fontsize: 30, // unit in pixels
        height: 50, // unit in pixels
        width: 50, // unit in pixels
        fontWeight: 400, //
        charCount: 1,
        fontFamily: 'HelveticaNeue-Light,Helvetica Neue Light,Helvetica Neue,Helvetica, Arial,Lucida Grande, sans-serif',
        base: 'data:image/svg+xml;base64,',
        radius: 'border-radius:50%;',
        custombgcolor: '',
        dynamic: 'false',
        rotatedeg: '0'
    });

    /**
     * directive to create the avatar
     * @param {type} param1
     * @param {type} param2
     */
    app.directive('ngLetterAvatar', ['defaultSettings', function (defaultSettings) {
        return {
            restrict: 'AE',
            replace: true,
            scope: {
                alphabetcolors: '=alphabetcolors',
                data: '@'
            },
            link: function (scope, element, attrs) {

                /**
                 * Populate the attribute values to params object
                 * @type type
                 */
                var params = {
                    charCount: attrs.charcount || defaultSettings.charCount,
                    data: attrs.data,
                    textColor: defaultSettings.textColor,
                    height: attrs.height || defaultSettings.height,
                    width: attrs.width || defaultSettings.width,
                    fontsize: attrs.fontsize || defaultSettings.fontsize,
                    fontWeight: attrs.fontweight || defaultSettings.fontWeight,
                    fontFamily: attrs.fontfamily || defaultSettings.fontFamily,
                    avatarBorderStyle: attrs.avatarcustomborder,
                    avatardefaultBorder: attrs.avatarborder,
                    defaultBorder: defaultSettings.defaultBorder,
                    shape: attrs.shape,
                    alphabetcolors: scope.alphabetcolors || defaultSettings.alphabetcolors,
                    avatarCustomBGColor: attrs.avatarcustombgcolor || defaultSettings.custombgcolor,
                    dynamic: attrs.dynamic || defaultSettings.dynamic,
                    rotatedeg: attrs.rotatedeg || defaultSettings.rotatedeg
                };

                /**
                 * to generate the avatar dynamically on data change, enable the below function to watch the event
                 */
                if (params.dynamic === 'true') {
                    scope.$watch('data', function () {
                        _generateLetterAvatar();
                    });
                } else {
                    _generateLetterAvatar();
                }

                function _generateLetterAvatar() {
                    var c = '';
                    if (params.charCount == 2) {
                        var _data = getFirstAndLastName(scope.data.toUpperCase());
                        if (_data) {
                            c = _data;
                        } else {
                            c = scope.data.substr(0, params.charCount).toUpperCase();
                        }
                    } else {
                        c = scope.data.substr(0, params.charCount).toUpperCase();
                    }
                    var cobj = getCharacterObject(c, params.textColor, params.fontFamily, params.fontWeight, params.fontsize);
                    var colorIndex = '';
                    var color = '';

                    /**
                     * Populate the colors according to attributes
                     */
                    if (c.charCodeAt(0) < 65) {
                        color = getRandomColors();
                    } else {
                        colorIndex = Math.floor((c.charCodeAt(0) - 65) % params.alphabetcolors.length);
                        color = params.alphabetcolors[colorIndex];
                    }

                    if (params.avatarCustomBGColor) {
                        color = params.avatarCustomBGColor;
                    }

                    var svg = getImgTag(params.width, params.height, color);
                    svg.append(cobj);
                    var lvcomponent = angular.element('<div>').append(svg.clone()).html();
                    var svgHtml = window.btoa(unescape(encodeURIComponent(lvcomponent)));
                    var component;
                    var base = defaultSettings.base;
                    var _style = '';
                    if (params.avatarBorderStyle) {
                        _style = params.avatarBorderStyle;
                    } else if (params.avatardefaultBorder) {
                        _style = params.defaultBorder;
                    }

                    if (params.rotatedeg != '0') {
                        _style = '-ms-transform: rotate(' + params.rotatedeg + 'deg); -webkit-transform: rotate(' + params.rotatedeg + 'deg); transform: rotate(' + params.rotatedeg + 'deg)';
                    }

                    if (params.shape) {
                        if (params.shape === 'round') {
                            var round_style = defaultSettings.radius + _style;
                            if (scope.data.indexOf('http') > -1 || scope.data.indexOf('data:image') > -1) {
                                var img_size = 'width:' + params.width + 'px;height:' + params.height + 'px;';
                                component = "<img src=" + scope.data + " style='" + img_size + round_style + "'  />";
                            } else {
                                component = "<img src=" + base + svgHtml + " style='" + round_style + "' title='" + scope.data + "' />";
                            }
                        }
                    } else {
                        if (scope.data.indexOf('http') > -1 || scope.data.indexOf('data:image') > -1) {
                            var img_size = 'width:' + params.width + 'px;height:' + params.height + 'px;';
                            component = "<img src=" + scope.data + " style='" + img_size + _style + "'  />";
                        } else {
                            component = "<img src=" + base + svgHtml + " style='" + _style + "' title='" + scope.data + "' />";
                        }
                    }

                    if (params.dynamic === 'true') {
                        element.empty();
                        element.append(component);
                    } else {
                        element.replaceWith(component);
                    }
                }
            }
        };
    }]);
    /**
     * Get the random colors
     * @returns {String}
     */
    function getRandomColors() {
        var letters = '0123456789ABCDEF'.split('');
        var _color = '#';
        for (var i = 0; i < 6; i++) {
            _color += letters[Math.floor(Math.random() * 16)];
        }
        return _color;
    }
    /**
     * get the first name and last name first letters and combined and form the letter avatar
     * @param {type} data
     * @returns {unresolved}
     */
    function getFirstAndLastName(data) {
        var names = data.split(" ");
        if (names && names.length >= 2) {
            var firstName = names[0];
            var lastName = names[1];
            if (firstName && lastName) {
                var text = firstName.substr(0, 1) + lastName.substr(0, 1);
                return text;
            } else {
                return data.substr(0, 2);
            }
        }
    }

    /**
     * Populate the svg tag which will used for the avatar generation
     * @param {type} width
     * @param {type} height
     * @param {type} color
     * @returns {unresolved}
     */
    function getImgTag(width, height, color) {

        var svgTag = angular.element('<svg></svg>')
                .attr({
                    'xmlns': 'http://www.w3.org/2000/svg',
                    'pointer-events': 'none',
                    'width': width,
                    'height': height
                })
                .css({
                    'background-color': color,
                    'width': width + 'px',
                    'height': height + 'px'
                });

        return svgTag;
    }

    /**
     *  Generate the Letter tag by using the svg text element
     * @param {type} character
     * @param {type} textColor
     * @param {type} fontFamily
     * @param {type} fontWeight
     * @param {type} fontsize
     * @returns {unresolved}
     */
    function getCharacterObject(character, textColor, fontFamily, fontWeight, fontsize) {
        var textTag = angular.element('<text text-anchor="middle"></text>')
                .attr({
                    'y': '50%',
                    'x': '50%',
                    'dy': '0.35em',
                    //'stroke': '#000000',
                    'pointer-events': 'auto',
                    'fill': textColor,
                    'font-family': fontFamily
                })
                .html(character)
                .css({
                    'font-weight': fontWeight,
                    'font-size': fontsize + 'px',
                });

        return textTag;
    }

}

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/posts/services.js","/posts")
},{"buffer":11,"pBGvAp":74}]},{},[100])
//# sourceMappingURL=data:application/json;base64,
